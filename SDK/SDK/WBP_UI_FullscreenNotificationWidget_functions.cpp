#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_FullscreenNotificationWidget

#include "Basic.hpp"

#include "WBP_UI_FullscreenNotificationWidget_classes.hpp"
#include "WBP_UI_FullscreenNotificationWidget_parameters.hpp"


namespace SDK
{

// Function WBP_UI_FullscreenNotificationWidget.WBP_UI_FullscreenNotificationWidget_C.ExecuteUbergraph_WBP_UI_FullscreenNotificationWidget
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_UI_FullscreenNotificationWidget_C::ExecuteUbergraph_WBP_UI_FullscreenNotificationWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_FullscreenNotificationWidget_C", "ExecuteUbergraph_WBP_UI_FullscreenNotificationWidget");

	Params::WBP_UI_FullscreenNotificationWidget_C_ExecuteUbergraph_WBP_UI_FullscreenNotificationWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_FullscreenNotificationWidget.WBP_UI_FullscreenNotificationWidget_C.OnDisplayedNewActiveNotification
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSBZUIFullscreenNotificationData&NewNotificationData                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_UI_FullscreenNotificationWidget_C::OnDisplayedNewActiveNotification(const struct FSBZUIFullscreenNotificationData& NewNotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_FullscreenNotificationWidget_C", "OnDisplayedNewActiveNotification");

	Params::WBP_UI_FullscreenNotificationWidget_C_OnDisplayedNewActiveNotification Parms{};

	Parms.NewNotificationData = std::move(NewNotificationData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_FullscreenNotificationWidget.WBP_UI_FullscreenNotificationWidget_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_UI_FullscreenNotificationWidget_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_FullscreenNotificationWidget_C", "PreConstruct");

	Params::WBP_UI_FullscreenNotificationWidget_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_FullscreenNotificationWidget.WBP_UI_FullscreenNotificationWidget_C.SetDisplayQueue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_UI_FullscreenNotificationWidget_C::SetDisplayQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_FullscreenNotificationWidget_C", "SetDisplayQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_UI_FullscreenNotificationWidget.WBP_UI_FullscreenNotificationWidget_C.SetNotificationTypeVisuals
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESBZNotificationType                    InNotificationData                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_UI_FullscreenNotificationWidget_C::SetNotificationTypeVisuals(ESBZNotificationType InNotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_FullscreenNotificationWidget_C", "SetNotificationTypeVisuals");

	Params::WBP_UI_FullscreenNotificationWidget_C_SetNotificationTypeVisuals Parms{};

	Parms.InNotificationData = InNotificationData;

	UObject::ProcessEvent(Func, &Parms);
}

}

