#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ServerBrowser_HeistMapWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C
// 0x00B8 (0x0400 - 0x0348)
class UWBP_ServerBrowser_HeistMapWidget_C final : public USBZServerBrowserHeistMapWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hover;                                             // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OnHighlighted;                                     // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         DifficultySkulls;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BackgroundGlow;                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PlayerCount_Multiple;                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Difficulty;                                // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Skull_Hard;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Skull_Normal;                                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Skull_Overkill;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Skull_VeryHard;                                    // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_HeistName;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_PlaystyleName;                                // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_JoinableDetails;                                // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_HostPin;                                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_JoinPin;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCount;                                       // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Hovered;                                        // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZHeistPlaystyle                            DebugPlaystyle;                                    // 0x03CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZDifficulty                                DebugDifficulty;                                   // 0x03CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CF[0x1];                                      // 0x03CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HybridColor;                                       // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           StealthColor;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LoudColor;                                         // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnHeistDataInitialized();
	void ButtonHoveredChanged(bool bInIsHovered);
	void SetSelected(bool bInIsSelected);
	void OnInitialized();
	void SetActive(bool bIsActive);
	void UpdatePinVisual(int32 InPlayerCount, bool InHovered, ESBZHeistPlaystyle InHeistPlaystyle);
	void ShowDifficultyVisual(ESBZDifficulty InDifficulty);
	void SetupPinMaterial();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ServerBrowser_HeistMapWidget_C">();
	}
	static class UWBP_ServerBrowser_HeistMapWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ServerBrowser_HeistMapWidget_C>();
	}
};
static_assert(alignof(UWBP_ServerBrowser_HeistMapWidget_C) == 0x000008, "Wrong alignment on UWBP_ServerBrowser_HeistMapWidget_C");
static_assert(sizeof(UWBP_ServerBrowser_HeistMapWidget_C) == 0x000400, "Wrong size on UWBP_ServerBrowser_HeistMapWidget_C");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, UberGraphFrame) == 0x000348, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Hover) == 0x000350, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Hover' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, OnHighlighted) == 0x000358, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::OnHighlighted' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, DifficultySkulls) == 0x000360, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::DifficultySkulls' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Image_BackgroundGlow) == 0x000368, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Image_BackgroundGlow' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Image_PlayerCount_Multiple) == 0x000370, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Image_PlayerCount_Multiple' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Overlay_Difficulty) == 0x000378, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Overlay_Difficulty' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Skull_Hard) == 0x000380, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Skull_Hard' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Skull_Normal) == 0x000388, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Skull_Normal' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Skull_Overkill) == 0x000390, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Skull_Overkill' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Skull_VeryHard) == 0x000398, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Skull_VeryHard' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Text_HeistName) == 0x0003A0, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Text_HeistName' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Text_PlaystyleName) == 0x0003A8, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Text_PlaystyleName' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, VB_JoinableDetails) == 0x0003B0, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::VB_JoinableDetails' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, MI_HostPin) == 0x0003B8, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::MI_HostPin' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, MI_JoinPin) == 0x0003C0, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::MI_JoinPin' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, PlayerCount) == 0x0003C8, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::PlayerCount' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, Is_Hovered) == 0x0003CC, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::Is_Hovered' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, DebugPlaystyle) == 0x0003CD, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::DebugPlaystyle' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, DebugDifficulty) == 0x0003CE, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::DebugDifficulty' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, HybridColor) == 0x0003D0, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::HybridColor' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, StealthColor) == 0x0003E0, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::StealthColor' has a wrong offset!");
static_assert(offsetof(UWBP_ServerBrowser_HeistMapWidget_C, LoudColor) == 0x0003F0, "Member 'UWBP_ServerBrowser_HeistMapWidget_C::LoudColor' has a wrong offset!");

}

