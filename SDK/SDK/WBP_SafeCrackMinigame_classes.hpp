#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SafeCrackMinigame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SafeCrackMinigame.WBP_SafeCrackMinigame_C
// 0x00F8 (0x03C8 - 0x02D0)
class UWBP_SafeCrackMinigame_C final : public UPD3MiniGameWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       WrongDir;                                          // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Shake_Tier1;                                       // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Shake_Tier2;                                       // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Shake_Tier3;                                       // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RightAnim;                                         // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LeftAnim;                                          // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DialCenter;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DialImage;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DirectionHintLeft;                                 // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DirectionHintRight;                                // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DownCirc;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DownCirc_1;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DownCirc_2;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_128;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_213;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           In_Color_and_Opacity;                              // 0x0364(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CorrectAngle;                                      // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRound;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightDirection;                                    // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WrongInput;                                        // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZMiniGameComponent*                  minigameAK;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasGoneOver;                                       // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  BoolArray;                                         // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LoopTime;                                          // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerRef;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DynamicInt;                                        // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Complete;                                          // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTimeReset;                                     // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CorrectHoldDuration;                               // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_SafeCrackMinigame(int32 EntryPoint);
	void MiniGameStateChanged(EPD3MiniGameState NewState);
	void OnOwningMiniGameComponent(class USBZMiniGameComponent* MiniGameComponet);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BP_OnXAxisChanged(float Value_0);
	void OnInitialized();
	void Finished_6CE8C22141CE58724C9E5F81C78317AF();
	void SetCorrectNumber();
	void IncreasingRounds(bool decrease);
	void SetNewTimerSpeed(float LoopTime_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_SafeCrackMinigame_C">();
	}
	static class UWBP_SafeCrackMinigame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_SafeCrackMinigame_C>();
	}
};
static_assert(alignof(UWBP_SafeCrackMinigame_C) == 0x000008, "Wrong alignment on UWBP_SafeCrackMinigame_C");
static_assert(sizeof(UWBP_SafeCrackMinigame_C) == 0x0003C8, "Wrong size on UWBP_SafeCrackMinigame_C");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, UberGraphFrame) == 0x0002D0, "Member 'UWBP_SafeCrackMinigame_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, WrongDir) == 0x0002D8, "Member 'UWBP_SafeCrackMinigame_C::WrongDir' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Shake_Tier1) == 0x0002E0, "Member 'UWBP_SafeCrackMinigame_C::Shake_Tier1' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Shake_Tier2) == 0x0002E8, "Member 'UWBP_SafeCrackMinigame_C::Shake_Tier2' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Shake_Tier3) == 0x0002F0, "Member 'UWBP_SafeCrackMinigame_C::Shake_Tier3' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, RightAnim) == 0x0002F8, "Member 'UWBP_SafeCrackMinigame_C::RightAnim' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, LeftAnim) == 0x000300, "Member 'UWBP_SafeCrackMinigame_C::LeftAnim' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DialCenter) == 0x000308, "Member 'UWBP_SafeCrackMinigame_C::DialCenter' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DialImage) == 0x000310, "Member 'UWBP_SafeCrackMinigame_C::DialImage' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DirectionHintLeft) == 0x000318, "Member 'UWBP_SafeCrackMinigame_C::DirectionHintLeft' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DirectionHintRight) == 0x000320, "Member 'UWBP_SafeCrackMinigame_C::DirectionHintRight' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DownCirc) == 0x000328, "Member 'UWBP_SafeCrackMinigame_C::DownCirc' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DownCirc_1) == 0x000330, "Member 'UWBP_SafeCrackMinigame_C::DownCirc_1' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DownCirc_2) == 0x000338, "Member 'UWBP_SafeCrackMinigame_C::DownCirc_2' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Image) == 0x000340, "Member 'UWBP_SafeCrackMinigame_C::Image' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Image_1) == 0x000348, "Member 'UWBP_SafeCrackMinigame_C::Image_1' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Image_128) == 0x000350, "Member 'UWBP_SafeCrackMinigame_C::Image_128' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Image_213) == 0x000358, "Member 'UWBP_SafeCrackMinigame_C::Image_213' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Angle) == 0x000360, "Member 'UWBP_SafeCrackMinigame_C::Angle' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, In_Color_and_Opacity) == 0x000364, "Member 'UWBP_SafeCrackMinigame_C::In_Color_and_Opacity' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, CorrectAngle) == 0x000374, "Member 'UWBP_SafeCrackMinigame_C::CorrectAngle' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Value) == 0x000378, "Member 'UWBP_SafeCrackMinigame_C::Value' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, CurrentRound) == 0x00037C, "Member 'UWBP_SafeCrackMinigame_C::CurrentRound' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, RightDirection) == 0x000380, "Member 'UWBP_SafeCrackMinigame_C::RightDirection' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, WrongInput) == 0x000381, "Member 'UWBP_SafeCrackMinigame_C::WrongInput' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, minigameAK) == 0x000388, "Member 'UWBP_SafeCrackMinigame_C::minigameAK' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, HasGoneOver) == 0x000390, "Member 'UWBP_SafeCrackMinigame_C::HasGoneOver' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, BoolArray) == 0x000398, "Member 'UWBP_SafeCrackMinigame_C::BoolArray' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, LoopTime) == 0x0003A8, "Member 'UWBP_SafeCrackMinigame_C::LoopTime' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, TimerRef) == 0x0003B0, "Member 'UWBP_SafeCrackMinigame_C::TimerRef' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, DynamicInt) == 0x0003B8, "Member 'UWBP_SafeCrackMinigame_C::DynamicInt' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, Complete) == 0x0003BC, "Member 'UWBP_SafeCrackMinigame_C::Complete' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, LoopTimeReset) == 0x0003C0, "Member 'UWBP_SafeCrackMinigame_C::LoopTimeReset' has a wrong offset!");
static_assert(offsetof(UWBP_SafeCrackMinigame_C, CorrectHoldDuration) == 0x0003C4, "Member 'UWBP_SafeCrackMinigame_C::CorrectHoldDuration' has a wrong offset!");

}

