#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Inventory_GloveSlotButton

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton
// 0x0018 (0x0018 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInHasFocus;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsActiveGloveSlot;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton) == 0x000008, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton) == 0x000018, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, EntryPoint) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, Temp_bool_Variable) == 0x000004, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, Temp_byte_Variable) == 0x000005, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, K2Node_Event_bInHasFocus) == 0x000008, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::K2Node_Event_bInHasFocus' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, K2Node_Event_bIsActiveGloveSlot) == 0x000009, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::K2Node_Event_bIsActiveGloveSlot' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, K2Node_Select_Default) == 0x00000A, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ExecuteUbergraph_WBP_UI_Inventory_GloveSlotButton::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.SetActiveGloveSlot
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot final
{
public:
	bool                                          bIsActiveGloveSlot;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot) == 0x000001, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot) == 0x000001, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot, bIsActiveGloveSlot) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_SetActiveGloveSlot::bIsActiveGloveSlot' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.ButtonFocusedChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged final
{
public:
	bool                                          bInHasFocus;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged) == 0x000001, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged) == 0x000001, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged, bInHasFocus) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_ButtonFocusedChanged::bInHasFocus' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_PreConstruct");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_PreConstruct) == 0x000001, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_PreConstruct");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.OnFocused
// 0x0028 (0x0028 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_OnFocused final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_OnFocused) == 0x000008, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_OnFocused");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_OnFocused) == 0x000028, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_OnFocused");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_OnFocused, bIsFocused) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_OnFocused::bIsFocused' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_OnFocused, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WBP_UI_Inventory_GloveSlotButton_C_OnFocused::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_OnFocused, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'WBP_UI_Inventory_GloveSlotButton_C_OnFocused::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_OnFocused, CallFunc_SelectColor_ReturnValue) == 0x000018, "Member 'WBP_UI_Inventory_GloveSlotButton_C_OnFocused::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.SetGloveNameColor
// 0x0038 (0x0038 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor final
{
public:
	struct FLinearColor                           DesiredColor;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0028)()
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor) == 0x000008, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor) == 0x000038, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor, DesiredColor) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor::DesiredColor' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'WBP_UI_Inventory_GloveSlotButton_C_SetGloveNameColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.CanCustomize
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_CanCustomize final
{
public:
	bool                                          bCanCustomize;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_CanCustomize) == 0x000001, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_CanCustomize");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_CanCustomize) == 0x000001, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_CanCustomize");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_CanCustomize, bCanCustomize) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_CanCustomize::bCanCustomize' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.InitializeGloveVisuals
// 0x0040 (0x0040 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals final
{
public:
	const class USBZGloveData*                    CallFunc_GetGloveInSlot_ReturnValue;               // 0x0000(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USBZGloveData*                    CallFunc_GetGloveInSlot_ReturnValue_1;             // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDisplayName_OutDisplayName;            // 0x0020(0x0018)()
	bool                                          CallFunc_GetDisplayName_OutHasText;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals) == 0x000008, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals) == 0x000040, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals, CallFunc_GetGloveInSlot_ReturnValue) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals::CallFunc_GetGloveInSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals, CallFunc_GetGloveInSlot_ReturnValue_1) == 0x000010, "Member 'WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals::CallFunc_GetGloveInSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals, CallFunc_GetDisplayName_OutDisplayName) == 0x000020, "Member 'WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals::CallFunc_GetDisplayName_OutDisplayName' has a wrong offset!");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals, CallFunc_GetDisplayName_OutHasText) == 0x000038, "Member 'WBP_UI_Inventory_GloveSlotButton_C_InitializeGloveVisuals::CallFunc_GetDisplayName_OutHasText' has a wrong offset!");

// Function WBP_UI_Inventory_GloveSlotButton.WBP_UI_Inventory_GloveSlotButton_C.OnHover
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Inventory_GloveSlotButton_C_OnHover final
{
public:
	bool                                          bIsHovered;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Inventory_GloveSlotButton_C_OnHover) == 0x000001, "Wrong alignment on WBP_UI_Inventory_GloveSlotButton_C_OnHover");
static_assert(sizeof(WBP_UI_Inventory_GloveSlotButton_C_OnHover) == 0x000001, "Wrong size on WBP_UI_Inventory_GloveSlotButton_C_OnHover");
static_assert(offsetof(WBP_UI_Inventory_GloveSlotButton_C_OnHover, bIsHovered) == 0x000000, "Member 'WBP_UI_Inventory_GloveSlotButton_C_OnHover::bIsHovered' has a wrong offset!");

}

