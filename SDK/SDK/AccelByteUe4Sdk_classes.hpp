#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccelByteUe4Sdk

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "AccelByteUe4Sdk_structs.hpp"


namespace SDK
{

// Class AccelByteUe4Sdk.ABAchievement
// 0x0010 (0x0040 - 0x0030)
class UABAchievement final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClaimGlobalAchievements(const class FString& AchievementCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetAchievement(const class FString& AchievementCode, const TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetTags(const class FString& Name_0, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void QueryAchievements(const class FString& Language, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, const class FString& TagQuery, bool bGlobal);
	void QueryGlobalAchievementContributors(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void QueryGlobalAchievements(const class FString& AchievementCode, const EAccelByteGlobalAchievementStatus& AchievementStatus, const EAccelByteGlobalAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void QueryGlobalAchievementUserContributed(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void QueryUserAchievements(const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, bool PreferUnlocked, const class FString& TagQuery);
	void UnlockAchievement(const class FString& AchievementCode, const TDelegate<void()> OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABAchievement">();
	}
	static class UABAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABAchievement>();
	}
};
static_assert(alignof(UABAchievement) == 0x000008, "Wrong alignment on UABAchievement");
static_assert(sizeof(UABAchievement) == 0x000040, "Wrong size on UABAchievement");

// Class AccelByteUe4Sdk.ABAgreement
// 0x0010 (0x0040 - 0x0030)
class UABAgreement final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AcceptPolicyVersion(const class FString& LocalizedPolicyVersionId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkAcceptPolicyVersions(const struct FArrayModelsAcceptAgreementRequest& AgreementRequests, const TDelegate<void(const struct FAccelByteModelsAcceptAgreementResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLegalDocument(const class FString& Url, const TDelegate<void(const class FString& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLegalPolicies(const EAccelByteAgreementPolicyType& AgreementPolicyType, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLegalPoliciesByCountry(const class FString& CountryCode, const EAccelByteAgreementPolicyType& AgreementPolicyType, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLegalPoliciesByCountryAndTags(const class FString& CountryCode, const EAccelByteAgreementPolicyType& AgreementPolicyType, const TArray<class FString>& Tags, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLegalPoliciesByNamespace(const class FString& Namesapce, const EAccelByteAgreementPolicyType& AgreementPolicyType, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLegalPoliciesByTags(const EAccelByteAgreementPolicyType& AgreementPolicyType, const TArray<class FString>& tags, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void QueryLegalEligibilities(const class FString& Namespace, const TDelegate<void(const struct FArrayModelsRetrieveUserEligibilitiesResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABAgreement">();
	}
	static class UABAgreement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABAgreement>();
	}
};
static_assert(alignof(UABAgreement) == 0x000008, "Wrong alignment on UABAgreement");
static_assert(sizeof(UABAgreement) == 0x000040, "Wrong size on UABAgreement");

// Class AccelByteUe4Sdk.ABBinaryCloudSave
// 0x0010 (0x0040 - 0x0030)
class UABBinaryCloudSave final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkGetCurrentUserBinaryRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetGameBinaryRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FAccelByteModelsListGameBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetPublicUserBinaryRecordsByKeys(const TArray<class FString>& Keys, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetPublicUserBinaryRecordsByUserIds(const class FString& Key, const TArray<class FString>& UserIds, const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkQueryCurrentUserBinaryRecords(const class FString& Query, const TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void BulkQueryGameBinaryRecords(const class FString& Query, const TDelegate<void(const struct FAccelByteModelsPaginatedGameBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void BulkQueryPublicUserBinaryRecords(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void DeleteUserBinaryRecord(const class FString& Key, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetCurrentUserBinaryRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGameBinaryRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsGameBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetPublicUserBinaryRecord(const class FString& Key, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RequestUserBinaryRecordPresignedUrl(const class FString& Key, const class FString& FileType, const TDelegate<void(const struct FAccelByteModelsBinaryInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void SaveUserBinaryRecord(const class FString& Key, bool bIsPublic, const class FString& FileType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateUserBinaryRecordFile(const class FString& Key, const class FString& FileType, const class FString& FileLocation, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateUserBinaryRecordMetadata(const class FString& Key, bool bIsPublic, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABBinaryCloudSave">();
	}
	static class UABBinaryCloudSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABBinaryCloudSave>();
	}
};
static_assert(alignof(UABBinaryCloudSave) == 0x000008, "Wrong alignment on UABBinaryCloudSave");
static_assert(sizeof(UABBinaryCloudSave) == 0x000040, "Wrong size on UABBinaryCloudSave");

// Class AccelByteUe4Sdk.ABBlock
// 0x0010 (0x0040 - 0x0030)
class UABBlock final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlockPlayer(const struct FBlockPlayerRequest& Request, TDelegate<void(const struct FAccelByteModelsBlockPlayerResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetListOfBlockedUsers(TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetListOfBlockers(TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetBlockPlayerNotifDelegate(TDelegate<void(const struct FAccelByteModelsBlockPlayerNotif& Notif)> OnNotif);
	void SetUnblockPlayerNotifDelegate(TDelegate<void(const struct FAccelByteModelsUnblockPlayerNotif& Notif)> OnNotif);
	void UnblockPlayer(const struct FUnblockPlayerRequest& Request, TDelegate<void(const struct FAccelByteModelsUnblockPlayerResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABBlock">();
	}
	static class UABBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABBlock>();
	}
};
static_assert(alignof(UABBlock) == 0x000008, "Wrong alignment on UABBlock");
static_assert(sizeof(UABBlock) == 0x000040, "Wrong size on UABBlock");

// Class AccelByteUe4Sdk.ABCatalog
// 0x0010 (0x0040 - 0x0030)
class UABCatalog final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCategory(const class FString& CategoryPath, const class FString& Language, TDelegate<void(const struct FAccelByteModelsCategoryInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetChildCategories(const class FString& CategoryPath, const class FString& Language, TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetDescendantCategories(const class FString& CategoryPath, const class FString& Language, TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetItemByAppId(const class FString& AppId, const class FString& Language, const class FString& Region, TDelegate<void(const struct FAccelByteModelsItemInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetItemById(const class FString& ItemId, const class FString& Language, const class FString& Region, const class FString& StoreId, bool bPopulateBundle, TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetItemDynamicData(const class FString& ItemId, TDelegate<void(const struct FAccelByteModelsItemDynamicData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetItemsByCriteria(const struct FAccelByteModelsItemCriteria& ItemCriteria, const int32& Offset, const int32& Limit, const TArray<EAccelByteItemListSortBy>& SortBy, TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetRootCategories(const class FString& Language, TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SearchItem(const class FString& Language, const class FString& Keyword, const int32& Offset, const int32& Limit, const class FString& Region, TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABCatalog">();
	}
	static class UABCatalog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABCatalog>();
	}
};
static_assert(alignof(UABCatalog) == 0x000008, "Wrong alignment on UABCatalog");
static_assert(sizeof(UABCatalog) == 0x000040, "Wrong size on UABCatalog");

// Class AccelByteUe4Sdk.ABCloudSave
// 0x0010 (0x0040 - 0x0030)
class UABCloudSave final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkGetGameRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FAccelByteModelsListGameRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetOtherPlayerPublicRecordKeys(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	void BulkGetOtherPlayerPublicRecords(const class FString& UserId, const TArray<class FString>& Keys, const TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetUserRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteGameRecord(const class FString& Key, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteUserRecord(const class FString& Key, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGameRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsGameRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetPublicUserRecord(const class FString& Key, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceGameRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceGameRecordCheckLatest(const class FString& Key, const struct FDateTime& LastUpdated, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceGameRecordCheckLatestRetry(int32 TryAttempt, const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FJsonObjectWrapper& Response)>& PayloadModifier, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceUserRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, bool IsPublic, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceUserRecordCheckLatest(const class FString& Key, const struct FDateTime& LastUpdated, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceUserRecordCheckLatestRetry(int32 TryAttempt, const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FJsonObjectWrapper& Response)>& PayloadModifier, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceUserRecordCheckLatestRetryWithResponse(int32 TryAttempt, const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FJsonObjectWrapper& Response)>& PayloadModifier, const TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ReplaceUserRecordCheckLatestWithResponse(const class FString& Key, const struct FDateTime& LastUpdated, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void SaveGameRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void SaveUserRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, bool IsPublic, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABCloudSave">();
	}
	static class UABCloudSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABCloudSave>();
	}
};
static_assert(alignof(UABCloudSave) == 0x000008, "Wrong alignment on UABCloudSave");
static_assert(sizeof(UABCloudSave) == 0x000040, "Wrong size on UABCloudSave");

// Class AccelByteUe4Sdk.ABCurrency
// 0x0010 (0x0040 - 0x0030)
class UABCurrency final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCurrencyList(TDelegate<void(const struct FArrayModelsCurrencyList& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, EAccelByteCurrencyType CurrencyType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABCurrency">();
	}
	static class UABCurrency* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABCurrency>();
	}
};
static_assert(alignof(UABCurrency) == 0x000008, "Wrong alignment on UABCurrency");
static_assert(sizeof(UABCurrency) == 0x000040, "Wrong size on UABCurrency");

// Class AccelByteUe4Sdk.ABEntitlement
// 0x0010 (0x0040 - 0x0030)
class UABEntitlement final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConsumeUserEntitlement(const class FString& EntitlementId, const int32& UseCount, TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void CreateDistributionReceiver(const class FString& ExtUserId, const struct FAccelByteModelsAttributes& Attributes, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void DeleteDistributionReceiver(const class FString& ExtUserId, const class FString& UserId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetDistributionReceiver(const class FString& PublisherNamespace, const class FString& PublisherUserId, TDelegate<void(const struct FArrayModelsDistributionReceiver& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserEntitlementById(const class FString& Entitlementid, TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserEntitlementOwnershipAny(const TArray<class FString>& ItemIds, const TArray<class FString>& AppIds, const TArray<class FString>& Skus, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserEntitlementOwnershipByAppId(const class FString& AppId, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserEntitlementOwnershipByItemId(const class FString& ItemId, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserEntitlementOwnershipBySku(const class FString& Sku, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void QueryUserEntitlements(const class FString& EntitlementName, const TArray<class FString>& ItemIds, const int32& Offset, const int32& Limit, TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Response)> OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteEntitlementClass EntitlementClass, EAccelByteAppType AppType);
	void SyncMobilePlatformPurchaseApple(const struct FAccelByteModelsPlatformSyncMobileApple& SyncRequest, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SyncMobilePlatformPurchaseGoogle(const struct FAccelByteModelsPlatformSyncMobileGoogle& SyncRequest, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SyncMobilePlatformPurchaseGooglePlay(const struct FAccelByteModelsPlatformSyncMobileGoogle& SyncRequest, TDelegate<void(const struct FAccelByteModelsPlatformSyncMobileGoogleResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SyncPlatformPurchase(EAccelBytePlatformSync PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SyncPlatformPurchaseSingleItem(const struct FAccelByteModelsEntitlementSyncBase& EntitlementSyncBase, EAccelBytePlatformSync PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SyncTwitchDropEntitlement(const struct FAccelByteModelsTwitchDropEntitlement& TwitchDropModel, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void UpdateDistributionReceiver(const class FString& ExtUserId, const struct FAccelByteModelsAttributes& Attributes, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void ValidateUserItemPurchaseCondition(const TArray<class FString>& Items, TDelegate<void(const TArray<struct FAccelByteModelsPlatformValidateUserItemPurchaseResponse>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABEntitlement">();
	}
	static class UABEntitlement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABEntitlement>();
	}
};
static_assert(alignof(UABEntitlement) == 0x000008, "Wrong alignment on UABEntitlement");
static_assert(sizeof(UABEntitlement) == 0x000040, "Wrong size on UABEntitlement");

// Class AccelByteUe4Sdk.ABFriends
// 0x0010 (0x0040 - 0x0030)
class UABFriends final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AcceptFriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void BulkFriendRequest(const struct FAccelByteModelsBulkFriendsRequest& UserIds, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void CancelFriendRequest(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetFriendshipStatus(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void ListIncomingFriends(TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void ListOutgoingFriends(TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LoadFriendsList(TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void RejectFriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void RequestFriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetOnCancelFriendsNotifDelegate(TDelegate<void(const struct FAccelByteModelsCancelFriendsNotif& Notif)> OnNotif);
	void SetOnFriendRequestAcceptedNotifDelegate(TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Notif)> OnNotif);
	void SetOnIncomingRequestFriendsNotifDelegate(TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Notif)> OnNotif);
	void SetOnRejectFriendsNotifDelegate(TDelegate<void(const struct FAccelByteModelsRejectFriendsNotif& Notif)> OnNotif);
	void SetOnUnfriendNotifDelegate(TDelegate<void(const struct FAccelByteModelsUnfriendNotif& Notif)> OnNotif);
	void Unfriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABFriends">();
	}
	static class UABFriends* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABFriends>();
	}
};
static_assert(alignof(UABFriends) == 0x000008, "Wrong alignment on UABFriends");
static_assert(sizeof(UABFriends) == 0x000040, "Wrong size on UABFriends");

// Class AccelByteUe4Sdk.ABFulfillment
// 0x0010 (0x0040 - 0x0030)
class UABFulfillment final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RedeemCode(const class FString& Code, const class FString& Region, const class FString& Language, TDelegate<void(const struct FAccelByteModelsFulfillmentResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABFulfillment">();
	}
	static class UABFulfillment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABFulfillment>();
	}
};
static_assert(alignof(UABFulfillment) == 0x000008, "Wrong alignment on UABFulfillment");
static_assert(sizeof(UABFulfillment) == 0x000040, "Wrong size on UABFulfillment");

// Class AccelByteUe4Sdk.ABGroup
// 0x0010 (0x0040 - 0x0030)
class UABGroup final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AcceptGroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void AcceptGroupJoinRequest(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void AcceptV2GroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void AcceptV2GroupJoinRequest(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void AssignMemberRole(const class FString& MemberRoleId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void AssignV2MemberRole(const class FString& MemberRoleId, const class FString& GroupId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CancelGroupMemberInvitation(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CancelJoinGroupRequest(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGroup(const struct FAccelByteModelsCreateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateV2Group(const struct FAccelByteModelsCreateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteGroup(const class FString& GroupId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteMemberRole(const class FString& MemberRoleId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteV2Group(const class FString& GroupId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteV2GroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteV2MemberRole(const class FString& MemberRoleId, const class FString& GroupId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetAllMemberRoles(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroup(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroupInviteRequestList(const class FString& GroupId, const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroupJoinRequestList(const class FString& GroupId, const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroupJoinRequests(const class FString& GroupId, const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroupList(const struct FAccelByteModelsGetGroupListRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroupMembersListByGroupId(const class FString& GroupId, const struct FAccelByteModelsGetGroupMembersListByGroupIdRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGroupsByGroupIds(const TArray<class FString>& GroupIds, const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetMemberRoles(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetMyJoinedGroupInfo(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetMyJoinGroupRequest(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserGroupInfoByUserId(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserGroupStatusInfo(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void InviteUserToGroup(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void InviteUserToV2Group(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void JoinGroup(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void JoinV2Group(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void KickGroupMember(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void KickV2GroupMember(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void LeaveGroup(const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void LeaveV2Group(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RejectGroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RejectGroupJoinRequest(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RejectV2GroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RejectV2GroupJoinRequest(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGroup(const class FString& GroupId, const bool bCompletelyReplace, struct FAccelByteModelsGroupUpdatable* RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGroupCustomAttributes(const class FString& GroupId, struct FAccelByteModelsUpdateGroupCustomAttributesRequest* RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGroupCustomRule(const class FString& GroupId, struct FAccelByteModelsUpdateCustomRulesRequest* RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateV2Group(const class FString& GroupId, const struct FAccelByteModelsUpdateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateV2GroupCustomAttributes(const class FString& GroupId, const struct FAccelByteModelsUpdateGroupCustomAttributesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateV2GroupCustomRule(const class FString& GroupId, const struct FAccelByteModelsUpdateCustomRulesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateV2GroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABGroup">();
	}
	static class UABGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABGroup>();
	}
};
static_assert(alignof(UABGroup) == 0x000008, "Wrong alignment on UABGroup");
static_assert(sizeof(UABGroup) == 0x000040, "Wrong size on UABGroup");

// Class AccelByteUe4Sdk.ABLeaderboard
// 0x0010 (0x0040 - 0x0030)
class UABLeaderboard final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetBulkUserRankingV3(const TArray<class FString>& UserIds, const class FString& LeaderboardCode, const TDelegate<void(const struct FAccelByteModelsBulkUserRankingDataV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetLeaderboards(int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsPaginatedLeaderboardData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetRankingByCycle(const class FString& LeaderboardCode, const class FString& CycleId, int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetRankings(const class FString& LeaderboardCode, const EAccelByteLeaderboardTimeFrame& TimeFrame, int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetRankingsV3(const class FString& LeaderboardCode, int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserRanking(const class FString& UserId, const class FString& LeaderboardCode, const TDelegate<void(const struct FAccelByteModelsUserRankingData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserRankingV3(const class FString& UserId, const class FString& LeaderboardCode, const TDelegate<void(const struct FAccelByteModelsUserRankingDataV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABLeaderboard">();
	}
	static class UABLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABLeaderboard>();
	}
};
static_assert(alignof(UABLeaderboard) == 0x000008, "Wrong alignment on UABLeaderboard");
static_assert(sizeof(UABLeaderboard) == 0x000040, "Wrong size on UABLeaderboard");

// Class AccelByteUe4Sdk.ABMatchmaking
// 0x0010 (0x0040 - 0x0030)
class UABMatchmaking final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelMatchmaking(const struct FCancelMatchmakingRequest& Request, TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetOnDs(TDelegate<void(const struct FAccelByteModelsDsNotice& Notif)> OnNotif);
	void SetOnMatchmaking(TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Notif)> OnNotif);
	void SetOnRematchmaking(TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Notif)> OnNotif);
	void SetOnSetReadyConsent(TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Notif)> OnNotif);
	void SetOnSetRejectConsent(TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Notif)> OnNotif);
	void SetReadyConsent(const struct FSetReadyConsentRequest& Request, TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetRejectConsent(const struct FSetRejectConsentRequest& Request, TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void StartMatchmaking(const struct FStartMatchmakingRequest& Request, TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABMatchmaking">();
	}
	static class UABMatchmaking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABMatchmaking>();
	}
};
static_assert(alignof(UABMatchmaking) == 0x000008, "Wrong alignment on UABMatchmaking");
static_assert(sizeof(UABMatchmaking) == 0x000040, "Wrong size on UABMatchmaking");

// Class AccelByteUe4Sdk.ABMessage
// 0x0010 (0x0040 - 0x0030)
class UABMessage final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString SendChannelMessage(const struct FSendChannelMessageRequest& Request, TDelegate<void(const struct FAccelByteModelsChannelMessageResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	class FString SendJoinDefaultChannelChatRequest(TDelegate<void(const struct FAccelByteModelsJoinDefaultChannelResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	class FString SendPartyMessage(const struct FSendPartyMessageRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SendPing();
	class FString SendPrivateMessage(const struct FSendPrivateMessageRequest& Request, TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetChannelMessageNotifDelegate(TDelegate<void(const struct FAccelByteModelsChannelMessageNotice& Notif)> OnNotif);
	void SetMessageNotifDelegate(TDelegate<void(const struct FAccelByteModelsNotificationMessage& Notif)> OnNotif);
	void SetOnPartyChatNotification(TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Notif)> OnPartyChatNotif);
	void SetPrivateMessageNotifDelegate(TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Notif)> OnNotif);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABMessage">();
	}
	static class UABMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABMessage>();
	}
};
static_assert(alignof(UABMessage) == 0x000008, "Wrong alignment on UABMessage");
static_assert(sizeof(UABMessage) == 0x000040, "Wrong size on UABMessage");

// Class AccelByteUe4Sdk.ABOrder
// 0x0010 (0x0040 - 0x0030)
class UABOrder final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelOrder(const class FString& OrderNo, TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void CreateNewOrder(const struct FAccelByteModelsOrderCreate& OrderCreateRequest, TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserOrder(const class FString& OrderNo, TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserOrderHistory(const class FString& OrderNo, TDelegate<void(const struct FArrayModelsOrderHistoryInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserOrders(const int32& Page, const int32& Size, TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABOrder">();
	}
	static class UABOrder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABOrder>();
	}
};
static_assert(alignof(UABOrder) == 0x000008, "Wrong alignment on UABOrder");
static_assert(sizeof(UABOrder) == 0x000040, "Wrong size on UABOrder");

// Class AccelByteUe4Sdk.ABParty
// 0x0010 (0x0040 - 0x0030)
class UABParty final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateParty(TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetPartyData(const struct FGetPartyDataRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyData& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetPartyStorage(const struct FGetPartyStorageRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyDeleteCode(TDelegate<void(const struct FAccelByteModelsPartyDeleteCodeResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyGenerateCode(TDelegate<void(const struct FAccelByteModelsPartyGenerateCodeResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyGetCode(TDelegate<void(const struct FAccelByteModelsPartyGetCodeResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyInfo(TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyInvite(const struct FPartyInviteRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyJoin(const struct FPartyJoinRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyJoinViaCode(const struct FPartyJoinViaCodeRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyKick(const struct FPartyKickRequest& Request, TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyLeave(TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyPromoteLeader(const struct FPartyPromoteLeaderRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyPromoteLeaderResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void PartyReject(const struct FPartyRejectRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyRejectResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetOnPartyDataUpdate(TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)> OnNotif);
	void SetOnPartyDataUpdateNotifDelegate(TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)> OnNotif);
	void SetOnPartyGetInvited(TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Notif)> OnNotif);
	void SetOnPartyInvite(TDelegate<void(const struct FAccelByteModelsInvitationNotice& Notif)> OnNotif);
	void SetOnPartyJoin(TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Notif)> OnNotif);
	void SetOnPartyKick(TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Notif)> OnNotif);
	void SetOnPartyLeave(TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)> OnNotif);
	void SetOnPartyMemberConnect(TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)> OnNotif);
	void SetOnPartyMemberDisconnect(TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)> OnNotif);
	void SetOnPartyMemberLeave(TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)> OnNotif);
	void SetOnPartyReject(TDelegate<void(const struct FAccelByteModelsPartyRejectNotice& Notif)> OnNotif);
	void SetOnPartyUpdate(TDelegate<void(const struct FAccelByteModelsPartyNotif& Notif)> OnNotif);
	void SetPartySizeLimit(const class FString& PartyId, const int32 Limit, const TDelegate<void()>& OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void WritePartyStorage(const struct FWritePartyStorageRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABParty">();
	}
	static class UABParty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABParty>();
	}
};
static_assert(alignof(UABParty) == 0x000008, "Wrong alignment on UABParty");
static_assert(sizeof(UABParty) == 0x000040, "Wrong size on UABParty");

// Class AccelByteUe4Sdk.ABPresence
// 0x0010 (0x0040 - 0x0030)
class UABPresence final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkGetUserPresence(const struct FBulkGetUserPresenceRequest& Request, TDelegate<void(const struct FAccelByteModelsBulkUserStatusNotif& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetAllFriendsStatus(TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetOnFriendStatusNotif(TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Notif)> OnNotif);
	void SetPresenceStatus(const struct FAccelBytePresenceStatus& Request, TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABPresence">();
	}
	static class UABPresence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABPresence>();
	}
};
static_assert(alignof(UABPresence) == 0x000008, "Wrong alignment on UABPresence");
static_assert(sizeof(UABPresence) == 0x000040, "Wrong size on UABPresence");

// Class AccelByteUe4Sdk.ABReward
// 0x0010 (0x0040 - 0x0030)
class UABReward final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetRewardByRewardCode(const class FString& RewardCode, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetRewardByRewardId(const class FString& RewardId, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void QueryRewards(const class FString& EventTopic, int32 Offset, int32 Limit, const EAccelByteRewardListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsQueryReward& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABReward">();
	}
	static class UABReward* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABReward>();
	}
};
static_assert(alignof(UABReward) == 0x000008, "Wrong alignment on UABReward");
static_assert(sizeof(UABReward) == 0x000040, "Wrong size on UABReward");

// Class AccelByteUe4Sdk.ABSeasonPass
// 0x0010 (0x0040 - 0x0030)
class UABSeasonPass final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkClaimRewards(const TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ClaimRewards(const struct FAccelByteModelsSeasonClaimRewardRequest& RewardRequest, const TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetCurrentSeason(const class FString& Language, const TDelegate<void(const struct FAccelByteModelsSeasonInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetCurrentUserSeason(const TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserSeason(const class FString& SeasonId, const TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABSeasonPass">();
	}
	static class UABSeasonPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABSeasonPass>();
	}
};
static_assert(alignof(UABSeasonPass) == 0x000008, "Wrong alignment on UABSeasonPass");
static_assert(sizeof(UABSeasonPass) == 0x000040, "Wrong size on UABSeasonPass");

// Class AccelByteUe4Sdk.ABServerAchievement
// 0x0010 (0x0040 - 0x0030)
class UABServerAchievement final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UnlockAchievement(const class FString& UserId, const class FString& AchievementCode, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerAchievement">();
	}
	static class UABServerAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerAchievement>();
	}
};
static_assert(alignof(UABServerAchievement) == 0x000008, "Wrong alignment on UABServerAchievement");
static_assert(sizeof(UABServerAchievement) == 0x000040, "Wrong size on UABServerAchievement");

// Class AccelByteUe4Sdk.ABServerDSM
// 0x0010 (0x0040 - 0x0030)
class UABServerDSM final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConfigureAutoShutdown(int32 TickSeconds, int32 CountdownStart);
	void DeregisterLocalServerFromDSM(const class FString& ServerName, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	int32 GetPlayerNum();
	void GetServerInfo(TDelegate<void(const struct FAccelByteModelsServerInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetSessionId(TDelegate<void(const struct FAccelByteModelsServerSessionResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void RegisterLocalServerToDSM(const class FString& IPAddress, const int32& Port, const class FString& ServerName, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void RegisterServerToDSM(const int32& Port, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SendShutdownToDSM(const bool& KillMe, const class FString& MatchId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetOnAutoShutdownErrorDelegate(TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnShutdownError);
	void SetOnAutoShutdownResponse(TDelegate<void()> OnAutoShutdown);
	void SetServerName(const class FString& Name_0);
	void SetServerType(EUEnumServerType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerDSM">();
	}
	static class UABServerDSM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerDSM>();
	}
};
static_assert(alignof(UABServerDSM) == 0x000008, "Wrong alignment on UABServerDSM");
static_assert(sizeof(UABServerDSM) == 0x000040, "Wrong size on UABServerDSM");

// Class AccelByteUe4Sdk.ABServerLobby
// 0x0010 (0x0040 - 0x0030)
class UABServerLobby final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetListOfBlockedUsers(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetListOfBlockers(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetPartyDataByUserId(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsDataPartyResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetPartyStorage(const class FString& PartyId, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetSessionAttribute(const class FString& UserId, const class FString& Key, TDelegate<void(const struct FAccelByteModelsGetSessionAttributeResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetSessionAttributeAll(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsGetSessionAttributeAllResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetSessionAttribute(const class FString& UserId, const TMap<class FString, class FString>& Attributes, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SetSessionAttributeString(const class FString& UserId, const class FString& Key, const class FString& Value, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void WritePartyStorage(const class FString& PartyId, TDelegate<void(const struct FJsonObjectWrapper& Payload)> PayloadModifier, const int32& RetryAttempt, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerLobby">();
	}
	static class UABServerLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerLobby>();
	}
};
static_assert(alignof(UABServerLobby) == 0x000008, "Wrong alignment on UABServerLobby");
static_assert(sizeof(UABServerLobby) == 0x000040, "Wrong size on UABServerLobby");

// Class AccelByteUe4Sdk.ABServerMatchmaking
// 0x0010 (0x0040 - 0x0030)
class UABServerMatchmaking final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateSessionStatusPolling(const class FString& MatchId, int32 IntervalSec, TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void AddUserToSession(const class FString& ChannelName, const class FString& MatchId, const class FString& UserId, const class FString& OptionalPartyId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void DeactivateStatusPolling();
	void DequeueJoinableSession(const class FString& MatchId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void EnqueueJoinableSession(const struct FAccelByteModelsMatchmakingResult& MatchmakingResult, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void QuerySessionStatus(const class FString& MatchId, TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void RebalanceMatchmakingBasedOnMMR(const class FString& MatchId, TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void RemoveUserFromSession(const class FString& ChannelName, const class FString& MatchId, const class FString& UserId, const struct FAccelByteModelsMatchmakingResult& OptionalBody, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerMatchmaking">();
	}
	static class UABServerMatchmaking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerMatchmaking>();
	}
};
static_assert(alignof(UABServerMatchmaking) == 0x000008, "Wrong alignment on UABServerMatchmaking");
static_assert(sizeof(UABServerMatchmaking) == 0x000040, "Wrong size on UABServerMatchmaking");

// Class AccelByteUe4Sdk.ABServerOauth2
// 0x0010 (0x0040 - 0x0030)
class UABServerOauth2 final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForgetAllCredentials();
	void GetJwks(TDelegate<void(const struct FJwkSet& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LoginWithClientCredentials(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerOauth2">();
	}
	static class UABServerOauth2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerOauth2>();
	}
};
static_assert(alignof(UABServerOauth2) == 0x000008, "Wrong alignment on UABServerOauth2");
static_assert(sizeof(UABServerOauth2) == 0x000040, "Wrong size on UABServerOauth2");

// Class AccelByteUe4Sdk.ABServerSessionBrowser
// 0x0010 (0x0040 - 0x0030)
class UABServerSessionBrowser final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateGameSessionPrivate(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionPublic(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionTypeSpecificByStruct(const struct FAccelByteModelsSessionBrowserCreateRequest& CreateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionTypeSpecifiedByEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionTypeSpecifiedByString(const class FString& SessionTypeString, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGameSessionsByTypeEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByTypeEnumAndMatchExist(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByTypeString(const class FString& SessionTypeString, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByTypeStringAndMatchExist(const class FString& SessionTypeString, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetRecentPlayer(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void JoinSession(const class FString& SessionId, const class FString& Password, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RegisterPlayer(const class FString& SessionId, const class FString& PlayerToAdd, bool AsSpectator, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RemoveGameSession(const class FString& SessionId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UnregisterPlayer(const class FString& SessionId, const class FString& PlayerToRemove, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGameSession(const class FString& SessionId, int32 MaxPlayer, int32 CurrentPlayerCount, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGameSessionByStruct(const class FString& SessionId, const struct FAccelByteModelsSessionBrowserUpdateRequest& UpdateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerSessionBrowser">();
	}
	static class UABServerSessionBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerSessionBrowser>();
	}
};
static_assert(alignof(UABServerSessionBrowser) == 0x000008, "Wrong alignment on UABServerSessionBrowser");
static_assert(sizeof(UABServerSessionBrowser) == 0x000040, "Wrong size on UABServerSessionBrowser");

// Class AccelByteUe4Sdk.ABServerStatistic
// 0x0010 (0x0040 - 0x0030)
class UABServerStatistic final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkFetchStatItemsValue(const class FString& StatCode, const TArray<class FString>& UserIds, TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void CreateUserStatItems(const class FString& UserId, const TArray<class FString>& StatCodes, TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetAllUserStatItems(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy);
	void GetGlobalStatItemsByStatCode(const class FString& StatCode, TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserStatItems(const class FString& UserId, const TArray<class FString>& StatCodes, const TArray<class FString>& Tags, TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy);
	void IncrementManyUsersStatItems(const TArray<struct FAccelByteModelsBulkUserStatItemInc>& Data, TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void IncrementUserStatItems(const class FString& UserId, const TArray<struct FAccelByteModelsBulkStatItemInc>& Data, TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerStatistic">();
	}
	static class UABServerStatistic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerStatistic>();
	}
};
static_assert(alignof(UABServerStatistic) == 0x000008, "Wrong alignment on UABServerStatistic");
static_assert(sizeof(UABServerStatistic) == 0x000040, "Wrong size on UABServerStatistic");

// Class AccelByteUe4Sdk.ABServerUGC
// 0x0010 (0x0040 - 0x0030)
class UABServerUGC final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeleteContentByShareCode(const class FString& UserId, const class FString& ChannelId, const class FString& ShareCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ModifyContentByShareCode(const class FString& UserId, const class FString& ChannelId, const class FString& ShareCode, const struct FAccelByteModelsUGCUpdateRequest& ModifyRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void SearchContents(const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void SearchContentsSpecificToChannel(const class FString& ChannelId, const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerUGC">();
	}
	static class UABServerUGC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerUGC>();
	}
};
static_assert(alignof(UABServerUGC) == 0x000008, "Wrong alignment on UABServerUGC");
static_assert(sizeof(UABServerUGC) == 0x000040, "Wrong size on UABServerUGC");

// Class AccelByteUe4Sdk.ABSessionAttribute
// 0x0010 (0x0040 - 0x0030)
class UABSessionAttribute final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetAllSessionAttribute(TDelegate<void(const struct FAccelByteModelsGetAllSessionAttributesResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	class FString GetSessionAttribute(const struct FGetSessionAttributeRequest& Request, TDelegate<void(const struct FAccelByteModelsGetSessionAttributesResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	class FString SetSessionAttribute(const struct FSetSessionAttributeRequest& Request, TDelegate<void(const struct FAccelByteModelsSetSessionAttributesResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABSessionAttribute">();
	}
	static class UABSessionAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABSessionAttribute>();
	}
};
static_assert(alignof(UABSessionAttribute) == 0x000008, "Wrong alignment on UABSessionAttribute");
static_assert(sizeof(UABSessionAttribute) == 0x000040, "Wrong size on UABSessionAttribute");

// Class AccelByteUe4Sdk.ABSessionBrowser
// 0x0010 (0x0040 - 0x0030)
class UABSessionBrowser final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateGameSessionPrivate(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionPublic(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionTypeSpecificByStruct(const struct FAccelByteModelsSessionBrowserCreateRequest& CreateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionTypeSpecifiedByEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateGameSessionTypeSpecifiedByString(const class FString& SessionTypeString, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGameSession(const class FString& SessionId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetGameSessionsByTypeEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByTypeEnumAndMatchExist(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByTypeString(const class FString& SessionTypeString, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByTypeStringAndMatchExist(const class FString& SessionTypeString, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void GetGameSessionsByUserIds(const TArray<class FString>& UserIds, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetByUserIdsResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetRecentPlayer(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit);
	void JoinSession(const class FString& SessionId, const class FString& Password, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RegisterPlayer(const class FString& SessionId, const class FString& PlayerToAdd, bool AsSpectator, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void RemoveGameSession(const class FString& SessionId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UnregisterPlayer(const class FString& SessionId, const class FString& PlayerToRemove, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGameSession(const class FString& SessionId, int32 MaxPlayer, int32 CurrentPlayerCount, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGameSessionByStruct(const class FString& SessionId, const struct FAccelByteModelsSessionBrowserUpdateRequest& UpdateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGameSettings(const class FString& SessionId, const TMap<class FString, class FString>& Settings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateGameSettingsByJsonObject(const class FString& SessionId, const struct FJsonObjectWrapper& Settings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABSessionBrowser">();
	}
	static class UABSessionBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABSessionBrowser>();
	}
};
static_assert(alignof(UABSessionBrowser) == 0x000008, "Wrong alignment on UABSessionBrowser");
static_assert(sizeof(UABSessionBrowser) == 0x000040, "Wrong size on UABSessionBrowser");

// Class AccelByteUe4Sdk.ABSignaling
// 0x0010 (0x0040 - 0x0030)
class UABSignaling final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString SendSignalingMessage(const struct FSendSignalingMessageRequest& Request);
	void SetSignalingP2PNotif(TDelegate<void(const class FString& UserID, const class FString& Message)> OnNotif);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABSignaling">();
	}
	static class UABSignaling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABSignaling>();
	}
};
static_assert(alignof(UABSignaling) == 0x000008, "Wrong alignment on UABSignaling");
static_assert(sizeof(UABSignaling) == 0x000040, "Wrong size on UABSignaling");

// Class AccelByteUe4Sdk.ABStatistic
// 0x0010 (0x0040 - 0x0030)
class UABStatistic final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkFetchStatItemsValue(const class FString& StatCode, const TArray<class FString>& UserIds, const TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateUserStatItems(const TArray<class FString>& StatCodes, const TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetAllUserStatItems(const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy);
	void GetGlobalStatItemsByStatCode(const class FString& StatCode, const TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetUserStatItems(const TArray<class FString>& StatCodes, const TArray<class FString>& Tags, const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy);
	void IncrementUserStatItems(const TArray<struct FAccelByteModelsBulkStatItemInc>& Data, const TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABStatistic">();
	}
	static class UABStatistic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABStatistic>();
	}
};
static_assert(alignof(UABStatistic) == 0x000008, "Wrong alignment on UABStatistic");
static_assert(sizeof(UABStatistic) == 0x000040, "Wrong size on UABStatistic");

// Class AccelByteUe4Sdk.ABUGC
// 0x0010 (0x0040 - 0x0030)
class UABUGC final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddDownloadContentCountV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCAddDownloadContentCountResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetContentByShareCode(const TArray<class FString>& ShareCodes, const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponse>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void BulkGetContentByShareCodeV2(const TArray<class FString>& ShareCodes, const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateChannel(const class FString& ChannelName, const TDelegate<void(const struct FAccelByteModelsUGCChannelResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateContent(const class FString& ChannelId, const class FString& Name_0, const class FString& Type, const class FString& SubType, const TArray<class FString>& Tags, const TArray<uint8>& Preview, const class FString& FileExtension, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const class FString& ContentType);
	void CreateContentByStruct(const class FString& ChannelId, const struct FAccelByteModelsUGCRequest& UGCRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void CreateContentV2(const class FString& ChannelId, const struct FAccelByteModelsCreateUGCRequestV2& CreateRequest, const TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteChannel(const class FString& ChannelId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteContent(const class FString& ChannelId, const class FString& ContentId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteContentByShareCode(const class FString& ChannelId, const class FString& ShareCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteContentScreenshotV2(const class FString& ContentId, const class FString& ScreenshotId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void DeleteContentV2(const class FString& ChannelId, const class FString& ContentId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GenerateUploadContentURLV2(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUploadContentURLRequestV2& UploadRequest, const TDelegate<void(const struct FAccelByteModelsUGCUploadContentURLResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetChannels(const TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, const class FString& ChannelName);
	void GetChannelsByUserId(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void GetContentBulkByIdsV2(const TArray<class FString>& ContentIds, const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetContentByContentId(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetContentByContentIdV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetContentByShareCode(const class FString& ShareCode, const TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetContentByShareCodeV2(const class FString& ShareCode, const TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetContentPreviewAsIntArray(const class FString& ContentId, const TDelegate<void(const TArray<uint8>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetContentPreviewAsStruct(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCPreview& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void GetListContentDownloaderV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const class FString& UserId, int32 Limit, int32 Offset, EAccelByteUGCContentUtilitiesSortByV2 SortBy);
	void GetListContentLikerV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentLikerResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void GetListFollowers(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCGetListFollowersPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void GetTags(const TDelegate<void(const struct FAccelByteModelsUGCTagsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void GetTypes(const TDelegate<void(const struct FAccelByteModelsUGCTypesPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void GetUserContentsV2(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void ModifyContent(const class FString& ChannelId, const class FString& ContentId, const class FString& Name_0, const class FString& Type, const class FString& SubType, const TArray<class FString>& Tags, const TArray<uint8>& Preview, const class FString& FileExtension, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const class FString& ContentType);
	void ModifyContentByShareCode(const class FString& ChannelId, const class FString& ShareCode, const struct FAccelByteModelsUGCUpdateRequest& ModifyRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ModifyContentByStruct(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCRequest& UGCRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ModifyContentByUpdateStruct(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCUpdateRequest& UGCRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ModifyContentShareCode(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCModifyContentShareCodeRequest& ModifyContentShareCodeRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ModifyContentShareCodeV2(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCModifyContentShareCodeRequest& ModifyContentShareCodeRequest, const TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void ModifyContentV2(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsModifyUGCRequestV2& ModifyRequest, const TDelegate<void(const struct FAccelByteModelsUGCModifyUGCResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void SearchAllContents(const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void SearchContents(const class FString& Name_0, const class FString& Creator, const class FString& Type, const class FString& Subtype, const TArray<class FString>& Tags, bool IsOfficial, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteUgcSortBy SortBy, EAccelByteUgcOrderBy OrderBy, int32 Limit, int32 Offset);
	void SearchContentsByChannelId(const class FString& ChannelId, const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset);
	void SearchContentsSpecificToChannel(const class FString& ChannelId, const class FString& Name_0, const class FString& Creator, const class FString& Type, const class FString& Subtype, const TArray<class FString>& Tags, bool IsOfficial, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteUgcSortBy SortBy, EAccelByteUgcOrderBy OrderBy, int32 Limit, int32 Offset);
	void SearchContentsSpecificToChannelV2(const class FString& ChannelId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteUGCContentSortByV2 SortBy);
	void SearchContentsV2(const struct FAccelByteModelsUGCFilterRequestV2& Filter, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteUGCContentSortByV2 SortBy);
	void UpdateContentFileLocationV2(const class FString& ChannelId, const class FString& ContentId, const class FString& FileExtension, const class FString& S3Key, const TDelegate<void(const struct FAccelByteModelsUGCUpdateContentFileLocationResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateContentScreenshotV2(const class FString& ContentId, const struct FAccelByteModelsUGCUpdateScreenshotsV2& ScreenshotsRequest, const TDelegate<void(const struct FAccelByteModelsUGCUpdateScreenshotsV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateFollowStatusToUser(const class FString& UserId, bool bFollowStatus, const TDelegate<void(const struct FAccelByteModelsUGCUpdateFollowStatusToUserResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateLikeStatusToContent(const class FString& ContentId, bool bLikeStatus, const TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UpdateLikeStatusToContentV2(const class FString& ContentId, bool bLikeStatus, const TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	void UploadContentScreenshotV2(const class FString& ContentId, const struct FAccelByteModelsUGCUploadScreenshotsRequestV2& ScreenshotsRequest, const TDelegate<void(const struct FAccelByteModelsUGCUpdateContentScreenshotResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABUGC">();
	}
	static class UABUGC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABUGC>();
	}
};
static_assert(alignof(UABUGC) == 0x000008, "Wrong alignment on UABUGC");
static_assert(sizeof(UABUGC) == 0x000040, "Wrong size on UABUGC");

// Class AccelByteUe4Sdk.ABUser
// 0x0010 (0x0040 - 0x0030)
class UABUser final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BulkGetUserByOtherPlatformUserIds(EAccelBytePlatformType PlatformType, const TArray<class FString>& OtherPlatformUserId, TDelegate<void(const struct FBulkPlatformUserIdResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void BulkGetUserInfo(const TArray<class FString>& UserIds, TDelegate<void(const struct FListBulkUserInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void ForcedLinkOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& PlatformUserId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)> OnError);
	void ForgetAllCredentials();
	void GetCountryFromIP(TDelegate<void(const struct FCountryInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetData(TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetPlatformLinks(TDelegate<void(const struct FPagedPlatformLinks& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserByOtherPlatformUserId(EAccelBytePlatformType PlatformType, const class FString& OtherPlatformUserId, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserByUserId(const class FString& UserId, TDelegate<void(const struct FSimpleUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetUserEligibleToPlay(TDelegate<void(bool Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LinkOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& Ticket, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)> OnError);
	void LoginByExchangeCodeForToken(const class FString& Code, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LoginWithDeviceId(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LoginWithLauncher(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LoginWithOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& PlatformToken, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, bool bCreateHeadless);
	void LoginWithOtherPlatformId(const class FString& PlatformId, const class FString& PlatformToken, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, bool bCreateHeadless);
	void LoginWithRefreshToken(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void LoginWithUsername(const class FString& Username, const class FString& Password, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Logout(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Register(const class FString& Username, const class FString& Password, const class FString& DisplayName, const class FString& Country, const class FString& DateOfBirth, TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Registerv2(const class FString& EmailAddress, const class FString& Username, const class FString& Password, const class FString& DisplayName, const class FString& Country, const class FString& DateOfBirth, TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Registerv3(const struct FRegisterRequestv3& RegisterRequest, TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void ResetPassword(const class FString& VerificationCode, const class FString& EmailAddress, const class FString& NewPassword, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SearchUsers(const class FString& Query, TDelegate<void(const struct FPagedPublicUsersInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SearchUsersByType(const class FString& Query, EAccelByteSearchType By, TDelegate<void(const struct FPagedPublicUsersInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SendResetPasswordCode(const class FString& EmailAddress, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SendUpdateEmailVerificationCode(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SendUpgradeVerificationCode(const class FString& EmailAddress, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void SendVerificationCode(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void TryRelogin(const class FString& PlatformUserID, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void UnlinkAllOtherPlatform(EAccelBytePlatformType PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError);
	void UnlinkAllOtherPlatformId(const class FString& PlatformId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError);
	void UnlinkOtherPlatform(EAccelBytePlatformType PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void UnlinkOtherPlatformId(const class FString& PlatformId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError);
	void UnlinkOtherPlatformWithCustomErrorHandler(EAccelBytePlatformType PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError);
	void UpdateEmail(const struct FUpdateEmailRequest& UpdateEmailRequest, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void UpdateUser(const struct FUserUpdateRequest& UpdateRequest, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Upgrade(const class FString& Username, const class FString& Password, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void UpgradeAndVerify(const class FString& Username, const class FString& Password, const class FString& VerificationCode, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Upgradev2(const class FString& EmailAddress, const class FString& Username, const class FString& Password, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void Verify(const class FString& VerificationCode, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABUser">();
	}
	static class UABUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABUser>();
	}
};
static_assert(alignof(UABUser) == 0x000008, "Wrong alignment on UABUser");
static_assert(sizeof(UABUser) == 0x000040, "Wrong size on UABUser");

// Class AccelByteUe4Sdk.ABUtilities
// 0x0000 (0x0030 - 0x0030)
class UABUtilities final : public UObject
{
public:
	static void AddOrReplaceJsonArrayValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, const TArray<class FString>& Value);
	static void AddOrReplaceJsonBoolValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, bool Value);
	static void AddOrReplaceJsonNumberValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, float Value);
	static void AddOrReplaceJsonStringValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, const class FString& Value);
	static class FString DateTimeToString(const struct FDateTime& DateTime);
	static class FString GetJsonObjectAsJsonString(const struct FJsonObjectWrapper& ObjectWrapper);
	static bool GetJsonValueAsArray(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, TArray<class FString>* OutArray);
	static bool GetJsonValueAsBool(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, bool* OutBool);
	static bool GetJsonValueAsNumber(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, float* OutNumber);
	static bool GetJsonValueAsString(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, class FString* OutString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABUtilities">();
	}
	static class UABUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABUtilities>();
	}
};
static_assert(alignof(UABUtilities) == 0x000008, "Wrong alignment on UABUtilities");
static_assert(sizeof(UABUtilities) == 0x000030, "Wrong size on UABUtilities");

// Class AccelByteUe4Sdk.ABWallet
// 0x0010 (0x0040 - 0x0030)
class UABWallet final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetWalletInfoByCurrencyCode(const class FString& CurrencyCode, TDelegate<void(const struct FAccelByteModelsWalletInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	void GetWalletInfoByCurrencyCodeV2(const class FString& CurrencyCode, TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABWallet">();
	}
	static class UABWallet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABWallet>();
	}
};
static_assert(alignof(UABWallet) == 0x000008, "Wrong alignment on UABWallet");
static_assert(sizeof(UABWallet) == 0x000040, "Wrong size on UABWallet");

// Class AccelByteUe4Sdk.AccelByteBlueprintsAchievement
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsAchievement final : public UBlueprintFunctionLibrary
{
public:
	static void ClaimGlobalAchievements(const class FString& AchievementCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetAchievement(const class FString& AchievementCode, const TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetTags(const class FString& Name_0, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	static void QueryAchievements(const class FString& Language, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, const class FString& TagQuery, bool bGlobal);
	static void QueryGlobalAchievementContributors(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	static void QueryGlobalAchievements(const class FString& AchievementCode, const EAccelByteGlobalAchievementStatus& AchievementStatus, const EAccelByteGlobalAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	static void QueryGlobalAchievementUserContributed(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit);
	static void QueryUserAchievements(const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, bool preferUnlocked, const class FString& TagQuery);
	static void UnlockAchievement(const class FString& AchievementCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsAchievement">();
	}
	static class UAccelByteBlueprintsAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsAchievement>();
	}
};
static_assert(alignof(UAccelByteBlueprintsAchievement) == 0x000008, "Wrong alignment on UAccelByteBlueprintsAchievement");
static_assert(sizeof(UAccelByteBlueprintsAchievement) == 0x000030, "Wrong size on UAccelByteBlueprintsAchievement");

// Class AccelByteUe4Sdk.ABCredentials
// 0x0010 (0x0040 - 0x0030)
class UABCredentials final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForgetAll();
	class FString GetAccessToken();
	struct FAccountUserData GetAccountUserData();
	struct FOauth2Token GetAuthToken();
	class FString GetLinkingToken();
	class FString GetNamespace();
	class FString GetPlatformUserId();
	class FString GetRefreshToken();
	class FString GetUserDisplayName();
	class FString GetUserEmailAddress();
	class FString GetUserId();
	bool IsComply();
	bool IsSessionValid();
	void PollRefreshToken(float CurrentTime);
	void ScheduleRefreshToken(float NextRefreshTime);
	void SetAccountUserData(const struct FAccountUserData& InAccountUserData);
	void SetAuthToken(const struct FOauth2Token& NewAuthToken, float CurrentTime);
	void SetClientCredentials(ESettingsEnvironment Environment);
	void SetErrorOAuth(const struct FErrorOAuthInfo& ErrorOAuthInfo);
	void SetUserEmailAddress(const class FString& EmailAddress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABCredentials">();
	}
	static class UABCredentials* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABCredentials>();
	}
};
static_assert(alignof(UABCredentials) == 0x000008, "Wrong alignment on UABCredentials");
static_assert(sizeof(UABCredentials) == 0x000040, "Wrong size on UABCredentials");

// Class AccelByteUe4Sdk.ABApiClient
// 0x00E8 (0x0118 - 0x0030)
class UABApiClient final : public UObject
{
public:
	class UABCredentials*                         Credentials;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABUser*                                User;                                              // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABLobby*                               Lobby;                                             // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABParty*                               Party;                                             // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABMatchmaking*                         Matchmaking;                                       // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABFriends*                             Friends;                                           // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABCatalog*                             Catalog;                                           // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABOrder*                               Order;                                             // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABEntitlement*                         Entitlement;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABCurrency*                            Currency;                                          // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABWallet*                              Wallet;                                            // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABFulfillment*                         Fulfillment;                                       // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABCloudSave*                           CloudSave;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABAgreement*                           Agreement;                                         // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABReward*                              Reward;                                            // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABSeasonPass*                          SeasonPass;                                        // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABStatistic*                           Statistic;                                         // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABLeaderboard*                         Leaderboard;                                       // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABAchievement*                         Achievement;                                       // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABSessionBrowser*                      SessionBrowser;                                    // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABUGC*                                 UGC;                                               // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABPresence*                            Presence;                                          // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABBlock*                               Block;                                             // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABMessage*                             Message;                                           // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABSessionAttribute*                    SessionAttribute;                                  // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABSignaling*                           Signaling;                                         // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABGroup*                               Group;                                             // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABApiClient">();
	}
	static class UABApiClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABApiClient>();
	}
};
static_assert(alignof(UABApiClient) == 0x000008, "Wrong alignment on UABApiClient");
static_assert(sizeof(UABApiClient) == 0x000118, "Wrong size on UABApiClient");
static_assert(offsetof(UABApiClient, Credentials) == 0x000030, "Member 'UABApiClient::Credentials' has a wrong offset!");
static_assert(offsetof(UABApiClient, User) == 0x000038, "Member 'UABApiClient::User' has a wrong offset!");
static_assert(offsetof(UABApiClient, Lobby) == 0x000040, "Member 'UABApiClient::Lobby' has a wrong offset!");
static_assert(offsetof(UABApiClient, Party) == 0x000048, "Member 'UABApiClient::Party' has a wrong offset!");
static_assert(offsetof(UABApiClient, Matchmaking) == 0x000050, "Member 'UABApiClient::Matchmaking' has a wrong offset!");
static_assert(offsetof(UABApiClient, Friends) == 0x000058, "Member 'UABApiClient::Friends' has a wrong offset!");
static_assert(offsetof(UABApiClient, Catalog) == 0x000060, "Member 'UABApiClient::Catalog' has a wrong offset!");
static_assert(offsetof(UABApiClient, Order) == 0x000068, "Member 'UABApiClient::Order' has a wrong offset!");
static_assert(offsetof(UABApiClient, Entitlement) == 0x000070, "Member 'UABApiClient::Entitlement' has a wrong offset!");
static_assert(offsetof(UABApiClient, Currency) == 0x000078, "Member 'UABApiClient::Currency' has a wrong offset!");
static_assert(offsetof(UABApiClient, Wallet) == 0x000080, "Member 'UABApiClient::Wallet' has a wrong offset!");
static_assert(offsetof(UABApiClient, Fulfillment) == 0x000088, "Member 'UABApiClient::Fulfillment' has a wrong offset!");
static_assert(offsetof(UABApiClient, CloudSave) == 0x000090, "Member 'UABApiClient::CloudSave' has a wrong offset!");
static_assert(offsetof(UABApiClient, Agreement) == 0x000098, "Member 'UABApiClient::Agreement' has a wrong offset!");
static_assert(offsetof(UABApiClient, Reward) == 0x0000A0, "Member 'UABApiClient::Reward' has a wrong offset!");
static_assert(offsetof(UABApiClient, SeasonPass) == 0x0000A8, "Member 'UABApiClient::SeasonPass' has a wrong offset!");
static_assert(offsetof(UABApiClient, Statistic) == 0x0000B0, "Member 'UABApiClient::Statistic' has a wrong offset!");
static_assert(offsetof(UABApiClient, Leaderboard) == 0x0000B8, "Member 'UABApiClient::Leaderboard' has a wrong offset!");
static_assert(offsetof(UABApiClient, Achievement) == 0x0000C0, "Member 'UABApiClient::Achievement' has a wrong offset!");
static_assert(offsetof(UABApiClient, SessionBrowser) == 0x0000C8, "Member 'UABApiClient::SessionBrowser' has a wrong offset!");
static_assert(offsetof(UABApiClient, UGC) == 0x0000D0, "Member 'UABApiClient::UGC' has a wrong offset!");
static_assert(offsetof(UABApiClient, Presence) == 0x0000D8, "Member 'UABApiClient::Presence' has a wrong offset!");
static_assert(offsetof(UABApiClient, Block) == 0x0000E0, "Member 'UABApiClient::Block' has a wrong offset!");
static_assert(offsetof(UABApiClient, Message) == 0x0000E8, "Member 'UABApiClient::Message' has a wrong offset!");
static_assert(offsetof(UABApiClient, SessionAttribute) == 0x0000F0, "Member 'UABApiClient::SessionAttribute' has a wrong offset!");
static_assert(offsetof(UABApiClient, Signaling) == 0x0000F8, "Member 'UABApiClient::Signaling' has a wrong offset!");
static_assert(offsetof(UABApiClient, Group) == 0x000100, "Member 'UABApiClient::Group' has a wrong offset!");

// Class AccelByteUe4Sdk.ABMultiRegistry
// 0x0000 (0x0030 - 0x0030)
class UABMultiRegistry final : public UBlueprintFunctionLibrary
{
public:
	static class UABApiClient* GetApiClient(const class FString& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABMultiRegistry">();
	}
	static class UABMultiRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABMultiRegistry>();
	}
};
static_assert(alignof(UABMultiRegistry) == 0x000008, "Wrong alignment on UABMultiRegistry");
static_assert(sizeof(UABMultiRegistry) == 0x000030, "Wrong size on UABMultiRegistry");

// Class AccelByteUe4Sdk.ABLobby
// 0x0010 (0x0040 - 0x0030)
class UABLobby final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Connect();
	void Disconnect();
	bool IsConnected();
	class FString RefreshToken(const struct FRefreshTokenRequest& Request, TDelegate<void(const struct FAccelByteModelsRefreshTokenResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError);
	class FString RequestDS(const struct FRequestDSModel& Request);
	void SetOnConnected(TDelegate<void()> OnConnected);
	void SetOnConnectFailed(const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnConnectError);
	void SetOnConnectionClosed(TDelegate<void(int32 StatusCode, const class FString& Reason, bool bWasClean)> OnConnectionClosed);
	void SetOnDisconnect(const TDelegate<void(const struct FAccelByteModelsDisconnectNotif& Notif)>& OnDisconnected);
	void SetOnErrorNotification(TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnErrorNotification);
	void SetRetryParameters(const struct FSetRetryParametersRequest& Request);
	void UnbindEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABLobby">();
	}
	static class UABLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABLobby>();
	}
};
static_assert(alignof(UABLobby) == 0x000008, "Wrong alignment on UABLobby");
static_assert(sizeof(UABLobby) == 0x000040, "Wrong size on UABLobby");

// Class AccelByteUe4Sdk.ABServerCredentials
// 0x0010 (0x0040 - 0x0030)
class UABServerCredentials final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetAccessToken();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABServerCredentials">();
	}
	static class UABServerCredentials* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABServerCredentials>();
	}
};
static_assert(alignof(UABServerCredentials) == 0x000008, "Wrong alignment on UABServerCredentials");
static_assert(sizeof(UABServerCredentials) == 0x000040, "Wrong size on UABServerCredentials");

// Class AccelByteUe4Sdk.ServerApiClient
// 0x0050 (0x0080 - 0x0030)
class UServerApiClient final : public UObject
{
public:
	class UABServerCredentials*                   Credentials;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerOauth2*                        ServerOauth2;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerDSM*                           ServerDSM;                                         // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerLobby*                         ServerLobby;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerMatchmaking*                   ServerMatchmaking;                                 // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerSessionBrowser*                ServerSessionBrowser;                              // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerAchievement*                   ServerAchievement;                                 // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABServerStatistic*                     ServerStatistic;                                   // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerApiClient">();
	}
	static class UServerApiClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerApiClient>();
	}
};
static_assert(alignof(UServerApiClient) == 0x000008, "Wrong alignment on UServerApiClient");
static_assert(sizeof(UServerApiClient) == 0x000080, "Wrong size on UServerApiClient");
static_assert(offsetof(UServerApiClient, Credentials) == 0x000030, "Member 'UServerApiClient::Credentials' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerOauth2) == 0x000038, "Member 'UServerApiClient::ServerOauth2' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerDSM) == 0x000040, "Member 'UServerApiClient::ServerDSM' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerLobby) == 0x000048, "Member 'UServerApiClient::ServerLobby' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerMatchmaking) == 0x000050, "Member 'UServerApiClient::ServerMatchmaking' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerSessionBrowser) == 0x000058, "Member 'UServerApiClient::ServerSessionBrowser' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerAchievement) == 0x000060, "Member 'UServerApiClient::ServerAchievement' has a wrong offset!");
static_assert(offsetof(UServerApiClient, ServerStatistic) == 0x000068, "Member 'UServerApiClient::ServerStatistic' has a wrong offset!");

// Class AccelByteUe4Sdk.ServerMultiRegistry
// 0x0000 (0x0030 - 0x0030)
class UServerMultiRegistry final : public UBlueprintFunctionLibrary
{
public:
	static class UServerApiClient* GetServerApiClient(const class FString& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerMultiRegistry">();
	}
	static class UServerMultiRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerMultiRegistry>();
	}
};
static_assert(alignof(UServerMultiRegistry) == 0x000008, "Wrong alignment on UServerMultiRegistry");
static_assert(sizeof(UServerMultiRegistry) == 0x000030, "Wrong size on UServerMultiRegistry");

// Class AccelByteUe4Sdk.AccelByteBlueprintsCategory
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsCategory final : public UBlueprintFunctionLibrary
{
public:
	static void GetCategory(const class FString& ParentPath, const class FString& Language, const TDelegate<void(const struct FAccelByteModelsCategoryInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetChildCategories(const class FString& Language, const class FString& CategoryPath, const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetDescendantCategories(const class FString& Language, const class FString& CategoryPath, const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetRootCategories(const class FString& Language, const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsCategory">();
	}
	static class UAccelByteBlueprintsCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsCategory>();
	}
};
static_assert(alignof(UAccelByteBlueprintsCategory) == 0x000008, "Wrong alignment on UAccelByteBlueprintsCategory");
static_assert(sizeof(UAccelByteBlueprintsCategory) == 0x000030, "Wrong size on UAccelByteBlueprintsCategory");

// Class AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsCloudStorage final : public UBlueprintFunctionLibrary
{
public:
	static void CreateSlot(const TArray<uint8>& Data, const class FString& FileName, const TArray<class FString>& Tags, const class FString& Label, const class FString& CustomAttribute, const TDelegate<void(const struct FAccelByteModelsSlot& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void DeleteSlot(const class FString& SlotId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetAllSlots(const TDelegate<void(const TArray<struct FAccelByteModelsSlot>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetSlot(const class FString& SlotId, const TDelegate<void(const TArray<uint8>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateSlot(const class FString& SlotId, const class FString& FileName, const TArray<uint8>& Data, const TArray<class FString>& Tags, const class FString& Label, const class FString& CustomAttribute, const TDelegate<void(const struct FAccelByteModelsSlot& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateSlotMetadata(const class FString& SlotId, const class FString& FileName, const TArray<class FString>& Tags, const class FString& Label, const class FString& CustomAttribute, const TDelegate<void(const struct FAccelByteModelsSlot& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsCloudStorage">();
	}
	static class UAccelByteBlueprintsCloudStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsCloudStorage>();
	}
};
static_assert(alignof(UAccelByteBlueprintsCloudStorage) == 0x000008, "Wrong alignment on UAccelByteBlueprintsCloudStorage");
static_assert(sizeof(UAccelByteBlueprintsCloudStorage) == 0x000030, "Wrong size on UAccelByteBlueprintsCloudStorage");

// Class AccelByteUe4Sdk.AccelByteBlueprintsCredentials
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsCredentials final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetOAuthClientId();
	static class FString GetOAuthClientSecret();
	static class FString GetUserDisplayName();
	static class FString GetUserEmailAddress();
	static class FString GetUserId();
	static class FString GetUserName();
	static class FString GetUserNamespace();
	static class FString GetUserSessionId();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsCredentials">();
	}
	static class UAccelByteBlueprintsCredentials* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsCredentials>();
	}
};
static_assert(alignof(UAccelByteBlueprintsCredentials) == 0x000008, "Wrong alignment on UAccelByteBlueprintsCredentials");
static_assert(sizeof(UAccelByteBlueprintsCredentials) == 0x000030, "Wrong size on UAccelByteBlueprintsCredentials");

// Class AccelByteUe4Sdk.AccelByteBlueprintsCurrency
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsCurrency final : public UBlueprintFunctionLibrary
{
public:
	static void GetCurrencyList(const class FString& Namespace, const TDelegate<void(const TArray<struct FAccelByteModelsCurrencyList>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteCurrencyType CurrencyType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsCurrency">();
	}
	static class UAccelByteBlueprintsCurrency* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsCurrency>();
	}
};
static_assert(alignof(UAccelByteBlueprintsCurrency) == 0x000008, "Wrong alignment on UAccelByteBlueprintsCurrency");
static_assert(sizeof(UAccelByteBlueprintsCurrency) == 0x000030, "Wrong size on UAccelByteBlueprintsCurrency");

// Class AccelByteUe4Sdk.AccelByteBlueprintsEntitlement
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsEntitlement final : public UBlueprintFunctionLibrary
{
public:
	static void QueryUserEntitlements(const class FString& EntitlementName, const class FString& ItemId, int32 Page, int32 Size, const TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteEntitlementClass EntitlementClass, EAccelByteAppType AppType);
	static void QueryUserEntitlementsMany(const class FString& EntitlementName, const TArray<class FString>& ItemIds, int32 Page, int32 Size, const TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteEntitlementClass EntitlementClass, EAccelByteAppType AppType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsEntitlement">();
	}
	static class UAccelByteBlueprintsEntitlement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsEntitlement>();
	}
};
static_assert(alignof(UAccelByteBlueprintsEntitlement) == 0x000008, "Wrong alignment on UAccelByteBlueprintsEntitlement");
static_assert(sizeof(UAccelByteBlueprintsEntitlement) == 0x000030, "Wrong size on UAccelByteBlueprintsEntitlement");

// Class AccelByteUe4Sdk.AccelByteBlueprintsGameProfile
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsGameProfile final : public UBlueprintFunctionLibrary
{
public:
	static void BatchGetPublicGameProfiles(const TArray<class FString>& UserIds, const TDelegate<void(const TArray<struct FAccelByteModelsPublicGameProfile>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void CreateGameProfile(const struct FAccelByteModelsGameProfileRequest& GameProfileRequest, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void DeleteGameProfile(const class FString& ProfileId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetAllGameProfiles(const TDelegate<void(const TArray<struct FAccelByteModelsGameProfile>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetGameProfile(const class FString& ProfileId, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetGameProfileAttribute(const class FString& ProfileId, const class FString& AttributeName, const TDelegate<void(const struct FAccelByteModelsGameProfileAttribute& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateGameProfile(const class FString& ProfileId, const struct FAccelByteModelsGameProfileRequest& GameProfileRequest, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateGameProfileAttribute(const class FString& ProfileId, const struct FAccelByteModelsGameProfileAttribute& Attribute, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsGameProfile">();
	}
	static class UAccelByteBlueprintsGameProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsGameProfile>();
	}
};
static_assert(alignof(UAccelByteBlueprintsGameProfile) == 0x000008, "Wrong alignment on UAccelByteBlueprintsGameProfile");
static_assert(sizeof(UAccelByteBlueprintsGameProfile) == 0x000030, "Wrong size on UAccelByteBlueprintsGameProfile");

// Class AccelByteUe4Sdk.AccelByteBlueprintsGroup
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsGroup final : public UBlueprintFunctionLibrary
{
public:
	static void CreateGroup(const struct FAccelByteModelsCreateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void DeleteGroup(const class FString& GroupId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void DeleteGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetGroup(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetGroupList(const struct FAccelByteModelsGetGroupListRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateGroup(const class FString& GroupId, const bool bCompletelyReplace, const struct FAccelByteModelsGroupUpdatable& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateGroupCustomAttributes(const class FString& GroupId, const struct FAccelByteModelsUpdateGroupCustomAttributesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateGroupCustomRule(const class FString& GroupId, const struct FAccelByteModelsUpdateCustomRulesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsGroup">();
	}
	static class UAccelByteBlueprintsGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsGroup>();
	}
};
static_assert(alignof(UAccelByteBlueprintsGroup) == 0x000008, "Wrong alignment on UAccelByteBlueprintsGroup");
static_assert(sizeof(UAccelByteBlueprintsGroup) == 0x000030, "Wrong size on UAccelByteBlueprintsGroup");

// Class AccelByteUe4Sdk.AccelByteBlueprintsItem
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsItem final : public UBlueprintFunctionLibrary
{
public:
	static void GetItemById(const class FString& ItemId, const class FString& Region, const class FString& Language, const TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetItemsByCriteria(const struct FAccelByteModelsItemCriteria& ItemCriteria, const int32& Offset, const int32& Limit, const TArray<EAccelByteItemListSortBy>& SortBy, const TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void SearchItem(const class FString& Language, const class FString& Keyword, int32 Page, int32 Size, const class FString& Region, const TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

	void GetItemByAppId(const class FString& AppId, const class FString& Region, const class FString& Language, const TDelegate<void(const struct FAccelByteModelsItemInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsItem">();
	}
	static class UAccelByteBlueprintsItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsItem>();
	}
};
static_assert(alignof(UAccelByteBlueprintsItem) == 0x000008, "Wrong alignment on UAccelByteBlueprintsItem");
static_assert(sizeof(UAccelByteBlueprintsItem) == 0x000030, "Wrong size on UAccelByteBlueprintsItem");

// Class AccelByteUe4Sdk.AccelByteBlueprintsLobby
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsLobby final : public UBlueprintFunctionLibrary
{
public:
	static void AcceptFriend(const class FString& UserId);
	static void BindEvent(const TDelegate<void()>& OnConnectSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnConnectError, const TDelegate<void(int32 StatusCode, const class FString& Reason, bool WasClean)>& OnConnectionClosed, const TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Result)>& OnLeavePartyNotice, const TDelegate<void(const struct FAccelByteModelsInvitationNotice& Result)>& OnInvitePartyInvitationNotice, const TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Result)>& OnInvitePartyGetInvitedNotice, const TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Result)>& OnInvitePartyJoinNotice, const TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Result)>& OnInvitePartyKickedNotice, const TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)>& OnPartyConnectNotice, const TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)>& OnPartyDisconnectNotice, const TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Result)>& OnPrivateMessageNotice, const TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Result)>& OnPartyMessageNotice, const TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Result)>& OnUserPresenceNotice, const TDelegate<void(const struct FAccelByteModelsNotificationMessage& Result)>& OnNotificationMessage, const TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)>& OnMatchmakingNotice, const TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)>& OnReadyConsentNotice, const TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)>& OnRematchmakingNotice, const TDelegate<void(const struct FAccelByteModelsDsNotice& Result)>& OnDsNotice, const TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Result)>& OnAcceptFriendsNotifDelegate, const TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Result)>& OnRequestFriendsNotifDelegate, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnParsingError);
	static void CancelFriendRequest(const class FString& UserId);
	static void Connect();
	static void Disconnect();
	static void GetAllAsyncNotification();
	static void GetFriendshipStatus(const class FString& UserId);
	static bool IsConnected();
	static void ListIncomingFriends();
	static void ListOutgoingFriends();
	static void LoadFriendsList();
	static void RejectFriend(const class FString& UserId);
	static void RequestFriend(const class FString& UserId);
	static void SendAcceptInvitationRequest(const class FString& PartyId, const class FString& InvitationToken);
	static void SendCancelMatchmaking(const class FString& GameMode);
	static void SendCreatePartyRequest();
	static void SendGetOnlineUsersRequest();
	static void SendInfoPartyRequest();
	static void SendInviteToPartyRequest(const class FString& UserId);
	static void SendKickPartyMemberRequest(const class FString& UserId);
	static void SendLeavePartyRequest();
	static void SendPartyMessage(const class FString& Message);
	static void SendPing();
	static void SendPrivateMessage(const class FString& UserId, const class FString& Message);
	static void SendReadyConsentRequest(const class FString& MatchId);
	static void SendRejectConsentRequest(const class FString& MatchId);
	static void SendStartMatchmaking(const class FString& GameMode);
	static void SetAcceptFriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Result)> OnAcceptFriendsResponse);
	static void SetCancelFriendRequestResponseDelegate(TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Result)> OnCancelFriendsResponse);
	static void SetCancelMatchmakingResponseDelegate(TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)> OnMatchmakingCancel);
	static void SetCreatePartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Result)> OnCreatePartyResponse);
	static void SetDsNotifDelegate(TDelegate<void(const struct FAccelByteModelsDsNotice& Result)> OnDsNotice);
	static void SetGetAllUserPresenceResponseDelegate(TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Result)> OnGetAllUserPresenceResponse);
	static void SetGetFriendshipStatusResponseDelegate(TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Result)> OnGetFriendshipStatusResponse);
	static void SetInfoPartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Result)> OnInfoPartyResponse);
	static void SetInvitePartyJoinResponseDelegate(TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Result)> OnInvitePartyJoinResponse);
	static void SetInvitePartyKickMemberResponseDelegate(TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Result)> OnInvitePartyKickMemberResponse);
	static void SetInvitePartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Result)> OnInvitePartyResponse);
	static void SetLeavePartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Result)> OnLeavePartyResponse);
	static void SetListIncomingFriendsResponseDelegate(TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Result)> OnListIncomingFriendsResponse);
	static void SetListOutgoingFriendsResponseDelegate(TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Result)> OnListOutgoingFriendsResponse);
	static void SetLoadFriendsListResponseDelegate(TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Result)> OnLoadFriendListResponse);
	static void SetMatchmakingNotifDelegate(TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)> OnMatchmakingNotice);
	static void SetPartyMessageResponseDelegate(TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Result)> OnPartyMessageResponse);
	static void SetPresenceStatus(EAvailability State, const class FString& Activity);
	static void SetPrivateMessageResponseDelegate(TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Result)> OnPrivateMessageResponse);
	static void SetReadyConsentNotifDelegate(TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)> OnReadyConsentNotice);
	static void SetReadyConsentResponseDelegate(TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Result)> OnReadyConsentResponse);
	static void SetRejectConsentNotifDelegate(TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Result)> OnRejectConsentNotice);
	static void SetRejectConsentResponseDelegate(TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Result)> OnRejectConsentResponse);
	static void SetRejectFriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Result)> OnRejectFriendsResponse);
	static void SetRematchmakingNotifDelegate(TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)> OnRematchmakingNotice);
	static void SetRequestFriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Result)> OnRequestFriendsResponseDelegate);
	static void SetStartMatchmakingResponseDelegate(TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)> OnMatchmakingStart);
	static void SetUnfriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Result)> OnUnfriendResponse);
	static void SetUserPresenceResponseDelegate(TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Result)> OnUserPresenceResponse);
	static void UnbindDelegates();
	static void Unfriend(const class FString& UserId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsLobby">();
	}
	static class UAccelByteBlueprintsLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsLobby>();
	}
};
static_assert(alignof(UAccelByteBlueprintsLobby) == 0x000008, "Wrong alignment on UAccelByteBlueprintsLobby");
static_assert(sizeof(UAccelByteBlueprintsLobby) == 0x000030, "Wrong size on UAccelByteBlueprintsLobby");

// Class AccelByteUe4Sdk.AccelByteBlueprintsOrder
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsOrder final : public UBlueprintFunctionLibrary
{
public:
	static void CancelOrder(const class FString& OrderNo, const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void CreateNewOrder(const struct FAccelByteModelsOrderCreate& OrderCreate, const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetUserOrder(const class FString& OrderNo, const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetUserOrderHistory(const class FString& OrderNo, const TDelegate<void(const TArray<struct FAccelByteModelsOrderHistoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetUserOrders(int32 Page, int32 Size, const TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsOrder">();
	}
	static class UAccelByteBlueprintsOrder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsOrder>();
	}
};
static_assert(alignof(UAccelByteBlueprintsOrder) == 0x000008, "Wrong alignment on UAccelByteBlueprintsOrder");
static_assert(sizeof(UAccelByteBlueprintsOrder) == 0x000030, "Wrong size on UAccelByteBlueprintsOrder");

// Class AccelByteUe4Sdk.AccelByteBlueprintsReward
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsReward final : public UBlueprintFunctionLibrary
{
public:
	static void GetRewardByRewardCode(const class FString& RewardCode, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetRewardByRewardId(const class FString& RewardId, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void QueryRewards(const class FString& EventTopic, int32 Offset, int32 Limit, const EAccelByteRewardListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsQueryReward& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsReward">();
	}
	static class UAccelByteBlueprintsReward* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsReward>();
	}
};
static_assert(alignof(UAccelByteBlueprintsReward) == 0x000008, "Wrong alignment on UAccelByteBlueprintsReward");
static_assert(sizeof(UAccelByteBlueprintsReward) == 0x000030, "Wrong size on UAccelByteBlueprintsReward");

// Class AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsServerCredentials final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetClientAccessToken();
	static class FString GetClientNamespace();
	static class FString GetMatchId();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsServerCredentials">();
	}
	static class UAccelByteBlueprintsServerCredentials* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsServerCredentials>();
	}
};
static_assert(alignof(UAccelByteBlueprintsServerCredentials) == 0x000008, "Wrong alignment on UAccelByteBlueprintsServerCredentials");
static_assert(sizeof(UAccelByteBlueprintsServerCredentials) == 0x000030, "Wrong size on UAccelByteBlueprintsServerCredentials");

// Class AccelByteUe4Sdk.AccelByteServerSettings
// 0x0198 (0x01C8 - 0x0030)
class UAccelByteServerSettings : public UObject
{
public:
	bool                                          ForceEnableSettings;                               // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientId;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublisherNamespace;                                // 0x0068(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURI;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseUrl;                                           // 0x0088(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IamServerUrl;                                      // 0x0098(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DSMControllerServerUrl;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticServerUrl;                                // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformServerUrl;                                 // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QosManagerServerUrl;                               // 0x00D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameTelemetryServerUrl;                            // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementServerUrl;                              // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCServerUrl;                                      // 0x0108(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingServerUrl;                              // 0x0118(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyServerUrl;                                    // 0x0128(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CloudSaveServerUrl;                                // 0x0138(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonPassServerUrl;                               // 0x0148(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionBrowserServerUrl;                           // 0x0158(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionServerUrl;                                  // 0x0168(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatServerUrl;                                     // 0x0178(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QosPingTimeout;                                    // 0x0188(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DSHubServerUrl;                                    // 0x0190(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingV2ServerUrl;                            // 0x01A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AMSServerWatchdogUrl;                              // 0x01B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AMSHeartbeatInterval;                              // 0x01C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendPredefinedEvent;                              // 0x01C4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteServerSettings">();
	}
	static class UAccelByteServerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteServerSettings>();
	}
};
static_assert(alignof(UAccelByteServerSettings) == 0x000008, "Wrong alignment on UAccelByteServerSettings");
static_assert(sizeof(UAccelByteServerSettings) == 0x0001C8, "Wrong size on UAccelByteServerSettings");
static_assert(offsetof(UAccelByteServerSettings, ForceEnableSettings) == 0x000030, "Member 'UAccelByteServerSettings::ForceEnableSettings' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, ClientId) == 0x000038, "Member 'UAccelByteServerSettings::ClientId' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, ClientSecret) == 0x000048, "Member 'UAccelByteServerSettings::ClientSecret' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, Namespace) == 0x000058, "Member 'UAccelByteServerSettings::Namespace' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, PublisherNamespace) == 0x000068, "Member 'UAccelByteServerSettings::PublisherNamespace' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, RedirectURI) == 0x000078, "Member 'UAccelByteServerSettings::RedirectURI' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, BaseUrl) == 0x000088, "Member 'UAccelByteServerSettings::BaseUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, IamServerUrl) == 0x000098, "Member 'UAccelByteServerSettings::IamServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, DSMControllerServerUrl) == 0x0000A8, "Member 'UAccelByteServerSettings::DSMControllerServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, StatisticServerUrl) == 0x0000B8, "Member 'UAccelByteServerSettings::StatisticServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, PlatformServerUrl) == 0x0000C8, "Member 'UAccelByteServerSettings::PlatformServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, QosManagerServerUrl) == 0x0000D8, "Member 'UAccelByteServerSettings::QosManagerServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, GameTelemetryServerUrl) == 0x0000E8, "Member 'UAccelByteServerSettings::GameTelemetryServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, AchievementServerUrl) == 0x0000F8, "Member 'UAccelByteServerSettings::AchievementServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, UGCServerUrl) == 0x000108, "Member 'UAccelByteServerSettings::UGCServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, MatchmakingServerUrl) == 0x000118, "Member 'UAccelByteServerSettings::MatchmakingServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, LobbyServerUrl) == 0x000128, "Member 'UAccelByteServerSettings::LobbyServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, CloudSaveServerUrl) == 0x000138, "Member 'UAccelByteServerSettings::CloudSaveServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, SeasonPassServerUrl) == 0x000148, "Member 'UAccelByteServerSettings::SeasonPassServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, SessionBrowserServerUrl) == 0x000158, "Member 'UAccelByteServerSettings::SessionBrowserServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, SessionServerUrl) == 0x000168, "Member 'UAccelByteServerSettings::SessionServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, ChatServerUrl) == 0x000178, "Member 'UAccelByteServerSettings::ChatServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, QosPingTimeout) == 0x000188, "Member 'UAccelByteServerSettings::QosPingTimeout' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, DSHubServerUrl) == 0x000190, "Member 'UAccelByteServerSettings::DSHubServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, MatchmakingV2ServerUrl) == 0x0001A0, "Member 'UAccelByteServerSettings::MatchmakingV2ServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, AMSServerWatchdogUrl) == 0x0001B0, "Member 'UAccelByteServerSettings::AMSServerWatchdogUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, AMSHeartbeatInterval) == 0x0001C0, "Member 'UAccelByteServerSettings::AMSHeartbeatInterval' has a wrong offset!");
static_assert(offsetof(UAccelByteServerSettings, bSendPredefinedEvent) == 0x0001C4, "Member 'UAccelByteServerSettings::bSendPredefinedEvent' has a wrong offset!");

// Class AccelByteUe4Sdk.AccelByteServerSettingsDev
// 0x0000 (0x01C8 - 0x01C8)
class UAccelByteServerSettingsDev final : public UAccelByteServerSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteServerSettingsDev">();
	}
	static class UAccelByteServerSettingsDev* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteServerSettingsDev>();
	}
};
static_assert(alignof(UAccelByteServerSettingsDev) == 0x000008, "Wrong alignment on UAccelByteServerSettingsDev");
static_assert(sizeof(UAccelByteServerSettingsDev) == 0x0001C8, "Wrong size on UAccelByteServerSettingsDev");

// Class AccelByteUe4Sdk.AccelByteServerSettingsCert
// 0x0000 (0x01C8 - 0x01C8)
class UAccelByteServerSettingsCert final : public UAccelByteServerSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteServerSettingsCert">();
	}
	static class UAccelByteServerSettingsCert* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteServerSettingsCert>();
	}
};
static_assert(alignof(UAccelByteServerSettingsCert) == 0x000008, "Wrong alignment on UAccelByteServerSettingsCert");
static_assert(sizeof(UAccelByteServerSettingsCert) == 0x0001C8, "Wrong size on UAccelByteServerSettingsCert");

// Class AccelByteUe4Sdk.AccelByteServerSettingsProd
// 0x0000 (0x01C8 - 0x01C8)
class UAccelByteServerSettingsProd final : public UAccelByteServerSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteServerSettingsProd">();
	}
	static class UAccelByteServerSettingsProd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteServerSettingsProd>();
	}
};
static_assert(alignof(UAccelByteServerSettingsProd) == 0x000008, "Wrong alignment on UAccelByteServerSettingsProd");
static_assert(sizeof(UAccelByteServerSettingsProd) == 0x0001C8, "Wrong size on UAccelByteServerSettingsProd");

// Class AccelByteUe4Sdk.AccelByteBlueprintsServerSettings
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsServerSettings final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetAchievementServerUrl();
	static class FString GetAMSServerWatchdogUrl();
	static class FString GetChatServerUrl();
	static class FString GetClientId();
	static class FString GetClientSecret();
	static class FString GetCloudSaveServerUrl();
	static class FString GetDSHubServerUrl();
	static class FString GetDSMControllerServerUrl();
	static class FString GetGameTelemetryServerUrl();
	static class FString GetGDPRServerUrl();
	static class FString GetIamServerUrl();
	static class FString GetLobbyServerUrl();
	static class FString GetMatchmakingServerUrl();
	static class FString GetMatchmakingV2ServerUrl();
	static class FString GetNamespace();
	static class FString GetPlatformServerUrl();
	static class FString GetPublisherNamespace();
	static class FString GetQosManagerServerUrl();
	static float GetQosPingTimeout();
	static class FString GetSeasonPassServerUrl();
	static class FString GetSessionBrowserServerUrl();
	static class FString GetSessionServerUrl();
	static class FString GetStatisticServerUrl();
	static class FString GetUGCServerUrl();
	static bool IsSendPredefinedEvent();
	static void ResetSettings(const ESettingsEnvironment Environment);
	static void SetAchievementServerUrl(const class FString& AchievementServerUrl);
	static void SetAMSServerWatchdogUrl(const class FString& AMSServerUrl);
	static void SetChatServerUrl(const class FString& ChatServerUrl);
	static void SetClientId(const class FString& ClientId);
	static void SetClientSecret(const class FString& ClientSecret);
	static void SetCloudSaveServerUrl(const class FString& CloudServerUrl);
	static void SetDSHubServerUrl(const class FString& DSHubServerUrl);
	static void SetDSMControllerServerUrl(const class FString& DSMControllerServerUrl);
	static void SetGameTelemetryServerUrl(const class FString& GameTelemetryServerUrl);
	static void SetIamServerUrl(const class FString& IamServerUrl);
	static void SetLobbyServerUrl(const class FString& LobbyServerUrl);
	static void SetMatchmakingServerUrl(const class FString& MatchmakingServerurl);
	static void SetMatchmakingV2ServerUrl(const class FString& MatchmakingV2ServerUrl);
	static void SetNamespace(const class FString& Namespace);
	static void SetPlatformServerUrl(const class FString& PlatformServerUrl);
	static void SetPublisherNamespace(const class FString& PublisherNamespace);
	static void SetQosManagerServerUrl(const class FString& PlatformServerUrl);
	static void SetQosPingTimeout(const float& QosPingTimeout);
	static void SetSeasonPassServerUrl(const class FString& SessionPassServerUrl);
	static void SetSendPredefinedEvent(bool bEnabled);
	static void SetSessionBrowserServerUrl(const class FString& SessionBrowserServerUrl);
	static void SetSessionServerUrl(const class FString& SessionServerUrl);
	static void SetStatisticServerUrl(const class FString& StatisticServerUrl);
	static void SetUGCServerUrl(const class FString& UGCServerUrl);

	void SetGDPRServerUrl(const class FString& GDPRServerUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsServerSettings">();
	}
	static class UAccelByteBlueprintsServerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsServerSettings>();
	}
};
static_assert(alignof(UAccelByteBlueprintsServerSettings) == 0x000008, "Wrong alignment on UAccelByteBlueprintsServerSettings");
static_assert(sizeof(UAccelByteBlueprintsServerSettings) == 0x000030, "Wrong size on UAccelByteBlueprintsServerSettings");

// Class AccelByteUe4Sdk.AccelByteSettings
// 0x0200 (0x0230 - 0x0030)
class UAccelByteSettings : public UObject
{
public:
	class FString                                 ClientId;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublisherNamespace;                                // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURI;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseUrl;                                           // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IamServerUrl;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformServerUrl;                                 // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyServerUrl;                                    // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CloudStorageServerUrl;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BasicServerUrl;                                    // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameProfileServerUrl;                              // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupServerUrl;                                    // 0x00F0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticServerUrl;                                // 0x0100(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QosManagerServerUrl;                               // 0x0110(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatServerUrl;                                     // 0x0120(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardServerUrl;                              // 0x0130(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CloudSaveServerUrl;                                // 0x0140(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameTelemetryServerUrl;                            // 0x0150(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementServerUrl;                                // 0x0160(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementServerUrl;                              // 0x0170(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionBrowserServerUrl;                           // 0x0180(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TurnManagerServerUrl;                              // 0x0190(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCServerUrl;                                      // 0x01A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportingServerUrl;                                // 0x01B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionServerUrl;                                  // 0x01C0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingV2ServerUrl;                            // 0x01D0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x01E0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomerName;                                      // 0x01F0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SettingsEnvironment;                               // 0x0200(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeartBeatData;                                     // 0x0210(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QosLatencyPollIntervalSecs;                        // 0x0220(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QosServerLatencyPollIntervalSecs;                  // 0x0224(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QosPingTimeout;                                    // 0x0228(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHttpCache;                                  // 0x022C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHttpCacheType                                HttpCacheType;                                     // 0x022D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendPredefinedEvent;                              // 0x022E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerUseAMS;                                     // 0x022F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteSettings">();
	}
	static class UAccelByteSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteSettings>();
	}
};
static_assert(alignof(UAccelByteSettings) == 0x000008, "Wrong alignment on UAccelByteSettings");
static_assert(sizeof(UAccelByteSettings) == 0x000230, "Wrong size on UAccelByteSettings");
static_assert(offsetof(UAccelByteSettings, ClientId) == 0x000030, "Member 'UAccelByteSettings::ClientId' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, ClientSecret) == 0x000040, "Member 'UAccelByteSettings::ClientSecret' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, Namespace) == 0x000050, "Member 'UAccelByteSettings::Namespace' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, PublisherNamespace) == 0x000060, "Member 'UAccelByteSettings::PublisherNamespace' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, RedirectURI) == 0x000070, "Member 'UAccelByteSettings::RedirectURI' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, BaseUrl) == 0x000080, "Member 'UAccelByteSettings::BaseUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, IamServerUrl) == 0x000090, "Member 'UAccelByteSettings::IamServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, PlatformServerUrl) == 0x0000A0, "Member 'UAccelByteSettings::PlatformServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, LobbyServerUrl) == 0x0000B0, "Member 'UAccelByteSettings::LobbyServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, CloudStorageServerUrl) == 0x0000C0, "Member 'UAccelByteSettings::CloudStorageServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, BasicServerUrl) == 0x0000D0, "Member 'UAccelByteSettings::BasicServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, GameProfileServerUrl) == 0x0000E0, "Member 'UAccelByteSettings::GameProfileServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, GroupServerUrl) == 0x0000F0, "Member 'UAccelByteSettings::GroupServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, StatisticServerUrl) == 0x000100, "Member 'UAccelByteSettings::StatisticServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, QosManagerServerUrl) == 0x000110, "Member 'UAccelByteSettings::QosManagerServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, ChatServerUrl) == 0x000120, "Member 'UAccelByteSettings::ChatServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, LeaderboardServerUrl) == 0x000130, "Member 'UAccelByteSettings::LeaderboardServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, CloudSaveServerUrl) == 0x000140, "Member 'UAccelByteSettings::CloudSaveServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, GameTelemetryServerUrl) == 0x000150, "Member 'UAccelByteSettings::GameTelemetryServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, AgreementServerUrl) == 0x000160, "Member 'UAccelByteSettings::AgreementServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, AchievementServerUrl) == 0x000170, "Member 'UAccelByteSettings::AchievementServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, SessionBrowserServerUrl) == 0x000180, "Member 'UAccelByteSettings::SessionBrowserServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, TurnManagerServerUrl) == 0x000190, "Member 'UAccelByteSettings::TurnManagerServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, UGCServerUrl) == 0x0001A0, "Member 'UAccelByteSettings::UGCServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, ReportingServerUrl) == 0x0001B0, "Member 'UAccelByteSettings::ReportingServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, SessionServerUrl) == 0x0001C0, "Member 'UAccelByteSettings::SessionServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, MatchmakingV2ServerUrl) == 0x0001D0, "Member 'UAccelByteSettings::MatchmakingV2ServerUrl' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, AppId) == 0x0001E0, "Member 'UAccelByteSettings::AppId' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, CustomerName) == 0x0001F0, "Member 'UAccelByteSettings::CustomerName' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, SettingsEnvironment) == 0x000200, "Member 'UAccelByteSettings::SettingsEnvironment' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, HeartBeatData) == 0x000210, "Member 'UAccelByteSettings::HeartBeatData' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, QosLatencyPollIntervalSecs) == 0x000220, "Member 'UAccelByteSettings::QosLatencyPollIntervalSecs' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, QosServerLatencyPollIntervalSecs) == 0x000224, "Member 'UAccelByteSettings::QosServerLatencyPollIntervalSecs' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, QosPingTimeout) == 0x000228, "Member 'UAccelByteSettings::QosPingTimeout' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, bEnableHttpCache) == 0x00022C, "Member 'UAccelByteSettings::bEnableHttpCache' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, HttpCacheType) == 0x00022D, "Member 'UAccelByteSettings::HttpCacheType' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, bSendPredefinedEvent) == 0x00022E, "Member 'UAccelByteSettings::bSendPredefinedEvent' has a wrong offset!");
static_assert(offsetof(UAccelByteSettings, bServerUseAMS) == 0x00022F, "Member 'UAccelByteSettings::bServerUseAMS' has a wrong offset!");

// Class AccelByteUe4Sdk.AccelByteSettingsDev
// 0x0000 (0x0230 - 0x0230)
class UAccelByteSettingsDev final : public UAccelByteSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteSettingsDev">();
	}
	static class UAccelByteSettingsDev* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteSettingsDev>();
	}
};
static_assert(alignof(UAccelByteSettingsDev) == 0x000008, "Wrong alignment on UAccelByteSettingsDev");
static_assert(sizeof(UAccelByteSettingsDev) == 0x000230, "Wrong size on UAccelByteSettingsDev");

// Class AccelByteUe4Sdk.AccelByteSettingsCert
// 0x0000 (0x0230 - 0x0230)
class UAccelByteSettingsCert final : public UAccelByteSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteSettingsCert">();
	}
	static class UAccelByteSettingsCert* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteSettingsCert>();
	}
};
static_assert(alignof(UAccelByteSettingsCert) == 0x000008, "Wrong alignment on UAccelByteSettingsCert");
static_assert(sizeof(UAccelByteSettingsCert) == 0x000230, "Wrong size on UAccelByteSettingsCert");

// Class AccelByteUe4Sdk.AccelByteSettingsProd
// 0x0000 (0x0230 - 0x0230)
class UAccelByteSettingsProd final : public UAccelByteSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteSettingsProd">();
	}
	static class UAccelByteSettingsProd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteSettingsProd>();
	}
};
static_assert(alignof(UAccelByteSettingsProd) == 0x000008, "Wrong alignment on UAccelByteSettingsProd");
static_assert(sizeof(UAccelByteSettingsProd) == 0x000230, "Wrong size on UAccelByteSettingsProd");

// Class AccelByteUe4Sdk.AccelByteBlueprintsSettings
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsSettings final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetAchievementServerUrl();
	static class FString GetAppId();
	static class FString GetBasicServerUrl();
	static class FString GetChatServerUrl();
	static class FString GetClientId();
	static class FString GetClientSecret();
	static class FString GetCloudSaveServerUrl();
	static class FString GetCloudStorageServerUrl();
	static class FString GetCustomerName();
	static class FString GetGameProfileServerUrl();
	static class FString GetGameTelemetryServerUrl();
	static class FString GetGDPRServerUrl();
	static class FString GetGroupServerUrl();
	static class FString GetHeartBeatData();
	static EHttpCacheType GetHttpCacheType();
	static class FString GetIamServerUrl();
	static class FString GetLeaderboardServerUrl();
	static class FString GetLobbyServerUrl();
	static class FString GetMatchmakingV2ServerUrl();
	static class FString GetNamespace();
	static class FString GetPlatformServerUrl();
	static class FString GetPublisherNamespace();
	static float GetQosLatencyPollIntervalSecs();
	static class FString GetQosManagerServerUrl();
	static float GetQosPingTimeout();
	static float GetQosServerLatencyPollIntervalSecs();
	static class FString GetReportingServerUrl();
	static class FString GetSessionBrowserServerUrl();
	static class FString GetSessionServerUrl();
	static class FString GetSettingsEnvironment();
	static class FString GetStatisticServerUrl();
	static class FString GetTurnManagerServerUrl();
	static class FString GetUGCServerUrl();
	static bool IsHttpCacheEnabled();
	static bool IsSendPredefinedEvent();
	static bool IsServerUseAMS();
	static void ResetSettings(const ESettingsEnvironment Environment);
	static void SetAchievementServerUrl(const class FString& CloudSaveServerUrl);
	static void SetAppId(const class FString& AppId);
	static void SetBasicServerUrl(const class FString& BasicServerUrl);
	static void SetChatServerUrl(const class FString& ChatServerUrl);
	static void SetClientId(const class FString& ClientId);
	static void SetClientSecret(const class FString& ClientSecret);
	static void SetCloudSaveServerUrl(const class FString& CloudSaveServerUrl);
	static void SetCloudStorageServerUrl(const class FString& CloudStorageServerUrl);
	static void SetGameProfileServerUrl(const class FString& GameProfileServerUrl);
	static void SetGameTelemetryServerUrl(const class FString& GameTelemetryServerUrl);
	static void SetGDPRServerUrl(const class FString& GDPRServerUrl);
	static void SetGroupServerUrl(const class FString& GroupServerUrl);
	static void SetHttpCacheType(EHttpCacheType Type);
	static void SetIamServerUrl(const class FString& IamServerUrl);
	static void SetLeaderboardServerUrl(const class FString& LeaderboardServerUrl);
	static void SetLobbyServerUrl(const class FString& LobbyServerUrl);
	static void SetMatchmakingV2ServerUrl(const class FString& MatchmakingV2ServerUrl);
	static void SetNamespace(const class FString& Namespace);
	static void SetPlatformServerUrl(const class FString& PlatformServerUrl);
	static void SetPublisherNamespace(const class FString& PublisherNamespace);
	static void SetQosLatencyPollIntervalSecs(const float& QosLatencyPollIntervalSecs);
	static void SetQosManagerServerUrl(const class FString& QosManagerServerUrl);
	static void SetQosPingTimeout(const float& QosPingTimeout);
	static void SetReportingServerUrl(const class FString& ReportingServerUrl);
	static void SetSeasonPassServerUrl(const class FString& SeasonPassServerUrl);
	static void SetServerQosLatencyPollIntervalSecs(const float& QosServerLatencyPollIntervalSecs);
	static void SetServerUseAMS(bool bEnable);
	static void SetSessionBrowserServerUrl(const class FString& SessionBrowserServerUrl);
	static void SetSessionServerUrl(const class FString& SessionServerUrl);
	static void SetStatisticServerUrl(const class FString& StatisticServerUrl);
	static void SetTurnManagerServerUrl(const class FString& TurnManagerServerUrl);
	static void SetUGCServerUrl(const class FString& UGCServerUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsSettings">();
	}
	static class UAccelByteBlueprintsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsSettings>();
	}
};
static_assert(alignof(UAccelByteBlueprintsSettings) == 0x000008, "Wrong alignment on UAccelByteBlueprintsSettings");
static_assert(sizeof(UAccelByteBlueprintsSettings) == 0x000030, "Wrong size on UAccelByteBlueprintsSettings");

// Class AccelByteUe4Sdk.AccelByteBlueprintsStatistic
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsStatistic final : public UBlueprintFunctionLibrary
{
public:
	static void CreateUserStatItems(const TArray<class FString>& StatCodes, const TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetAllUserStatItems(const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetGlobalStatItemsByStatCode(const class FString& StatCode, const TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetUserStatItems(const TArray<class FString>& StatCodes, const TArray<class FString>& Tags, const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void IncrementUserStatItems(const TArray<struct FAccelByteModelsBulkStatItemInc>& Data, const TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsStatistic">();
	}
	static class UAccelByteBlueprintsStatistic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsStatistic>();
	}
};
static_assert(alignof(UAccelByteBlueprintsStatistic) == 0x000008, "Wrong alignment on UAccelByteBlueprintsStatistic");
static_assert(sizeof(UAccelByteBlueprintsStatistic) == 0x000030, "Wrong size on UAccelByteBlueprintsStatistic");

// Class AccelByteUe4Sdk.BPUser
// 0x0000 (0x0030 - 0x0030)
class UBPUser final : public UBlueprintFunctionLibrary
{
public:
	static void ForgetAllCredentials();
	static void GetPlatformLinks(const TDelegate<void(const struct FPagedPlatformLinks& PlatformLinks)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetUserEligibleToPlay(const TDelegate<void(const bool Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void LinkOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& Ticket, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void LoginWithDeviceId(const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void LoginWithOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& Token, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, bool bCreateHeadless);
	static void LoginWithUsername(const class FString& Username, const class FString& Password, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void Logout(const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void Register(const class FString& Username, const class FString& Password, const class FString& DisplayName, const class FString& Country, const class FString& DateOfBirth, const TDelegate<void(const struct FRegisterResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void ResetPassword(const class FString& VerificationCode, const class FString& EmailAddress, const class FString& NewPassword, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void SendResetPasswordCode(const class FString& EmailAddress, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void SendUpgradeVerificationCode(const class FString& EmailAddress, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void SendVerificationCode(const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UnlinkAllOtherPlatform(EAccelBytePlatformType PlatformType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError);
	static void UnlinkAllOtherPlatformId(const class FString& PlatformId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError);
	static void UnlinkOtherPlatform(EAccelBytePlatformType PlatformType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UnlinkOtherPlatformId(const class FString& PlatformId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError);
	static void UnlinkOtherPlatformWithCustomErrorHandler(EAccelBytePlatformType PlatformType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError);
	static void Upgrade(const class FString& Username, const class FString& Password, const TDelegate<void(const struct FAccountUserData& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpgradeAndVerify(const class FString& Username, const class FString& Password, const class FString& VerificationCode, const TDelegate<void(const struct FAccountUserData& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void Verify(const class FString& VerificationCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPUser">();
	}
	static class UBPUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPUser>();
	}
};
static_assert(alignof(UBPUser) == 0x000008, "Wrong alignment on UBPUser");
static_assert(sizeof(UBPUser) == 0x000030, "Wrong size on UBPUser");

// Class AccelByteUe4Sdk.AccelByteBlueprintsUserProfile
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsUserProfile final : public UBlueprintFunctionLibrary
{
public:
	static void CreateUserProfile(const struct FAccelByteModelsUserProfileCreateRequest& ProfileCreateRequest, const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GenerateUploadURL(const class FString& Folder, EAccelByteFileType FileType, const TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GenerateUploadURLForUserContent(const class FString& UserId, EAccelByteFileType FileType, const TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetPrivateCustomAttributes(const TDelegate<void(const struct FJsonObjectWrapper& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetUserProfile(const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdatePrivateCustomAttributes(const struct FJsonObjectWrapper& PrivateCustomAttributesUpdateRequest, const TDelegate<void(const struct FJsonObjectWrapper& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void UpdateUserProfile(const struct FAccelByteModelsUserProfileUpdateRequest& ProfileUpdateRequest, const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsUserProfile">();
	}
	static class UAccelByteBlueprintsUserProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsUserProfile>();
	}
};
static_assert(alignof(UAccelByteBlueprintsUserProfile) == 0x000008, "Wrong alignment on UAccelByteBlueprintsUserProfile");
static_assert(sizeof(UAccelByteBlueprintsUserProfile) == 0x000030, "Wrong size on UAccelByteBlueprintsUserProfile");

// Class AccelByteUe4Sdk.AccelByteBlueprintsWallet
// 0x0000 (0x0030 - 0x0030)
class UAccelByteBlueprintsWallet final : public UBlueprintFunctionLibrary
{
public:
	static void GetWalletInfoByCurrencyCode(const class FString& CurrencyCode, const TDelegate<void(const struct FAccelByteModelsWalletInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);
	static void GetWalletInfoByCurrencyCodeV2(const class FString& CurrencyCode, const TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelByteBlueprintsWallet">();
	}
	static class UAccelByteBlueprintsWallet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelByteBlueprintsWallet>();
	}
};
static_assert(alignof(UAccelByteBlueprintsWallet) == 0x000008, "Wrong alignment on UAccelByteBlueprintsWallet");
static_assert(sizeof(UAccelByteBlueprintsWallet) == 0x000030, "Wrong size on UAccelByteBlueprintsWallet");

}

