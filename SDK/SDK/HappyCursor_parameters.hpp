#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HappyCursor

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function HappyCursor.HappyCursor_C.ExecuteUbergraph_HappyCursor
// 0x0068 (0x0068 - 0x0000)
struct HappyCursor_C_ExecuteUbergraph_HappyCursor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCursorOverInteractableWidget_ReturnValue; // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PauseAnimation_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HappyCursor_C_ExecuteUbergraph_HappyCursor) == 0x000008, "Wrong alignment on HappyCursor_C_ExecuteUbergraph_HappyCursor");
static_assert(sizeof(HappyCursor_C_ExecuteUbergraph_HappyCursor) == 0x000068, "Wrong size on HappyCursor_C_ExecuteUbergraph_HappyCursor");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, EntryPoint) == 0x000000, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::EntryPoint' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, K2Node_Event_MyGeometry) == 0x000010, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, K2Node_Event_InDeltaTime) == 0x000048, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, CallFunc_IsCursorOverInteractableWidget_ReturnValue) == 0x00004C, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::CallFunc_IsCursorOverInteractableWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, CallFunc_PauseAnimation_ReturnValue) == 0x000050, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::CallFunc_PauseAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, CallFunc_PlayAnimation_ReturnValue_1) == 0x000058, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_ExecuteUbergraph_HappyCursor, CallFunc_PlayAnimation_ReturnValue_2) == 0x000060, "Member 'HappyCursor_C_ExecuteUbergraph_HappyCursor::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function HappyCursor.HappyCursor_C.Tick
// 0x003C (0x003C - 0x0000)
struct HappyCursor_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HappyCursor_C_Tick) == 0x000004, "Wrong alignment on HappyCursor_C_Tick");
static_assert(sizeof(HappyCursor_C_Tick) == 0x00003C, "Wrong size on HappyCursor_C_Tick");
static_assert(offsetof(HappyCursor_C_Tick, MyGeometry) == 0x000000, "Member 'HappyCursor_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(HappyCursor_C_Tick, InDeltaTime) == 0x000038, "Member 'HappyCursor_C_Tick::InDeltaTime' has a wrong offset!");

}

