#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Widget_Ping

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_Widget_Ping.WBP_UI_Widget_Ping_C.ExecuteUbergraph_WBP_UI_Widget_Ping
// 0x0080 (0x0080 - 0x0000)
struct WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPingQuality                                  K2Node_Event_PingQuality;                          // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0060(0x0018)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PingValue;                            // 0x007C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping) == 0x000008, "Wrong alignment on WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping");
static_assert(sizeof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping) == 0x000080, "Wrong size on WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, EntryPoint) == 0x000000, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, CallFunc_MakeLiteralInt_ReturnValue) == 0x000004, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, K2Node_Event_PingQuality) == 0x000008, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::K2Node_Event_PingQuality' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, K2Node_MakeArray_Array) == 0x000050, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, CallFunc_Format_ReturnValue) == 0x000060, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, K2Node_Event_IsDesignTime) == 0x000078, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping, K2Node_Event_PingValue) == 0x00007C, "Member 'WBP_UI_Widget_Ping_C_ExecuteUbergraph_WBP_UI_Widget_Ping::K2Node_Event_PingValue' has a wrong offset!");

// Function WBP_UI_Widget_Ping.WBP_UI_Widget_Ping_C.OnPingValueChanged
// 0x0004 (0x0004 - 0x0000)
struct WBP_UI_Widget_Ping_C_OnPingValueChanged final
{
public:
	int32                                         PingValue;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_Ping_C_OnPingValueChanged) == 0x000004, "Wrong alignment on WBP_UI_Widget_Ping_C_OnPingValueChanged");
static_assert(sizeof(WBP_UI_Widget_Ping_C_OnPingValueChanged) == 0x000004, "Wrong size on WBP_UI_Widget_Ping_C_OnPingValueChanged");
static_assert(offsetof(WBP_UI_Widget_Ping_C_OnPingValueChanged, PingValue) == 0x000000, "Member 'WBP_UI_Widget_Ping_C_OnPingValueChanged::PingValue' has a wrong offset!");

// Function WBP_UI_Widget_Ping.WBP_UI_Widget_Ping_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Widget_Ping_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Widget_Ping_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UI_Widget_Ping_C_PreConstruct");
static_assert(sizeof(WBP_UI_Widget_Ping_C_PreConstruct) == 0x000001, "Wrong size on WBP_UI_Widget_Ping_C_PreConstruct");
static_assert(offsetof(WBP_UI_Widget_Ping_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UI_Widget_Ping_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UI_Widget_Ping.WBP_UI_Widget_Ping_C.OnPingQualityChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Widget_Ping_C_OnPingQualityChanged final
{
public:
	EPingQuality                                  PingQuality;                                       // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_Ping_C_OnPingQualityChanged) == 0x000001, "Wrong alignment on WBP_UI_Widget_Ping_C_OnPingQualityChanged");
static_assert(sizeof(WBP_UI_Widget_Ping_C_OnPingQualityChanged) == 0x000001, "Wrong size on WBP_UI_Widget_Ping_C_OnPingQualityChanged");
static_assert(offsetof(WBP_UI_Widget_Ping_C_OnPingQualityChanged, PingQuality) == 0x000000, "Member 'WBP_UI_Widget_Ping_C_OnPingQualityChanged::PingQuality' has a wrong offset!");

// Function WBP_UI_Widget_Ping.WBP_UI_Widget_Ping_C.UpdateQualityIcon
// 0x0002 (0x0002 - 0x0000)
struct WBP_UI_Widget_Ping_C_UpdateQualityIcon final
{
public:
	EPingQuality                                  InPingQuality;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Widget_Ping_C_UpdateQualityIcon) == 0x000001, "Wrong alignment on WBP_UI_Widget_Ping_C_UpdateQualityIcon");
static_assert(sizeof(WBP_UI_Widget_Ping_C_UpdateQualityIcon) == 0x000002, "Wrong size on WBP_UI_Widget_Ping_C_UpdateQualityIcon");
static_assert(offsetof(WBP_UI_Widget_Ping_C_UpdateQualityIcon, InPingQuality) == 0x000000, "Member 'WBP_UI_Widget_Ping_C_UpdateQualityIcon::InPingQuality' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_UpdateQualityIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_UI_Widget_Ping_C_UpdateQualityIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_UI_Widget_Ping.WBP_UI_Widget_Ping_C.UpdateValueText
// 0x0070 (0x0070 - 0x0000)
struct WBP_UI_Widget_Ping_C_UpdateValueText final
{
public:
	int32                                         InPing;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
};
static_assert(alignof(WBP_UI_Widget_Ping_C_UpdateValueText) == 0x000008, "Wrong alignment on WBP_UI_Widget_Ping_C_UpdateValueText");
static_assert(sizeof(WBP_UI_Widget_Ping_C_UpdateValueText) == 0x000070, "Wrong size on WBP_UI_Widget_Ping_C_UpdateValueText");
static_assert(offsetof(WBP_UI_Widget_Ping_C_UpdateValueText, InPing) == 0x000000, "Member 'WBP_UI_Widget_Ping_C_UpdateValueText::InPing' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_UpdateValueText, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'WBP_UI_Widget_Ping_C_UpdateValueText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_UpdateValueText, K2Node_MakeArray_Array) == 0x000048, "Member 'WBP_UI_Widget_Ping_C_UpdateValueText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_Ping_C_UpdateValueText, CallFunc_Format_ReturnValue) == 0x000058, "Member 'WBP_UI_Widget_Ping_C_UpdateValueText::CallFunc_Format_ReturnValue' has a wrong offset!");

}

