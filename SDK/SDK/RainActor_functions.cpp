#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RainActor

#include "Basic.hpp"

#include "RainActor_classes.hpp"
#include "RainActor_parameters.hpp"


namespace SDK
{

// Function RainActor.RainActor_C.ExecuteUbergraph_RainActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARainActor_C::ExecuteUbergraph_RainActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RainActor_C", "ExecuteUbergraph_RainActor");

	Params::RainActor_C_ExecuteUbergraph_RainActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RainActor.RainActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARainActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RainActor_C", "ReceiveTick");

	Params::RainActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RainActor.RainActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ARainActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RainActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RainActor.RainActor_C.SetRainIntensity
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AddSpawnRate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARainActor_C::SetRainIntensity(int32 AddSpawnRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RainActor_C", "SetRainIntensity");

	Params::RainActor_C_SetRainIntensity Parms{};

	Parms.AddSpawnRate = AddSpawnRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RainActor.RainActor_C.SetRainDirection
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARainActor_C::SetRainDirection(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RainActor_C", "SetRainDirection");

	Params::RainActor_C_SetRainDirection Parms{};

	Parms.X = X;
	Parms.Y = Y;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RainActor.RainActor_C.SetRainColors
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FColor&                    RainColor_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FColor&                    SplashColor_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARainActor_C::SetRainColors(const struct FColor& RainColor_0, const struct FColor& SplashColor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RainActor_C", "SetRainColors");

	Params::RainActor_C_SetRainColors Parms{};

	Parms.RainColor_0 = std::move(RainColor_0);
	Parms.SplashColor_0 = std::move(SplashColor_0);

	UObject::ProcessEvent(Func, &Parms);
}

}

