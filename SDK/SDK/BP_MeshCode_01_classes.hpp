#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MeshCode_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MeshCode_01.BP_MeshCode_01_C
// 0x0038 (0x02E0 - 0x02A8)
class ABP_MeshCode_01_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UStaticMesh>>     meshes;                                            // 0x02B8(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class UStaticMesh>>     meshQueue;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         distance;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         queueLastIndex;                                    // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MeshCode_01(int32 EntryPoint);
	void onAllMeshesAdded();
	void addMesh();
	void setImageOrder(const TArray<int32>& order);
	void OnLoaded_A566666B470BD3B8C78498AAD4ED15AA(class UObject* Loaded);
	void getMeshesFromOrder(TArray<int32>& order, TArray<TSoftObjectPtr<class UStaticMesh>>* orderedMeshes);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MeshCode_01_C">();
	}
	static class ABP_MeshCode_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MeshCode_01_C>();
	}
};
static_assert(alignof(ABP_MeshCode_01_C) == 0x000008, "Wrong alignment on ABP_MeshCode_01_C");
static_assert(sizeof(ABP_MeshCode_01_C) == 0x0002E0, "Wrong size on ABP_MeshCode_01_C");
static_assert(offsetof(ABP_MeshCode_01_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_MeshCode_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MeshCode_01_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_MeshCode_01_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MeshCode_01_C, meshes) == 0x0002B8, "Member 'ABP_MeshCode_01_C::meshes' has a wrong offset!");
static_assert(offsetof(ABP_MeshCode_01_C, meshQueue) == 0x0002C8, "Member 'ABP_MeshCode_01_C::meshQueue' has a wrong offset!");
static_assert(offsetof(ABP_MeshCode_01_C, distance) == 0x0002D8, "Member 'ABP_MeshCode_01_C::distance' has a wrong offset!");
static_assert(offsetof(ABP_MeshCode_01_C, queueLastIndex) == 0x0002DC, "Member 'ABP_MeshCode_01_C::queueLastIndex' has a wrong offset!");

}

