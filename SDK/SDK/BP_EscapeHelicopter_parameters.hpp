#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EscapeHelicopter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function BP_EscapeHelicopter.BP_EscapeHelicopter_C.ExecuteUbergraph_BP_EscapeHelicopter
// 0x0108 (0x0108 - 0x0000)
struct BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CheckDistanceToGround_Location;           // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CheckDistanceToGround_DistanceToGround;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CheckDistanceToGround_Location_1;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CheckDistanceToGround_DistanceToGround_1; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0030(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ASBZAerialVehicle*                      K2Node_CustomEvent_Vehicle_1;                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZAerialVehicleDoor                         K2Node_Event_Door;                                 // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsDoorOpen;                          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplyVariationToSkeletal_ReturnValue;     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Helicopter_C*                      K2Node_DynamicCast_AsABP_Helicopter;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASBZAerialVehicle*                      K2Node_CustomEvent_Vehicle;                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_State;                          // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter) == 0x000008, "Wrong alignment on BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter");
static_assert(sizeof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter) == 0x000108, "Wrong size on BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, EntryPoint) == 0x000000, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_CheckDistanceToGround_Location) == 0x000004, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_CheckDistanceToGround_Location' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_CheckDistanceToGround_DistanceToGround) == 0x000010, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_CheckDistanceToGround_DistanceToGround' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_CheckDistanceToGround_Location_1) == 0x00001C, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_CheckDistanceToGround_Location_1' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_CheckDistanceToGround_DistanceToGround_1) == 0x000028, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_CheckDistanceToGround_DistanceToGround_1' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_Less_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000030, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_CustomEvent_Vehicle_1) == 0x0000C0, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_CustomEvent_Vehicle_1' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_Event_Door) == 0x0000C8, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_Event_Door' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_Event_bIsDoorOpen) == 0x0000C9, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_Event_bIsDoorOpen' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_GetAnimInstance_ReturnValue) == 0x0000D0, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_ApplyVariationToSkeletal_ReturnValue) == 0x0000D8, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_ApplyVariationToSkeletal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_DynamicCast_AsABP_Helicopter) == 0x0000E0, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_DynamicCast_AsABP_Helicopter' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_CustomEvent_Vehicle) == 0x0000F0, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_CustomEvent_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, K2Node_CustomEvent_State) == 0x0000F8, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter, CallFunc_IsDedicatedServer_ReturnValue) == 0x000104, "Member 'BP_EscapeHelicopter_C_ExecuteUbergraph_BP_EscapeHelicopter::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function BP_EscapeHelicopter.BP_EscapeHelicopter_C.CustomEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_EscapeHelicopter_C_CustomEvent_1 final
{
public:
	class ASBZAerialVehicle*                      Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   State;                                             // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EscapeHelicopter_C_CustomEvent_1) == 0x000008, "Wrong alignment on BP_EscapeHelicopter_C_CustomEvent_1");
static_assert(sizeof(BP_EscapeHelicopter_C_CustomEvent_1) == 0x000018, "Wrong size on BP_EscapeHelicopter_C_CustomEvent_1");
static_assert(offsetof(BP_EscapeHelicopter_C_CustomEvent_1, Vehicle) == 0x000000, "Member 'BP_EscapeHelicopter_C_CustomEvent_1::Vehicle' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CustomEvent_1, State) == 0x000008, "Member 'BP_EscapeHelicopter_C_CustomEvent_1::State' has a wrong offset!");

// Function BP_EscapeHelicopter.BP_EscapeHelicopter_C.ReceiveOnDoorStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged final
{
public:
	ESBZAerialVehicleDoor                         Door;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDoorOpen;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged) == 0x000001, "Wrong alignment on BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged");
static_assert(sizeof(BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged) == 0x000002, "Wrong size on BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged");
static_assert(offsetof(BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged, Door) == 0x000000, "Member 'BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged::Door' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged, bIsDoorOpen) == 0x000001, "Member 'BP_EscapeHelicopter_C_ReceiveOnDoorStateChanged::bIsDoorOpen' has a wrong offset!");

// Function BP_EscapeHelicopter.BP_EscapeHelicopter_C.CustomEvent_0
// 0x0008 (0x0008 - 0x0000)
struct BP_EscapeHelicopter_C_CustomEvent_0 final
{
public:
	class ASBZAerialVehicle*                      Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EscapeHelicopter_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_EscapeHelicopter_C_CustomEvent_0");
static_assert(sizeof(BP_EscapeHelicopter_C_CustomEvent_0) == 0x000008, "Wrong size on BP_EscapeHelicopter_C_CustomEvent_0");
static_assert(offsetof(BP_EscapeHelicopter_C_CustomEvent_0, Vehicle) == 0x000000, "Member 'BP_EscapeHelicopter_C_CustomEvent_0::Vehicle' has a wrong offset!");

// Function BP_EscapeHelicopter.BP_EscapeHelicopter_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BP_EscapeHelicopter_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_ApplyVariationToSkeletal_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EscapeHelicopter_C_UserConstructionScript) == 0x000001, "Wrong alignment on BP_EscapeHelicopter_C_UserConstructionScript");
static_assert(sizeof(BP_EscapeHelicopter_C_UserConstructionScript) == 0x000001, "Wrong size on BP_EscapeHelicopter_C_UserConstructionScript");
static_assert(offsetof(BP_EscapeHelicopter_C_UserConstructionScript, CallFunc_ApplyVariationToSkeletal_ReturnValue) == 0x000000, "Member 'BP_EscapeHelicopter_C_UserConstructionScript::CallFunc_ApplyVariationToSkeletal_ReturnValue' has a wrong offset!");

// Function BP_EscapeHelicopter.BP_EscapeHelicopter_C.CheckDistanceToGround
// 0x0168 (0x0168 - 0x0000)
struct BP_EscapeHelicopter_C_CheckDistanceToGround final
{
public:
	class USceneComponent*                        GeoTracking;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToGround;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0040(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EscapeHelicopter_C_CheckDistanceToGround) == 0x000008, "Wrong alignment on BP_EscapeHelicopter_C_CheckDistanceToGround");
static_assert(sizeof(BP_EscapeHelicopter_C_CheckDistanceToGround) == 0x000168, "Wrong size on BP_EscapeHelicopter_C_CheckDistanceToGround");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, GeoTracking) == 0x000000, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::GeoTracking' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, Location) == 0x000008, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::Location' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, DistanceToGround) == 0x000014, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::DistanceToGround' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, Temp_object_Variable) == 0x000018, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_LineTraceSingle_OutHit) == 0x000040, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_LineTraceSingle_ReturnValue) == 0x0000D0, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D1, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D2, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_HitItem) == 0x000134, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_ElementIndex) == 0x000138, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_FaceIndex) == 0x00013C, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_TraceStart) == 0x000140, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_BreakHitResult_TraceEnd) == 0x00014C, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000158, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EscapeHelicopter_C_CheckDistanceToGround, CallFunc_VSize_ReturnValue) == 0x000164, "Member 'BP_EscapeHelicopter_C_CheckDistanceToGround::CallFunc_VSize_ReturnValue' has a wrong offset!");

}

