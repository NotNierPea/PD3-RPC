#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HackingMinigameActor_DisplayCase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HackingMinigameActor_DisplayCase.BP_HackingMinigameActor_DisplayCase_C
// 0x0020 (0x0350 - 0x0330)
class ABP_HackingMinigameActor_DisplayCase_C final : public ASBZHackingMinigameActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialInterface*                     DynMat;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase(int32 EntryPoint);
	void BP_OnEnabledStateChanged(bool bEnabled, bool bDoCosmetics);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HackingMinigameActor_DisplayCase_C">();
	}
	static class ABP_HackingMinigameActor_DisplayCase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HackingMinigameActor_DisplayCase_C>();
	}
};
static_assert(alignof(ABP_HackingMinigameActor_DisplayCase_C) == 0x000008, "Wrong alignment on ABP_HackingMinigameActor_DisplayCase_C");
static_assert(sizeof(ABP_HackingMinigameActor_DisplayCase_C) == 0x000350, "Wrong size on ABP_HackingMinigameActor_DisplayCase_C");
static_assert(offsetof(ABP_HackingMinigameActor_DisplayCase_C, UberGraphFrame) == 0x000330, "Member 'ABP_HackingMinigameActor_DisplayCase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HackingMinigameActor_DisplayCase_C, DynMat) == 0x000338, "Member 'ABP_HackingMinigameActor_DisplayCase_C::DynMat' has a wrong offset!");
static_assert(offsetof(ABP_HackingMinigameActor_DisplayCase_C, Color) == 0x000340, "Member 'ABP_HackingMinigameActor_DisplayCase_C::Color' has a wrong offset!");

}

