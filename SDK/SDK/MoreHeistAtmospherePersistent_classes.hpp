#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoreHeistAtmospherePersistent

#include "Basic.hpp"

#include "ModPersistentObjectBase_classes.hpp"
#include "TimeType_structs.hpp"
#include "WeatherType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MoreHeistAtmospherePersistent.MoreHeistAtmospherePersistent_C
// 0x00C0 (0x0110 - 0x0050)
class UMoreHeistAtmospherePersistent_C final : public UModPersistentObjectBase_C
{
public:
	ETimeType                                     SelectedTime;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeatherType                                  SelectedWeather;                                   // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ActiveWeatherTable;                                // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             ActiveTimeTable;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UDataTable*>        HeistNameToWeatherTableMap;                        // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	TMap<class FString, class UDataTable*>        HeistNameToTimeTableMap;                           // 0x00B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          IsWeatherRandom;                                   // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AddWeatherTable(const class FString& HeistName, class UDataTable* WeatherTable);
	void AddTimeTable(const class FString& HeistName, class UDataTable* TimeTable);
	void SetTables(const class FString& Heist, class UDataTable** Weather, class UDataTable** Time);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MoreHeistAtmospherePersistent_C">();
	}
	static class UMoreHeistAtmospherePersistent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoreHeistAtmospherePersistent_C>();
	}
};
static_assert(alignof(UMoreHeistAtmospherePersistent_C) == 0x000008, "Wrong alignment on UMoreHeistAtmospherePersistent_C");
static_assert(sizeof(UMoreHeistAtmospherePersistent_C) == 0x000110, "Wrong size on UMoreHeistAtmospherePersistent_C");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, SelectedTime) == 0x000050, "Member 'UMoreHeistAtmospherePersistent_C::SelectedTime' has a wrong offset!");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, SelectedWeather) == 0x000051, "Member 'UMoreHeistAtmospherePersistent_C::SelectedWeather' has a wrong offset!");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, ActiveWeatherTable) == 0x000058, "Member 'UMoreHeistAtmospherePersistent_C::ActiveWeatherTable' has a wrong offset!");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, ActiveTimeTable) == 0x000060, "Member 'UMoreHeistAtmospherePersistent_C::ActiveTimeTable' has a wrong offset!");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, HeistNameToWeatherTableMap) == 0x000068, "Member 'UMoreHeistAtmospherePersistent_C::HeistNameToWeatherTableMap' has a wrong offset!");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, HeistNameToTimeTableMap) == 0x0000B8, "Member 'UMoreHeistAtmospherePersistent_C::HeistNameToTimeTableMap' has a wrong offset!");
static_assert(offsetof(UMoreHeistAtmospherePersistent_C, IsWeatherRandom) == 0x000108, "Member 'UMoreHeistAtmospherePersistent_C::IsWeatherRandom' has a wrong offset!");

}

