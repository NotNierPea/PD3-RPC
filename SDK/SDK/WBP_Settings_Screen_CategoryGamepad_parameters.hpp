#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Settings_Screen_CategoryGamepad

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_PreviousValue;                        // 0x0004(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_ActionName;                     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZMenuButton*                         K2Node_Event_MenuButton;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsFocused;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZSettingsButton*                     K2Node_Event_SettingsButton;                       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSettingsCategoryDirty_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSettingsCategoryDirty_ReturnValue_1;    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZSettingsMenuManager*                CallFunc_Get_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZSettingsMenuManager*                CallFunc_Get_ReturnValue_1;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0014)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0064(0x0014)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZUIManager*                          CallFunc_GetUIManager_ReturnValue;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           CallFunc_GetGamepadSprite_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad) == 0x000008, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad) == 0x0000A0, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, EntryPoint) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_Event_PreviousValue) == 0x000004, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_Event_PreviousValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_CustomEvent_ActionName) == 0x000010, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_CustomEvent_ActionName' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_SwitchName_CmpSuccess) == 0x00001C, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_Event_MenuButton) == 0x000020, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_Event_MenuButton' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_Event_bIsFocused) == 0x000028, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_Event_bIsFocused' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_Event_SettingsButton) == 0x000030, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_Event_SettingsButton' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_IsSettingsCategoryDirty_ReturnValue) == 0x000038, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_IsSettingsCategoryDirty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_IsSettingsCategoryDirty_ReturnValue_1) == 0x000039, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_IsSettingsCategoryDirty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_Get_ReturnValue) == 0x000040, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_Get_ReturnValue_1) == 0x000048, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, K2Node_CreateDelegate_OutputDelegate_1) == 0x000064, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_GetUIManager_ReturnValue) == 0x000080, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_GetUIManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_GetGamepadSprite_ReturnValue) == 0x000088, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_GetGamepadSprite_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput) == 0x000090, "Member 'WBP_Settings_Screen_CategoryGamepad_C_ExecuteUbergraph_WBP_Settings_Screen_CategoryGamepad::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.OnSettingsButtonChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged final
{
public:
	class USBZSettingsButton*                     SettingsButton;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged) == 0x000008, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged) == 0x000008, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged, SettingsButton) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonChanged::SettingsButton' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.OnSettingsButtonFocused
// 0x0010 (0x0010 - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused final
{
public:
	class USBZMenuButton*                         MenuButton;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFocused;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused) == 0x000008, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused) == 0x000010, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused, MenuButton) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused::MenuButton' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused, bIsFocused) == 0x000008, "Member 'WBP_Settings_Screen_CategoryGamepad_C_OnSettingsButtonFocused::bIsFocused' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.OnControlRefrencePressed
// 0x000C (0x000C - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed) == 0x000004, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed) == 0x00000C, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed, ActionName) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_OnControlRefrencePressed::ActionName' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.OnGainedStackFocused
// 0x000C (0x000C - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused final
{
public:
	class FName                                   PreviousValue;                                     // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused) == 0x000004, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused) == 0x00000C, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused, PreviousValue) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_OnGainedStackFocused::PreviousValue' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.Handle Settings Button Focus Changed
// 0x0020 (0x0020 - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed final
{
public:
	class USBZMenuButton*                         Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsButtonFocused;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSettingDirty;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZSettingsButton*                     K2Node_DynamicCast_AsSBZSettings_Button;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed) == 0x000008, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed) == 0x000020, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed, Button) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed::Button' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed, IsButtonFocused) == 0x000008, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed::IsButtonFocused' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed, IsSettingDirty) == 0x000009, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed::IsSettingDirty' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed, K2Node_DynamicCast_AsSBZSettings_Button) == 0x000010, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed::K2Node_DynamicCast_AsSBZSettings_Button' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Focus_Changed::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.Handle Settings Button Value Changed
// 0x0010 (0x0010 - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed final
{
public:
	class USBZSettingsButton*                     Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed) == 0x000008, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed) == 0x000010, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed, Button) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed::Button' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000008, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Handle_Settings_Button_Value_Changed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.Update Menu Control Reference
// 0x0148 (0x0148 - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference final
{
public:
	TArray<struct FSBZButtonControlReference>     Button_Control_References;                         // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSettingsCategoryDirty_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSBZButtonControlReference>     K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	struct FSBZButtonControlReference             K2Node_MakeStruct_SBZButtonControlReference;       // 0x0028(0x0030)()
	struct FSBZButtonControlReference             K2Node_MakeStruct_SBZButtonControlReference_1;     // 0x0058(0x0030)()
	TArray<struct FSBZButtonControlReference>     K2Node_MakeArray_Array_1;                          // 0x0088(0x0010)(ReferenceParm)
	TArray<struct FSBZButtonControlReference>     K2Node_MakeArray_Array_2;                          // 0x0098(0x0010)(ReferenceParm)
	TArray<struct FSBZButtonControlReference>     K2Node_Select_Default;                             // 0x00A8(0x0010)(ReferenceParm)
	struct FSBZButtonControlsReference            K2Node_MakeStruct_SBZButtonControlsReference;      // 0x00B8(0x0028)()
	TDelegate<void(class FName ActionName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x00E0(0x0014)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSBZButtonControlReference             K2Node_MakeStruct_SBZButtonControlReference_2;     // 0x00F8(0x0030)()
	TArray<struct FSBZButtonControlReference>     K2Node_MakeArray_Array_3;                          // 0x0128(0x0010)(ReferenceParm)
	TArray<struct FSBZButtonControlReference>     K2Node_Select_Default_1;                           // 0x0138(0x0010)(ReferenceParm)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference) == 0x000008, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference) == 0x000148, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, Button_Control_References) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::Button_Control_References' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, Temp_bool_Variable) == 0x000010, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, Temp_bool_Variable_1) == 0x000011, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, CallFunc_IsSettingsCategoryDirty_ReturnValue) == 0x000012, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::CallFunc_IsSettingsCategoryDirty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeArray_Array) == 0x000018, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeStruct_SBZButtonControlReference) == 0x000028, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeStruct_SBZButtonControlReference' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeStruct_SBZButtonControlReference_1) == 0x000058, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeStruct_SBZButtonControlReference_1' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeArray_Array_1) == 0x000088, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeArray_Array_2) == 0x000098, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_Select_Default) == 0x0000A8, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeStruct_SBZButtonControlsReference) == 0x0000B8, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeStruct_SBZButtonControlsReference' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_CreateDelegate_OutputDelegate) == 0x0000E0, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeStruct_SBZButtonControlReference_2) == 0x0000F8, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeStruct_SBZButtonControlReference_2' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_MakeArray_Array_3) == 0x000128, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference, K2Node_Select_Default_1) == 0x000138, "Member 'WBP_Settings_Screen_CategoryGamepad_C_Update_Menu_Control_Reference::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_Settings_Screen_CategoryGamepad.WBP_Settings_Screen_CategoryGamepad_C.On Focused Input Actions
// 0x002C (0x002C - 0x0000)
struct WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0014)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0014)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions) == 0x000004, "Wrong alignment on WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions");
static_assert(sizeof(WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions) == 0x00002C, "Wrong size on WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions, IsFocused) == 0x000000, "Member 'WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions::IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WBP_Settings_Screen_CategoryGamepad_C_On_Focused_Input_Actions::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

}

