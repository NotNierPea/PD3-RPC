#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KeyPad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_classes.hpp"
#include "E_CodeGuessedStatus_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KeyPad.BP_KeyPad_C
// 0x0220 (0x04C8 - 0x02A8)
class ABP_KeyPad_C final : public ASBZStaticReplicatedActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   PowerLight;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_E;                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_C;                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_E;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      LanternCapsule;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_0;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_8;                                           // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_9;                                           // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_7;                                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_5;                                           // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_4;                                           // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_3;                                           // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_2;                                           // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_1;                                           // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_6;                                           // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       CodeWidget;                                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_9;                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_8;                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_7;                          // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_6;                          // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_5;                          // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_4;                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_3;                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_2;                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_1;                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Keypad_0;                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_E;                               // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_C;                               // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_9;                               // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_8;                               // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_7;                               // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_0;                               // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_5;                               // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_4;                               // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_3;                               // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_2;                               // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_1;                               // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   keypad_keypad_num_6;                               // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BaseKeypadMesh;                                    // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInteractable;                                   // 0x03F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bHasHighlights;                                    // 0x03F1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bRandomizeAtBeginPlay;                             // 0x03F2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3[0x5];                                      // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USBZBaseInteractableComponent*, class UStaticMeshComponent*> InteractableMeshMap;     // 0x03F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         NumberOfCodes;                                     // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CorrectCodeIndex;                                  // 0x044C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Codes;                                             // 0x0450(0x0010)(Edit, BlueprintVisible, Net, RepNotify, AdvancedDisplay)
	int32                                         GuessedCode;                                       // 0x0460(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Inputs;                                            // 0x0464(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              CodeCorrect;                                       // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              CodeIncorrect;                                     // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_CodeGuessedStatus                           CodeGuessedCorrect;                                // 0x0488(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PossibleCode_C*>             PossibleCodeShowers;                               // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	TArray<int32>                                 NumberOfCodesInArray;                              // 0x04A0(0x0010)(Edit, BlueprintVisible, Net)
	bool                                          UseHackableComputerRef;                            // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_HackableComputer_C*>         HackableComputerRef;                               // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)

public:
	void ExecuteUbergraph_BP_KeyPad(int32 EntryPoint);
	void UpdateNotes(class ABP_HackableComputer_C* NewParam);
	void BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void FocusChanged(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void PressButtonSound();
	void BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BindButonsToEvents();
	void Swish(class UStaticMeshComponent* MeshComp);
	void KeypadPressed(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void ReceiveBeginPlay();
	void CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94(const class UCurveFloatDelegateTimer* CurveFloatTimer, float CurveElapsedTime, float CurveTimeSinceLast, float CurveValue, float CurveTime);
	void CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94(const class UCurveFloatDelegateTimer* CurveFloatTimer, float CurveElapsedTime, float CurveTimeSinceLast, float CurveValue, float CurveTime);
	void UserConstructionScript();
	void SetInteractionEnabled(bool bEnabled);
	void OnRep_Codes();
	void UpdateMaterials();
	void RandomizeCodes();
	void Clear();
	int32 NextDigit();
	void UpdateCodeNotes();
	void OnRep_bIsInteractable();
	void SetInteractableFeedback();
	void SetComponentFocusedState(class UPrimitiveComponent* Mesh, bool Focused);
	void OnRep_bHasHighlights();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KeyPad_C">();
	}
	static class ABP_KeyPad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KeyPad_C>();
	}
};
static_assert(alignof(ABP_KeyPad_C) == 0x000008, "Wrong alignment on ABP_KeyPad_C");
static_assert(sizeof(ABP_KeyPad_C) == 0x0004C8, "Wrong size on ABP_KeyPad_C");
static_assert(offsetof(ABP_KeyPad_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_KeyPad_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, PowerLight) == 0x0002B0, "Member 'ABP_KeyPad_C::PowerLight' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_E) == 0x0002B8, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_E' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_C) == 0x0002C0, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_C' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_E) == 0x0002C8, "Member 'ABP_KeyPad_C::Plane_E' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, LanternCapsule) == 0x0002D0, "Member 'ABP_KeyPad_C::LanternCapsule' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_0) == 0x0002D8, "Member 'ABP_KeyPad_C::Plane_0' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_8) == 0x0002E0, "Member 'ABP_KeyPad_C::Plane_8' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_9) == 0x0002E8, "Member 'ABP_KeyPad_C::Plane_9' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_7) == 0x0002F0, "Member 'ABP_KeyPad_C::Plane_7' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_5) == 0x0002F8, "Member 'ABP_KeyPad_C::Plane_5' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_4) == 0x000300, "Member 'ABP_KeyPad_C::Plane_4' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_3) == 0x000308, "Member 'ABP_KeyPad_C::Plane_3' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_2) == 0x000310, "Member 'ABP_KeyPad_C::Plane_2' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_1) == 0x000318, "Member 'ABP_KeyPad_C::Plane_1' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Plane_6) == 0x000320, "Member 'ABP_KeyPad_C::Plane_6' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, CodeWidget) == 0x000328, "Member 'ABP_KeyPad_C::CodeWidget' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_9) == 0x000330, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_9' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_8) == 0x000338, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_8' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_7) == 0x000340, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_7' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_6) == 0x000348, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_6' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_5) == 0x000350, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_5' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_4) == 0x000358, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_4' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_3) == 0x000360, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_3' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_2) == 0x000368, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_2' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_1) == 0x000370, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_1' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, SBZInteractable_Keypad_0) == 0x000378, "Member 'ABP_KeyPad_C::SBZInteractable_Keypad_0' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_E) == 0x000380, "Member 'ABP_KeyPad_C::keypad_keypad_num_E' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_C) == 0x000388, "Member 'ABP_KeyPad_C::keypad_keypad_num_C' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_9) == 0x000390, "Member 'ABP_KeyPad_C::keypad_keypad_num_9' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_8) == 0x000398, "Member 'ABP_KeyPad_C::keypad_keypad_num_8' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_7) == 0x0003A0, "Member 'ABP_KeyPad_C::keypad_keypad_num_7' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_0) == 0x0003A8, "Member 'ABP_KeyPad_C::keypad_keypad_num_0' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_5) == 0x0003B0, "Member 'ABP_KeyPad_C::keypad_keypad_num_5' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_4) == 0x0003B8, "Member 'ABP_KeyPad_C::keypad_keypad_num_4' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_3) == 0x0003C0, "Member 'ABP_KeyPad_C::keypad_keypad_num_3' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_2) == 0x0003C8, "Member 'ABP_KeyPad_C::keypad_keypad_num_2' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_1) == 0x0003D0, "Member 'ABP_KeyPad_C::keypad_keypad_num_1' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, keypad_keypad_num_6) == 0x0003D8, "Member 'ABP_KeyPad_C::keypad_keypad_num_6' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, BaseKeypadMesh) == 0x0003E0, "Member 'ABP_KeyPad_C::BaseKeypadMesh' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, DefaultSceneRoot) == 0x0003E8, "Member 'ABP_KeyPad_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, bIsInteractable) == 0x0003F0, "Member 'ABP_KeyPad_C::bIsInteractable' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, bHasHighlights) == 0x0003F1, "Member 'ABP_KeyPad_C::bHasHighlights' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, bRandomizeAtBeginPlay) == 0x0003F2, "Member 'ABP_KeyPad_C::bRandomizeAtBeginPlay' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, InteractableMeshMap) == 0x0003F8, "Member 'ABP_KeyPad_C::InteractableMeshMap' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, NumberOfCodes) == 0x000448, "Member 'ABP_KeyPad_C::NumberOfCodes' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, CorrectCodeIndex) == 0x00044C, "Member 'ABP_KeyPad_C::CorrectCodeIndex' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Codes) == 0x000450, "Member 'ABP_KeyPad_C::Codes' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, GuessedCode) == 0x000460, "Member 'ABP_KeyPad_C::GuessedCode' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, Inputs) == 0x000464, "Member 'ABP_KeyPad_C::Inputs' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, CodeCorrect) == 0x000468, "Member 'ABP_KeyPad_C::CodeCorrect' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, CodeIncorrect) == 0x000478, "Member 'ABP_KeyPad_C::CodeIncorrect' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, CodeGuessedCorrect) == 0x000488, "Member 'ABP_KeyPad_C::CodeGuessedCorrect' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, PossibleCodeShowers) == 0x000490, "Member 'ABP_KeyPad_C::PossibleCodeShowers' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, NumberOfCodesInArray) == 0x0004A0, "Member 'ABP_KeyPad_C::NumberOfCodesInArray' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, UseHackableComputerRef) == 0x0004B0, "Member 'ABP_KeyPad_C::UseHackableComputerRef' has a wrong offset!");
static_assert(offsetof(ABP_KeyPad_C, HackableComputerRef) == 0x0004B8, "Member 'ABP_KeyPad_C::HackableComputerRef' has a wrong offset!");

}

