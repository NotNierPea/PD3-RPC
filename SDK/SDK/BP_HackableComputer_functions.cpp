#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HackableComputer

#include "Basic.hpp"

#include "BP_HackableComputer_classes.hpp"
#include "BP_HackableComputer_parameters.hpp"


namespace SDK
{

// Function BP_HackableComputer.BP_HackableComputer_C.ExecuteUbergraph_BP_HackableComputer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HackableComputer_C::ExecuteUbergraph_BP_HackableComputer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "ExecuteUbergraph_BP_HackableComputer");

	Params::BP_HackableComputer_C_ExecuteUbergraph_BP_HackableComputer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Reset
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeToHack_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FText&                      CurrentProcess_0                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// Enum_HackingResultOnDone                ResultOnDone_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HackableComputer_C::Reset(float TimeToHack_0, const class FText& CurrentProcess_0, Enum_HackingResultOnDone ResultOnDone_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Reset");

	Params::BP_HackableComputer_C_Reset Parms{};

	Parms.TimeToHack_0 = TimeToHack_0;
	Parms.CurrentProcess_0 = std::move(CurrentProcess_0);
	Parms.ResultOnDone_0 = ResultOnDone_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Custom
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Custom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Custom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.BndEvt__SBZShoutTarget_K2Node_ComponentBoundEvent_2_SBZShoutedAtDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class USBZShoutTargetComponent*         ShoutTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Shouter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HackableComputer_C::BndEvt__SBZShoutTarget_K2Node_ComponentBoundEvent_2_SBZShoutedAtDelegate__DelegateSignature(class USBZShoutTargetComponent* ShoutTarget, class APawn* Shouter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "BndEvt__SBZShoutTarget_K2Node_ComponentBoundEvent_2_SBZShoutedAtDelegate__DelegateSignature");

	Params::BP_HackableComputer_C_BndEvt__SBZShoutTarget_K2Node_ComponentBoundEvent_2_SBZShoutedAtDelegate__DelegateSignature Parms{};

	Parms.ShoutTarget = ShoutTarget;
	Parms.Shouter = Shouter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HackableComputer.BP_HackableComputer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HackableComputer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "ReceiveTick");

	Params::BP_HackableComputer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HackableComputer.BP_HackableComputer_C.EnableInteractionAfterInterrupt
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::EnableInteractionAfterInterrupt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "EnableInteractionAfterInterrupt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Fail
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Fail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Fail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.NotActive
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::NotActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "NotActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.BndEvt__NewVar_2_K2Node_ComponentBoundEvent_1_SBZOnBinaryStateChanged__DelegateSignature
// (BlueprintAuthorityOnly, BlueprintEvent)
// Parameters:
// class ASBZBinaryStateNode*              BinaryStateNode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bState                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HackableComputer_C::BndEvt__NewVar_2_K2Node_ComponentBoundEvent_1_SBZOnBinaryStateChanged__DelegateSignature(class ASBZBinaryStateNode* BinaryStateNode, bool bState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "BndEvt__NewVar_2_K2Node_ComponentBoundEvent_1_SBZOnBinaryStateChanged__DelegateSignature");

	Params::BP_HackableComputer_C_BndEvt__NewVar_2_K2Node_ComponentBoundEvent_1_SBZOnBinaryStateChanged__DelegateSignature Parms{};

	Parms.BinaryStateNode = BinaryStateNode;
	Parms.bState = bState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HackableComputer.BP_HackableComputer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HackableComputer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Active
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Active");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Interrupt
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Interrupt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Interrupt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Progressing
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Progressing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Progressing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Done
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Done()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Done");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.Timer
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.BndEvt__Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class USBZBaseInteractableComponent*    Interactable_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USBZInteractorComponent*          Interactor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsLocallyControlledInteractor                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HackableComputer_C::BndEvt__Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "BndEvt__Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature");

	Params::BP_HackableComputer_C_BndEvt__Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature Parms{};

	Parms.Interactable_0 = Interactable_0;
	Parms.Interactor = Interactor;
	Parms.bIsLocallyControlledInteractor = bIsLocallyControlledInteractor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HackableComputer.BP_HackableComputer_C.SetTings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::SetTings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "SetTings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.SetAllWidgetTimers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::SetAllWidgetTimers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "SetAllWidgetTimers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.OnRep_CountdownTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::OnRep_CountdownTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "OnRep_CountdownTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.OnRep_TimeCountSecs
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::OnRep_TimeCountSecs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "OnRep_TimeCountSecs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.OnRep_RandomHRName
// (BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::OnRep_RandomHRName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "OnRep_RandomHRName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.NameInfoFunction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::NameInfoFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "NameInfoFunction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.KeyCodesFunction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::KeyCodesFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "KeyCodesFunction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.GenericDoneFunction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::GenericDoneFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "GenericDoneFunction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.OnRep_States
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::OnRep_States()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "OnRep_States");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.NameInfoShoutTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::NameInfoShoutTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "NameInfoShoutTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HackableComputer.BP_HackableComputer_C.KeyCodesShoutTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HackableComputer_C::KeyCodesShoutTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HackableComputer_C", "KeyCodesShoutTarget");

	UObject::ProcessEvent(Func, nullptr);
}

}

