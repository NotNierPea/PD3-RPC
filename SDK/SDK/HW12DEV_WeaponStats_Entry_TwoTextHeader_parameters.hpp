#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HW12DEV_WeaponStats_Entry_TwoTextHeader

#include "Basic.hpp"


namespace SDK::Params
{

// Function HW12DEV_WeaponStats_Entry_TwoTextHeader.HW12DEV_WeaponStats_Entry_TwoTextHeader_C.ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader
// 0x0008 (0x0008 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader) == 0x000004, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader) == 0x000008, "Wrong size on HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader, EntryPoint) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader::EntryPoint' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader, K2Node_Event_IsDesignTime) == 0x000004, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoTextHeader::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoTextHeader.HW12DEV_WeaponStats_Entry_TwoTextHeader_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct) == 0x000001, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct) == 0x000001, "Wrong size on HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoTextHeader.HW12DEV_WeaponStats_Entry_TwoTextHeader_C.SetBaseCompare
// 0x000C (0x000C - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Compare;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCompare;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlipCompare;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare) == 0x000004, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare) == 0x00000C, "Wrong size on HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare, Base) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare::Base' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare, Compare) == 0x000004, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare::Compare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare, HasCompare) == 0x000008, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare::HasCompare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare, FlipCompare) == 0x000009, "Member 'HW12DEV_WeaponStats_Entry_TwoTextHeader_C_SetBaseCompare::FlipCompare' has a wrong offset!");

}

