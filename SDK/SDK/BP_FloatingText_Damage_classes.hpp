#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloatingText_Damage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_FloatingText_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FloatingText_Damage.BP_FloatingText_Damage_C
// 0x0030 (0x0328 - 0x02F8)
class ABP_FloatingText_Damage_C final : public ABP_FloatingText_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FloatingText_Damage_C;           // 0x02F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         DamageValue;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         StartingHorizontalDeviation;                       // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalDisplacementPerCycle;                    // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHeightInWorldSpace;                             // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParabolicCurveSharpness;                           // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinStartingHorizontalDeviation;                    // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStartingHorizontalDeviation;                    // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Critical;                                          // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Is_Killshot;                                       // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Is_Armor;                                          // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_31F[0x1];                                      // 0x031F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Font_Scale_Offset;                                 // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FloatingText_Damage(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RunUpdateCycle();
	void UpdateWidgetLocation();
	void ReachedPointOfMaxWidgetScale_(bool* Yes_);
	float GetHorizontalDistanceCovered();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FloatingText_Damage_C">();
	}
	static class ABP_FloatingText_Damage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FloatingText_Damage_C>();
	}
};
static_assert(alignof(ABP_FloatingText_Damage_C) == 0x000008, "Wrong alignment on ABP_FloatingText_Damage_C");
static_assert(sizeof(ABP_FloatingText_Damage_C) == 0x000328, "Wrong size on ABP_FloatingText_Damage_C");
static_assert(offsetof(ABP_FloatingText_Damage_C, UberGraphFrame_BP_FloatingText_Damage_C) == 0x0002F8, "Member 'ABP_FloatingText_Damage_C::UberGraphFrame_BP_FloatingText_Damage_C' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, DamageValue) == 0x000300, "Member 'ABP_FloatingText_Damage_C::DamageValue' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, StartingHorizontalDeviation) == 0x000304, "Member 'ABP_FloatingText_Damage_C::StartingHorizontalDeviation' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, HorizontalDisplacementPerCycle) == 0x000308, "Member 'ABP_FloatingText_Damage_C::HorizontalDisplacementPerCycle' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, MaxHeightInWorldSpace) == 0x00030C, "Member 'ABP_FloatingText_Damage_C::MaxHeightInWorldSpace' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, ParabolicCurveSharpness) == 0x000310, "Member 'ABP_FloatingText_Damage_C::ParabolicCurveSharpness' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, MinStartingHorizontalDeviation) == 0x000314, "Member 'ABP_FloatingText_Damage_C::MinStartingHorizontalDeviation' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, MaxStartingHorizontalDeviation) == 0x000318, "Member 'ABP_FloatingText_Damage_C::MaxStartingHorizontalDeviation' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, Critical) == 0x00031C, "Member 'ABP_FloatingText_Damage_C::Critical' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, Is_Killshot) == 0x00031D, "Member 'ABP_FloatingText_Damage_C::Is_Killshot' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, Is_Armor) == 0x00031E, "Member 'ABP_FloatingText_Damage_C::Is_Armor' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Damage_C, Font_Scale_Offset) == 0x000320, "Member 'ABP_FloatingText_Damage_C::Font_Scale_Offset' has a wrong offset!");

}

