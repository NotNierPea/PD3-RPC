#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccelByteUe4Sdk

#include "Basic.hpp"

#include "AccelByteUe4Sdk_classes.hpp"
#include "AccelByteUe4Sdk_parameters.hpp"


namespace SDK
{

// Function AccelByteUe4Sdk.ABAchievement.ClaimGlobalAchievements
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAchievement::ClaimGlobalAchievements(const class FString& AchievementCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "ClaimGlobalAchievements");

	Params::ABAchievement_ClaimGlobalAchievements Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.GetAchievement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAchievement::GetAchievement(const class FString& AchievementCode, const TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "GetAchievement");

	Params::ABAchievement_GetAchievement Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.GetTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAchievementListSortBy&  SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABAchievement::GetTags(const class FString& Name_0, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "GetTags");

	Params::ABAchievement_GetTags Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.QueryAchievements
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAchievementListSortBy&  SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TagQuery                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGlobal                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABAchievement::QueryAchievements(const class FString& Language, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, const class FString& TagQuery, bool bGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "QueryAchievements");

	Params::ABAchievement_QueryAchievements Parms{};

	Parms.Language = std::move(Language);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.TagQuery = std::move(TagQuery);
	Parms.bGlobal = bGlobal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.QueryGlobalAchievementContributors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementContributorsSortBy&SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABAchievement::QueryGlobalAchievementContributors(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "QueryGlobalAchievementContributors");

	Params::ABAchievement_QueryGlobalAchievementContributors Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.QueryGlobalAchievements
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementStatus&AchievementStatus                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementListSortBy&SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABAchievement::QueryGlobalAchievements(const class FString& AchievementCode, const EAccelByteGlobalAchievementStatus& AchievementStatus, const EAccelByteGlobalAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "QueryGlobalAchievements");

	Params::ABAchievement_QueryGlobalAchievements Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.AchievementStatus = AchievementStatus;
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.QueryGlobalAchievementUserContributed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementContributorsSortBy&SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABAchievement::QueryGlobalAchievementUserContributed(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "QueryGlobalAchievementUserContributed");

	Params::ABAchievement_QueryGlobalAchievementUserContributed Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.QueryUserAchievements
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EAccelByteAchievementListSortBy&  SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PreferUnlocked                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TagQuery                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABAchievement::QueryUserAchievements(const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, bool PreferUnlocked, const class FString& TagQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "QueryUserAchievements");

	Params::ABAchievement_QueryUserAchievements Parms{};

	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.PreferUnlocked = PreferUnlocked;
	Parms.TagQuery = std::move(TagQuery);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAchievement.UnlockAchievement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>                 OnSuccess                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAchievement::UnlockAchievement(const class FString& AchievementCode, const TDelegate<void()> OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAchievement", "UnlockAchievement");

	Params::ABAchievement_UnlockAchievement Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.AcceptPolicyVersion
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    LocalizedPolicyVersionId                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::AcceptPolicyVersion(const class FString& LocalizedPolicyVersionId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "AcceptPolicyVersion");

	Params::ABAgreement_AcceptPolicyVersion Parms{};

	Parms.LocalizedPolicyVersionId = std::move(LocalizedPolicyVersionId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.BulkAcceptPolicyVersions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArrayModelsAcceptAgreementRequest&AgreementRequests                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsAcceptAgreementResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::BulkAcceptPolicyVersions(const struct FArrayModelsAcceptAgreementRequest& AgreementRequests, const TDelegate<void(const struct FAccelByteModelsAcceptAgreementResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "BulkAcceptPolicyVersions");

	Params::ABAgreement_BulkAcceptPolicyVersions Parms{};

	Parms.AgreementRequests = std::move(AgreementRequests);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.GetLegalDocument
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Url                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const class FString& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::GetLegalDocument(const class FString& Url, const TDelegate<void(const class FString& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "GetLegalDocument");

	Params::ABAgreement_GetLegalDocument Parms{};

	Parms.Url = std::move(Url);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.GetLegalPolicies
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EAccelByteAgreementPolicyType&    AgreementPolicyType                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultOnEmpty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::GetLegalPolicies(const EAccelByteAgreementPolicyType& AgreementPolicyType, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "GetLegalPolicies");

	Params::ABAgreement_GetLegalPolicies Parms{};

	Parms.AgreementPolicyType = AgreementPolicyType;
	Parms.DefaultOnEmpty = DefaultOnEmpty;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByCountry
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CountryCode                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAgreementPolicyType&    AgreementPolicyType                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultOnEmpty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::GetLegalPoliciesByCountry(const class FString& CountryCode, const EAccelByteAgreementPolicyType& AgreementPolicyType, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "GetLegalPoliciesByCountry");

	Params::ABAgreement_GetLegalPoliciesByCountry Parms{};

	Parms.CountryCode = std::move(CountryCode);
	Parms.AgreementPolicyType = AgreementPolicyType;
	Parms.DefaultOnEmpty = DefaultOnEmpty;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByCountryAndTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CountryCode                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAgreementPolicyType&    AgreementPolicyType                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    DefaultOnEmpty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::GetLegalPoliciesByCountryAndTags(const class FString& CountryCode, const EAccelByteAgreementPolicyType& AgreementPolicyType, const TArray<class FString>& Tags, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "GetLegalPoliciesByCountryAndTags");

	Params::ABAgreement_GetLegalPoliciesByCountryAndTags Parms{};

	Parms.CountryCode = std::move(CountryCode);
	Parms.AgreementPolicyType = AgreementPolicyType;
	Parms.Tags = std::move(Tags);
	Parms.DefaultOnEmpty = DefaultOnEmpty;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByNamespace
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Namesapce                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAgreementPolicyType&    AgreementPolicyType                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultOnEmpty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::GetLegalPoliciesByNamespace(const class FString& Namesapce, const EAccelByteAgreementPolicyType& AgreementPolicyType, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "GetLegalPoliciesByNamespace");

	Params::ABAgreement_GetLegalPoliciesByNamespace Parms{};

	Parms.Namesapce = std::move(Namesapce);
	Parms.AgreementPolicyType = AgreementPolicyType;
	Parms.DefaultOnEmpty = DefaultOnEmpty;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EAccelByteAgreementPolicyType&    AgreementPolicyType                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    DefaultOnEmpty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::GetLegalPoliciesByTags(const EAccelByteAgreementPolicyType& AgreementPolicyType, const TArray<class FString>& tags, bool DefaultOnEmpty, const TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "GetLegalPoliciesByTags");

	Params::ABAgreement_GetLegalPoliciesByTags Parms{};

	Parms.AgreementPolicyType = AgreementPolicyType;
	Parms.tags = std::move(tags);
	Parms.DefaultOnEmpty = DefaultOnEmpty;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABAgreement.QueryLegalEligibilities
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Namespace                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsRetrieveUserEligibilitiesResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABAgreement::QueryLegalEligibilities(const class FString& Namespace, const TDelegate<void(const struct FArrayModelsRetrieveUserEligibilitiesResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABAgreement", "QueryLegalEligibilities");

	Params::ABAgreement_QueryLegalEligibilities Parms{};

	Parms.Namespace = std::move(Namespace);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetCurrentUserBinaryRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkGetCurrentUserBinaryRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkGetCurrentUserBinaryRecords");

	Params::ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords Parms{};

	Parms.Keys = std::move(Keys);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetGameBinaryRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsListGameBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkGetGameBinaryRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FAccelByteModelsListGameBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkGetGameBinaryRecords");

	Params::ABBinaryCloudSave_BulkGetGameBinaryRecords Parms{};

	Parms.Keys = std::move(Keys);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetPublicUserBinaryRecordsByKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkGetPublicUserBinaryRecordsByKeys(const TArray<class FString>& Keys, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkGetPublicUserBinaryRecordsByKeys");

	Params::ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys Parms{};

	Parms.Keys = std::move(Keys);
	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetPublicUserBinaryRecordsByUserIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            UserIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkGetPublicUserBinaryRecordsByUserIds(const class FString& Key, const TArray<class FString>& UserIds, const TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkGetPublicUserBinaryRecordsByUserIds");

	Params::ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds Parms{};

	Parms.Key = std::move(Key);
	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkQueryCurrentUserBinaryRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Query                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkQueryCurrentUserBinaryRecords(const class FString& Query, const TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkQueryCurrentUserBinaryRecords");

	Params::ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords Parms{};

	Parms.Query = std::move(Query);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkQueryGameBinaryRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Query                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedGameBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkQueryGameBinaryRecords(const class FString& Query, const TDelegate<void(const struct FAccelByteModelsPaginatedGameBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkQueryGameBinaryRecords");

	Params::ABBinaryCloudSave_BulkQueryGameBinaryRecords Parms{};

	Parms.Query = std::move(Query);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkQueryPublicUserBinaryRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::BulkQueryPublicUserBinaryRecords(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "BulkQueryPublicUserBinaryRecords");

	Params::ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.DeleteUserBinaryRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::DeleteUserBinaryRecord(const class FString& Key, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "DeleteUserBinaryRecord");

	Params::ABBinaryCloudSave_DeleteUserBinaryRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.GetCurrentUserBinaryRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::GetCurrentUserBinaryRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "GetCurrentUserBinaryRecord");

	Params::ABBinaryCloudSave_GetCurrentUserBinaryRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.GetGameBinaryRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameBinaryRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::GetGameBinaryRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsGameBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "GetGameBinaryRecord");

	Params::ABBinaryCloudSave_GetGameBinaryRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.GetPublicUserBinaryRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::GetPublicUserBinaryRecord(const class FString& Key, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "GetPublicUserBinaryRecord");

	Params::ABBinaryCloudSave_GetPublicUserBinaryRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.RequestUserBinaryRecordPresignedUrl
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileType                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsBinaryInfo& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::RequestUserBinaryRecordPresignedUrl(const class FString& Key, const class FString& FileType, const TDelegate<void(const struct FAccelByteModelsBinaryInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "RequestUserBinaryRecordPresignedUrl");

	Params::ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl Parms{};

	Parms.Key = std::move(Key);
	Parms.FileType = std::move(FileType);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.SaveUserBinaryRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPublic                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileType                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::SaveUserBinaryRecord(const class FString& Key, bool bIsPublic, const class FString& FileType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "SaveUserBinaryRecord");

	Params::ABBinaryCloudSave_SaveUserBinaryRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.bIsPublic = bIsPublic;
	Parms.FileType = std::move(FileType);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.UpdateUserBinaryRecordFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileType                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::UpdateUserBinaryRecordFile(const class FString& Key, const class FString& FileType, const class FString& FileLocation, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "UpdateUserBinaryRecordFile");

	Params::ABBinaryCloudSave_UpdateUserBinaryRecordFile Parms{};

	Parms.Key = std::move(Key);
	Parms.FileType = std::move(FileType);
	Parms.FileLocation = std::move(FileLocation);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBinaryCloudSave.UpdateUserBinaryRecordMetadata
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPublic                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABBinaryCloudSave::UpdateUserBinaryRecordMetadata(const class FString& Key, bool bIsPublic, const TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBinaryCloudSave", "UpdateUserBinaryRecordMetadata");

	Params::ABBinaryCloudSave_UpdateUserBinaryRecordMetadata Parms{};

	Parms.Key = std::move(Key);
	Parms.bIsPublic = bIsPublic;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBlock.BlockPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlockPlayerRequest&       Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsBlockPlayerResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABBlock::BlockPlayer(const struct FBlockPlayerRequest& Request, TDelegate<void(const struct FAccelByteModelsBlockPlayerResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBlock", "BlockPlayer");

	Params::ABBlock_BlockPlayer Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBlock.GetListOfBlockedUsers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABBlock::GetListOfBlockedUsers(TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBlock", "GetListOfBlockedUsers");

	Params::ABBlock_GetListOfBlockedUsers Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBlock.GetListOfBlockers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABBlock::GetListOfBlockers(TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBlock", "GetListOfBlockers");

	Params::ABBlock_GetListOfBlockers Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBlock.SetBlockPlayerNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsBlockPlayerNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABBlock::SetBlockPlayerNotifDelegate(TDelegate<void(const struct FAccelByteModelsBlockPlayerNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBlock", "SetBlockPlayerNotifDelegate");

	Params::ABBlock_SetBlockPlayerNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBlock.SetUnblockPlayerNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsUnblockPlayerNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABBlock::SetUnblockPlayerNotifDelegate(TDelegate<void(const struct FAccelByteModelsUnblockPlayerNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBlock", "SetUnblockPlayerNotifDelegate");

	Params::ABBlock_SetUnblockPlayerNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABBlock.UnblockPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUnblockPlayerRequest&     Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsUnblockPlayerResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABBlock::UnblockPlayer(const struct FUnblockPlayerRequest& Request, TDelegate<void(const struct FAccelByteModelsUnblockPlayerResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABBlock", "UnblockPlayer");

	Params::ABBlock_UnblockPlayer Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CategoryPath                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsCategoryInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetCategory(const class FString& CategoryPath, const class FString& Language, TDelegate<void(const struct FAccelByteModelsCategoryInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetCategory");

	Params::ABCatalog_GetCategory Parms{};

	Parms.CategoryPath = std::move(CategoryPath);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetChildCategories
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CategoryPath                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetChildCategories(const class FString& CategoryPath, const class FString& Language, TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetChildCategories");

	Params::ABCatalog_GetChildCategories Parms{};

	Parms.CategoryPath = std::move(CategoryPath);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetDescendantCategories
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CategoryPath                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetDescendantCategories(const class FString& CategoryPath, const class FString& Language, TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetDescendantCategories");

	Params::ABCatalog_GetDescendantCategories Parms{};

	Parms.CategoryPath = std::move(CategoryPath);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetItemByAppId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AppId                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsItemInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetItemByAppId(const class FString& AppId, const class FString& Language, const class FString& Region, TDelegate<void(const struct FAccelByteModelsItemInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetItemByAppId");

	Params::ABCatalog_GetItemByAppId Parms{};

	Parms.AppId = std::move(AppId);
	Parms.Language = std::move(Language);
	Parms.Region = std::move(Region);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetItemById
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StoreId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPopulateBundle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetItemById(const class FString& ItemId, const class FString& Language, const class FString& Region, const class FString& StoreId, bool bPopulateBundle, TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetItemById");

	Params::ABCatalog_GetItemById Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.Language = std::move(Language);
	Parms.Region = std::move(Region);
	Parms.StoreId = std::move(StoreId);
	Parms.bPopulateBundle = bPopulateBundle;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetItemDynamicData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsItemDynamicData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetItemDynamicData(const class FString& ItemId, TDelegate<void(const struct FAccelByteModelsItemDynamicData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetItemDynamicData");

	Params::ABCatalog_GetItemDynamicData Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetItemsByCriteria
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsItemCriteria&ItemCriteria                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EAccelByteItemListSortBy>& SortBy                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetItemsByCriteria(const struct FAccelByteModelsItemCriteria& ItemCriteria, const int32& Offset, const int32& Limit, const TArray<EAccelByteItemListSortBy>& SortBy, TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetItemsByCriteria");

	Params::ABCatalog_GetItemsByCriteria Parms{};

	Parms.ItemCriteria = std::move(ItemCriteria);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.SortBy = std::move(SortBy);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.GetRootCategories
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::GetRootCategories(const class FString& Language, TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "GetRootCategories");

	Params::ABCatalog_GetRootCategories Parms{};

	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCatalog.SearchItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Keyword                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABCatalog::SearchItem(const class FString& Language, const class FString& Keyword, const int32& Offset, const int32& Limit, const class FString& Region, TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCatalog", "SearchItem");

	Params::ABCatalog_SearchItem Parms{};

	Parms.Language = std::move(Language);
	Parms.Keyword = std::move(Keyword);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.Region = std::move(Region);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.BulkGetGameRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsListGameRecords& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::BulkGetGameRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FAccelByteModelsListGameRecords& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "BulkGetGameRecords");

	Params::ABCloudSave_BulkGetGameRecords Parms{};

	Parms.Keys = std::move(Keys);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.BulkGetOtherPlayerPublicRecordKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCloudSave::BulkGetOtherPlayerPublicRecordKeys(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "BulkGetOtherPlayerPublicRecordKeys");

	Params::ABCloudSave_BulkGetOtherPlayerPublicRecordKeys Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.BulkGetOtherPlayerPublicRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::BulkGetOtherPlayerPublicRecords(const class FString& UserId, const TArray<class FString>& Keys, const TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "BulkGetOtherPlayerPublicRecords");

	Params::ABCloudSave_BulkGetOtherPlayerPublicRecords Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Keys = std::move(Keys);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.BulkGetUserRecords
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::BulkGetUserRecords(const TArray<class FString>& Keys, const TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "BulkGetUserRecords");

	Params::ABCloudSave_BulkGetUserRecords Parms{};

	Parms.Keys = std::move(Keys);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.DeleteGameRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::DeleteGameRecord(const class FString& Key, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "DeleteGameRecord");

	Params::ABCloudSave_DeleteGameRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.DeleteUserRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::DeleteUserRecord(const class FString& Key, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "DeleteUserRecord");

	Params::ABCloudSave_DeleteUserRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.GetGameRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::GetGameRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsGameRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "GetGameRecord");

	Params::ABCloudSave_GetGameRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.GetPublicUserRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::GetPublicUserRecord(const class FString& Key, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "GetPublicUserRecord");

	Params::ABCloudSave_GetPublicUserRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.GetUserRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserRecord& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::GetUserRecord(const class FString& Key, const TDelegate<void(const struct FAccelByteModelsUserRecord& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "GetUserRecord");

	Params::ABCloudSave_GetUserRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceGameRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceGameRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceGameRecord");

	Params::ABCloudSave_ReplaceGameRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceGameRecordCheckLatest
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 LastUpdated                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceGameRecordCheckLatest(const class FString& Key, const struct FDateTime& LastUpdated, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceGameRecordCheckLatest");

	Params::ABCloudSave_ReplaceGameRecordCheckLatest Parms{};

	Parms.Key = std::move(Key);
	Parms.LastUpdated = std::move(LastUpdated);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceGameRecordCheckLatestRetry
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TryAttempt                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FJsonObjectWrapper& Response)>&PayloadModifier                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceGameRecordCheckLatestRetry(int32 TryAttempt, const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FJsonObjectWrapper& Response)>& PayloadModifier, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceGameRecordCheckLatestRetry");

	Params::ABCloudSave_ReplaceGameRecordCheckLatestRetry Parms{};

	Parms.TryAttempt = TryAttempt;
	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.PayloadModifier = PayloadModifier;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// bool                                    IsPublic                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceUserRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, bool IsPublic, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceUserRecord");

	Params::ABCloudSave_ReplaceUserRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.IsPublic = IsPublic;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatest
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 LastUpdated                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceUserRecordCheckLatest(const class FString& Key, const struct FDateTime& LastUpdated, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceUserRecordCheckLatest");

	Params::ABCloudSave_ReplaceUserRecordCheckLatest Parms{};

	Parms.Key = std::move(Key);
	Parms.LastUpdated = std::move(LastUpdated);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatestRetry
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TryAttempt                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FJsonObjectWrapper& Response)>&PayloadModifier                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceUserRecordCheckLatestRetry(int32 TryAttempt, const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FJsonObjectWrapper& Response)>& PayloadModifier, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceUserRecordCheckLatestRetry");

	Params::ABCloudSave_ReplaceUserRecordCheckLatestRetry Parms{};

	Parms.TryAttempt = TryAttempt;
	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.PayloadModifier = PayloadModifier;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatestRetryWithResponse
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TryAttempt                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FJsonObjectWrapper& Response)>&PayloadModifier                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceUserRecordCheckLatestRetryWithResponse(int32 TryAttempt, const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FJsonObjectWrapper& Response)>& PayloadModifier, const TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceUserRecordCheckLatestRetryWithResponse");

	Params::ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse Parms{};

	Parms.TryAttempt = TryAttempt;
	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.PayloadModifier = PayloadModifier;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatestWithResponse
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 LastUpdated                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::ReplaceUserRecordCheckLatestWithResponse(const class FString& Key, const struct FDateTime& LastUpdated, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "ReplaceUserRecordCheckLatestWithResponse");

	Params::ABCloudSave_ReplaceUserRecordCheckLatestWithResponse Parms{};

	Parms.Key = std::move(Key);
	Parms.LastUpdated = std::move(LastUpdated);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.SaveGameRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::SaveGameRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "SaveGameRecord");

	Params::ABCloudSave_SaveGameRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCloudSave.SaveUserRecord
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        RecordRequest                                          (Parm, NativeAccessSpecifierPublic)
// bool                                    IsPublic                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABCloudSave::SaveUserRecord(const class FString& Key, const struct FJsonObjectWrapper& RecordRequest, bool IsPublic, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCloudSave", "SaveUserRecord");

	Params::ABCloudSave_SaveUserRecord Parms{};

	Parms.Key = std::move(Key);
	Parms.RecordRequest = std::move(RecordRequest);
	Parms.IsPublic = IsPublic;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCurrency.GetCurrencyList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FArrayModelsCurrencyList& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteCurrencyType                  CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCurrency::GetCurrencyList(TDelegate<void(const struct FArrayModelsCurrencyList& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, EAccelByteCurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCurrency", "GetCurrencyList");

	Params::ABCurrency_GetCurrencyList Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.ConsumeUserEntitlement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EntitlementId                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            UseCount                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::ConsumeUserEntitlement(const class FString& EntitlementId, const int32& UseCount, TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "ConsumeUserEntitlement");

	Params::ABEntitlement_ConsumeUserEntitlement Parms{};

	Parms.EntitlementId = std::move(EntitlementId);
	Parms.UseCount = UseCount;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.CreateDistributionReceiver
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ExtUserId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsAttributes&Attributes                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::CreateDistributionReceiver(const class FString& ExtUserId, const struct FAccelByteModelsAttributes& Attributes, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "CreateDistributionReceiver");

	Params::ABEntitlement_CreateDistributionReceiver Parms{};

	Parms.ExtUserId = std::move(ExtUserId);
	Parms.Attributes = std::move(Attributes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.DeleteDistributionReceiver
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ExtUserId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::DeleteDistributionReceiver(const class FString& ExtUserId, const class FString& UserId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "DeleteDistributionReceiver");

	Params::ABEntitlement_DeleteDistributionReceiver Parms{};

	Parms.ExtUserId = std::move(ExtUserId);
	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.GetDistributionReceiver
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PublisherNamespace                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PublisherUserId                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FArrayModelsDistributionReceiver& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::GetDistributionReceiver(const class FString& PublisherNamespace, const class FString& PublisherUserId, TDelegate<void(const struct FArrayModelsDistributionReceiver& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "GetDistributionReceiver");

	Params::ABEntitlement_GetDistributionReceiver Parms{};

	Parms.PublisherNamespace = std::move(PublisherNamespace);
	Parms.PublisherUserId = std::move(PublisherUserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementById
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Entitlementid                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::GetUserEntitlementById(const class FString& Entitlementid, TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "GetUserEntitlementById");

	Params::ABEntitlement_GetUserEntitlementById Parms{};

	Parms.Entitlementid = std::move(Entitlementid);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipAny
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            ItemIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            AppIds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Skus                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::GetUserEntitlementOwnershipAny(const TArray<class FString>& ItemIds, const TArray<class FString>& AppIds, const TArray<class FString>& Skus, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "GetUserEntitlementOwnershipAny");

	Params::ABEntitlement_GetUserEntitlementOwnershipAny Parms{};

	Parms.ItemIds = std::move(ItemIds);
	Parms.AppIds = std::move(AppIds);
	Parms.Skus = std::move(Skus);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipByAppId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AppId                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::GetUserEntitlementOwnershipByAppId(const class FString& AppId, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "GetUserEntitlementOwnershipByAppId");

	Params::ABEntitlement_GetUserEntitlementOwnershipByAppId Parms{};

	Parms.AppId = std::move(AppId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipByItemId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::GetUserEntitlementOwnershipByItemId(const class FString& ItemId, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "GetUserEntitlementOwnershipByItemId");

	Params::ABEntitlement_GetUserEntitlementOwnershipByItemId Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipBySku
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Sku                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::GetUserEntitlementOwnershipBySku(const class FString& Sku, TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "GetUserEntitlementOwnershipBySku");

	Params::ABEntitlement_GetUserEntitlementOwnershipBySku Parms{};

	Parms.Sku = std::move(Sku);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.QueryUserEntitlements
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EntitlementName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            ItemIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteEntitlementClass              EntitlementClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteAppType                       AppType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABEntitlement::QueryUserEntitlements(const class FString& EntitlementName, const TArray<class FString>& ItemIds, const int32& Offset, const int32& Limit, TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Response)> OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteEntitlementClass EntitlementClass, EAccelByteAppType AppType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "QueryUserEntitlements");

	Params::ABEntitlement_QueryUserEntitlements Parms{};

	Parms.EntitlementName = std::move(EntitlementName);
	Parms.ItemIds = std::move(ItemIds);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.EntitlementClass = EntitlementClass;
	Parms.AppType = AppType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.SyncMobilePlatformPurchaseApple
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsPlatformSyncMobileApple&SyncRequest                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::SyncMobilePlatformPurchaseApple(const struct FAccelByteModelsPlatformSyncMobileApple& SyncRequest, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "SyncMobilePlatformPurchaseApple");

	Params::ABEntitlement_SyncMobilePlatformPurchaseApple Parms{};

	Parms.SyncRequest = std::move(SyncRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.SyncMobilePlatformPurchaseGoogle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsPlatformSyncMobileGoogle&SyncRequest                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::SyncMobilePlatformPurchaseGoogle(const struct FAccelByteModelsPlatformSyncMobileGoogle& SyncRequest, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "SyncMobilePlatformPurchaseGoogle");

	Params::ABEntitlement_SyncMobilePlatformPurchaseGoogle Parms{};

	Parms.SyncRequest = std::move(SyncRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.SyncMobilePlatformPurchaseGooglePlay
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsPlatformSyncMobileGoogle&SyncRequest                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPlatformSyncMobileGoogleResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::SyncMobilePlatformPurchaseGooglePlay(const struct FAccelByteModelsPlatformSyncMobileGoogle& SyncRequest, TDelegate<void(const struct FAccelByteModelsPlatformSyncMobileGoogleResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "SyncMobilePlatformPurchaseGooglePlay");

	Params::ABEntitlement_SyncMobilePlatformPurchaseGooglePlay Parms{};

	Parms.SyncRequest = std::move(SyncRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.SyncPlatformPurchase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAccelBytePlatformSync                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::SyncPlatformPurchase(EAccelBytePlatformSync PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "SyncPlatformPurchase");

	Params::ABEntitlement_SyncPlatformPurchase Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.SyncPlatformPurchaseSingleItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsEntitlementSyncBase&EntitlementSyncBase                                    (Parm, NativeAccessSpecifierPublic)
// EAccelBytePlatformSync                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::SyncPlatformPurchaseSingleItem(const struct FAccelByteModelsEntitlementSyncBase& EntitlementSyncBase, EAccelBytePlatformSync PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "SyncPlatformPurchaseSingleItem");

	Params::ABEntitlement_SyncPlatformPurchaseSingleItem Parms{};

	Parms.EntitlementSyncBase = std::move(EntitlementSyncBase);
	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.SyncTwitchDropEntitlement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsTwitchDropEntitlement&TwitchDropModel                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::SyncTwitchDropEntitlement(const struct FAccelByteModelsTwitchDropEntitlement& TwitchDropModel, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "SyncTwitchDropEntitlement");

	Params::ABEntitlement_SyncTwitchDropEntitlement Parms{};

	Parms.TwitchDropModel = std::move(TwitchDropModel);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.UpdateDistributionReceiver
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ExtUserId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsAttributes&Attributes                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::UpdateDistributionReceiver(const class FString& ExtUserId, const struct FAccelByteModelsAttributes& Attributes, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "UpdateDistributionReceiver");

	Params::ABEntitlement_UpdateDistributionReceiver Parms{};

	Parms.ExtUserId = std::move(ExtUserId);
	Parms.Attributes = std::move(Attributes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABEntitlement.ValidateUserItemPurchaseCondition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FAccelByteModelsPlatformValidateUserItemPurchaseResponse>& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABEntitlement::ValidateUserItemPurchaseCondition(const TArray<class FString>& Items, TDelegate<void(const TArray<struct FAccelByteModelsPlatformValidateUserItemPurchaseResponse>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABEntitlement", "ValidateUserItemPurchaseCondition");

	Params::ABEntitlement_ValidateUserItemPurchaseCondition Parms{};

	Parms.Items = std::move(Items);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.AcceptFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::AcceptFriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "AcceptFriend");

	Params::ABFriends_AcceptFriend Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.BulkFriendRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsBulkFriendsRequest&UserIds                                                (Parm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::BulkFriendRequest(const struct FAccelByteModelsBulkFriendsRequest& UserIds, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "BulkFriendRequest");

	Params::ABFriends_BulkFriendRequest Parms{};

	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.CancelFriendRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::CancelFriendRequest(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "CancelFriendRequest");

	Params::ABFriends_CancelFriendRequest Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.GetFriendshipStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::GetFriendshipStatus(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "GetFriendshipStatus");

	Params::ABFriends_GetFriendshipStatus Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.ListIncomingFriends
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::ListIncomingFriends(TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "ListIncomingFriends");

	Params::ABFriends_ListIncomingFriends Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.ListOutgoingFriends
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::ListOutgoingFriends(TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "ListOutgoingFriends");

	Params::ABFriends_ListOutgoingFriends Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.LoadFriendsList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::LoadFriendsList(TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "LoadFriendsList");

	Params::ABFriends_LoadFriendsList Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.RejectFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::RejectFriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "RejectFriend");

	Params::ABFriends_RejectFriend Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.RequestFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::RequestFriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "RequestFriend");

	Params::ABFriends_RequestFriend Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.SetOnCancelFriendsNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsCancelFriendsNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::SetOnCancelFriendsNotifDelegate(TDelegate<void(const struct FAccelByteModelsCancelFriendsNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "SetOnCancelFriendsNotifDelegate");

	Params::ABFriends_SetOnCancelFriendsNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.SetOnFriendRequestAcceptedNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::SetOnFriendRequestAcceptedNotifDelegate(TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "SetOnFriendRequestAcceptedNotifDelegate");

	Params::ABFriends_SetOnFriendRequestAcceptedNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.SetOnIncomingRequestFriendsNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::SetOnIncomingRequestFriendsNotifDelegate(TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "SetOnIncomingRequestFriendsNotifDelegate");

	Params::ABFriends_SetOnIncomingRequestFriendsNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.SetOnRejectFriendsNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRejectFriendsNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::SetOnRejectFriendsNotifDelegate(TDelegate<void(const struct FAccelByteModelsRejectFriendsNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "SetOnRejectFriendsNotifDelegate");

	Params::ABFriends_SetOnRejectFriendsNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.SetOnUnfriendNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsUnfriendNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::SetOnUnfriendNotifDelegate(TDelegate<void(const struct FAccelByteModelsUnfriendNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "SetOnUnfriendNotifDelegate");

	Params::ABFriends_SetOnUnfriendNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFriends.Unfriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFriends::Unfriend(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFriends", "Unfriend");

	Params::ABFriends_Unfriend Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABFulfillment.RedeemCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Code                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsFulfillmentResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABFulfillment::RedeemCode(const class FString& Code, const class FString& Region, const class FString& Language, TDelegate<void(const struct FAccelByteModelsFulfillmentResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABFulfillment", "RedeemCode");

	Params::ABFulfillment_RedeemCode Parms{};

	Parms.Code = std::move(Code);
	Parms.Region = std::move(Region);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.AcceptGroupInvitation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::AcceptGroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "AcceptGroupInvitation");

	Params::ABGroup_AcceptGroupInvitation Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.AcceptGroupJoinRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::AcceptGroupJoinRequest(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "AcceptGroupJoinRequest");

	Params::ABGroup_AcceptGroupJoinRequest Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.AcceptV2GroupInvitation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::AcceptV2GroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "AcceptV2GroupInvitation");

	Params::ABGroup_AcceptV2GroupInvitation Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.AcceptV2GroupJoinRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::AcceptV2GroupJoinRequest(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "AcceptV2GroupJoinRequest");

	Params::ABGroup_AcceptV2GroupJoinRequest Parms{};

	Parms.UserId = std::move(UserId);
	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.AssignMemberRole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MemberRoleId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUserIdWrapper&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::AssignMemberRole(const class FString& MemberRoleId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "AssignMemberRole");

	Params::ABGroup_AssignMemberRole Parms{};

	Parms.MemberRoleId = std::move(MemberRoleId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.AssignV2MemberRole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MemberRoleId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUserIdWrapper&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::AssignV2MemberRole(const class FString& MemberRoleId, const class FString& GroupId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "AssignV2MemberRole");

	Params::ABGroup_AssignV2MemberRole Parms{};

	Parms.MemberRoleId = std::move(MemberRoleId);
	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.CancelGroupMemberInvitation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::CancelGroupMemberInvitation(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "CancelGroupMemberInvitation");

	Params::ABGroup_CancelGroupMemberInvitation Parms{};

	Parms.UserId = std::move(UserId);
	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.CancelJoinGroupRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::CancelJoinGroupRequest(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "CancelJoinGroupRequest");

	Params::ABGroup_CancelJoinGroupRequest Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.CreateGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsCreateGroupRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::CreateGroup(const struct FAccelByteModelsCreateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "CreateGroup");

	Params::ABGroup_CreateGroup Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.CreateV2Group
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsCreateGroupRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::CreateV2Group(const struct FAccelByteModelsCreateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "CreateV2Group");

	Params::ABGroup_CreateV2Group Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.DeleteGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::DeleteGroup(const class FString& GroupId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "DeleteGroup");

	Params::ABGroup_DeleteGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.DeleteGroupPredefinedRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAllowedAction&          AllowedAction                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::DeleteGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "DeleteGroupPredefinedRule");

	Params::ABGroup_DeleteGroupPredefinedRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.AllowedAction = AllowedAction;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.DeleteMemberRole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MemberRoleId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUserIdWrapper&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::DeleteMemberRole(const class FString& MemberRoleId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "DeleteMemberRole");

	Params::ABGroup_DeleteMemberRole Parms{};

	Parms.MemberRoleId = std::move(MemberRoleId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.DeleteV2Group
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::DeleteV2Group(const class FString& GroupId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "DeleteV2Group");

	Params::ABGroup_DeleteV2Group Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.DeleteV2GroupPredefinedRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAllowedAction&          AllowedAction                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::DeleteV2GroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "DeleteV2GroupPredefinedRule");

	Params::ABGroup_DeleteV2GroupPredefinedRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.AllowedAction = AllowedAction;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.DeleteV2MemberRole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MemberRoleId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUserIdWrapper&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::DeleteV2MemberRole(const class FString& MemberRoleId, const class FString& GroupId, const struct FAccelByteModelsUserIdWrapper& RequestContent, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "DeleteV2MemberRole");

	Params::ABGroup_DeleteV2MemberRole Parms{};

	Parms.MemberRoleId = std::move(MemberRoleId);
	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetAllMemberRoles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetAllMemberRoles(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetAllMemberRoles");

	Params::ABGroup_GetAllMemberRoles Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroup(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroup");

	Params::ABGroup_GetGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroupInviteRequestList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroupInviteRequestList(const class FString& GroupId, const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroupInviteRequestList");

	Params::ABGroup_GetGroupInviteRequestList Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroupJoinRequestList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroupJoinRequestList(const class FString& GroupId, const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroupJoinRequestList");

	Params::ABGroup_GetGroupJoinRequestList Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroupJoinRequests
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroupJoinRequests(const class FString& GroupId, const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroupJoinRequests");

	Params::ABGroup_GetGroupJoinRequests Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroupList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsGetGroupListRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroupList(const struct FAccelByteModelsGetGroupListRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroupList");

	Params::ABGroup_GetGroupList Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroupMembersListByGroupId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsGetGroupMembersListByGroupIdRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroupMembersListByGroupId(const class FString& GroupId, const struct FAccelByteModelsGetGroupMembersListByGroupIdRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroupMembersListByGroupId");

	Params::ABGroup_GetGroupMembersListByGroupId Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetGroupsByGroupIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            GroupIds                                               (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetGroupsByGroupIds(const TArray<class FString>& GroupIds, const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetGroupsByGroupIds");

	Params::ABGroup_GetGroupsByGroupIds Parms{};

	Parms.GroupIds = std::move(GroupIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetMemberRoles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetMemberRoles(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetMemberRoles");

	Params::ABGroup_GetMemberRoles Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetMyJoinedGroupInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetMyJoinedGroupInfo(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetMyJoinedGroupInfo");

	Params::ABGroup_GetMyJoinedGroupInfo Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetMyJoinGroupRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsLimitOffsetRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetMyJoinGroupRequest(const struct FAccelByteModelsLimitOffsetRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetMyJoinGroupRequest");

	Params::ABGroup_GetMyJoinGroupRequest Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetUserGroupInfoByUserId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetUserGroupInfoByUserId(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetUserGroupInfoByUserId");

	Params::ABGroup_GetUserGroupInfoByUserId Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.GetUserGroupStatusInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::GetUserGroupStatusInfo(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "GetUserGroupStatusInfo");

	Params::ABGroup_GetUserGroupStatusInfo Parms{};

	Parms.UserId = std::move(UserId);
	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.InviteUserToGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::InviteUserToGroup(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "InviteUserToGroup");

	Params::ABGroup_InviteUserToGroup Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.InviteUserToV2Group
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::InviteUserToV2Group(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "InviteUserToV2Group");

	Params::ABGroup_InviteUserToV2Group Parms{};

	Parms.UserId = std::move(UserId);
	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.JoinGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::JoinGroup(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "JoinGroup");

	Params::ABGroup_JoinGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.JoinV2Group
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::JoinV2Group(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "JoinV2Group");

	Params::ABGroup_JoinV2Group Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.KickGroupMember
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::KickGroupMember(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "KickGroupMember");

	Params::ABGroup_KickGroupMember Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.KickV2GroupMember
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::KickV2GroupMember(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "KickV2GroupMember");

	Params::ABGroup_KickV2GroupMember Parms{};

	Parms.UserId = std::move(UserId);
	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.LeaveGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::LeaveGroup(const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "LeaveGroup");

	Params::ABGroup_LeaveGroup Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.LeaveV2Group
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::LeaveV2Group(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "LeaveV2Group");

	Params::ABGroup_LeaveV2Group Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.RejectGroupInvitation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::RejectGroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "RejectGroupInvitation");

	Params::ABGroup_RejectGroupInvitation Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.RejectGroupJoinRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::RejectGroupJoinRequest(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "RejectGroupJoinRequest");

	Params::ABGroup_RejectGroupJoinRequest Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.RejectV2GroupInvitation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::RejectV2GroupInvitation(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "RejectV2GroupInvitation");

	Params::ABGroup_RejectV2GroupInvitation Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.RejectV2GroupJoinRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::RejectV2GroupJoinRequest(const class FString& UserId, const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "RejectV2GroupJoinRequest");

	Params::ABGroup_RejectV2GroupJoinRequest Parms{};

	Parms.UserId = std::move(UserId);
	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.UpdateGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bCompletelyReplace                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAccelByteModelsGroupUpdatable*  RequestContent                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateGroup(const class FString& GroupId, const bool bCompletelyReplace, struct FAccelByteModelsGroupUpdatable* RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateGroup");

	Params::ABGroup_UpdateGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.bCompletelyReplace = bCompletelyReplace;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RequestContent != nullptr)
		*RequestContent = std::move(Parms.RequestContent);
}


// Function AccelByteUe4Sdk.ABGroup.UpdateGroupCustomAttributes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAccelByteModelsUpdateGroupCustomAttributesRequest*RequestContent                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateGroupCustomAttributes(const class FString& GroupId, struct FAccelByteModelsUpdateGroupCustomAttributesRequest* RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateGroupCustomAttributes");

	Params::ABGroup_UpdateGroupCustomAttributes Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RequestContent != nullptr)
		*RequestContent = std::move(Parms.RequestContent);
}


// Function AccelByteUe4Sdk.ABGroup.UpdateGroupCustomRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAccelByteModelsUpdateCustomRulesRequest*RequestContent                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateGroupCustomRule(const class FString& GroupId, struct FAccelByteModelsUpdateCustomRulesRequest* RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateGroupCustomRule");

	Params::ABGroup_UpdateGroupCustomRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RequestContent != nullptr)
		*RequestContent = std::move(Parms.RequestContent);
}


// Function AccelByteUe4Sdk.ABGroup.UpdateGroupPredefinedRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAllowedAction&          AllowedAction                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateGroupPredefinedRule");

	Params::ABGroup_UpdateGroupPredefinedRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.AllowedAction = AllowedAction;
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.UpdateV2Group
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateGroupRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateV2Group(const class FString& GroupId, const struct FAccelByteModelsUpdateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateV2Group");

	Params::ABGroup_UpdateV2Group Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.UpdateV2GroupCustomAttributes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateGroupCustomAttributesRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateV2GroupCustomAttributes(const class FString& GroupId, const struct FAccelByteModelsUpdateGroupCustomAttributesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateV2GroupCustomAttributes");

	Params::ABGroup_UpdateV2GroupCustomAttributes Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.UpdateV2GroupCustomRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateCustomRulesRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateV2GroupCustomRule(const class FString& GroupId, const struct FAccelByteModelsUpdateCustomRulesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateV2GroupCustomRule");

	Params::ABGroup_UpdateV2GroupCustomRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABGroup.UpdateV2GroupPredefinedRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAllowedAction&          AllowedAction                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABGroup::UpdateV2GroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABGroup", "UpdateV2GroupPredefinedRule");

	Params::ABGroup_UpdateV2GroupPredefinedRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.AllowedAction = AllowedAction;
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetBulkUserRankingV3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            UserIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    LeaderboardCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsBulkUserRankingDataV3& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetBulkUserRankingV3(const TArray<class FString>& UserIds, const class FString& LeaderboardCode, const TDelegate<void(const struct FAccelByteModelsBulkUserRankingDataV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetBulkUserRankingV3");

	Params::ABLeaderboard_GetBulkUserRankingV3 Parms{};

	Parms.UserIds = std::move(UserIds);
	Parms.LeaderboardCode = std::move(LeaderboardCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetLeaderboards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedLeaderboardData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetLeaderboards(int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsPaginatedLeaderboardData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetLeaderboards");

	Params::ABLeaderboard_GetLeaderboards Parms{};

	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetRankingByCycle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    LeaderboardCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CycleId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetRankingByCycle(const class FString& LeaderboardCode, const class FString& CycleId, int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetRankingByCycle");

	Params::ABLeaderboard_GetRankingByCycle Parms{};

	Parms.LeaderboardCode = std::move(LeaderboardCode);
	Parms.CycleId = std::move(CycleId);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetRankings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    LeaderboardCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteLeaderboardTimeFrame&   TimeFrame                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetRankings(const class FString& LeaderboardCode, const EAccelByteLeaderboardTimeFrame& TimeFrame, int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetRankings");

	Params::ABLeaderboard_GetRankings Parms{};

	Parms.LeaderboardCode = std::move(LeaderboardCode);
	Parms.TimeFrame = TimeFrame;
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetRankingsV3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    LeaderboardCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetRankingsV3(const class FString& LeaderboardCode, int32 Offset, int32 Limit, const TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetRankingsV3");

	Params::ABLeaderboard_GetRankingsV3 Parms{};

	Parms.LeaderboardCode = std::move(LeaderboardCode);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetUserRanking
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LeaderboardCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserRankingData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetUserRanking(const class FString& UserId, const class FString& LeaderboardCode, const TDelegate<void(const struct FAccelByteModelsUserRankingData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetUserRanking");

	Params::ABLeaderboard_GetUserRanking Parms{};

	Parms.UserId = std::move(UserId);
	Parms.LeaderboardCode = std::move(LeaderboardCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLeaderboard.GetUserRankingV3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LeaderboardCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserRankingDataV3& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLeaderboard::GetUserRankingV3(const class FString& UserId, const class FString& LeaderboardCode, const TDelegate<void(const struct FAccelByteModelsUserRankingDataV3& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLeaderboard", "GetUserRankingV3");

	Params::ABLeaderboard_GetUserRankingV3 Parms{};

	Parms.UserId = std::move(UserId);
	Parms.LeaderboardCode = std::move(LeaderboardCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.CancelMatchmaking
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCancelMatchmakingRequest& Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::CancelMatchmaking(const struct FCancelMatchmakingRequest& Request, TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "CancelMatchmaking");

	Params::ABMatchmaking_CancelMatchmaking Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetOnDs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsDsNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetOnDs(TDelegate<void(const struct FAccelByteModelsDsNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetOnDs");

	Params::ABMatchmaking_SetOnDs Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetOnMatchmaking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetOnMatchmaking(TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetOnMatchmaking");

	Params::ABMatchmaking_SetOnMatchmaking Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetOnRematchmaking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetOnRematchmaking(TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetOnRematchmaking");

	Params::ABMatchmaking_SetOnRematchmaking Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetOnSetReadyConsent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetOnSetReadyConsent(TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetOnSetReadyConsent");

	Params::ABMatchmaking_SetOnSetReadyConsent Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetOnSetRejectConsent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetOnSetRejectConsent(TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetOnSetRejectConsent");

	Params::ABMatchmaking_SetOnSetRejectConsent Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetReadyConsent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSetReadyConsentRequest&   Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetReadyConsent(const struct FSetReadyConsentRequest& Request, TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetReadyConsent");

	Params::ABMatchmaking_SetReadyConsent Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.SetRejectConsent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSetRejectConsentRequest&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::SetRejectConsent(const struct FSetRejectConsentRequest& Request, TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "SetRejectConsent");

	Params::ABMatchmaking_SetRejectConsent Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMatchmaking.StartMatchmaking
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStartMatchmakingRequest&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMatchmaking::StartMatchmaking(const struct FStartMatchmakingRequest& Request, TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMatchmaking", "StartMatchmaking");

	Params::ABMatchmaking_StartMatchmaking Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMessage.SendChannelMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSendChannelMessageRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsChannelMessageResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABMessage::SendChannelMessage(const struct FSendChannelMessageRequest& Request, TDelegate<void(const struct FAccelByteModelsChannelMessageResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SendChannelMessage");

	Params::ABMessage_SendChannelMessage Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABMessage.SendJoinDefaultChannelChatRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsJoinDefaultChannelResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABMessage::SendJoinDefaultChannelChatRequest(TDelegate<void(const struct FAccelByteModelsJoinDefaultChannelResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SendJoinDefaultChannelChatRequest");

	Params::ABMessage_SendJoinDefaultChannelChatRequest Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABMessage.SendPartyMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSendPartyMessageRequest&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABMessage::SendPartyMessage(const struct FSendPartyMessageRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SendPartyMessage");

	Params::ABMessage_SendPartyMessage Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABMessage.SendPing
// (Final, Native, Public, BlueprintCallable)

void UABMessage::SendPing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SendPing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMessage.SendPrivateMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSendPrivateMessageRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABMessage::SendPrivateMessage(const struct FSendPrivateMessageRequest& Request, TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SendPrivateMessage");

	Params::ABMessage_SendPrivateMessage Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABMessage.SetChannelMessageNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsChannelMessageNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMessage::SetChannelMessageNotifDelegate(TDelegate<void(const struct FAccelByteModelsChannelMessageNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SetChannelMessageNotifDelegate");

	Params::ABMessage_SetChannelMessageNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMessage.SetMessageNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsNotificationMessage& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMessage::SetMessageNotifDelegate(TDelegate<void(const struct FAccelByteModelsNotificationMessage& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SetMessageNotifDelegate");

	Params::ABMessage_SetMessageNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMessage.SetOnPartyChatNotification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Notif)>OnPartyChatNotif                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMessage::SetOnPartyChatNotification(TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Notif)> OnPartyChatNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SetOnPartyChatNotification");

	Params::ABMessage_SetOnPartyChatNotification Parms{};

	Parms.OnPartyChatNotif = OnPartyChatNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMessage.SetPrivateMessageNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABMessage::SetPrivateMessageNotifDelegate(TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABMessage", "SetPrivateMessageNotifDelegate");

	Params::ABMessage_SetPrivateMessageNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABOrder.CancelOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    OrderNo                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABOrder::CancelOrder(const class FString& OrderNo, TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABOrder", "CancelOrder");

	Params::ABOrder_CancelOrder Parms{};

	Parms.OrderNo = std::move(OrderNo);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABOrder.CreateNewOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsOrderCreate&OrderCreateRequest                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABOrder::CreateNewOrder(const struct FAccelByteModelsOrderCreate& OrderCreateRequest, TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABOrder", "CreateNewOrder");

	Params::ABOrder_CreateNewOrder Parms{};

	Parms.OrderCreateRequest = std::move(OrderCreateRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABOrder.GetUserOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    OrderNo                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABOrder::GetUserOrder(const class FString& OrderNo, TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABOrder", "GetUserOrder");

	Params::ABOrder_GetUserOrder Parms{};

	Parms.OrderNo = std::move(OrderNo);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABOrder.GetUserOrderHistory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    OrderNo                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FArrayModelsOrderHistoryInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABOrder::GetUserOrderHistory(const class FString& OrderNo, TDelegate<void(const struct FArrayModelsOrderHistoryInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABOrder", "GetUserOrderHistory");

	Params::ABOrder_GetUserOrderHistory Parms{};

	Parms.OrderNo = std::move(OrderNo);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABOrder.GetUserOrders
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            Page                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABOrder::GetUserOrders(const int32& Page, const int32& Size, TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABOrder", "GetUserOrders");

	Params::ABOrder_GetUserOrders Parms{};

	Parms.Page = Page;
	Parms.Size = Size;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.CreateParty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::CreateParty(TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "CreateParty");

	Params::ABParty_CreateParty Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.GetPartyData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGetPartyDataRequest&      Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyData& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::GetPartyData(const struct FGetPartyDataRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyData& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "GetPartyData");

	Params::ABParty_GetPartyData Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.GetPartyStorage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGetPartyStorageRequest&   Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::GetPartyStorage(const struct FGetPartyStorageRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "GetPartyStorage");

	Params::ABParty_GetPartyStorage Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyDeleteCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyDeleteCodeResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyDeleteCode(TDelegate<void(const struct FAccelByteModelsPartyDeleteCodeResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyDeleteCode");

	Params::ABParty_PartyDeleteCode Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyGenerateCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyGenerateCodeResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyGenerateCode(TDelegate<void(const struct FAccelByteModelsPartyGenerateCodeResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyGenerateCode");

	Params::ABParty_PartyGenerateCode Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyGetCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyGetCodeResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyGetCode(TDelegate<void(const struct FAccelByteModelsPartyGetCodeResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyGetCode");

	Params::ABParty_PartyGetCode Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyInfo(TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyInfo");

	Params::ABParty_PartyInfo Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyInvite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FPartyInviteRequest&       Request                                                (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyInvite(const struct FPartyInviteRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyInvite");

	Params::ABParty_PartyInvite Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyJoin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPartyJoinRequest&         Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyJoin(const struct FPartyJoinRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyJoin");

	Params::ABParty_PartyJoin Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyJoinViaCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPartyJoinViaCodeRequest&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyJoinViaCode(const struct FPartyJoinViaCodeRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyJoinViaCode");

	Params::ABParty_PartyJoinViaCode Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyKick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPartyKickRequest&         Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyKick(const struct FPartyKickRequest& Request, TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyKick");

	Params::ABParty_PartyKick Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyLeave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyLeave(TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyLeave");

	Params::ABParty_PartyLeave Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyPromoteLeader
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPartyPromoteLeaderRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyPromoteLeaderResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyPromoteLeader(const struct FPartyPromoteLeaderRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyPromoteLeaderResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyPromoteLeader");

	Params::ABParty_PartyPromoteLeader Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.PartyReject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FPartyRejectRequest&       Request                                                (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyRejectResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::PartyReject(const struct FPartyRejectRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyRejectResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "PartyReject");

	Params::ABParty_PartyReject Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyDataUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyDataUpdate(TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyDataUpdate");

	Params::ABParty_SetOnPartyDataUpdate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyDataUpdateNotifDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyDataUpdateNotifDelegate(TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyDataUpdateNotifDelegate");

	Params::ABParty_SetOnPartyDataUpdateNotifDelegate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyGetInvited
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyGetInvited(TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyGetInvited");

	Params::ABParty_SetOnPartyGetInvited Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyInvite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsInvitationNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyInvite(TDelegate<void(const struct FAccelByteModelsInvitationNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyInvite");

	Params::ABParty_SetOnPartyInvite Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyJoin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyJoin(TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyJoin");

	Params::ABParty_SetOnPartyJoin Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyKick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyKick(TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyKick");

	Params::ABParty_SetOnPartyKick Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyLeave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyLeave(TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyLeave");

	Params::ABParty_SetOnPartyLeave Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyMemberConnect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyMemberConnect(TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyMemberConnect");

	Params::ABParty_SetOnPartyMemberConnect Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyMemberDisconnect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyMemberDisconnect(TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyMemberDisconnect");

	Params::ABParty_SetOnPartyMemberDisconnect Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyMemberLeave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyMemberLeave(TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyMemberLeave");

	Params::ABParty_SetOnPartyMemberLeave Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyReject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyRejectNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyReject(TDelegate<void(const struct FAccelByteModelsPartyRejectNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyReject");

	Params::ABParty_SetOnPartyReject Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetOnPartyUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyNotif& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetOnPartyUpdate(TDelegate<void(const struct FAccelByteModelsPartyNotif& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetOnPartyUpdate");

	Params::ABParty_SetOnPartyUpdate Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.SetPartySizeLimit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PartyId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::SetPartySizeLimit(const class FString& PartyId, const int32 Limit, const TDelegate<void()>& OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "SetPartySizeLimit");

	Params::ABParty_SetPartySizeLimit Parms{};

	Parms.PartyId = std::move(PartyId);
	Parms.Limit = Limit;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABParty.WritePartyStorage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FWritePartyStorageRequest& Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABParty::WritePartyStorage(const struct FWritePartyStorageRequest& Request, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABParty", "WritePartyStorage");

	Params::ABParty_WritePartyStorage Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABPresence.BulkGetUserPresence
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBulkGetUserPresenceRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsBulkUserStatusNotif& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABPresence::BulkGetUserPresence(const struct FBulkGetUserPresenceRequest& Request, TDelegate<void(const struct FAccelByteModelsBulkUserStatusNotif& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABPresence", "BulkGetUserPresence");

	Params::ABPresence_BulkGetUserPresence Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABPresence.GetAllFriendsStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABPresence::GetAllFriendsStatus(TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABPresence", "GetAllFriendsStatus");

	Params::ABPresence_GetAllFriendsStatus Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABPresence.SetOnFriendStatusNotif
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Notif)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABPresence::SetOnFriendStatusNotif(TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Notif)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABPresence", "SetOnFriendStatusNotif");

	Params::ABPresence_SetOnFriendStatusNotif Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABPresence.SetPresenceStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelBytePresenceStatus&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABPresence::SetPresenceStatus(const struct FAccelBytePresenceStatus& Request, TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABPresence", "SetPresenceStatus");

	Params::ABPresence_SetPresenceStatus Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABReward.GetRewardByRewardCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    RewardCode                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABReward::GetRewardByRewardCode(const class FString& RewardCode, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABReward", "GetRewardByRewardCode");

	Params::ABReward_GetRewardByRewardCode Parms{};

	Parms.RewardCode = std::move(RewardCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABReward.GetRewardByRewardId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    RewardId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABReward::GetRewardByRewardId(const class FString& RewardId, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABReward", "GetRewardByRewardId");

	Params::ABReward_GetRewardByRewardId Parms{};

	Parms.RewardId = std::move(RewardId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABReward.QueryRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EventTopic                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteRewardListSortBy&       SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsQueryReward& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABReward::QueryRewards(const class FString& EventTopic, int32 Offset, int32 Limit, const EAccelByteRewardListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsQueryReward& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABReward", "QueryRewards");

	Params::ABReward_QueryRewards Parms{};

	Parms.EventTopic = std::move(EventTopic);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSeasonPass.BulkClaimRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSeasonPass::BulkClaimRewards(const TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSeasonPass", "BulkClaimRewards");

	Params::ABSeasonPass_BulkClaimRewards Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSeasonPass.ClaimRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsSeasonClaimRewardRequest&RewardRequest                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSeasonPass::ClaimRewards(const struct FAccelByteModelsSeasonClaimRewardRequest& RewardRequest, const TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSeasonPass", "ClaimRewards");

	Params::ABSeasonPass_ClaimRewards Parms{};

	Parms.RewardRequest = std::move(RewardRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSeasonPass.GetCurrentSeason
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSeasonInfo& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSeasonPass::GetCurrentSeason(const class FString& Language, const TDelegate<void(const struct FAccelByteModelsSeasonInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSeasonPass", "GetCurrentSeason");

	Params::ABSeasonPass_GetCurrentSeason Parms{};

	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSeasonPass.GetCurrentUserSeason
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSeasonPass::GetCurrentUserSeason(const TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSeasonPass", "GetCurrentUserSeason");

	Params::ABSeasonPass_GetCurrentUserSeason Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSeasonPass.GetUserSeason
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SeasonId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSeasonPass::GetUserSeason(const class FString& SeasonId, const TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSeasonPass", "GetUserSeason");

	Params::ABSeasonPass_GetUserSeason Parms{};

	Parms.SeasonId = std::move(SeasonId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerAchievement.UnlockAchievement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerAchievement::UnlockAchievement(const class FString& UserId, const class FString& AchievementCode, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerAchievement", "UnlockAchievement");

	Params::ABServerAchievement_UnlockAchievement Parms{};

	Parms.UserId = std::move(UserId);
	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.ConfigureAutoShutdown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TickSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CountdownStart                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerDSM::ConfigureAutoShutdown(int32 TickSeconds, int32 CountdownStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "ConfigureAutoShutdown");

	Params::ABServerDSM_ConfigureAutoShutdown Parms{};

	Parms.TickSeconds = TickSeconds;
	Parms.CountdownStart = CountdownStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.DeregisterLocalServerFromDSM
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ServerName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::DeregisterLocalServerFromDSM(const class FString& ServerName, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "DeregisterLocalServerFromDSM");

	Params::ABServerDSM_DeregisterLocalServerFromDSM Parms{};

	Parms.ServerName = std::move(ServerName);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.GetPlayerNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UABServerDSM::GetPlayerNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "GetPlayerNum");

	Params::ABServerDSM_GetPlayerNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABServerDSM.GetServerInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsServerInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::GetServerInfo(TDelegate<void(const struct FAccelByteModelsServerInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "GetServerInfo");

	Params::ABServerDSM_GetServerInfo Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.GetSessionId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsServerSessionResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::GetSessionId(TDelegate<void(const struct FAccelByteModelsServerSessionResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "GetSessionId");

	Params::ABServerDSM_GetSessionId Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.RegisterLocalServerToDSM
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    IPAddress                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Port                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ServerName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::RegisterLocalServerToDSM(const class FString& IPAddress, const int32& Port, const class FString& ServerName, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "RegisterLocalServerToDSM");

	Params::ABServerDSM_RegisterLocalServerToDSM Parms{};

	Parms.IPAddress = std::move(IPAddress);
	Parms.Port = Port;
	Parms.ServerName = std::move(ServerName);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.RegisterServerToDSM
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            Port                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::RegisterServerToDSM(const int32& Port, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "RegisterServerToDSM");

	Params::ABServerDSM_RegisterServerToDSM Parms{};

	Parms.Port = Port;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.SendShutdownToDSM
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const bool&                             KillMe                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::SendShutdownToDSM(const bool& KillMe, const class FString& MatchId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "SendShutdownToDSM");

	Params::ABServerDSM_SendShutdownToDSM Parms{};

	Parms.KillMe = KillMe;
	Parms.MatchId = std::move(MatchId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.SetOnAutoShutdownErrorDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnShutdownError                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::SetOnAutoShutdownErrorDelegate(TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnShutdownError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "SetOnAutoShutdownErrorDelegate");

	Params::ABServerDSM_SetOnAutoShutdownErrorDelegate Parms{};

	Parms.OnShutdownError = OnShutdownError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.SetOnAutoShutdownResponse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnAutoShutdown                                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerDSM::SetOnAutoShutdownResponse(TDelegate<void()> OnAutoShutdown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "SetOnAutoShutdownResponse");

	Params::ABServerDSM_SetOnAutoShutdownResponse Parms{};

	Parms.OnAutoShutdown = OnAutoShutdown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.SetServerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerDSM::SetServerName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "SetServerName");

	Params::ABServerDSM_SetServerName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerDSM.SetServerType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUEnumServerType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerDSM::SetServerType(EUEnumServerType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerDSM", "SetServerType");

	Params::ABServerDSM_SetServerType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.GetListOfBlockedUsers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::GetListOfBlockedUsers(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "GetListOfBlockedUsers");

	Params::ABServerLobby_GetListOfBlockedUsers Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.GetListOfBlockers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::GetListOfBlockers(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "GetListOfBlockers");

	Params::ABServerLobby_GetListOfBlockers Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.GetPartyDataByUserId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsDataPartyResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::GetPartyDataByUserId(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsDataPartyResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "GetPartyDataByUserId");

	Params::ABServerLobby_GetPartyDataByUserId Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.GetPartyStorage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PartyId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::GetPartyStorage(const class FString& PartyId, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "GetPartyStorage");

	Params::ABServerLobby_GetPartyStorage Parms{};

	Parms.PartyId = std::move(PartyId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.GetSessionAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsGetSessionAttributeResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::GetSessionAttribute(const class FString& UserId, const class FString& Key, TDelegate<void(const struct FAccelByteModelsGetSessionAttributeResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "GetSessionAttribute");

	Params::ABServerLobby_GetSessionAttribute Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Key = std::move(Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.GetSessionAttributeAll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsGetSessionAttributeAllResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::GetSessionAttributeAll(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsGetSessionAttributeAllResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "GetSessionAttributeAll");

	Params::ABServerLobby_GetSessionAttributeAll Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.SetSessionAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Attributes                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::SetSessionAttribute(const class FString& UserId, const TMap<class FString, class FString>& Attributes, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "SetSessionAttribute");

	Params::ABServerLobby_SetSessionAttribute Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Attributes = std::move(Attributes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.SetSessionAttributeString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::SetSessionAttributeString(const class FString& UserId, const class FString& Key, const class FString& Value, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "SetSessionAttributeString");

	Params::ABServerLobby_SetSessionAttributeString Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerLobby.WritePartyStorage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PartyId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FJsonObjectWrapper& Payload)>PayloadModifier                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            RetryAttempt                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerLobby::WritePartyStorage(const class FString& PartyId, TDelegate<void(const struct FJsonObjectWrapper& Payload)> PayloadModifier, const int32& RetryAttempt, TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerLobby", "WritePartyStorage");

	Params::ABServerLobby_WritePartyStorage Parms{};

	Parms.PartyId = std::move(PartyId);
	Parms.PayloadModifier = PayloadModifier;
	Parms.RetryAttempt = RetryAttempt;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.ActivateSessionStatusPolling
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MatchId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntervalSec                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::ActivateSessionStatusPolling(const class FString& MatchId, int32 IntervalSec, TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "ActivateSessionStatusPolling");

	Params::ABServerMatchmaking_ActivateSessionStatusPolling Parms{};

	Parms.MatchId = std::move(MatchId);
	Parms.IntervalSec = IntervalSec;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.AddUserToSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OptionalPartyId                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::AddUserToSession(const class FString& ChannelName, const class FString& MatchId, const class FString& UserId, const class FString& OptionalPartyId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "AddUserToSession");

	Params::ABServerMatchmaking_AddUserToSession Parms{};

	Parms.ChannelName = std::move(ChannelName);
	Parms.MatchId = std::move(MatchId);
	Parms.UserId = std::move(UserId);
	Parms.OptionalPartyId = std::move(OptionalPartyId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.DeactivateStatusPolling
// (Final, Native, Public, BlueprintCallable)

void UABServerMatchmaking::DeactivateStatusPolling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "DeactivateStatusPolling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.DequeueJoinableSession
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::DequeueJoinableSession(const class FString& MatchId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "DequeueJoinableSession");

	Params::ABServerMatchmaking_DequeueJoinableSession Parms{};

	Parms.MatchId = std::move(MatchId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.EnqueueJoinableSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsMatchmakingResult&MatchmakingResult                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::EnqueueJoinableSession(const struct FAccelByteModelsMatchmakingResult& MatchmakingResult, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "EnqueueJoinableSession");

	Params::ABServerMatchmaking_EnqueueJoinableSession Parms{};

	Parms.MatchmakingResult = std::move(MatchmakingResult);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.QuerySessionStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MatchId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::QuerySessionStatus(const class FString& MatchId, TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "QuerySessionStatus");

	Params::ABServerMatchmaking_QuerySessionStatus Parms{};

	Parms.MatchId = std::move(MatchId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.RebalanceMatchmakingBasedOnMMR
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MatchId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::RebalanceMatchmakingBasedOnMMR(const class FString& MatchId, TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "RebalanceMatchmakingBasedOnMMR");

	Params::ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR Parms{};

	Parms.MatchId = std::move(MatchId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerMatchmaking.RemoveUserFromSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsMatchmakingResult&OptionalBody                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerMatchmaking::RemoveUserFromSession(const class FString& ChannelName, const class FString& MatchId, const class FString& UserId, const struct FAccelByteModelsMatchmakingResult& OptionalBody, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerMatchmaking", "RemoveUserFromSession");

	Params::ABServerMatchmaking_RemoveUserFromSession Parms{};

	Parms.ChannelName = std::move(ChannelName);
	Parms.MatchId = std::move(MatchId);
	Parms.UserId = std::move(UserId);
	Parms.OptionalBody = std::move(OptionalBody);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerOauth2.ForgetAllCredentials
// (Final, Native, Public, BlueprintCallable)

void UABServerOauth2::ForgetAllCredentials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerOauth2", "ForgetAllCredentials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerOauth2.GetJwks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FJwkSet& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerOauth2::GetJwks(TDelegate<void(const struct FJwkSet& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerOauth2", "GetJwks");

	Params::ABServerOauth2_GetJwks Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerOauth2.LoginWithClientCredentials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerOauth2::LoginWithClientCredentials(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerOauth2", "LoginWithClientCredentials");

	Params::ABServerOauth2_LoginWithClientCredentials Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionPrivate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::CreateGameSessionPrivate(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "CreateGameSessionPrivate");

	Params::ABServerSessionBrowser_CreateGameSessionPrivate Parms{};

	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.MaxSpectator = MaxSpectator;
	Parms.Password = std::move(Password);
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionPublic
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::CreateGameSessionPublic(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "CreateGameSessionPublic");

	Params::ABServerSessionBrowser_CreateGameSessionPublic Parms{};

	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionTypeSpecificByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsSessionBrowserCreateRequest&CreateSessionRequest                                   (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::CreateGameSessionTypeSpecificByStruct(const struct FAccelByteModelsSessionBrowserCreateRequest& CreateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "CreateGameSessionTypeSpecificByStruct");

	Params::ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct Parms{};

	Parms.CreateSessionRequest = std::move(CreateSessionRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionTypeSpecifiedByEnum
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelByteSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::CreateGameSessionTypeSpecifiedByEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "CreateGameSessionTypeSpecifiedByEnum");

	Params::ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum Parms{};

	Parms.SessionType = SessionType;
	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.MaxSpectator = MaxSpectator;
	Parms.Password = std::move(Password);
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionTypeSpecifiedByString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionTypeString                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::CreateGameSessionTypeSpecifiedByString(const class FString& SessionTypeString, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "CreateGameSessionTypeSpecifiedByString");

	Params::ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString Parms{};

	Parms.SessionTypeString = std::move(SessionTypeString);
	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.MaxSpectator = MaxSpectator;
	Parms.Password = std::move(Password);
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeEnum
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelByteSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::GetGameSessionsByTypeEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "GetGameSessionsByTypeEnum");

	Params::ABServerSessionBrowser_GetGameSessionsByTypeEnum Parms{};

	Parms.SessionType = SessionType;
	Parms.GameMode = std::move(GameMode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeEnumAndMatchExist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelByteSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchExist                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::GetGameSessionsByTypeEnumAndMatchExist(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "GetGameSessionsByTypeEnumAndMatchExist");

	Params::ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist Parms{};

	Parms.SessionType = SessionType;
	Parms.GameMode = std::move(GameMode);
	Parms.MatchExist = std::move(MatchExist);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionTypeString                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::GetGameSessionsByTypeString(const class FString& SessionTypeString, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "GetGameSessionsByTypeString");

	Params::ABServerSessionBrowser_GetGameSessionsByTypeString Parms{};

	Parms.SessionTypeString = std::move(SessionTypeString);
	Parms.GameMode = std::move(GameMode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeStringAndMatchExist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionTypeString                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchExist                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::GetGameSessionsByTypeStringAndMatchExist(const class FString& SessionTypeString, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "GetGameSessionsByTypeStringAndMatchExist");

	Params::ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist Parms{};

	Parms.SessionTypeString = std::move(SessionTypeString);
	Parms.GameMode = std::move(GameMode);
	Parms.MatchExist = std::move(MatchExist);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetRecentPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::GetRecentPlayer(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "GetRecentPlayer");

	Params::ABServerSessionBrowser_GetRecentPlayer Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.JoinSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::JoinSession(const class FString& SessionId, const class FString& Password, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "JoinSession");

	Params::ABServerSessionBrowser_JoinSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.RegisterPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerToAdd                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AsSpectator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::RegisterPlayer(const class FString& SessionId, const class FString& PlayerToAdd, bool AsSpectator, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "RegisterPlayer");

	Params::ABServerSessionBrowser_RegisterPlayer Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.PlayerToAdd = std::move(PlayerToAdd);
	Parms.AsSpectator = AsSpectator;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.RemoveGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::RemoveGameSession(const class FString& SessionId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "RemoveGameSession");

	Params::ABServerSessionBrowser_RemoveGameSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.UnregisterPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerToRemove                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::UnregisterPlayer(const class FString& SessionId, const class FString& PlayerToRemove, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "UnregisterPlayer");

	Params::ABServerSessionBrowser_UnregisterPlayer Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.PlayerToRemove = std::move(PlayerToRemove);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.UpdateGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentPlayerCount                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::UpdateGameSession(const class FString& SessionId, int32 MaxPlayer, int32 CurrentPlayerCount, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "UpdateGameSession");

	Params::ABServerSessionBrowser_UpdateGameSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.MaxPlayer = MaxPlayer;
	Parms.CurrentPlayerCount = CurrentPlayerCount;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerSessionBrowser.UpdateGameSessionByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsSessionBrowserUpdateRequest&UpdateSessionRequest                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerSessionBrowser::UpdateGameSessionByStruct(const class FString& SessionId, const struct FAccelByteModelsSessionBrowserUpdateRequest& UpdateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerSessionBrowser", "UpdateGameSessionByStruct");

	Params::ABServerSessionBrowser_UpdateGameSessionByStruct Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.UpdateSessionRequest = std::move(UpdateSessionRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.BulkFetchStatItemsValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatCode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            UserIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerStatistic::BulkFetchStatItemsValue(const class FString& StatCode, const TArray<class FString>& UserIds, TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "BulkFetchStatItemsValue");

	Params::ABServerStatistic_BulkFetchStatItemsValue Parms{};

	Parms.StatCode = std::move(StatCode);
	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.CreateUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            StatCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerStatistic::CreateUserStatItems(const class FString& UserId, const TArray<class FString>& StatCodes, TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "CreateUserStatItems");

	Params::ABServerStatistic_CreateUserStatItems Parms{};

	Parms.UserId = std::move(UserId);
	Parms.StatCodes = std::move(StatCodes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.GetAllUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteStatisticSortBy               SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerStatistic::GetAllUserStatItems(const class FString& UserId, TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "GetAllUserStatItems");

	Params::ABServerStatistic_GetAllUserStatItems Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.GetGlobalStatItemsByStatCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatCode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerStatistic::GetGlobalStatItemsByStatCode(const class FString& StatCode, TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "GetGlobalStatItemsByStatCode");

	Params::ABServerStatistic_GetGlobalStatItemsByStatCode Parms{};

	Parms.StatCode = std::move(StatCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.GetUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            StatCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteStatisticSortBy               SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerStatistic::GetUserStatItems(const class FString& UserId, const TArray<class FString>& StatCodes, const TArray<class FString>& Tags, TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "GetUserStatItems");

	Params::ABServerStatistic_GetUserStatItems Parms{};

	Parms.UserId = std::move(UserId);
	Parms.StatCodes = std::move(StatCodes);
	Parms.Tags = std::move(Tags);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.IncrementManyUsersStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FAccelByteModelsBulkUserStatItemInc>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerStatistic::IncrementManyUsersStatItems(const TArray<struct FAccelByteModelsBulkUserStatItemInc>& Data, TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "IncrementManyUsersStatItems");

	Params::ABServerStatistic_IncrementManyUsersStatItems Parms{};

	Parms.Data = std::move(Data);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerStatistic.IncrementUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FAccelByteModelsBulkStatItemInc>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABServerStatistic::IncrementUserStatItems(const class FString& UserId, const TArray<struct FAccelByteModelsBulkStatItemInc>& Data, TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerStatistic", "IncrementUserStatItems");

	Params::ABServerStatistic_IncrementUserStatItems Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Data = std::move(Data);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerUGC.DeleteContentByShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ShareCode                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerUGC::DeleteContentByShareCode(const class FString& UserId, const class FString& ChannelId, const class FString& ShareCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerUGC", "DeleteContentByShareCode");

	Params::ABServerUGC_DeleteContentByShareCode Parms{};

	Parms.UserId = std::move(UserId);
	Parms.ChannelId = std::move(ChannelId);
	Parms.ShareCode = std::move(ShareCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerUGC.ModifyContentByShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ShareCode                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCUpdateRequest&ModifyRequest                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABServerUGC::ModifyContentByShareCode(const class FString& UserId, const class FString& ChannelId, const class FString& ShareCode, const struct FAccelByteModelsUGCUpdateRequest& ModifyRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerUGC", "ModifyContentByShareCode");

	Params::ABServerUGC_ModifyContentByShareCode Parms{};

	Parms.UserId = std::move(UserId);
	Parms.ChannelId = std::move(ChannelId);
	Parms.ShareCode = std::move(ShareCode);
	Parms.ModifyRequest = std::move(ModifyRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerUGC.SearchContents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsUGCSearchContentsRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerUGC::SearchContents(const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerUGC", "SearchContents");

	Params::ABServerUGC_SearchContents Parms{};

	Parms.Request = std::move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerUGC.SearchContentsSpecificToChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCSearchContentsRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABServerUGC::SearchContentsSpecificToChannel(const class FString& ChannelId, const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerUGC", "SearchContentsSpecificToChannel");

	Params::ABServerUGC_SearchContentsSpecificToChannel Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.Request = std::move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionAttribute.GetAllSessionAttribute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsGetAllSessionAttributesResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABSessionAttribute::GetAllSessionAttribute(TDelegate<void(const struct FAccelByteModelsGetAllSessionAttributesResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionAttribute", "GetAllSessionAttribute");

	Params::ABSessionAttribute_GetAllSessionAttribute Parms{};

	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABSessionAttribute.GetSessionAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGetSessionAttributeRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsGetSessionAttributesResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABSessionAttribute::GetSessionAttribute(const struct FGetSessionAttributeRequest& Request, TDelegate<void(const struct FAccelByteModelsGetSessionAttributesResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionAttribute", "GetSessionAttribute");

	Params::ABSessionAttribute_GetSessionAttribute Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABSessionAttribute.SetSessionAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSetSessionAttributeRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsSetSessionAttributesResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABSessionAttribute::SetSessionAttribute(const struct FSetSessionAttributeRequest& Request, TDelegate<void(const struct FAccelByteModelsSetSessionAttributesResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionAttribute", "SetSessionAttribute");

	Params::ABSessionAttribute_SetSessionAttribute Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionPrivate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::CreateGameSessionPrivate(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "CreateGameSessionPrivate");

	Params::ABSessionBrowser_CreateGameSessionPrivate Parms{};

	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.MaxSpectator = MaxSpectator;
	Parms.Password = std::move(Password);
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionPublic
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::CreateGameSessionPublic(const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "CreateGameSessionPublic");

	Params::ABSessionBrowser_CreateGameSessionPublic Parms{};

	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionTypeSpecificByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsSessionBrowserCreateRequest&CreateSessionRequest                                   (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::CreateGameSessionTypeSpecificByStruct(const struct FAccelByteModelsSessionBrowserCreateRequest& CreateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "CreateGameSessionTypeSpecificByStruct");

	Params::ABSessionBrowser_CreateGameSessionTypeSpecificByStruct Parms{};

	Parms.CreateSessionRequest = std::move(CreateSessionRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionTypeSpecifiedByEnum
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelByteSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::CreateGameSessionTypeSpecifiedByEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "CreateGameSessionTypeSpecifiedByEnum");

	Params::ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum Parms{};

	Parms.SessionType = SessionType;
	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.MaxSpectator = MaxSpectator;
	Parms.Password = std::move(Password);
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionTypeSpecifiedByString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionTypeString                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMapName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameVersion                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        OtherSettings                                          (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::CreateGameSessionTypeSpecifiedByString(const class FString& SessionTypeString, const class FString& GameMode, const class FString& GameMapName, const class FString& GameVersion, int32 BotCount, int32 MaxPlayer, int32 MaxSpectator, const class FString& Password, const struct FJsonObjectWrapper& OtherSettings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "CreateGameSessionTypeSpecifiedByString");

	Params::ABSessionBrowser_CreateGameSessionTypeSpecifiedByString Parms{};

	Parms.SessionTypeString = std::move(SessionTypeString);
	Parms.GameMode = std::move(GameMode);
	Parms.GameMapName = std::move(GameMapName);
	Parms.GameVersion = std::move(GameVersion);
	Parms.BotCount = BotCount;
	Parms.MaxPlayer = MaxPlayer;
	Parms.MaxSpectator = MaxSpectator;
	Parms.Password = std::move(Password);
	Parms.OtherSettings = std::move(OtherSettings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetGameSession(const class FString& SessionId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetGameSession");

	Params::ABSessionBrowser_GetGameSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeEnum
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelByteSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetGameSessionsByTypeEnum(EAccelByteSessionType SessionType, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetGameSessionsByTypeEnum");

	Params::ABSessionBrowser_GetGameSessionsByTypeEnum Parms{};

	Parms.SessionType = SessionType;
	Parms.GameMode = std::move(GameMode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeEnumAndMatchExist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelByteSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchExist                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetGameSessionsByTypeEnumAndMatchExist(EAccelByteSessionType SessionType, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetGameSessionsByTypeEnumAndMatchExist");

	Params::ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist Parms{};

	Parms.SessionType = SessionType;
	Parms.GameMode = std::move(GameMode);
	Parms.MatchExist = std::move(MatchExist);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionTypeString                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetGameSessionsByTypeString(const class FString& SessionTypeString, const class FString& GameMode, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetGameSessionsByTypeString");

	Params::ABSessionBrowser_GetGameSessionsByTypeString Parms{};

	Parms.SessionTypeString = std::move(SessionTypeString);
	Parms.GameMode = std::move(GameMode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeStringAndMatchExist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionTypeString                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchExist                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetGameSessionsByTypeStringAndMatchExist(const class FString& SessionTypeString, const class FString& GameMode, const class FString& MatchExist, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetGameSessionsByTypeStringAndMatchExist");

	Params::ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist Parms{};

	Parms.SessionTypeString = std::move(SessionTypeString);
	Parms.GameMode = std::move(GameMode);
	Parms.MatchExist = std::move(MatchExist);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByUserIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            UserIds                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetByUserIdsResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetGameSessionsByUserIds(const TArray<class FString>& UserIds, const TDelegate<void(const struct FAccelByteModelsSessionBrowserGetByUserIdsResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetGameSessionsByUserIds");

	Params::ABSessionBrowser_GetGameSessionsByUserIds Parms{};

	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.GetRecentPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABSessionBrowser::GetRecentPlayer(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Offset, int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "GetRecentPlayer");

	Params::ABSessionBrowser_GetRecentPlayer Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.JoinSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::JoinSession(const class FString& SessionId, const class FString& Password, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "JoinSession");

	Params::ABSessionBrowser_JoinSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.RegisterPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerToAdd                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AsSpectator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::RegisterPlayer(const class FString& SessionId, const class FString& PlayerToAdd, bool AsSpectator, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "RegisterPlayer");

	Params::ABSessionBrowser_RegisterPlayer Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.PlayerToAdd = std::move(PlayerToAdd);
	Parms.AsSpectator = AsSpectator;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.RemoveGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::RemoveGameSession(const class FString& SessionId, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "RemoveGameSession");

	Params::ABSessionBrowser_RemoveGameSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.UnregisterPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerToRemove                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::UnregisterPlayer(const class FString& SessionId, const class FString& PlayerToRemove, const TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "UnregisterPlayer");

	Params::ABSessionBrowser_UnregisterPlayer Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.PlayerToRemove = std::move(PlayerToRemove);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentPlayerCount                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::UpdateGameSession(const class FString& SessionId, int32 MaxPlayer, int32 CurrentPlayerCount, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "UpdateGameSession");

	Params::ABSessionBrowser_UpdateGameSession Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.MaxPlayer = MaxPlayer;
	Parms.CurrentPlayerCount = CurrentPlayerCount;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSessionByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsSessionBrowserUpdateRequest&UpdateSessionRequest                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::UpdateGameSessionByStruct(const class FString& SessionId, const struct FAccelByteModelsSessionBrowserUpdateRequest& UpdateSessionRequest, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "UpdateGameSessionByStruct");

	Params::ABSessionBrowser_UpdateGameSessionByStruct Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.UpdateSessionRequest = std::move(UpdateSessionRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Settings                                               (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::UpdateGameSettings(const class FString& SessionId, const TMap<class FString, class FString>& Settings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "UpdateGameSettings");

	Params::ABSessionBrowser_UpdateGameSettings Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.Settings = std::move(Settings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSettingsByJsonObject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SessionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        Settings                                               (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABSessionBrowser::UpdateGameSettingsByJsonObject(const class FString& SessionId, const struct FJsonObjectWrapper& Settings, const TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSessionBrowser", "UpdateGameSettingsByJsonObject");

	Params::ABSessionBrowser_UpdateGameSettingsByJsonObject Parms{};

	Parms.SessionId = std::move(SessionId);
	Parms.Settings = std::move(Settings);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABSignaling.SendSignalingMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSendSignalingMessageRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABSignaling::SendSignalingMessage(const struct FSendSignalingMessageRequest& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSignaling", "SendSignalingMessage");

	Params::ABSignaling_SendSignalingMessage Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABSignaling.SetSignalingP2PNotif
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& UserID, const class FString& Message)>OnNotif                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABSignaling::SetSignalingP2PNotif(TDelegate<void(const class FString& UserID, const class FString& Message)> OnNotif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABSignaling", "SetSignalingP2PNotif");

	Params::ABSignaling_SetSignalingP2PNotif Parms{};

	Parms.OnNotif = OnNotif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABStatistic.BulkFetchStatItemsValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatCode                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            UserIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABStatistic::BulkFetchStatItemsValue(const class FString& StatCode, const TArray<class FString>& UserIds, const TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABStatistic", "BulkFetchStatItemsValue");

	Params::ABStatistic_BulkFetchStatItemsValue Parms{};

	Parms.StatCode = std::move(StatCode);
	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABStatistic.CreateUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            StatCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABStatistic::CreateUserStatItems(const TArray<class FString>& StatCodes, const TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABStatistic", "CreateUserStatItems");

	Params::ABStatistic_CreateUserStatItems Parms{};

	Parms.StatCodes = std::move(StatCodes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABStatistic.GetAllUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteStatisticSortBy               SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABStatistic::GetAllUserStatItems(const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABStatistic", "GetAllUserStatItems");

	Params::ABStatistic_GetAllUserStatItems Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABStatistic.GetGlobalStatItemsByStatCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatCode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABStatistic::GetGlobalStatItemsByStatCode(const class FString& StatCode, const TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABStatistic", "GetGlobalStatItemsByStatCode");

	Params::ABStatistic_GetGlobalStatItemsByStatCode Parms{};

	Parms.StatCode = std::move(StatCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABStatistic.GetUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            StatCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteStatisticSortBy               SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABStatistic::GetUserStatItems(const TArray<class FString>& StatCodes, const TArray<class FString>& Tags, const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteStatisticSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABStatistic", "GetUserStatItems");

	Params::ABStatistic_GetUserStatItems Parms{};

	Parms.StatCodes = std::move(StatCodes);
	Parms.Tags = std::move(Tags);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABStatistic.IncrementUserStatItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FAccelByteModelsBulkStatItemInc>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABStatistic::IncrementUserStatItems(const TArray<struct FAccelByteModelsBulkStatItemInc>& Data, const TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABStatistic", "IncrementUserStatItems");

	Params::ABStatistic_IncrementUserStatItems Parms{};

	Parms.Data = std::move(Data);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.AddDownloadContentCountV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCAddDownloadContentCountResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::AddDownloadContentCountV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCAddDownloadContentCountResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "AddDownloadContentCountV2");

	Params::ABUGC_AddDownloadContentCountV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.BulkGetContentByShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            ShareCodes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponse>& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::BulkGetContentByShareCode(const TArray<class FString>& ShareCodes, const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponse>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "BulkGetContentByShareCode");

	Params::ABUGC_BulkGetContentByShareCode Parms{};

	Parms.ShareCodes = std::move(ShareCodes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.BulkGetContentByShareCodeV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            ShareCodes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::BulkGetContentByShareCodeV2(const TArray<class FString>& ShareCodes, const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "BulkGetContentByShareCodeV2");

	Params::ABUGC_BulkGetContentByShareCodeV2 Parms{};

	Parms.ShareCodes = std::move(ShareCodes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.CreateChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCChannelResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::CreateChannel(const class FString& ChannelName, const TDelegate<void(const struct FAccelByteModelsUGCChannelResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "CreateChannel");

	Params::ABUGC_CreateChannel Parms{};

	Parms.ChannelName = std::move(ChannelName);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.CreateContent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SubType                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Preview                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FileExtension                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ContentType                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::CreateContent(const class FString& ChannelId, const class FString& Name_0, const class FString& Type, const class FString& SubType, const TArray<class FString>& Tags, const TArray<uint8>& Preview, const class FString& FileExtension, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const class FString& ContentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "CreateContent");

	Params::ABUGC_CreateContent Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.Name_0 = std::move(Name_0);
	Parms.Type = std::move(Type);
	Parms.SubType = std::move(SubType);
	Parms.Tags = std::move(Tags);
	Parms.Preview = std::move(Preview);
	Parms.FileExtension = std::move(FileExtension);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.ContentType = std::move(ContentType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.CreateContentByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCRequest&UGCRequest                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::CreateContentByStruct(const class FString& ChannelId, const struct FAccelByteModelsUGCRequest& UGCRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "CreateContentByStruct");

	Params::ABUGC_CreateContentByStruct Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.UGCRequest = std::move(UGCRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.CreateContentV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsCreateUGCRequestV2&CreateRequest                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::CreateContentV2(const class FString& ChannelId, const struct FAccelByteModelsCreateUGCRequestV2& CreateRequest, const TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "CreateContentV2");

	Params::ABUGC_CreateContentV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.CreateRequest = std::move(CreateRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.DeleteChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::DeleteChannel(const class FString& ChannelId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "DeleteChannel");

	Params::ABUGC_DeleteChannel Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.DeleteContent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::DeleteContent(const class FString& ChannelId, const class FString& ContentId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "DeleteContent");

	Params::ABUGC_DeleteContent Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.DeleteContentByShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ShareCode                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::DeleteContentByShareCode(const class FString& ChannelId, const class FString& ShareCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "DeleteContentByShareCode");

	Params::ABUGC_DeleteContentByShareCode Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ShareCode = std::move(ShareCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.DeleteContentScreenshotV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScreenshotId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::DeleteContentScreenshotV2(const class FString& ContentId, const class FString& ScreenshotId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "DeleteContentScreenshotV2");

	Params::ABUGC_DeleteContentScreenshotV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.ScreenshotId = std::move(ScreenshotId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.DeleteContentV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::DeleteContentV2(const class FString& ChannelId, const class FString& ContentId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "DeleteContentV2");

	Params::ABUGC_DeleteContentV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GenerateUploadContentURLV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUploadContentURLRequestV2&UploadRequest                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUploadContentURLResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GenerateUploadContentURLV2(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUploadContentURLRequestV2& UploadRequest, const TDelegate<void(const struct FAccelByteModelsUGCUploadContentURLResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GenerateUploadContentURLV2");

	Params::ABUGC_GenerateUploadContentURLV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.UploadRequest = std::move(UploadRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetChannels
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChannelName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetChannels(const TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, const class FString& ChannelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetChannels");

	Params::ABUGC_GetChannels Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.ChannelName = std::move(ChannelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetChannelsByUserId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetChannelsByUserId(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetChannelsByUserId");

	Params::ABUGC_GetChannelsByUserId Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentBulkByIdsV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            ContentIds                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentBulkByIdsV2(const TArray<class FString>& ContentIds, const TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentBulkByIdsV2");

	Params::ABUGC_GetContentBulkByIdsV2 Parms{};

	Parms.ContentIds = std::move(ContentIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentByContentId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentByContentId(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentByContentId");

	Params::ABUGC_GetContentByContentId Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentByContentIdV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentByContentIdV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentByContentIdV2");

	Params::ABUGC_GetContentByContentIdV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentByShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ShareCode                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentByShareCode(const class FString& ShareCode, const TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentByShareCode");

	Params::ABUGC_GetContentByShareCode Parms{};

	Parms.ShareCode = std::move(ShareCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentByShareCodeV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ShareCode                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentByShareCodeV2(const class FString& ShareCode, const TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentByShareCodeV2");

	Params::ABUGC_GetContentByShareCodeV2 Parms{};

	Parms.ShareCode = std::move(ShareCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentPreviewAsIntArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<uint8>& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentPreviewAsIntArray(const class FString& ContentId, const TDelegate<void(const TArray<uint8>& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentPreviewAsIntArray");

	Params::ABUGC_GetContentPreviewAsIntArray Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetContentPreviewAsStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCPreview& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::GetContentPreviewAsStruct(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCPreview& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetContentPreviewAsStruct");

	Params::ABUGC_GetContentPreviewAsStruct Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetListContentDownloaderV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteUGCContentUtilitiesSortByV2   SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetListContentDownloaderV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const class FString& UserId, int32 Limit, int32 Offset, EAccelByteUGCContentUtilitiesSortByV2 SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetListContentDownloaderV2");

	Params::ABUGC_GetListContentDownloaderV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.UserId = std::move(UserId);
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetListContentLikerV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentLikerResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetListContentLikerV2(const class FString& ContentId, const TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentLikerResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetListContentLikerV2");

	Params::ABUGC_GetListContentLikerV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetListFollowers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCGetListFollowersPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetListFollowers(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCGetListFollowersPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetListFollowers");

	Params::ABUGC_GetListFollowers Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUGCTagsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetTags(const TDelegate<void(const struct FAccelByteModelsUGCTagsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetTags");

	Params::ABUGC_GetTags Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetTypes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUGCTypesPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetTypes(const TDelegate<void(const struct FAccelByteModelsUGCTypesPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetTypes");

	Params::ABUGC_GetTypes Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.GetUserContentsV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::GetUserContentsV2(const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "GetUserContentsV2");

	Params::ABUGC_GetUserContentsV2 Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SubType                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Preview                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FileExtension                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ContentType                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::ModifyContent(const class FString& ChannelId, const class FString& ContentId, const class FString& Name_0, const class FString& Type, const class FString& SubType, const TArray<class FString>& Tags, const TArray<uint8>& Preview, const class FString& FileExtension, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const class FString& ContentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContent");

	Params::ABUGC_ModifyContent Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.Name_0 = std::move(Name_0);
	Parms.Type = std::move(Type);
	Parms.SubType = std::move(SubType);
	Parms.Tags = std::move(Tags);
	Parms.Preview = std::move(Preview);
	Parms.FileExtension = std::move(FileExtension);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.ContentType = std::move(ContentType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContentByShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ShareCode                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCUpdateRequest&ModifyRequest                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::ModifyContentByShareCode(const class FString& ChannelId, const class FString& ShareCode, const struct FAccelByteModelsUGCUpdateRequest& ModifyRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContentByShareCode");

	Params::ABUGC_ModifyContentByShareCode Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ShareCode = std::move(ShareCode);
	Parms.ModifyRequest = std::move(ModifyRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContentByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCRequest&UGCRequest                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::ModifyContentByStruct(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCRequest& UGCRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContentByStruct");

	Params::ABUGC_ModifyContentByStruct Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.UGCRequest = std::move(UGCRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContentByUpdateStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCUpdateRequest&UGCRequest                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::ModifyContentByUpdateStruct(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCUpdateRequest& UGCRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContentByUpdateStruct");

	Params::ABUGC_ModifyContentByUpdateStruct Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.UGCRequest = std::move(UGCRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContentShareCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCModifyContentShareCodeRequest&ModifyContentShareCodeRequest                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::ModifyContentShareCode(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCModifyContentShareCodeRequest& ModifyContentShareCodeRequest, const TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContentShareCode");

	Params::ABUGC_ModifyContentShareCode Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.ModifyContentShareCodeRequest = std::move(ModifyContentShareCodeRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContentShareCodeV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCModifyContentShareCodeRequest&ModifyContentShareCodeRequest                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::ModifyContentShareCodeV2(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsUGCModifyContentShareCodeRequest& ModifyContentShareCodeRequest, const TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContentShareCodeV2");

	Params::ABUGC_ModifyContentShareCodeV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.ModifyContentShareCodeRequest = std::move(ModifyContentShareCodeRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.ModifyContentV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsModifyUGCRequestV2&ModifyRequest                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCModifyUGCResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::ModifyContentV2(const class FString& ChannelId, const class FString& ContentId, const struct FAccelByteModelsModifyUGCRequestV2& ModifyRequest, const TDelegate<void(const struct FAccelByteModelsUGCModifyUGCResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "ModifyContentV2");

	Params::ABUGC_ModifyContentV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.ModifyRequest = std::move(ModifyRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.SearchAllContents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsUGCSearchContentsRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::SearchAllContents(const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "SearchAllContents");

	Params::ABUGC_SearchAllContents Parms{};

	Parms.Request = std::move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.SearchContents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Creator                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Subtype                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsOfficial                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteUgcSortBy                     SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteUgcOrderBy                    OrderBy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::SearchContents(const class FString& Name_0, const class FString& Creator, const class FString& Type, const class FString& Subtype, const TArray<class FString>& Tags, bool IsOfficial, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteUgcSortBy SortBy, EAccelByteUgcOrderBy OrderBy, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "SearchContents");

	Params::ABUGC_SearchContents Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Creator = std::move(Creator);
	Parms.Type = std::move(Type);
	Parms.Subtype = std::move(Subtype);
	Parms.Tags = std::move(Tags);
	Parms.IsOfficial = IsOfficial;
	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.SortBy = SortBy;
	Parms.OrderBy = OrderBy;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.SearchContentsByChannelId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCSearchContentsRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::SearchContentsByChannelId(const class FString& ChannelId, const struct FAccelByteModelsUGCSearchContentsRequest& Request, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "SearchContentsByChannelId");

	Params::ABUGC_SearchContentsByChannelId Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.Request = std::move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.SearchContentsSpecificToChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Creator                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Subtype                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsOfficial                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteUgcSortBy                     SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteUgcOrderBy                    OrderBy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::SearchContentsSpecificToChannel(const class FString& ChannelId, const class FString& Name_0, const class FString& Creator, const class FString& Type, const class FString& Subtype, const TArray<class FString>& Tags, bool IsOfficial, const class FString& UserId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteUgcSortBy SortBy, EAccelByteUgcOrderBy OrderBy, int32 Limit, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "SearchContentsSpecificToChannel");

	Params::ABUGC_SearchContentsSpecificToChannel Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.Name_0 = std::move(Name_0);
	Parms.Creator = std::move(Creator);
	Parms.Type = std::move(Type);
	Parms.Subtype = std::move(Subtype);
	Parms.Tags = std::move(Tags);
	Parms.IsOfficial = IsOfficial;
	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.SortBy = SortBy;
	Parms.OrderBy = OrderBy;
	Parms.Limit = Limit;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.SearchContentsSpecificToChannelV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteUGCContentSortByV2            SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::SearchContentsSpecificToChannelV2(const class FString& ChannelId, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteUGCContentSortByV2 SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "SearchContentsSpecificToChannelV2");

	Params::ABUGC_SearchContentsSpecificToChannelV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.SearchContentsV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsUGCFilterRequestV2&Filter                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteUGCContentSortByV2            SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUGC::SearchContentsV2(const struct FAccelByteModelsUGCFilterRequestV2& Filter, const TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, int32 Limit, int32 Offset, EAccelByteUGCContentSortByV2 SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "SearchContentsV2");

	Params::ABUGC_SearchContentsV2 Parms{};

	Parms.Filter = std::move(Filter);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Limit = Limit;
	Parms.Offset = Offset;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.UpdateContentFileLocationV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ChannelId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContentId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileExtension                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    S3Key                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUpdateContentFileLocationResponseV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::UpdateContentFileLocationV2(const class FString& ChannelId, const class FString& ContentId, const class FString& FileExtension, const class FString& S3Key, const TDelegate<void(const struct FAccelByteModelsUGCUpdateContentFileLocationResponseV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "UpdateContentFileLocationV2");

	Params::ABUGC_UpdateContentFileLocationV2 Parms{};

	Parms.ChannelId = std::move(ChannelId);
	Parms.ContentId = std::move(ContentId);
	Parms.FileExtension = std::move(FileExtension);
	Parms.S3Key = std::move(S3Key);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.UpdateContentScreenshotV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCUpdateScreenshotsV2&ScreenshotsRequest                                     (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUpdateScreenshotsV2& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::UpdateContentScreenshotV2(const class FString& ContentId, const struct FAccelByteModelsUGCUpdateScreenshotsV2& ScreenshotsRequest, const TDelegate<void(const struct FAccelByteModelsUGCUpdateScreenshotsV2& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "UpdateContentScreenshotV2");

	Params::ABUGC_UpdateContentScreenshotV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.ScreenshotsRequest = std::move(ScreenshotsRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.UpdateFollowStatusToUser
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFollowStatus                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUpdateFollowStatusToUserResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::UpdateFollowStatusToUser(const class FString& UserId, bool bFollowStatus, const TDelegate<void(const struct FAccelByteModelsUGCUpdateFollowStatusToUserResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "UpdateFollowStatusToUser");

	Params::ABUGC_UpdateFollowStatusToUser Parms{};

	Parms.UserId = std::move(UserId);
	Parms.bFollowStatus = bFollowStatus;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.UpdateLikeStatusToContent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLikeStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::UpdateLikeStatusToContent(const class FString& ContentId, bool bLikeStatus, const TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "UpdateLikeStatusToContent");

	Params::ABUGC_UpdateLikeStatusToContent Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.bLikeStatus = bLikeStatus;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.UpdateLikeStatusToContentV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLikeStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::UpdateLikeStatusToContentV2(const class FString& ContentId, bool bLikeStatus, const TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "UpdateLikeStatusToContentV2");

	Params::ABUGC_UpdateLikeStatusToContentV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.bLikeStatus = bLikeStatus;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUGC.UploadContentScreenshotV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ContentId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUGCUploadScreenshotsRequestV2&ScreenshotsRequest                                     (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUGCUpdateContentScreenshotResponse& Response)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABUGC::UploadContentScreenshotV2(const class FString& ContentId, const struct FAccelByteModelsUGCUploadScreenshotsRequestV2& ScreenshotsRequest, const TDelegate<void(const struct FAccelByteModelsUGCUpdateContentScreenshotResponse& Response)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUGC", "UploadContentScreenshotV2");

	Params::ABUGC_UploadContentScreenshotV2 Parms{};

	Parms.ContentId = std::move(ContentId);
	Parms.ScreenshotsRequest = std::move(ScreenshotsRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.BulkGetUserByOtherPlatformUserIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            OtherPlatformUserId                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FBulkPlatformUserIdResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::BulkGetUserByOtherPlatformUserIds(EAccelBytePlatformType PlatformType, const TArray<class FString>& OtherPlatformUserId, TDelegate<void(const struct FBulkPlatformUserIdResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "BulkGetUserByOtherPlatformUserIds");

	Params::ABUser_BulkGetUserByOtherPlatformUserIds Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OtherPlatformUserId = std::move(OtherPlatformUserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.BulkGetUserInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            UserIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FListBulkUserInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::BulkGetUserInfo(const TArray<class FString>& UserIds, TDelegate<void(const struct FListBulkUserInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "BulkGetUserInfo");

	Params::ABUser_BulkGetUserInfo Parms{};

	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.ForcedLinkOtherPlatform
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlatformUserId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::ForcedLinkOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& PlatformUserId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "ForcedLinkOtherPlatform");

	Params::ABUser_ForcedLinkOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.PlatformUserId = std::move(PlatformUserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.ForgetAllCredentials
// (Final, Native, Public, BlueprintCallable)

void UABUser::ForgetAllCredentials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "ForgetAllCredentials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.GetCountryFromIP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FCountryInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::GetCountryFromIP(TDelegate<void(const struct FCountryInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "GetCountryFromIP");

	Params::ABUser_GetCountryFromIP Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.GetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccountUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::GetData(TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "GetData");

	Params::ABUser_GetData Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.GetPlatformLinks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FPagedPlatformLinks& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::GetPlatformLinks(TDelegate<void(const struct FPagedPlatformLinks& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "GetPlatformLinks");

	Params::ABUser_GetPlatformLinks Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.GetUserByOtherPlatformUserId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OtherPlatformUserId                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccountUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::GetUserByOtherPlatformUserId(EAccelBytePlatformType PlatformType, const class FString& OtherPlatformUserId, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "GetUserByOtherPlatformUserId");

	Params::ABUser_GetUserByOtherPlatformUserId Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OtherPlatformUserId = std::move(OtherPlatformUserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.GetUserByUserId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FSimpleUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::GetUserByUserId(const class FString& UserId, TDelegate<void(const struct FSimpleUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "GetUserByUserId");

	Params::ABUser_GetUserByUserId Parms{};

	Parms.UserId = std::move(UserId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.GetUserEligibleToPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool Response)>          OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::GetUserEligibleToPlay(TDelegate<void(bool Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "GetUserEligibleToPlay");

	Params::ABUser_GetUserEligibleToPlay Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LinkOtherPlatform
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Ticket                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::LinkOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& Ticket, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LinkOtherPlatform");

	Params::ABUser_LinkOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.Ticket = std::move(Ticket);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginByExchangeCodeForToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Code                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::LoginByExchangeCodeForToken(const class FString& Code, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginByExchangeCodeForToken");

	Params::ABUser_LoginByExchangeCodeForToken Parms{};

	Parms.Code = std::move(Code);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginWithDeviceId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::LoginWithDeviceId(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginWithDeviceId");

	Params::ABUser_LoginWithDeviceId Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginWithLauncher
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::LoginWithLauncher(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginWithLauncher");

	Params::ABUser_LoginWithLauncher Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginWithOtherPlatform
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlatformToken                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bCreateHeadless                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUser::LoginWithOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& PlatformToken, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, bool bCreateHeadless)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginWithOtherPlatform");

	Params::ABUser_LoginWithOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.PlatformToken = std::move(PlatformToken);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.bCreateHeadless = bCreateHeadless;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginWithOtherPlatformId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformId                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlatformToken                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bCreateHeadless                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUser::LoginWithOtherPlatformId(const class FString& PlatformId, const class FString& PlatformToken, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError, bool bCreateHeadless)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginWithOtherPlatformId");

	Params::ABUser_LoginWithOtherPlatformId Parms{};

	Parms.PlatformId = std::move(PlatformId);
	Parms.PlatformToken = std::move(PlatformToken);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.bCreateHeadless = bCreateHeadless;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginWithRefreshToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::LoginWithRefreshToken(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginWithRefreshToken");

	Params::ABUser_LoginWithRefreshToken Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.LoginWithUsername
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::LoginWithUsername(const class FString& Username, const class FString& Password, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "LoginWithUsername");

	Params::ABUser_LoginWithUsername Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Logout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Logout(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Logout");

	Params::ABUser_Logout Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Register
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DisplayName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Country                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DateOfBirth                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FRegisterResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Register(const class FString& Username, const class FString& Password, const class FString& DisplayName, const class FString& Country, const class FString& DateOfBirth, TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Register");

	Params::ABUser_Register Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.DisplayName = std::move(DisplayName);
	Parms.Country = std::move(Country);
	Parms.DateOfBirth = std::move(DateOfBirth);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Registerv2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Username                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DisplayName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Country                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DateOfBirth                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FRegisterResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Registerv2(const class FString& EmailAddress, const class FString& Username, const class FString& Password, const class FString& DisplayName, const class FString& Country, const class FString& DateOfBirth, TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Registerv2");

	Params::ABUser_Registerv2 Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.DisplayName = std::move(DisplayName);
	Parms.Country = std::move(Country);
	Parms.DateOfBirth = std::move(DateOfBirth);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Registerv3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRegisterRequestv3&        RegisterRequest                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FRegisterResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Registerv3(const struct FRegisterRequestv3& RegisterRequest, TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Registerv3");

	Params::ABUser_Registerv3 Parms{};

	Parms.RegisterRequest = std::move(RegisterRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.ResetPassword
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    VerificationCode                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    EmailAddress                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewPassword                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::ResetPassword(const class FString& VerificationCode, const class FString& EmailAddress, const class FString& NewPassword, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "ResetPassword");

	Params::ABUser_ResetPassword Parms{};

	Parms.VerificationCode = std::move(VerificationCode);
	Parms.EmailAddress = std::move(EmailAddress);
	Parms.NewPassword = std::move(NewPassword);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.SearchUsers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Query                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FPagedPublicUsersInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::SearchUsers(const class FString& Query, TDelegate<void(const struct FPagedPublicUsersInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "SearchUsers");

	Params::ABUser_SearchUsers Parms{};

	Parms.Query = std::move(Query);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.SearchUsersByType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Query                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteSearchType                    By                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FPagedPublicUsersInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::SearchUsersByType(const class FString& Query, EAccelByteSearchType By, TDelegate<void(const struct FPagedPublicUsersInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "SearchUsersByType");

	Params::ABUser_SearchUsersByType Parms{};

	Parms.Query = std::move(Query);
	Parms.By = By;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.SendResetPasswordCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::SendResetPasswordCode(const class FString& EmailAddress, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "SendResetPasswordCode");

	Params::ABUser_SendResetPasswordCode Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.SendUpdateEmailVerificationCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::SendUpdateEmailVerificationCode(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "SendUpdateEmailVerificationCode");

	Params::ABUser_SendUpdateEmailVerificationCode Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.SendUpgradeVerificationCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::SendUpgradeVerificationCode(const class FString& EmailAddress, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "SendUpgradeVerificationCode");

	Params::ABUser_SendUpgradeVerificationCode Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.SendVerificationCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::SendVerificationCode(TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "SendVerificationCode");

	Params::ABUser_SendVerificationCode Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.TryRelogin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformUserID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::TryRelogin(const class FString& PlatformUserID, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "TryRelogin");

	Params::ABUser_TryRelogin Parms{};

	Parms.PlatformUserID = std::move(PlatformUserID);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UnlinkAllOtherPlatform
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UnlinkAllOtherPlatform(EAccelBytePlatformType PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UnlinkAllOtherPlatform");

	Params::ABUser_UnlinkAllOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UnlinkAllOtherPlatformId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UnlinkAllOtherPlatformId(const class FString& PlatformId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UnlinkAllOtherPlatformId");

	Params::ABUser_UnlinkAllOtherPlatformId Parms{};

	Parms.PlatformId = std::move(PlatformId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UnlinkOtherPlatform
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UnlinkOtherPlatform(EAccelBytePlatformType PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UnlinkOtherPlatform");

	Params::ABUser_UnlinkOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UnlinkOtherPlatformId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UnlinkOtherPlatformId(const class FString& PlatformId, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UnlinkOtherPlatformId");

	Params::ABUser_UnlinkOtherPlatformId Parms{};

	Parms.PlatformId = std::move(PlatformId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UnlinkOtherPlatformWithCustomErrorHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UnlinkOtherPlatformWithCustomErrorHandler(EAccelBytePlatformType PlatformType, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UnlinkOtherPlatformWithCustomErrorHandler");

	Params::ABUser_UnlinkOtherPlatformWithCustomErrorHandler Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UpdateEmail
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUpdateEmailRequest&       UpdateEmailRequest                                     (Parm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UpdateEmail(const struct FUpdateEmailRequest& UpdateEmailRequest, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UpdateEmail");

	Params::ABUser_UpdateEmail Parms{};

	Parms.UpdateEmailRequest = std::move(UpdateEmailRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UpdateUser
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUserUpdateRequest&        UpdateRequest                                          (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccountUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UpdateUser(const struct FUserUpdateRequest& UpdateRequest, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UpdateUser");

	Params::ABUser_UpdateUser Parms{};

	Parms.UpdateRequest = std::move(UpdateRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Upgrade
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccountUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Upgrade(const class FString& Username, const class FString& Password, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Upgrade");

	Params::ABUser_Upgrade Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.UpgradeAndVerify
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    VerificationCode                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccountUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::UpgradeAndVerify(const class FString& Username, const class FString& Password, const class FString& VerificationCode, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "UpgradeAndVerify");

	Params::ABUser_UpgradeAndVerify Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.VerificationCode = std::move(VerificationCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Upgradev2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Username                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccountUserData& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Upgradev2(const class FString& EmailAddress, const class FString& Username, const class FString& Password, TDelegate<void(const struct FAccountUserData& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Upgradev2");

	Params::ABUser_Upgradev2 Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUser.Verify
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    VerificationCode                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABUser::Verify(const class FString& VerificationCode, TDelegate<void()> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABUser", "Verify");

	Params::ABUser_Verify Parms{};

	Parms.VerificationCode = std::move(VerificationCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonArrayValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJsonObjectWrapper&              ObjectWrapper                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UABUtilities::AddOrReplaceJsonArrayValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, const TArray<class FString>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "AddOrReplaceJsonArrayValue");

	Params::ABUtilities_AddOrReplaceJsonArrayValue Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectWrapper = std::move(Parms.ObjectWrapper);
}


// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonBoolValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJsonObjectWrapper&              ObjectWrapper                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUtilities::AddOrReplaceJsonBoolValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "AddOrReplaceJsonBoolValue");

	Params::ABUtilities_AddOrReplaceJsonBoolValue Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectWrapper = std::move(Parms.ObjectWrapper);
}


// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonNumberValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJsonObjectWrapper&              ObjectWrapper                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUtilities::AddOrReplaceJsonNumberValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "AddOrReplaceJsonNumberValue");

	Params::ABUtilities_AddOrReplaceJsonNumberValue Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectWrapper = std::move(Parms.ObjectWrapper);
}


// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonStringValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJsonObjectWrapper&              ObjectWrapper                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABUtilities::AddOrReplaceJsonStringValue(struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "AddOrReplaceJsonStringValue");

	Params::ABUtilities_AddOrReplaceJsonStringValue Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectWrapper = std::move(Parms.ObjectWrapper);
}


// Function AccelByteUe4Sdk.ABUtilities.DateTimeToString
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FDateTime&                 DateTime                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABUtilities::DateTimeToString(const struct FDateTime& DateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "DateTimeToString");

	Params::ABUtilities_DateTimeToString Parms{};

	Parms.DateTime = std::move(DateTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABUtilities.GetJsonObjectAsJsonString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsonObjectWrapper&        ObjectWrapper                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABUtilities::GetJsonObjectAsJsonString(const struct FJsonObjectWrapper& ObjectWrapper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "GetJsonObjectAsJsonString");

	Params::ABUtilities_GetJsonObjectAsJsonString Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsonObjectWrapper&        ObjectWrapper                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABUtilities::GetJsonValueAsArray(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, TArray<class FString>* OutArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "GetJsonValueAsArray");

	Params::ABUtilities_GetJsonValueAsArray Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsonObjectWrapper&        ObjectWrapper                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   OutBool                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABUtilities::GetJsonValueAsBool(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, bool* OutBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "GetJsonValueAsBool");

	Params::ABUtilities_GetJsonValueAsBool Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBool != nullptr)
		*OutBool = Parms.OutBool;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsNumber
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsonObjectWrapper&        ObjectWrapper                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutNumber                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABUtilities::GetJsonValueAsNumber(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, float* OutNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "GetJsonValueAsNumber");

	Params::ABUtilities_GetJsonValueAsNumber Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNumber != nullptr)
		*OutNumber = Parms.OutNumber;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsonObjectWrapper&        ObjectWrapper                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABUtilities::GetJsonValueAsString(const struct FJsonObjectWrapper& ObjectWrapper, const class FString& Key, class FString* OutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABUtilities", "GetJsonValueAsString");

	Params::ABUtilities_GetJsonValueAsString Parms{};

	Parms.ObjectWrapper = std::move(ObjectWrapper);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABWallet.GetWalletInfoByCurrencyCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CurrencyCode                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsWalletInfo& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABWallet::GetWalletInfoByCurrencyCode(const class FString& CurrencyCode, TDelegate<void(const struct FAccelByteModelsWalletInfo& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABWallet", "GetWalletInfoByCurrencyCode");

	Params::ABWallet_GetWalletInfoByCurrencyCode Parms{};

	Parms.CurrencyCode = std::move(CurrencyCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABWallet.GetWalletInfoByCurrencyCodeV2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CurrencyCode                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Response)>OnSuccess                                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABWallet::GetWalletInfoByCurrencyCodeV2(const class FString& CurrencyCode, TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Response)> OnSuccess, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABWallet", "GetWalletInfoByCurrencyCodeV2");

	Params::ABWallet_GetWalletInfoByCurrencyCodeV2 Parms{};

	Parms.CurrencyCode = std::move(CurrencyCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.ClaimGlobalAchievements
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::ClaimGlobalAchievements(const class FString& AchievementCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "ClaimGlobalAchievements");

	Params::AccelByteBlueprintsAchievement_ClaimGlobalAchievements Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.GetAchievement
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::GetAchievement(const class FString& AchievementCode, const TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "GetAchievement");

	Params::AccelByteBlueprintsAchievement_GetAchievement Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.GetTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAchievementListSortBy&  SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::GetTags(const class FString& Name_0, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "GetTags");

	Params::AccelByteBlueprintsAchievement_GetTags Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryAchievements
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAchievementListSortBy&  SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TagQuery                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGlobal                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::QueryAchievements(const class FString& Language, const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, const class FString& TagQuery, bool bGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "QueryAchievements");

	Params::AccelByteBlueprintsAchievement_QueryAchievements Parms{};

	Parms.Language = std::move(Language);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.TagQuery = std::move(TagQuery);
	Parms.bGlobal = bGlobal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryGlobalAchievementContributors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementContributorsSortBy&SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::QueryGlobalAchievementContributors(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "QueryGlobalAchievementContributors");

	Params::AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryGlobalAchievements
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementStatus&AchievementStatus                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementListSortBy&SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::QueryGlobalAchievements(const class FString& AchievementCode, const EAccelByteGlobalAchievementStatus& AchievementStatus, const EAccelByteGlobalAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "QueryGlobalAchievements");

	Params::AccelByteBlueprintsAchievement_QueryGlobalAchievements Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.AchievementStatus = AchievementStatus;
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryGlobalAchievementUserContributed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteGlobalAchievementContributorsSortBy&SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::QueryGlobalAchievementUserContributed(const class FString& AchievementCode, const EAccelByteGlobalAchievementContributorsSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "QueryGlobalAchievementUserContributed");

	Params::AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryUserAchievements
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EAccelByteAchievementListSortBy&  SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    preferUnlocked                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TagQuery                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::QueryUserAchievements(const EAccelByteAchievementListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, const int32& Offset, const int32& Limit, bool preferUnlocked, const class FString& TagQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "QueryUserAchievements");

	Params::AccelByteBlueprintsAchievement_QueryUserAchievements Parms{};

	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.preferUnlocked = preferUnlocked;
	Parms.TagQuery = std::move(TagQuery);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.UnlockAchievement
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementCode                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsAchievement::UnlockAchievement(const class FString& AchievementCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsAchievement", "UnlockAchievement");

	Params::AccelByteBlueprintsAchievement_UnlockAchievement Parms{};

	Parms.AchievementCode = std::move(AchievementCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.ForgetAll
// (Final, Native, Public, BlueprintCallable)

void UABCredentials::ForgetAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "ForgetAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.GetAccessToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetAccessToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetAccessToken");

	Params::ABCredentials_GetAccessToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetAccountUserData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FAccountUserData                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAccountUserData UABCredentials::GetAccountUserData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetAccountUserData");

	Params::ABCredentials_GetAccountUserData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetAuthToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FOauth2Token                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FOauth2Token UABCredentials::GetAuthToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetAuthToken");

	Params::ABCredentials_GetAuthToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetLinkingToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetLinkingToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetLinkingToken");

	Params::ABCredentials_GetLinkingToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetNamespace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetNamespace");

	Params::ABCredentials_GetNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetPlatformUserId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetPlatformUserId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetPlatformUserId");

	Params::ABCredentials_GetPlatformUserId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetRefreshToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetRefreshToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetRefreshToken");

	Params::ABCredentials_GetRefreshToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetUserDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetUserDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetUserDisplayName");

	Params::ABCredentials_GetUserDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetUserEmailAddress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetUserEmailAddress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetUserEmailAddress");

	Params::ABCredentials_GetUserEmailAddress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.GetUserId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABCredentials::GetUserId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "GetUserId");

	Params::ABCredentials_GetUserId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.IsComply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABCredentials::IsComply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "IsComply");

	Params::ABCredentials_IsComply Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.IsSessionValid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABCredentials::IsSessionValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "IsSessionValid");

	Params::ABCredentials_IsSessionValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABCredentials.PollRefreshToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CurrentTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCredentials::PollRefreshToken(float CurrentTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "PollRefreshToken");

	Params::ABCredentials_PollRefreshToken Parms{};

	Parms.CurrentTime = CurrentTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.ScheduleRefreshToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NextRefreshTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCredentials::ScheduleRefreshToken(float NextRefreshTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "ScheduleRefreshToken");

	Params::ABCredentials_ScheduleRefreshToken Parms{};

	Parms.NextRefreshTime = NextRefreshTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.SetAccountUserData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FAccountUserData&          InAccountUserData                                      (Parm, NativeAccessSpecifierPublic)

void UABCredentials::SetAccountUserData(const struct FAccountUserData& InAccountUserData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "SetAccountUserData");

	Params::ABCredentials_SetAccountUserData Parms{};

	Parms.InAccountUserData = std::move(InAccountUserData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.SetAuthToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FOauth2Token&              NewAuthToken                                           (Parm, NativeAccessSpecifierPublic)
// float                                   CurrentTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCredentials::SetAuthToken(const struct FOauth2Token& NewAuthToken, float CurrentTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "SetAuthToken");

	Params::ABCredentials_SetAuthToken Parms{};

	Parms.NewAuthToken = std::move(NewAuthToken);
	Parms.CurrentTime = CurrentTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.SetClientCredentials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESettingsEnvironment                    Environment                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCredentials::SetClientCredentials(ESettingsEnvironment Environment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "SetClientCredentials");

	Params::ABCredentials_SetClientCredentials Parms{};

	Parms.Environment = Environment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.SetErrorOAuth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FErrorOAuthInfo&           ErrorOAuthInfo                                         (Parm, NativeAccessSpecifierPublic)

void UABCredentials::SetErrorOAuth(const struct FErrorOAuthInfo& ErrorOAuthInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "SetErrorOAuth");

	Params::ABCredentials_SetErrorOAuth Parms{};

	Parms.ErrorOAuthInfo = std::move(ErrorOAuthInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABCredentials.SetUserEmailAddress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UABCredentials::SetUserEmailAddress(const class FString& EmailAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABCredentials", "SetUserEmailAddress");

	Params::ABCredentials_SetUserEmailAddress Parms{};

	Parms.EmailAddress = std::move(EmailAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABMultiRegistry.GetApiClient
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UABApiClient*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UABApiClient* UABMultiRegistry::GetApiClient(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ABMultiRegistry", "GetApiClient");

	Params::ABMultiRegistry_GetApiClient Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABLobby.Connect
// (Final, Native, Public, BlueprintCallable)

void UABLobby::Connect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "Connect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.Disconnect
// (Final, Native, Public, BlueprintCallable)

void UABLobby::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.IsConnected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UABLobby::IsConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "IsConnected");

	Params::ABLobby_IsConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABLobby.RefreshToken
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRefreshTokenRequest&      Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FAccelByteModelsRefreshTokenResponse& Response)>OnResponse                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnError                                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABLobby::RefreshToken(const struct FRefreshTokenRequest& Request, TDelegate<void(const struct FAccelByteModelsRefreshTokenResponse& Response)> OnResponse, TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "RefreshToken");

	Params::ABLobby_RefreshToken Parms{};

	Parms.Request = std::move(Request);
	Parms.OnResponse = OnResponse;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABLobby.RequestDS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRequestDSModel&           Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABLobby::RequestDS(const struct FRequestDSModel& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "RequestDS");

	Params::ABLobby_RequestDS Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ABLobby.SetOnConnected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnConnected                                            (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABLobby::SetOnConnected(TDelegate<void()> OnConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "SetOnConnected");

	Params::ABLobby_SetOnConnected Parms{};

	Parms.OnConnected = OnConnected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.SetOnConnectFailed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnConnectError                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLobby::SetOnConnectFailed(const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnConnectError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "SetOnConnectFailed");

	Params::ABLobby_SetOnConnectFailed Parms{};

	Parms.OnConnectError = OnConnectError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.SetOnConnectionClosed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(int32 StatusCode, const class FString& Reason, bool bWasClean)>OnConnectionClosed                                     (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABLobby::SetOnConnectionClosed(TDelegate<void(int32 StatusCode, const class FString& Reason, bool bWasClean)> OnConnectionClosed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "SetOnConnectionClosed");

	Params::ABLobby_SetOnConnectionClosed Parms{};

	Parms.OnConnectionClosed = OnConnectionClosed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.SetOnDisconnect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsDisconnectNotif& Notif)>&OnDisconnected                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLobby::SetOnDisconnect(const TDelegate<void(const struct FAccelByteModelsDisconnectNotif& Notif)>& OnDisconnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "SetOnDisconnect");

	Params::ABLobby_SetOnDisconnect Parms{};

	Parms.OnDisconnected = OnDisconnected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.SetOnErrorNotification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>OnErrorNotification                                    (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UABLobby::SetOnErrorNotification(TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnErrorNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "SetOnErrorNotification");

	Params::ABLobby_SetOnErrorNotification Parms{};

	Parms.OnErrorNotification = OnErrorNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.SetRetryParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSetRetryParametersRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UABLobby::SetRetryParameters(const struct FSetRetryParametersRequest& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "SetRetryParameters");

	Params::ABLobby_SetRetryParameters Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABLobby.UnbindEvent
// (Final, Native, Public, BlueprintCallable)

void UABLobby::UnbindEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABLobby", "UnbindEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.ABServerCredentials.GetAccessToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UABServerCredentials::GetAccessToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABServerCredentials", "GetAccessToken");

	Params::ABServerCredentials_GetAccessToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.ServerMultiRegistry.GetServerApiClient
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UServerApiClient*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UServerApiClient* UServerMultiRegistry::GetServerApiClient(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ServerMultiRegistry", "GetServerApiClient");

	Params::ServerMultiRegistry_GetServerApiClient Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetCategory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ParentPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsCategoryInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCategory::GetCategory(const class FString& ParentPath, const class FString& Language, const TDelegate<void(const struct FAccelByteModelsCategoryInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCategory", "GetCategory");

	Params::AccelByteBlueprintsCategory_GetCategory Parms{};

	Parms.ParentPath = std::move(ParentPath);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetChildCategories
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CategoryPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCategory::GetChildCategories(const class FString& Language, const class FString& CategoryPath, const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCategory", "GetChildCategories");

	Params::AccelByteBlueprintsCategory_GetChildCategories Parms{};

	Parms.Language = std::move(Language);
	Parms.CategoryPath = std::move(CategoryPath);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetDescendantCategories
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CategoryPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCategory::GetDescendantCategories(const class FString& Language, const class FString& CategoryPath, const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCategory", "GetDescendantCategories");

	Params::AccelByteBlueprintsCategory_GetDescendantCategories Parms{};

	Parms.Language = std::move(Language);
	Parms.CategoryPath = std::move(CategoryPath);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetRootCategories
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCategory::GetRootCategories(const class FString& Language, const TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCategory", "GetRootCategories");

	Params::AccelByteBlueprintsCategory_GetRootCategories Parms{};

	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.CreateSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FileName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Label                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CustomAttribute                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSlot& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCloudStorage::CreateSlot(const TArray<uint8>& Data, const class FString& FileName, const TArray<class FString>& Tags, const class FString& Label, const class FString& CustomAttribute, const TDelegate<void(const struct FAccelByteModelsSlot& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCloudStorage", "CreateSlot");

	Params::AccelByteBlueprintsCloudStorage_CreateSlot Parms{};

	Parms.Data = std::move(Data);
	Parms.FileName = std::move(FileName);
	Parms.Tags = std::move(Tags);
	Parms.Label = std::move(Label);
	Parms.CustomAttribute = std::move(CustomAttribute);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.DeleteSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SlotId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCloudStorage::DeleteSlot(const class FString& SlotId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCloudStorage", "DeleteSlot");

	Params::AccelByteBlueprintsCloudStorage_DeleteSlot Parms{};

	Parms.SlotId = std::move(SlotId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.GetAllSlots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const TArray<struct FAccelByteModelsSlot>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCloudStorage::GetAllSlots(const TDelegate<void(const TArray<struct FAccelByteModelsSlot>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCloudStorage", "GetAllSlots");

	Params::AccelByteBlueprintsCloudStorage_GetAllSlots Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.GetSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SlotId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<uint8>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCloudStorage::GetSlot(const class FString& SlotId, const TDelegate<void(const TArray<uint8>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCloudStorage", "GetSlot");

	Params::AccelByteBlueprintsCloudStorage_GetSlot Parms{};

	Parms.SlotId = std::move(SlotId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.UpdateSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SlotId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Label                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CustomAttribute                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSlot& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCloudStorage::UpdateSlot(const class FString& SlotId, const class FString& FileName, const TArray<uint8>& Data, const TArray<class FString>& Tags, const class FString& Label, const class FString& CustomAttribute, const TDelegate<void(const struct FAccelByteModelsSlot& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCloudStorage", "UpdateSlot");

	Params::AccelByteBlueprintsCloudStorage_UpdateSlot Parms{};

	Parms.SlotId = std::move(SlotId);
	Parms.FileName = std::move(FileName);
	Parms.Data = std::move(Data);
	Parms.Tags = std::move(Tags);
	Parms.Label = std::move(Label);
	Parms.CustomAttribute = std::move(CustomAttribute);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.UpdateSlotMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SlotId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Label                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CustomAttribute                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsSlot& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCloudStorage::UpdateSlotMetadata(const class FString& SlotId, const class FString& FileName, const TArray<class FString>& Tags, const class FString& Label, const class FString& CustomAttribute, const TDelegate<void(const struct FAccelByteModelsSlot& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCloudStorage", "UpdateSlotMetadata");

	Params::AccelByteBlueprintsCloudStorage_UpdateSlotMetadata Parms{};

	Parms.SlotId = std::move(SlotId);
	Parms.FileName = std::move(FileName);
	Parms.Tags = std::move(Tags);
	Parms.Label = std::move(Label);
	Parms.CustomAttribute = std::move(CustomAttribute);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetOAuthClientId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetOAuthClientId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetOAuthClientId");

	Params::AccelByteBlueprintsCredentials_GetOAuthClientId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetOAuthClientSecret
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetOAuthClientSecret()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetOAuthClientSecret");

	Params::AccelByteBlueprintsCredentials_GetOAuthClientSecret Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserDisplayName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetUserDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetUserDisplayName");

	Params::AccelByteBlueprintsCredentials_GetUserDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserEmailAddress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetUserEmailAddress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetUserEmailAddress");

	Params::AccelByteBlueprintsCredentials_GetUserEmailAddress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetUserId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetUserId");

	Params::AccelByteBlueprintsCredentials_GetUserId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetUserName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetUserName");

	Params::AccelByteBlueprintsCredentials_GetUserName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetUserNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetUserNamespace");

	Params::AccelByteBlueprintsCredentials_GetUserNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserSessionId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsCredentials::GetUserSessionId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCredentials", "GetUserSessionId");

	Params::AccelByteBlueprintsCredentials_GetUserSessionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsCurrency.GetCurrencyList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Namespace                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsCurrencyList>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteCurrencyType                  CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsCurrency::GetCurrencyList(const class FString& Namespace, const TDelegate<void(const TArray<struct FAccelByteModelsCurrencyList>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteCurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsCurrency", "GetCurrencyList");

	Params::AccelByteBlueprintsCurrency_GetCurrencyList Parms{};

	Parms.Namespace = std::move(Namespace);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsEntitlement.QueryUserEntitlements
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EntitlementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteEntitlementClass              EntitlementClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteAppType                       AppType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsEntitlement::QueryUserEntitlements(const class FString& EntitlementName, const class FString& ItemId, int32 Page, int32 Size, const TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteEntitlementClass EntitlementClass, EAccelByteAppType AppType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsEntitlement", "QueryUserEntitlements");

	Params::AccelByteBlueprintsEntitlement_QueryUserEntitlements Parms{};

	Parms.EntitlementName = std::move(EntitlementName);
	Parms.ItemId = std::move(ItemId);
	Parms.Page = Page;
	Parms.Size = Size;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.EntitlementClass = EntitlementClass;
	Parms.AppType = AppType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsEntitlement.QueryUserEntitlementsMany
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EntitlementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            ItemIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAccelByteEntitlementClass              EntitlementClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteAppType                       AppType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsEntitlement::QueryUserEntitlementsMany(const class FString& EntitlementName, const TArray<class FString>& ItemIds, int32 Page, int32 Size, const TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, EAccelByteEntitlementClass EntitlementClass, EAccelByteAppType AppType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsEntitlement", "QueryUserEntitlementsMany");

	Params::AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany Parms{};

	Parms.EntitlementName = std::move(EntitlementName);
	Parms.ItemIds = std::move(ItemIds);
	Parms.Page = Page;
	Parms.Size = Size;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.EntitlementClass = EntitlementClass;
	Parms.AppType = AppType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.BatchGetPublicGameProfiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            UserIds                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsPublicGameProfile>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::BatchGetPublicGameProfiles(const TArray<class FString>& UserIds, const TDelegate<void(const TArray<struct FAccelByteModelsPublicGameProfile>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "BatchGetPublicGameProfiles");

	Params::AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles Parms{};

	Parms.UserIds = std::move(UserIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.CreateGameProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsGameProfileRequest&GameProfileRequest                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::CreateGameProfile(const struct FAccelByteModelsGameProfileRequest& GameProfileRequest, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "CreateGameProfile");

	Params::AccelByteBlueprintsGameProfile_CreateGameProfile Parms{};

	Parms.GameProfileRequest = std::move(GameProfileRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.DeleteGameProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ProfileId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::DeleteGameProfile(const class FString& ProfileId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "DeleteGameProfile");

	Params::AccelByteBlueprintsGameProfile_DeleteGameProfile Parms{};

	Parms.ProfileId = std::move(ProfileId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.GetAllGameProfiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const TArray<struct FAccelByteModelsGameProfile>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::GetAllGameProfiles(const TDelegate<void(const TArray<struct FAccelByteModelsGameProfile>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "GetAllGameProfiles");

	Params::AccelByteBlueprintsGameProfile_GetAllGameProfiles Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.GetGameProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ProfileId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::GetGameProfile(const class FString& ProfileId, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "GetGameProfile");

	Params::AccelByteBlueprintsGameProfile_GetGameProfile Parms{};

	Parms.ProfileId = std::move(ProfileId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.GetGameProfileAttribute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ProfileId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AttributeName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameProfileAttribute& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::GetGameProfileAttribute(const class FString& ProfileId, const class FString& AttributeName, const TDelegate<void(const struct FAccelByteModelsGameProfileAttribute& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "GetGameProfileAttribute");

	Params::AccelByteBlueprintsGameProfile_GetGameProfileAttribute Parms{};

	Parms.ProfileId = std::move(ProfileId);
	Parms.AttributeName = std::move(AttributeName);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.UpdateGameProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ProfileId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsGameProfileRequest&GameProfileRequest                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::UpdateGameProfile(const class FString& ProfileId, const struct FAccelByteModelsGameProfileRequest& GameProfileRequest, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "UpdateGameProfile");

	Params::AccelByteBlueprintsGameProfile_UpdateGameProfile Parms{};

	Parms.ProfileId = std::move(ProfileId);
	Parms.GameProfileRequest = std::move(GameProfileRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.UpdateGameProfileAttribute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ProfileId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsGameProfileAttribute&Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGameProfile::UpdateGameProfileAttribute(const class FString& ProfileId, const struct FAccelByteModelsGameProfileAttribute& Attribute, const TDelegate<void(const struct FAccelByteModelsGameProfile& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGameProfile", "UpdateGameProfileAttribute");

	Params::AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute Parms{};

	Parms.ProfileId = std::move(ProfileId);
	Parms.Attribute = std::move(Attribute);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.CreateGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsCreateGroupRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::CreateGroup(const struct FAccelByteModelsCreateGroupRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "CreateGroup");

	Params::AccelByteBlueprintsGroup_CreateGroup Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.DeleteGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::DeleteGroup(const class FString& GroupId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "DeleteGroup");

	Params::AccelByteBlueprintsGroup_DeleteGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.DeleteGroupPredefinedRule
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAllowedAction&          AllowedAction                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::DeleteGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "DeleteGroupPredefinedRule");

	Params::AccelByteBlueprintsGroup_DeleteGroupPredefinedRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.AllowedAction = AllowedAction;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.GetGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::GetGroup(const class FString& GroupId, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "GetGroup");

	Params::AccelByteBlueprintsGroup_GetGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.GetGroupList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsGetGroupListRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::GetGroupList(const struct FAccelByteModelsGetGroupListRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "GetGroupList");

	Params::AccelByteBlueprintsGroup_GetGroupList Parms{};

	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bCompletelyReplace                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsGroupUpdatable&RequestContent                                         (ConstParm, Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::UpdateGroup(const class FString& GroupId, const bool bCompletelyReplace, const struct FAccelByteModelsGroupUpdatable& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "UpdateGroup");

	Params::AccelByteBlueprintsGroup_UpdateGroup Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.bCompletelyReplace = bCompletelyReplace;
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroupCustomAttributes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateGroupCustomAttributesRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::UpdateGroupCustomAttributes(const class FString& GroupId, const struct FAccelByteModelsUpdateGroupCustomAttributesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "UpdateGroupCustomAttributes");

	Params::AccelByteBlueprintsGroup_UpdateGroupCustomAttributes Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroupCustomRule
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateCustomRulesRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::UpdateGroupCustomRule(const class FString& GroupId, const struct FAccelByteModelsUpdateCustomRulesRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "UpdateGroupCustomRule");

	Params::AccelByteBlueprintsGroup_UpdateGroupCustomRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroupPredefinedRule
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GroupId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteAllowedAction&          AllowedAction                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest&RequestContent                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsGroup::UpdateGroupPredefinedRule(const class FString& GroupId, const EAccelByteAllowedAction& AllowedAction, const struct FAccelByteModelsUpdateGroupPredefinedRuleRequest& RequestContent, const TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsGroup", "UpdateGroupPredefinedRule");

	Params::AccelByteBlueprintsGroup_UpdateGroupPredefinedRule Parms{};

	Parms.GroupId = std::move(GroupId);
	Parms.AllowedAction = AllowedAction;
	Parms.RequestContent = std::move(RequestContent);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.GetItemById
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsItem::GetItemById(const class FString& ItemId, const class FString& Region, const class FString& Language, const TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsItem", "GetItemById");

	Params::AccelByteBlueprintsItem_GetItemById Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.Region = std::move(Region);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.GetItemsByCriteria
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsItemCriteria&ItemCriteria                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32&                            Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Limit                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EAccelByteItemListSortBy>& SortBy                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsItem::GetItemsByCriteria(const struct FAccelByteModelsItemCriteria& ItemCriteria, const int32& Offset, const int32& Limit, const TArray<EAccelByteItemListSortBy>& SortBy, const TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsItem", "GetItemsByCriteria");

	Params::AccelByteBlueprintsItem_GetItemsByCriteria Parms{};

	Parms.ItemCriteria = std::move(ItemCriteria);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.SortBy = std::move(SortBy);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.SearchItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Keyword                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsItem::SearchItem(const class FString& Language, const class FString& Keyword, int32 Page, int32 Size, const class FString& Region, const TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsItem", "SearchItem");

	Params::AccelByteBlueprintsItem_SearchItem Parms{};

	Parms.Language = std::move(Language);
	Parms.Keyword = std::move(Keyword);
	Parms.Page = Page;
	Parms.Size = Size;
	Parms.Region = std::move(Region);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.GetItemByAppId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AppId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Region                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsItemInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsItem::GetItemByAppId(const class FString& AppId, const class FString& Region, const class FString& Language, const TDelegate<void(const struct FAccelByteModelsItemInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AccelByteBlueprintsItem", "GetItemByAppId");

	Params::AccelByteBlueprintsItem_GetItemByAppId Parms{};

	Parms.AppId = std::move(AppId);
	Parms.Region = std::move(Region);
	Parms.Language = std::move(Language);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.AcceptFriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::AcceptFriend(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "AcceptFriend");

	Params::AccelByteBlueprintsLobby_AcceptFriend Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.BindEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                OnConnectSuccess                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnConnectError                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 StatusCode, const class FString& Reason, bool WasClean)>&OnConnectionClosed                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Result)>&OnLeavePartyNotice                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsInvitationNotice& Result)>&OnInvitePartyInvitationNotice                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Result)>&OnInvitePartyGetInvitedNotice                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Result)>&OnInvitePartyJoinNotice                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Result)>&OnInvitePartyKickedNotice                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)>&OnPartyConnectNotice                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)>&OnPartyDisconnectNotice                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Result)>&OnPrivateMessageNotice                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Result)>&OnPartyMessageNotice                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Result)>&OnUserPresenceNotice                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsNotificationMessage& Result)>&OnNotificationMessage                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)>&OnMatchmakingNotice                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)>&OnReadyConsentNotice                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)>&OnRematchmakingNotice                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsDsNotice& Result)>&OnDsNotice                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Result)>&OnAcceptFriendsNotifDelegate                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Result)>&OnRequestFriendsNotifDelegate                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnParsingError                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::BindEvent(const TDelegate<void()>& OnConnectSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnConnectError, const TDelegate<void(int32 StatusCode, const class FString& Reason, bool WasClean)>& OnConnectionClosed, const TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Result)>& OnLeavePartyNotice, const TDelegate<void(const struct FAccelByteModelsInvitationNotice& Result)>& OnInvitePartyInvitationNotice, const TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Result)>& OnInvitePartyGetInvitedNotice, const TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Result)>& OnInvitePartyJoinNotice, const TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Result)>& OnInvitePartyKickedNotice, const TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)>& OnPartyConnectNotice, const TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)>& OnPartyDisconnectNotice, const TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Result)>& OnPrivateMessageNotice, const TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Result)>& OnPartyMessageNotice, const TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Result)>& OnUserPresenceNotice, const TDelegate<void(const struct FAccelByteModelsNotificationMessage& Result)>& OnNotificationMessage, const TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)>& OnMatchmakingNotice, const TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)>& OnReadyConsentNotice, const TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)>& OnRematchmakingNotice, const TDelegate<void(const struct FAccelByteModelsDsNotice& Result)>& OnDsNotice, const TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Result)>& OnAcceptFriendsNotifDelegate, const TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Result)>& OnRequestFriendsNotifDelegate, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnParsingError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "BindEvent");

	Params::AccelByteBlueprintsLobby_BindEvent Parms{};

	Parms.OnConnectSuccess = OnConnectSuccess;
	Parms.OnConnectError = OnConnectError;
	Parms.OnConnectionClosed = OnConnectionClosed;
	Parms.OnLeavePartyNotice = OnLeavePartyNotice;
	Parms.OnInvitePartyInvitationNotice = OnInvitePartyInvitationNotice;
	Parms.OnInvitePartyGetInvitedNotice = OnInvitePartyGetInvitedNotice;
	Parms.OnInvitePartyJoinNotice = OnInvitePartyJoinNotice;
	Parms.OnInvitePartyKickedNotice = OnInvitePartyKickedNotice;
	Parms.OnPartyConnectNotice = OnPartyConnectNotice;
	Parms.OnPartyDisconnectNotice = OnPartyDisconnectNotice;
	Parms.OnPrivateMessageNotice = OnPrivateMessageNotice;
	Parms.OnPartyMessageNotice = OnPartyMessageNotice;
	Parms.OnUserPresenceNotice = OnUserPresenceNotice;
	Parms.OnNotificationMessage = OnNotificationMessage;
	Parms.OnMatchmakingNotice = OnMatchmakingNotice;
	Parms.OnReadyConsentNotice = OnReadyConsentNotice;
	Parms.OnRematchmakingNotice = OnRematchmakingNotice;
	Parms.OnDsNotice = OnDsNotice;
	Parms.OnAcceptFriendsNotifDelegate = OnAcceptFriendsNotifDelegate;
	Parms.OnRequestFriendsNotifDelegate = OnRequestFriendsNotifDelegate;
	Parms.OnParsingError = OnParsingError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.CancelFriendRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::CancelFriendRequest(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "CancelFriendRequest");

	Params::AccelByteBlueprintsLobby_CancelFriendRequest Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.Connect
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::Connect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "Connect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.Disconnect
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.GetAllAsyncNotification
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::GetAllAsyncNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "GetAllAsyncNotification");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.GetFriendshipStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::GetFriendshipStatus(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "GetFriendshipStatus");

	Params::AccelByteBlueprintsLobby_GetFriendshipStatus Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.IsConnected
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAccelByteBlueprintsLobby::IsConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "IsConnected");

	Params::AccelByteBlueprintsLobby_IsConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.ListIncomingFriends
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::ListIncomingFriends()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "ListIncomingFriends");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.ListOutgoingFriends
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::ListOutgoingFriends()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "ListOutgoingFriends");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.LoadFriendsList
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::LoadFriendsList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "LoadFriendsList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.RejectFriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::RejectFriend(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "RejectFriend");

	Params::AccelByteBlueprintsLobby_RejectFriend Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.RequestFriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::RequestFriend(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "RequestFriend");

	Params::AccelByteBlueprintsLobby_RequestFriend Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendAcceptInvitationRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PartyId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InvitationToken                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendAcceptInvitationRequest(const class FString& PartyId, const class FString& InvitationToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendAcceptInvitationRequest");

	Params::AccelByteBlueprintsLobby_SendAcceptInvitationRequest Parms{};

	Parms.PartyId = std::move(PartyId);
	Parms.InvitationToken = std::move(InvitationToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendCancelMatchmaking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameMode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendCancelMatchmaking(const class FString& GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendCancelMatchmaking");

	Params::AccelByteBlueprintsLobby_SendCancelMatchmaking Parms{};

	Parms.GameMode = std::move(GameMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendCreatePartyRequest
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::SendCreatePartyRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendCreatePartyRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendGetOnlineUsersRequest
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::SendGetOnlineUsersRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendGetOnlineUsersRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendInfoPartyRequest
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::SendInfoPartyRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendInfoPartyRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendInviteToPartyRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendInviteToPartyRequest(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendInviteToPartyRequest");

	Params::AccelByteBlueprintsLobby_SendInviteToPartyRequest Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendKickPartyMemberRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendKickPartyMemberRequest(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendKickPartyMemberRequest");

	Params::AccelByteBlueprintsLobby_SendKickPartyMemberRequest Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendLeavePartyRequest
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::SendLeavePartyRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendLeavePartyRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendPartyMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendPartyMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendPartyMessage");

	Params::AccelByteBlueprintsLobby_SendPartyMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendPing
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::SendPing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendPing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendPrivateMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendPrivateMessage(const class FString& UserId, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendPrivateMessage");

	Params::AccelByteBlueprintsLobby_SendPrivateMessage Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendReadyConsentRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendReadyConsentRequest(const class FString& MatchId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendReadyConsentRequest");

	Params::AccelByteBlueprintsLobby_SendReadyConsentRequest Parms{};

	Parms.MatchId = std::move(MatchId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendRejectConsentRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendRejectConsentRequest(const class FString& MatchId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendRejectConsentRequest");

	Params::AccelByteBlueprintsLobby_SendRejectConsentRequest Parms{};

	Parms.MatchId = std::move(MatchId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendStartMatchmaking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameMode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SendStartMatchmaking(const class FString& GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SendStartMatchmaking");

	Params::AccelByteBlueprintsLobby_SendStartMatchmaking Parms{};

	Parms.GameMode = std::move(GameMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetAcceptFriendResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Result)>OnAcceptFriendsResponse                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetAcceptFriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Result)> OnAcceptFriendsResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetAcceptFriendResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate Parms{};

	Parms.OnAcceptFriendsResponse = OnAcceptFriendsResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetCancelFriendRequestResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Result)>OnCancelFriendsResponse                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetCancelFriendRequestResponseDelegate(TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Result)> OnCancelFriendsResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetCancelFriendRequestResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate Parms{};

	Parms.OnCancelFriendsResponse = OnCancelFriendsResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetCancelMatchmakingResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)>OnMatchmakingCancel                                    (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetCancelMatchmakingResponseDelegate(TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)> OnMatchmakingCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetCancelMatchmakingResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate Parms{};

	Parms.OnMatchmakingCancel = OnMatchmakingCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetCreatePartyResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Result)>OnCreatePartyResponse                                  (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetCreatePartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Result)> OnCreatePartyResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetCreatePartyResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate Parms{};

	Parms.OnCreatePartyResponse = OnCreatePartyResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetDsNotifDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsDsNotice& Result)>OnDsNotice                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetDsNotifDelegate(TDelegate<void(const struct FAccelByteModelsDsNotice& Result)> OnDsNotice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetDsNotifDelegate");

	Params::AccelByteBlueprintsLobby_SetDsNotifDelegate Parms{};

	Parms.OnDsNotice = OnDsNotice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetGetAllUserPresenceResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Result)>OnGetAllUserPresenceResponse                           (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetGetAllUserPresenceResponseDelegate(TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Result)> OnGetAllUserPresenceResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetGetAllUserPresenceResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate Parms{};

	Parms.OnGetAllUserPresenceResponse = OnGetAllUserPresenceResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetGetFriendshipStatusResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Result)>OnGetFriendshipStatusResponse                          (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetGetFriendshipStatusResponseDelegate(TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Result)> OnGetFriendshipStatusResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetGetFriendshipStatusResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate Parms{};

	Parms.OnGetFriendshipStatusResponse = OnGetFriendshipStatusResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInfoPartyResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Result)>OnInfoPartyResponse                                    (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetInfoPartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Result)> OnInfoPartyResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetInfoPartyResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate Parms{};

	Parms.OnInfoPartyResponse = OnInfoPartyResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInvitePartyJoinResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Result)>OnInvitePartyJoinResponse                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetInvitePartyJoinResponseDelegate(TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Result)> OnInvitePartyJoinResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetInvitePartyJoinResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate Parms{};

	Parms.OnInvitePartyJoinResponse = OnInvitePartyJoinResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInvitePartyKickMemberResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Result)>OnInvitePartyKickMemberResponse                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetInvitePartyKickMemberResponseDelegate(TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Result)> OnInvitePartyKickMemberResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetInvitePartyKickMemberResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate Parms{};

	Parms.OnInvitePartyKickMemberResponse = OnInvitePartyKickMemberResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInvitePartyResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Result)>OnInvitePartyResponse                                  (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetInvitePartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Result)> OnInvitePartyResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetInvitePartyResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate Parms{};

	Parms.OnInvitePartyResponse = OnInvitePartyResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetLeavePartyResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Result)>OnLeavePartyResponse                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetLeavePartyResponseDelegate(TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Result)> OnLeavePartyResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetLeavePartyResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate Parms{};

	Parms.OnLeavePartyResponse = OnLeavePartyResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetListIncomingFriendsResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Result)>OnListIncomingFriendsResponse                          (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetListIncomingFriendsResponseDelegate(TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Result)> OnListIncomingFriendsResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetListIncomingFriendsResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate Parms{};

	Parms.OnListIncomingFriendsResponse = OnListIncomingFriendsResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetListOutgoingFriendsResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Result)>OnListOutgoingFriendsResponse                          (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetListOutgoingFriendsResponseDelegate(TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Result)> OnListOutgoingFriendsResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetListOutgoingFriendsResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate Parms{};

	Parms.OnListOutgoingFriendsResponse = OnListOutgoingFriendsResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetLoadFriendsListResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Result)>OnLoadFriendListResponse                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetLoadFriendsListResponseDelegate(TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Result)> OnLoadFriendListResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetLoadFriendsListResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate Parms{};

	Parms.OnLoadFriendListResponse = OnLoadFriendListResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetMatchmakingNotifDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)>OnMatchmakingNotice                                    (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetMatchmakingNotifDelegate(TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)> OnMatchmakingNotice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetMatchmakingNotifDelegate");

	Params::AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate Parms{};

	Parms.OnMatchmakingNotice = OnMatchmakingNotice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetPartyMessageResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Result)>OnPartyMessageResponse                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetPartyMessageResponseDelegate(TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Result)> OnPartyMessageResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetPartyMessageResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate Parms{};

	Parms.OnPartyMessageResponse = OnPartyMessageResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetPresenceStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAvailability                           State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Activity                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetPresenceStatus(EAvailability State, const class FString& Activity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetPresenceStatus");

	Params::AccelByteBlueprintsLobby_SetPresenceStatus Parms{};

	Parms.State = State;
	Parms.Activity = std::move(Activity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetPrivateMessageResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Result)>OnPrivateMessageResponse                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetPrivateMessageResponseDelegate(TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Result)> OnPrivateMessageResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetPrivateMessageResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate Parms{};

	Parms.OnPrivateMessageResponse = OnPrivateMessageResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetReadyConsentNotifDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)>OnReadyConsentNotice                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetReadyConsentNotifDelegate(TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)> OnReadyConsentNotice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetReadyConsentNotifDelegate");

	Params::AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate Parms{};

	Parms.OnReadyConsentNotice = OnReadyConsentNotice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetReadyConsentResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Result)>OnReadyConsentResponse                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetReadyConsentResponseDelegate(TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Result)> OnReadyConsentResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetReadyConsentResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate Parms{};

	Parms.OnReadyConsentResponse = OnReadyConsentResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRejectConsentNotifDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Result)>OnRejectConsentNotice                                  (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetRejectConsentNotifDelegate(TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Result)> OnRejectConsentNotice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetRejectConsentNotifDelegate");

	Params::AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate Parms{};

	Parms.OnRejectConsentNotice = OnRejectConsentNotice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRejectConsentResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Result)>OnRejectConsentResponse                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetRejectConsentResponseDelegate(TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Result)> OnRejectConsentResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetRejectConsentResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate Parms{};

	Parms.OnRejectConsentResponse = OnRejectConsentResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRejectFriendResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Result)>OnRejectFriendsResponse                                (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetRejectFriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Result)> OnRejectFriendsResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetRejectFriendResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate Parms{};

	Parms.OnRejectFriendsResponse = OnRejectFriendsResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRematchmakingNotifDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)>OnRematchmakingNotice                                  (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetRematchmakingNotifDelegate(TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)> OnRematchmakingNotice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetRematchmakingNotifDelegate");

	Params::AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate Parms{};

	Parms.OnRematchmakingNotice = OnRematchmakingNotice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRequestFriendResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Result)>OnRequestFriendsResponseDelegate                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetRequestFriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Result)> OnRequestFriendsResponseDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetRequestFriendResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate Parms{};

	Parms.OnRequestFriendsResponseDelegate = OnRequestFriendsResponseDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetStartMatchmakingResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)>OnMatchmakingStart                                     (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetStartMatchmakingResponseDelegate(TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)> OnMatchmakingStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetStartMatchmakingResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate Parms{};

	Parms.OnMatchmakingStart = OnMatchmakingStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetUnfriendResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Result)>OnUnfriendResponse                                     (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetUnfriendResponseDelegate(TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Result)> OnUnfriendResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetUnfriendResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetUnfriendResponseDelegate Parms{};

	Parms.OnUnfriendResponse = OnUnfriendResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetUserPresenceResponseDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Result)>OnUserPresenceResponse                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::SetUserPresenceResponseDelegate(TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Result)> OnUserPresenceResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "SetUserPresenceResponseDelegate");

	Params::AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate Parms{};

	Parms.OnUserPresenceResponse = OnUserPresenceResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.UnbindDelegates
// (Final, Native, Static, Public, BlueprintCallable)

void UAccelByteBlueprintsLobby::UnbindDelegates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "UnbindDelegates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.Unfriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsLobby::Unfriend(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsLobby", "Unfriend");

	Params::AccelByteBlueprintsLobby_Unfriend Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.CancelOrder
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    OrderNo                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsOrder::CancelOrder(const class FString& OrderNo, const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsOrder", "CancelOrder");

	Params::AccelByteBlueprintsOrder_CancelOrder Parms{};

	Parms.OrderNo = std::move(OrderNo);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.CreateNewOrder
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsOrderCreate&OrderCreate                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsOrder::CreateNewOrder(const struct FAccelByteModelsOrderCreate& OrderCreate, const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsOrder", "CreateNewOrder");

	Params::AccelByteBlueprintsOrder_CreateNewOrder Parms{};

	Parms.OrderCreate = std::move(OrderCreate);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.GetUserOrder
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    OrderNo                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsOrder::GetUserOrder(const class FString& OrderNo, const TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsOrder", "GetUserOrder");

	Params::AccelByteBlueprintsOrder_GetUserOrder Parms{};

	Parms.OrderNo = std::move(OrderNo);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.GetUserOrderHistory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    OrderNo                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsOrderHistoryInfo>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsOrder::GetUserOrderHistory(const class FString& OrderNo, const TDelegate<void(const TArray<struct FAccelByteModelsOrderHistoryInfo>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsOrder", "GetUserOrderHistory");

	Params::AccelByteBlueprintsOrder_GetUserOrderHistory Parms{};

	Parms.OrderNo = std::move(OrderNo);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.GetUserOrders
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsOrder::GetUserOrders(int32 Page, int32 Size, const TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsOrder", "GetUserOrders");

	Params::AccelByteBlueprintsOrder_GetUserOrders Parms{};

	Parms.Page = Page;
	Parms.Size = Size;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsReward.GetRewardByRewardCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    RewardCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsReward::GetRewardByRewardCode(const class FString& RewardCode, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsReward", "GetRewardByRewardCode");

	Params::AccelByteBlueprintsReward_GetRewardByRewardCode Parms{};

	Parms.RewardCode = std::move(RewardCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsReward.GetRewardByRewardId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    RewardId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsReward::GetRewardByRewardId(const class FString& RewardId, const TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsReward", "GetRewardByRewardId");

	Params::AccelByteBlueprintsReward_GetRewardByRewardId Parms{};

	Parms.RewardId = std::move(RewardId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsReward.QueryRewards
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EventTopic                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAccelByteRewardListSortBy&       SortBy                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsQueryReward& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsReward::QueryRewards(const class FString& EventTopic, int32 Offset, int32 Limit, const EAccelByteRewardListSortBy& SortBy, const TDelegate<void(const struct FAccelByteModelsQueryReward& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsReward", "QueryRewards");

	Params::AccelByteBlueprintsReward_QueryRewards Parms{};

	Parms.EventTopic = std::move(EventTopic);
	Parms.Offset = Offset;
	Parms.Limit = Limit;
	Parms.SortBy = SortBy;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials.GetClientAccessToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerCredentials::GetClientAccessToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerCredentials", "GetClientAccessToken");

	Params::AccelByteBlueprintsServerCredentials_GetClientAccessToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials.GetClientNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerCredentials::GetClientNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerCredentials", "GetClientNamespace");

	Params::AccelByteBlueprintsServerCredentials_GetClientNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials.GetMatchId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerCredentials::GetMatchId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerCredentials", "GetMatchId");

	Params::AccelByteBlueprintsServerCredentials_GetMatchId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetAchievementServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetAchievementServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetAchievementServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetAchievementServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetAMSServerWatchdogUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetAMSServerWatchdogUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetAMSServerWatchdogUrl");

	Params::AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetChatServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetChatServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetChatServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetChatServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetClientId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetClientId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetClientId");

	Params::AccelByteBlueprintsServerSettings_GetClientId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetClientSecret
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetClientSecret()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetClientSecret");

	Params::AccelByteBlueprintsServerSettings_GetClientSecret Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetCloudSaveServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetCloudSaveServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetCloudSaveServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetDSHubServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetDSHubServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetDSHubServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetDSHubServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetDSMControllerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetDSMControllerServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetDSMControllerServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetGameTelemetryServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetGameTelemetryServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetGameTelemetryServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetGDPRServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetGDPRServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetGDPRServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetGDPRServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetIamServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetIamServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetIamServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetIamServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetLobbyServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetLobbyServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetLobbyServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetLobbyServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetMatchmakingServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetMatchmakingServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetMatchmakingServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetMatchmakingV2ServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetMatchmakingV2ServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetMatchmakingV2ServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetNamespace");

	Params::AccelByteBlueprintsServerSettings_GetNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetPlatformServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetPlatformServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetPlatformServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetPlatformServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetPublisherNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetPublisherNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetPublisherNamespace");

	Params::AccelByteBlueprintsServerSettings_GetPublisherNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetQosManagerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetQosManagerServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetQosManagerServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetQosManagerServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetQosPingTimeout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAccelByteBlueprintsServerSettings::GetQosPingTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetQosPingTimeout");

	Params::AccelByteBlueprintsServerSettings_GetQosPingTimeout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetSeasonPassServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetSeasonPassServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetSeasonPassServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetSessionBrowserServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetSessionBrowserServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetSessionBrowserServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetSessionServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetSessionServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetSessionServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetSessionServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetStatisticServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetStatisticServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetStatisticServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetStatisticServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetUGCServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsServerSettings::GetUGCServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "GetUGCServerUrl");

	Params::AccelByteBlueprintsServerSettings_GetUGCServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.IsSendPredefinedEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAccelByteBlueprintsServerSettings::IsSendPredefinedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "IsSendPredefinedEvent");

	Params::AccelByteBlueprintsServerSettings_IsSendPredefinedEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.ResetSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const ESettingsEnvironment              Environment                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::ResetSettings(const ESettingsEnvironment Environment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "ResetSettings");

	Params::AccelByteBlueprintsServerSettings_ResetSettings Parms{};

	Parms.Environment = Environment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetAchievementServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementServerUrl                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetAchievementServerUrl(const class FString& AchievementServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetAchievementServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetAchievementServerUrl Parms{};

	Parms.AchievementServerUrl = std::move(AchievementServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetAMSServerWatchdogUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AMSServerUrl                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetAMSServerWatchdogUrl(const class FString& AMSServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetAMSServerWatchdogUrl");

	Params::AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl Parms{};

	Parms.AMSServerUrl = std::move(AMSServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetChatServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ChatServerUrl                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetChatServerUrl(const class FString& ChatServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetChatServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetChatServerUrl Parms{};

	Parms.ChatServerUrl = std::move(ChatServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetClientId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ClientId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetClientId(const class FString& ClientId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetClientId");

	Params::AccelByteBlueprintsServerSettings_SetClientId Parms{};

	Parms.ClientId = std::move(ClientId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetClientSecret
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ClientSecret                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetClientSecret(const class FString& ClientSecret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetClientSecret");

	Params::AccelByteBlueprintsServerSettings_SetClientSecret Parms{};

	Parms.ClientSecret = std::move(ClientSecret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetCloudSaveServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CloudServerUrl                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetCloudSaveServerUrl(const class FString& CloudServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetCloudSaveServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl Parms{};

	Parms.CloudServerUrl = std::move(CloudServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetDSHubServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DSHubServerUrl                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetDSHubServerUrl(const class FString& DSHubServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetDSHubServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetDSHubServerUrl Parms{};

	Parms.DSHubServerUrl = std::move(DSHubServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetDSMControllerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DSMControllerServerUrl                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetDSMControllerServerUrl(const class FString& DSMControllerServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetDSMControllerServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl Parms{};

	Parms.DSMControllerServerUrl = std::move(DSMControllerServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetGameTelemetryServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameTelemetryServerUrl                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetGameTelemetryServerUrl(const class FString& GameTelemetryServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetGameTelemetryServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl Parms{};

	Parms.GameTelemetryServerUrl = std::move(GameTelemetryServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetIamServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IamServerUrl                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetIamServerUrl(const class FString& IamServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetIamServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetIamServerUrl Parms{};

	Parms.IamServerUrl = std::move(IamServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetLobbyServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LobbyServerUrl                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetLobbyServerUrl(const class FString& LobbyServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetLobbyServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetLobbyServerUrl Parms{};

	Parms.LobbyServerUrl = std::move(LobbyServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetMatchmakingServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchmakingServerurl                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetMatchmakingServerUrl(const class FString& MatchmakingServerurl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetMatchmakingServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl Parms{};

	Parms.MatchmakingServerurl = std::move(MatchmakingServerurl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetMatchmakingV2ServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchmakingV2ServerUrl                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetMatchmakingV2ServerUrl(const class FString& MatchmakingV2ServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetMatchmakingV2ServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl Parms{};

	Parms.MatchmakingV2ServerUrl = std::move(MatchmakingV2ServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Namespace                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetNamespace(const class FString& Namespace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetNamespace");

	Params::AccelByteBlueprintsServerSettings_SetNamespace Parms{};

	Parms.Namespace = std::move(Namespace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetPlatformServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformServerUrl                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetPlatformServerUrl(const class FString& PlatformServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetPlatformServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetPlatformServerUrl Parms{};

	Parms.PlatformServerUrl = std::move(PlatformServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetPublisherNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PublisherNamespace                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetPublisherNamespace(const class FString& PublisherNamespace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetPublisherNamespace");

	Params::AccelByteBlueprintsServerSettings_SetPublisherNamespace Parms{};

	Parms.PublisherNamespace = std::move(PublisherNamespace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetQosManagerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformServerUrl                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetQosManagerServerUrl(const class FString& PlatformServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetQosManagerServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetQosManagerServerUrl Parms{};

	Parms.PlatformServerUrl = std::move(PlatformServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetQosPingTimeout
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            QosPingTimeout                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetQosPingTimeout(const float& QosPingTimeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetQosPingTimeout");

	Params::AccelByteBlueprintsServerSettings_SetQosPingTimeout Parms{};

	Parms.QosPingTimeout = QosPingTimeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSeasonPassServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SessionPassServerUrl                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetSeasonPassServerUrl(const class FString& SessionPassServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetSeasonPassServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl Parms{};

	Parms.SessionPassServerUrl = std::move(SessionPassServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSendPredefinedEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetSendPredefinedEvent(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetSendPredefinedEvent");

	Params::AccelByteBlueprintsServerSettings_SetSendPredefinedEvent Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSessionBrowserServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SessionBrowserServerUrl                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetSessionBrowserServerUrl(const class FString& SessionBrowserServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetSessionBrowserServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl Parms{};

	Parms.SessionBrowserServerUrl = std::move(SessionBrowserServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSessionServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SessionServerUrl                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetSessionServerUrl(const class FString& SessionServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetSessionServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetSessionServerUrl Parms{};

	Parms.SessionServerUrl = std::move(SessionServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetStatisticServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatisticServerUrl                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetStatisticServerUrl(const class FString& StatisticServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetStatisticServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetStatisticServerUrl Parms{};

	Parms.StatisticServerUrl = std::move(StatisticServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetUGCServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UGCServerUrl                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetUGCServerUrl(const class FString& UGCServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsServerSettings", "SetUGCServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetUGCServerUrl Parms{};

	Parms.UGCServerUrl = std::move(UGCServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetGDPRServerUrl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GDPRServerUrl                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsServerSettings::SetGDPRServerUrl(const class FString& GDPRServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AccelByteBlueprintsServerSettings", "SetGDPRServerUrl");

	Params::AccelByteBlueprintsServerSettings_SetGDPRServerUrl Parms{};

	Parms.GDPRServerUrl = std::move(GDPRServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetAchievementServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetAchievementServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetAchievementServerUrl");

	Params::AccelByteBlueprintsSettings_GetAchievementServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetAppId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetAppId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetAppId");

	Params::AccelByteBlueprintsSettings_GetAppId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetBasicServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetBasicServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetBasicServerUrl");

	Params::AccelByteBlueprintsSettings_GetBasicServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetChatServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetChatServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetChatServerUrl");

	Params::AccelByteBlueprintsSettings_GetChatServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetClientId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetClientId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetClientId");

	Params::AccelByteBlueprintsSettings_GetClientId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetClientSecret
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetClientSecret()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetClientSecret");

	Params::AccelByteBlueprintsSettings_GetClientSecret Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetCloudSaveServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetCloudSaveServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetCloudSaveServerUrl");

	Params::AccelByteBlueprintsSettings_GetCloudSaveServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetCloudStorageServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetCloudStorageServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetCloudStorageServerUrl");

	Params::AccelByteBlueprintsSettings_GetCloudStorageServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetCustomerName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetCustomerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetCustomerName");

	Params::AccelByteBlueprintsSettings_GetCustomerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGameProfileServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetGameProfileServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetGameProfileServerUrl");

	Params::AccelByteBlueprintsSettings_GetGameProfileServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGameTelemetryServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetGameTelemetryServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetGameTelemetryServerUrl");

	Params::AccelByteBlueprintsSettings_GetGameTelemetryServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGDPRServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetGDPRServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetGDPRServerUrl");

	Params::AccelByteBlueprintsSettings_GetGDPRServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGroupServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetGroupServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetGroupServerUrl");

	Params::AccelByteBlueprintsSettings_GetGroupServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetHeartBeatData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetHeartBeatData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetHeartBeatData");

	Params::AccelByteBlueprintsSettings_GetHeartBeatData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetHttpCacheType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EHttpCacheType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHttpCacheType UAccelByteBlueprintsSettings::GetHttpCacheType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetHttpCacheType");

	Params::AccelByteBlueprintsSettings_GetHttpCacheType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetIamServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetIamServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetIamServerUrl");

	Params::AccelByteBlueprintsSettings_GetIamServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetLeaderboardServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetLeaderboardServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetLeaderboardServerUrl");

	Params::AccelByteBlueprintsSettings_GetLeaderboardServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetLobbyServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetLobbyServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetLobbyServerUrl");

	Params::AccelByteBlueprintsSettings_GetLobbyServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetMatchmakingV2ServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetMatchmakingV2ServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetMatchmakingV2ServerUrl");

	Params::AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetNamespace");

	Params::AccelByteBlueprintsSettings_GetNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetPlatformServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetPlatformServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetPlatformServerUrl");

	Params::AccelByteBlueprintsSettings_GetPlatformServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetPublisherNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetPublisherNamespace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetPublisherNamespace");

	Params::AccelByteBlueprintsSettings_GetPublisherNamespace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosLatencyPollIntervalSecs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAccelByteBlueprintsSettings::GetQosLatencyPollIntervalSecs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetQosLatencyPollIntervalSecs");

	Params::AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosManagerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetQosManagerServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetQosManagerServerUrl");

	Params::AccelByteBlueprintsSettings_GetQosManagerServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosPingTimeout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAccelByteBlueprintsSettings::GetQosPingTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetQosPingTimeout");

	Params::AccelByteBlueprintsSettings_GetQosPingTimeout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosServerLatencyPollIntervalSecs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAccelByteBlueprintsSettings::GetQosServerLatencyPollIntervalSecs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetQosServerLatencyPollIntervalSecs");

	Params::AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetReportingServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetReportingServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetReportingServerUrl");

	Params::AccelByteBlueprintsSettings_GetReportingServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetSessionBrowserServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetSessionBrowserServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetSessionBrowserServerUrl");

	Params::AccelByteBlueprintsSettings_GetSessionBrowserServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetSessionServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetSessionServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetSessionServerUrl");

	Params::AccelByteBlueprintsSettings_GetSessionServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetSettingsEnvironment
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetSettingsEnvironment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetSettingsEnvironment");

	Params::AccelByteBlueprintsSettings_GetSettingsEnvironment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetStatisticServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetStatisticServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetStatisticServerUrl");

	Params::AccelByteBlueprintsSettings_GetStatisticServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetTurnManagerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetTurnManagerServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetTurnManagerServerUrl");

	Params::AccelByteBlueprintsSettings_GetTurnManagerServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetUGCServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAccelByteBlueprintsSettings::GetUGCServerUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "GetUGCServerUrl");

	Params::AccelByteBlueprintsSettings_GetUGCServerUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.IsHttpCacheEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAccelByteBlueprintsSettings::IsHttpCacheEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "IsHttpCacheEnabled");

	Params::AccelByteBlueprintsSettings_IsHttpCacheEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.IsSendPredefinedEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAccelByteBlueprintsSettings::IsSendPredefinedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "IsSendPredefinedEvent");

	Params::AccelByteBlueprintsSettings_IsSendPredefinedEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.IsServerUseAMS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAccelByteBlueprintsSettings::IsServerUseAMS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "IsServerUseAMS");

	Params::AccelByteBlueprintsSettings_IsServerUseAMS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.ResetSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const ESettingsEnvironment              Environment                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::ResetSettings(const ESettingsEnvironment Environment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "ResetSettings");

	Params::AccelByteBlueprintsSettings_ResetSettings Parms{};

	Parms.Environment = Environment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetAchievementServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CloudSaveServerUrl                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetAchievementServerUrl(const class FString& CloudSaveServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetAchievementServerUrl");

	Params::AccelByteBlueprintsSettings_SetAchievementServerUrl Parms{};

	Parms.CloudSaveServerUrl = std::move(CloudSaveServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetAppId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AppId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetAppId(const class FString& AppId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetAppId");

	Params::AccelByteBlueprintsSettings_SetAppId Parms{};

	Parms.AppId = std::move(AppId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetBasicServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BasicServerUrl                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetBasicServerUrl(const class FString& BasicServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetBasicServerUrl");

	Params::AccelByteBlueprintsSettings_SetBasicServerUrl Parms{};

	Parms.BasicServerUrl = std::move(BasicServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetChatServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ChatServerUrl                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetChatServerUrl(const class FString& ChatServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetChatServerUrl");

	Params::AccelByteBlueprintsSettings_SetChatServerUrl Parms{};

	Parms.ChatServerUrl = std::move(ChatServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetClientId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ClientId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetClientId(const class FString& ClientId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetClientId");

	Params::AccelByteBlueprintsSettings_SetClientId Parms{};

	Parms.ClientId = std::move(ClientId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetClientSecret
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ClientSecret                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetClientSecret(const class FString& ClientSecret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetClientSecret");

	Params::AccelByteBlueprintsSettings_SetClientSecret Parms{};

	Parms.ClientSecret = std::move(ClientSecret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetCloudSaveServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CloudSaveServerUrl                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetCloudSaveServerUrl(const class FString& CloudSaveServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetCloudSaveServerUrl");

	Params::AccelByteBlueprintsSettings_SetCloudSaveServerUrl Parms{};

	Parms.CloudSaveServerUrl = std::move(CloudSaveServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetCloudStorageServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CloudStorageServerUrl                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetCloudStorageServerUrl(const class FString& CloudStorageServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetCloudStorageServerUrl");

	Params::AccelByteBlueprintsSettings_SetCloudStorageServerUrl Parms{};

	Parms.CloudStorageServerUrl = std::move(CloudStorageServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGameProfileServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameProfileServerUrl                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetGameProfileServerUrl(const class FString& GameProfileServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetGameProfileServerUrl");

	Params::AccelByteBlueprintsSettings_SetGameProfileServerUrl Parms{};

	Parms.GameProfileServerUrl = std::move(GameProfileServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGameTelemetryServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameTelemetryServerUrl                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetGameTelemetryServerUrl(const class FString& GameTelemetryServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetGameTelemetryServerUrl");

	Params::AccelByteBlueprintsSettings_SetGameTelemetryServerUrl Parms{};

	Parms.GameTelemetryServerUrl = std::move(GameTelemetryServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGDPRServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GDPRServerUrl                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetGDPRServerUrl(const class FString& GDPRServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetGDPRServerUrl");

	Params::AccelByteBlueprintsSettings_SetGDPRServerUrl Parms{};

	Parms.GDPRServerUrl = std::move(GDPRServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGroupServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GroupServerUrl                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetGroupServerUrl(const class FString& GroupServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetGroupServerUrl");

	Params::AccelByteBlueprintsSettings_SetGroupServerUrl Parms{};

	Parms.GroupServerUrl = std::move(GroupServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetHttpCacheType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EHttpCacheType                          Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetHttpCacheType(EHttpCacheType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetHttpCacheType");

	Params::AccelByteBlueprintsSettings_SetHttpCacheType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetIamServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IamServerUrl                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetIamServerUrl(const class FString& IamServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetIamServerUrl");

	Params::AccelByteBlueprintsSettings_SetIamServerUrl Parms{};

	Parms.IamServerUrl = std::move(IamServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetLeaderboardServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LeaderboardServerUrl                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetLeaderboardServerUrl(const class FString& LeaderboardServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetLeaderboardServerUrl");

	Params::AccelByteBlueprintsSettings_SetLeaderboardServerUrl Parms{};

	Parms.LeaderboardServerUrl = std::move(LeaderboardServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetLobbyServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LobbyServerUrl                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetLobbyServerUrl(const class FString& LobbyServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetLobbyServerUrl");

	Params::AccelByteBlueprintsSettings_SetLobbyServerUrl Parms{};

	Parms.LobbyServerUrl = std::move(LobbyServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetMatchmakingV2ServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchmakingV2ServerUrl                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetMatchmakingV2ServerUrl(const class FString& MatchmakingV2ServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetMatchmakingV2ServerUrl");

	Params::AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl Parms{};

	Parms.MatchmakingV2ServerUrl = std::move(MatchmakingV2ServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Namespace                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetNamespace(const class FString& Namespace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetNamespace");

	Params::AccelByteBlueprintsSettings_SetNamespace Parms{};

	Parms.Namespace = std::move(Namespace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetPlatformServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformServerUrl                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetPlatformServerUrl(const class FString& PlatformServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetPlatformServerUrl");

	Params::AccelByteBlueprintsSettings_SetPlatformServerUrl Parms{};

	Parms.PlatformServerUrl = std::move(PlatformServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetPublisherNamespace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PublisherNamespace                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetPublisherNamespace(const class FString& PublisherNamespace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetPublisherNamespace");

	Params::AccelByteBlueprintsSettings_SetPublisherNamespace Parms{};

	Parms.PublisherNamespace = std::move(PublisherNamespace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetQosLatencyPollIntervalSecs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            QosLatencyPollIntervalSecs                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetQosLatencyPollIntervalSecs(const float& QosLatencyPollIntervalSecs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetQosLatencyPollIntervalSecs");

	Params::AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs Parms{};

	Parms.QosLatencyPollIntervalSecs = QosLatencyPollIntervalSecs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetQosManagerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    QosManagerServerUrl                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetQosManagerServerUrl(const class FString& QosManagerServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetQosManagerServerUrl");

	Params::AccelByteBlueprintsSettings_SetQosManagerServerUrl Parms{};

	Parms.QosManagerServerUrl = std::move(QosManagerServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetQosPingTimeout
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            QosPingTimeout                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetQosPingTimeout(const float& QosPingTimeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetQosPingTimeout");

	Params::AccelByteBlueprintsSettings_SetQosPingTimeout Parms{};

	Parms.QosPingTimeout = QosPingTimeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetReportingServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ReportingServerUrl                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetReportingServerUrl(const class FString& ReportingServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetReportingServerUrl");

	Params::AccelByteBlueprintsSettings_SetReportingServerUrl Parms{};

	Parms.ReportingServerUrl = std::move(ReportingServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetSeasonPassServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SeasonPassServerUrl                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetSeasonPassServerUrl(const class FString& SeasonPassServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetSeasonPassServerUrl");

	Params::AccelByteBlueprintsSettings_SetSeasonPassServerUrl Parms{};

	Parms.SeasonPassServerUrl = std::move(SeasonPassServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetServerQosLatencyPollIntervalSecs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            QosServerLatencyPollIntervalSecs                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetServerQosLatencyPollIntervalSecs(const float& QosServerLatencyPollIntervalSecs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetServerQosLatencyPollIntervalSecs");

	Params::AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs Parms{};

	Parms.QosServerLatencyPollIntervalSecs = QosServerLatencyPollIntervalSecs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetServerUseAMS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetServerUseAMS(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetServerUseAMS");

	Params::AccelByteBlueprintsSettings_SetServerUseAMS Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetSessionBrowserServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SessionBrowserServerUrl                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetSessionBrowserServerUrl(const class FString& SessionBrowserServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetSessionBrowserServerUrl");

	Params::AccelByteBlueprintsSettings_SetSessionBrowserServerUrl Parms{};

	Parms.SessionBrowserServerUrl = std::move(SessionBrowserServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetSessionServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SessionServerUrl                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetSessionServerUrl(const class FString& SessionServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetSessionServerUrl");

	Params::AccelByteBlueprintsSettings_SetSessionServerUrl Parms{};

	Parms.SessionServerUrl = std::move(SessionServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetStatisticServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatisticServerUrl                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetStatisticServerUrl(const class FString& StatisticServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetStatisticServerUrl");

	Params::AccelByteBlueprintsSettings_SetStatisticServerUrl Parms{};

	Parms.StatisticServerUrl = std::move(StatisticServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetTurnManagerServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TurnManagerServerUrl                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetTurnManagerServerUrl(const class FString& TurnManagerServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetTurnManagerServerUrl");

	Params::AccelByteBlueprintsSettings_SetTurnManagerServerUrl Parms{};

	Parms.TurnManagerServerUrl = std::move(TurnManagerServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetUGCServerUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UGCServerUrl                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsSettings::SetUGCServerUrl(const class FString& UGCServerUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsSettings", "SetUGCServerUrl");

	Params::AccelByteBlueprintsSettings_SetUGCServerUrl Parms{};

	Parms.UGCServerUrl = std::move(UGCServerUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.CreateUserStatItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            StatCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsStatistic::CreateUserStatItems(const TArray<class FString>& StatCodes, const TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsStatistic", "CreateUserStatItems");

	Params::AccelByteBlueprintsStatistic_CreateUserStatItems Parms{};

	Parms.StatCodes = std::move(StatCodes);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.GetAllUserStatItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsStatistic::GetAllUserStatItems(const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsStatistic", "GetAllUserStatItems");

	Params::AccelByteBlueprintsStatistic_GetAllUserStatItems Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.GetGlobalStatItemsByStatCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatCode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsStatistic::GetGlobalStatItemsByStatCode(const class FString& StatCode, const TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsStatistic", "GetGlobalStatItemsByStatCode");

	Params::AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode Parms{};

	Parms.StatCode = std::move(StatCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.GetUserStatItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            StatCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsStatistic::GetUserStatItems(const TArray<class FString>& StatCodes, const TArray<class FString>& Tags, const TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsStatistic", "GetUserStatItems");

	Params::AccelByteBlueprintsStatistic_GetUserStatItems Parms{};

	Parms.StatCodes = std::move(StatCodes);
	Parms.Tags = std::move(Tags);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.IncrementUserStatItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FAccelByteModelsBulkStatItemInc>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsStatistic::IncrementUserStatItems(const TArray<struct FAccelByteModelsBulkStatItemInc>& Data, const TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsStatistic", "IncrementUserStatItems");

	Params::AccelByteBlueprintsStatistic_IncrementUserStatItems Parms{};

	Parms.Data = std::move(Data);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.ForgetAllCredentials
// (Final, Native, Static, Public, BlueprintCallable)

void UBPUser::ForgetAllCredentials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "ForgetAllCredentials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.GetPlatformLinks
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FPagedPlatformLinks& PlatformLinks)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::GetPlatformLinks(const TDelegate<void(const struct FPagedPlatformLinks& PlatformLinks)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "GetPlatformLinks");

	Params::BPUser_GetPlatformLinks Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.GetUserEligibleToPlay
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const bool Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::GetUserEligibleToPlay(const TDelegate<void(const bool Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "GetUserEligibleToPlay");

	Params::BPUser_GetUserEligibleToPlay Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.LinkOtherPlatform
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Ticket                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::LinkOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& Ticket, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "LinkOtherPlatform");

	Params::BPUser_LinkOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.Ticket = std::move(Ticket);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.LoginWithDeviceId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::LoginWithDeviceId(const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "LoginWithDeviceId");

	Params::BPUser_LoginWithDeviceId Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.LoginWithOtherPlatform
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bCreateHeadless                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPUser::LoginWithOtherPlatform(EAccelBytePlatformType PlatformType, const class FString& Token, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError, bool bCreateHeadless)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "LoginWithOtherPlatform");

	Params::BPUser_LoginWithOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.Token = std::move(Token);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;
	Parms.bCreateHeadless = bCreateHeadless;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.LoginWithUsername
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::LoginWithUsername(const class FString& Username, const class FString& Password, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "LoginWithUsername");

	Params::BPUser_LoginWithUsername Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.Logout
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::Logout(const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "Logout");

	Params::BPUser_Logout Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DateOfBirth                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FRegisterResponse& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::Register(const class FString& Username, const class FString& Password, const class FString& DisplayName, const class FString& Country, const class FString& DateOfBirth, const TDelegate<void(const struct FRegisterResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "Register");

	Params::BPUser_Register Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.DisplayName = std::move(DisplayName);
	Parms.Country = std::move(Country);
	Parms.DateOfBirth = std::move(DateOfBirth);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.ResetPassword
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    VerificationCode                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    EmailAddress                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewPassword                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::ResetPassword(const class FString& VerificationCode, const class FString& EmailAddress, const class FString& NewPassword, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "ResetPassword");

	Params::BPUser_ResetPassword Parms{};

	Parms.VerificationCode = std::move(VerificationCode);
	Parms.EmailAddress = std::move(EmailAddress);
	Parms.NewPassword = std::move(NewPassword);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.SendResetPasswordCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::SendResetPasswordCode(const class FString& EmailAddress, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "SendResetPasswordCode");

	Params::BPUser_SendResetPasswordCode Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.SendUpgradeVerificationCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EmailAddress                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::SendUpgradeVerificationCode(const class FString& EmailAddress, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "SendUpgradeVerificationCode");

	Params::BPUser_SendUpgradeVerificationCode Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.SendVerificationCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::SendVerificationCode(const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "SendVerificationCode");

	Params::BPUser_SendVerificationCode Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.UnlinkAllOtherPlatform
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::UnlinkAllOtherPlatform(EAccelBytePlatformType PlatformType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "UnlinkAllOtherPlatform");

	Params::BPUser_UnlinkAllOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.UnlinkAllOtherPlatformId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::UnlinkAllOtherPlatformId(const class FString& PlatformId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "UnlinkAllOtherPlatformId");

	Params::BPUser_UnlinkAllOtherPlatformId Parms{};

	Parms.PlatformId = std::move(PlatformId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.UnlinkOtherPlatform
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::UnlinkOtherPlatform(EAccelBytePlatformType PlatformType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "UnlinkOtherPlatform");

	Params::BPUser_UnlinkOtherPlatform Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.UnlinkOtherPlatformId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PlatformId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::UnlinkOtherPlatformId(const class FString& PlatformId, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "UnlinkOtherPlatformId");

	Params::BPUser_UnlinkOtherPlatformId Parms{};

	Parms.PlatformId = std::move(PlatformId);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.UnlinkOtherPlatformWithCustomErrorHandler
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAccelBytePlatformType                  PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::UnlinkOtherPlatformWithCustomErrorHandler(EAccelBytePlatformType PlatformType, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "UnlinkOtherPlatformWithCustomErrorHandler");

	Params::BPUser_UnlinkOtherPlatformWithCustomErrorHandler Parms{};

	Parms.PlatformType = PlatformType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.Upgrade
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccountUserData& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::Upgrade(const class FString& Username, const class FString& Password, const TDelegate<void(const struct FAccountUserData& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "Upgrade");

	Params::BPUser_Upgrade Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.UpgradeAndVerify
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Username                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    VerificationCode                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccountUserData& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::UpgradeAndVerify(const class FString& Username, const class FString& Password, const class FString& VerificationCode, const TDelegate<void(const struct FAccountUserData& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "UpgradeAndVerify");

	Params::BPUser_UpgradeAndVerify Parms{};

	Parms.Username = std::move(Username);
	Parms.Password = std::move(Password);
	Parms.VerificationCode = std::move(VerificationCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.BPUser.Verify
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    VerificationCode                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPUser::Verify(const class FString& VerificationCode, const TDelegate<void()>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPUser", "Verify");

	Params::BPUser_Verify Parms{};

	Parms.VerificationCode = std::move(VerificationCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.CreateUserProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsUserProfileCreateRequest&ProfileCreateRequest                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::CreateUserProfile(const struct FAccelByteModelsUserProfileCreateRequest& ProfileCreateRequest, const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "CreateUserProfile");

	Params::AccelByteBlueprintsUserProfile_CreateUserProfile Parms{};

	Parms.ProfileCreateRequest = std::move(ProfileCreateRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GenerateUploadURL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Folder                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteFileType                      FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::GenerateUploadURL(const class FString& Folder, EAccelByteFileType FileType, const TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "GenerateUploadURL");

	Params::AccelByteBlueprintsUserProfile_GenerateUploadURL Parms{};

	Parms.Folder = std::move(Folder);
	Parms.FileType = FileType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GenerateUploadURLForUserContent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelByteFileType                      FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::GenerateUploadURLForUserContent(const class FString& UserId, EAccelByteFileType FileType, const TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "GenerateUploadURLForUserContent");

	Params::AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent Parms{};

	Parms.UserId = std::move(UserId);
	Parms.FileType = FileType;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GetPrivateCustomAttributes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FJsonObjectWrapper& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::GetPrivateCustomAttributes(const TDelegate<void(const struct FJsonObjectWrapper& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "GetPrivateCustomAttributes");

	Params::AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GetUserProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::GetUserProfile(const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "GetUserProfile");

	Params::AccelByteBlueprintsUserProfile_GetUserProfile Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.UpdatePrivateCustomAttributes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsonObjectWrapper&        PrivateCustomAttributesUpdateRequest                   (ConstParm, Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FJsonObjectWrapper& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::UpdatePrivateCustomAttributes(const struct FJsonObjectWrapper& PrivateCustomAttributesUpdateRequest, const TDelegate<void(const struct FJsonObjectWrapper& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "UpdatePrivateCustomAttributes");

	Params::AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes Parms{};

	Parms.PrivateCustomAttributesUpdateRequest = std::move(PrivateCustomAttributesUpdateRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.UpdateUserProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAccelByteModelsUserProfileUpdateRequest&ProfileUpdateRequest                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsUserProfile::UpdateUserProfile(const struct FAccelByteModelsUserProfileUpdateRequest& ProfileUpdateRequest, const TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsUserProfile", "UpdateUserProfile");

	Params::AccelByteBlueprintsUserProfile_UpdateUserProfile Parms{};

	Parms.ProfileUpdateRequest = std::move(ProfileUpdateRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsWallet.GetWalletInfoByCurrencyCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CurrencyCode                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsWalletInfo& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsWallet::GetWalletInfoByCurrencyCode(const class FString& CurrencyCode, const TDelegate<void(const struct FAccelByteModelsWalletInfo& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsWallet", "GetWalletInfoByCurrencyCode");

	Params::AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode Parms{};

	Parms.CurrencyCode = std::move(CurrencyCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccelByteUe4Sdk.AccelByteBlueprintsWallet.GetWalletInfoByCurrencyCodeV2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    CurrencyCode                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Result)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAccelByteBlueprintsWallet::GetWalletInfoByCurrencyCodeV2(const class FString& CurrencyCode, const TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Result)>& OnSuccess, const TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AccelByteBlueprintsWallet", "GetWalletInfoByCurrencyCodeV2");

	Params::AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2 Parms{};

	Parms.CurrencyCode = std::move(CurrencyCode);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

