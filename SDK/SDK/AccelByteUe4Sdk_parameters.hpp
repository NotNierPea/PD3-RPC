#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccelByteUe4Sdk

#include "Basic.hpp"

#include "AccelByteUe4Sdk_structs.hpp"
#include "JsonUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AccelByteUe4Sdk.ABAchievement.ClaimGlobalAchievements
// 0x0038 (0x0038 - 0x0000)
struct ABAchievement_ClaimGlobalAchievements final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAchievement_ClaimGlobalAchievements) == 0x000008, "Wrong alignment on ABAchievement_ClaimGlobalAchievements");
static_assert(sizeof(ABAchievement_ClaimGlobalAchievements) == 0x000038, "Wrong size on ABAchievement_ClaimGlobalAchievements");
static_assert(offsetof(ABAchievement_ClaimGlobalAchievements, AchievementCode) == 0x000000, "Member 'ABAchievement_ClaimGlobalAchievements::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABAchievement_ClaimGlobalAchievements, OnSuccess) == 0x000010, "Member 'ABAchievement_ClaimGlobalAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_ClaimGlobalAchievements, OnError) == 0x000024, "Member 'ABAchievement_ClaimGlobalAchievements::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.GetAchievement
// 0x0038 (0x0038 - 0x0000)
struct ABAchievement_GetAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Response)> OnSuccess;      // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAchievement_GetAchievement) == 0x000008, "Wrong alignment on ABAchievement_GetAchievement");
static_assert(sizeof(ABAchievement_GetAchievement) == 0x000038, "Wrong size on ABAchievement_GetAchievement");
static_assert(offsetof(ABAchievement_GetAchievement, AchievementCode) == 0x000000, "Member 'ABAchievement_GetAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetAchievement, OnSuccess) == 0x000010, "Member 'ABAchievement_GetAchievement::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetAchievement, OnError) == 0x000024, "Member 'ABAchievement_GetAchievement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.GetTags
// 0x0048 (0x0048 - 0x0000)
struct ABAchievement_GetTags final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAchievementListSortBy               SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Response)> OnSuccess;            // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAchievement_GetTags) == 0x000008, "Wrong alignment on ABAchievement_GetTags");
static_assert(sizeof(ABAchievement_GetTags) == 0x000048, "Wrong size on ABAchievement_GetTags");
static_assert(offsetof(ABAchievement_GetTags, Name_0) == 0x000000, "Member 'ABAchievement_GetTags::Name_0' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetTags, SortBy) == 0x000010, "Member 'ABAchievement_GetTags::SortBy' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetTags, OnSuccess) == 0x000014, "Member 'ABAchievement_GetTags::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetTags, OnError) == 0x000028, "Member 'ABAchievement_GetTags::OnError' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetTags, Offset) == 0x00003C, "Member 'ABAchievement_GetTags::Offset' has a wrong offset!");
static_assert(offsetof(ABAchievement_GetTags, Limit) == 0x000040, "Member 'ABAchievement_GetTags::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.QueryAchievements
// 0x0060 (0x0060 - 0x0000)
struct ABAchievement_QueryAchievements final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAchievementListSortBy               SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Response)> OnSuccess;    // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TagQuery;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobal;                                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAchievement_QueryAchievements) == 0x000008, "Wrong alignment on ABAchievement_QueryAchievements");
static_assert(sizeof(ABAchievement_QueryAchievements) == 0x000060, "Wrong size on ABAchievement_QueryAchievements");
static_assert(offsetof(ABAchievement_QueryAchievements, Language) == 0x000000, "Member 'ABAchievement_QueryAchievements::Language' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, SortBy) == 0x000010, "Member 'ABAchievement_QueryAchievements::SortBy' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, OnSuccess) == 0x000014, "Member 'ABAchievement_QueryAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, OnError) == 0x000028, "Member 'ABAchievement_QueryAchievements::OnError' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, Offset) == 0x00003C, "Member 'ABAchievement_QueryAchievements::Offset' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, Limit) == 0x000040, "Member 'ABAchievement_QueryAchievements::Limit' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, TagQuery) == 0x000048, "Member 'ABAchievement_QueryAchievements::TagQuery' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryAchievements, bGlobal) == 0x000058, "Member 'ABAchievement_QueryAchievements::bGlobal' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.QueryGlobalAchievementContributors
// 0x0048 (0x0048 - 0x0000)
struct ABAchievement_QueryGlobalAchievementContributors final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementContributorsSortBy SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Response)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAchievement_QueryGlobalAchievementContributors) == 0x000008, "Wrong alignment on ABAchievement_QueryGlobalAchievementContributors");
static_assert(sizeof(ABAchievement_QueryGlobalAchievementContributors) == 0x000048, "Wrong size on ABAchievement_QueryGlobalAchievementContributors");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementContributors, AchievementCode) == 0x000000, "Member 'ABAchievement_QueryGlobalAchievementContributors::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementContributors, SortBy) == 0x000010, "Member 'ABAchievement_QueryGlobalAchievementContributors::SortBy' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementContributors, OnSuccess) == 0x000014, "Member 'ABAchievement_QueryGlobalAchievementContributors::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementContributors, OnError) == 0x000028, "Member 'ABAchievement_QueryGlobalAchievementContributors::OnError' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementContributors, Offset) == 0x00003C, "Member 'ABAchievement_QueryGlobalAchievementContributors::Offset' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementContributors, Limit) == 0x000040, "Member 'ABAchievement_QueryGlobalAchievementContributors::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.QueryGlobalAchievements
// 0x0048 (0x0048 - 0x0000)
struct ABAchievement_QueryGlobalAchievements final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementStatus             AchievementStatus;                                 // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementListSortBy         SortBy;                                            // 0x0011(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Response)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAchievement_QueryGlobalAchievements) == 0x000008, "Wrong alignment on ABAchievement_QueryGlobalAchievements");
static_assert(sizeof(ABAchievement_QueryGlobalAchievements) == 0x000048, "Wrong size on ABAchievement_QueryGlobalAchievements");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, AchievementCode) == 0x000000, "Member 'ABAchievement_QueryGlobalAchievements::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, AchievementStatus) == 0x000010, "Member 'ABAchievement_QueryGlobalAchievements::AchievementStatus' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, SortBy) == 0x000011, "Member 'ABAchievement_QueryGlobalAchievements::SortBy' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, OnSuccess) == 0x000014, "Member 'ABAchievement_QueryGlobalAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, OnError) == 0x000028, "Member 'ABAchievement_QueryGlobalAchievements::OnError' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, Offset) == 0x00003C, "Member 'ABAchievement_QueryGlobalAchievements::Offset' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievements, Limit) == 0x000040, "Member 'ABAchievement_QueryGlobalAchievements::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.QueryGlobalAchievementUserContributed
// 0x0048 (0x0048 - 0x0000)
struct ABAchievement_QueryGlobalAchievementUserContributed final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementContributorsSortBy SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Response)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAchievement_QueryGlobalAchievementUserContributed) == 0x000008, "Wrong alignment on ABAchievement_QueryGlobalAchievementUserContributed");
static_assert(sizeof(ABAchievement_QueryGlobalAchievementUserContributed) == 0x000048, "Wrong size on ABAchievement_QueryGlobalAchievementUserContributed");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementUserContributed, AchievementCode) == 0x000000, "Member 'ABAchievement_QueryGlobalAchievementUserContributed::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementUserContributed, SortBy) == 0x000010, "Member 'ABAchievement_QueryGlobalAchievementUserContributed::SortBy' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementUserContributed, OnSuccess) == 0x000014, "Member 'ABAchievement_QueryGlobalAchievementUserContributed::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementUserContributed, OnError) == 0x000028, "Member 'ABAchievement_QueryGlobalAchievementUserContributed::OnError' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementUserContributed, Offset) == 0x00003C, "Member 'ABAchievement_QueryGlobalAchievementUserContributed::Offset' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryGlobalAchievementUserContributed, Limit) == 0x000040, "Member 'ABAchievement_QueryGlobalAchievementUserContributed::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.QueryUserAchievements
// 0x0048 (0x0048 - 0x0000)
struct ABAchievement_QueryUserAchievements final
{
public:
	EAccelByteAchievementListSortBy               SortBy;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Response)> OnSuccess;      // 0x0004(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x002C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0030(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreferUnlocked;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TagQuery;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAchievement_QueryUserAchievements) == 0x000008, "Wrong alignment on ABAchievement_QueryUserAchievements");
static_assert(sizeof(ABAchievement_QueryUserAchievements) == 0x000048, "Wrong size on ABAchievement_QueryUserAchievements");
static_assert(offsetof(ABAchievement_QueryUserAchievements, SortBy) == 0x000000, "Member 'ABAchievement_QueryUserAchievements::SortBy' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryUserAchievements, OnSuccess) == 0x000004, "Member 'ABAchievement_QueryUserAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryUserAchievements, OnError) == 0x000018, "Member 'ABAchievement_QueryUserAchievements::OnError' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryUserAchievements, Offset) == 0x00002C, "Member 'ABAchievement_QueryUserAchievements::Offset' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryUserAchievements, Limit) == 0x000030, "Member 'ABAchievement_QueryUserAchievements::Limit' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryUserAchievements, PreferUnlocked) == 0x000034, "Member 'ABAchievement_QueryUserAchievements::PreferUnlocked' has a wrong offset!");
static_assert(offsetof(ABAchievement_QueryUserAchievements, TagQuery) == 0x000038, "Member 'ABAchievement_QueryUserAchievements::TagQuery' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAchievement.UnlockAchievement
// 0x0038 (0x0038 - 0x0000)
struct ABAchievement_UnlockAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAchievement_UnlockAchievement) == 0x000008, "Wrong alignment on ABAchievement_UnlockAchievement");
static_assert(sizeof(ABAchievement_UnlockAchievement) == 0x000038, "Wrong size on ABAchievement_UnlockAchievement");
static_assert(offsetof(ABAchievement_UnlockAchievement, AchievementCode) == 0x000000, "Member 'ABAchievement_UnlockAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABAchievement_UnlockAchievement, OnSuccess) == 0x000010, "Member 'ABAchievement_UnlockAchievement::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAchievement_UnlockAchievement, OnError) == 0x000024, "Member 'ABAchievement_UnlockAchievement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.AcceptPolicyVersion
// 0x0038 (0x0038 - 0x0000)
struct ABAgreement_AcceptPolicyVersion final
{
public:
	class FString                                 LocalizedPolicyVersionId;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAgreement_AcceptPolicyVersion) == 0x000008, "Wrong alignment on ABAgreement_AcceptPolicyVersion");
static_assert(sizeof(ABAgreement_AcceptPolicyVersion) == 0x000038, "Wrong size on ABAgreement_AcceptPolicyVersion");
static_assert(offsetof(ABAgreement_AcceptPolicyVersion, LocalizedPolicyVersionId) == 0x000000, "Member 'ABAgreement_AcceptPolicyVersion::LocalizedPolicyVersionId' has a wrong offset!");
static_assert(offsetof(ABAgreement_AcceptPolicyVersion, OnSuccess) == 0x000010, "Member 'ABAgreement_AcceptPolicyVersion::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_AcceptPolicyVersion, OnError) == 0x000024, "Member 'ABAgreement_AcceptPolicyVersion::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.BulkAcceptPolicyVersions
// 0x0038 (0x0038 - 0x0000)
struct ABAgreement_BulkAcceptPolicyVersions final
{
public:
	struct FArrayModelsAcceptAgreementRequest     AgreementRequests;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsAcceptAgreementResponse& Response)> OnSuccess;       // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAgreement_BulkAcceptPolicyVersions) == 0x000008, "Wrong alignment on ABAgreement_BulkAcceptPolicyVersions");
static_assert(sizeof(ABAgreement_BulkAcceptPolicyVersions) == 0x000038, "Wrong size on ABAgreement_BulkAcceptPolicyVersions");
static_assert(offsetof(ABAgreement_BulkAcceptPolicyVersions, AgreementRequests) == 0x000000, "Member 'ABAgreement_BulkAcceptPolicyVersions::AgreementRequests' has a wrong offset!");
static_assert(offsetof(ABAgreement_BulkAcceptPolicyVersions, OnSuccess) == 0x000010, "Member 'ABAgreement_BulkAcceptPolicyVersions::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_BulkAcceptPolicyVersions, OnError) == 0x000024, "Member 'ABAgreement_BulkAcceptPolicyVersions::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.GetLegalDocument
// 0x0038 (0x0038 - 0x0000)
struct ABAgreement_GetLegalDocument final
{
public:
	class FString                                 Url;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Response)> OnSuccess;                                        // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAgreement_GetLegalDocument) == 0x000008, "Wrong alignment on ABAgreement_GetLegalDocument");
static_assert(sizeof(ABAgreement_GetLegalDocument) == 0x000038, "Wrong size on ABAgreement_GetLegalDocument");
static_assert(offsetof(ABAgreement_GetLegalDocument, Url) == 0x000000, "Member 'ABAgreement_GetLegalDocument::Url' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalDocument, OnSuccess) == 0x000010, "Member 'ABAgreement_GetLegalDocument::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalDocument, OnError) == 0x000024, "Member 'ABAgreement_GetLegalDocument::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.GetLegalPolicies
// 0x002C (0x002C - 0x0000)
struct ABAgreement_GetLegalPolicies final
{
public:
	EAccelByteAgreementPolicyType                 AgreementPolicyType;                               // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultOnEmpty;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)> OnSuccess;              // 0x0004(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAgreement_GetLegalPolicies) == 0x000004, "Wrong alignment on ABAgreement_GetLegalPolicies");
static_assert(sizeof(ABAgreement_GetLegalPolicies) == 0x00002C, "Wrong size on ABAgreement_GetLegalPolicies");
static_assert(offsetof(ABAgreement_GetLegalPolicies, AgreementPolicyType) == 0x000000, "Member 'ABAgreement_GetLegalPolicies::AgreementPolicyType' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPolicies, DefaultOnEmpty) == 0x000001, "Member 'ABAgreement_GetLegalPolicies::DefaultOnEmpty' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPolicies, OnSuccess) == 0x000004, "Member 'ABAgreement_GetLegalPolicies::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPolicies, OnError) == 0x000018, "Member 'ABAgreement_GetLegalPolicies::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByCountry
// 0x0040 (0x0040 - 0x0000)
struct ABAgreement_GetLegalPoliciesByCountry final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAgreementPolicyType                 AgreementPolicyType;                               // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultOnEmpty;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)> OnSuccess;              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAgreement_GetLegalPoliciesByCountry) == 0x000008, "Wrong alignment on ABAgreement_GetLegalPoliciesByCountry");
static_assert(sizeof(ABAgreement_GetLegalPoliciesByCountry) == 0x000040, "Wrong size on ABAgreement_GetLegalPoliciesByCountry");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountry, CountryCode) == 0x000000, "Member 'ABAgreement_GetLegalPoliciesByCountry::CountryCode' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountry, AgreementPolicyType) == 0x000010, "Member 'ABAgreement_GetLegalPoliciesByCountry::AgreementPolicyType' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountry, DefaultOnEmpty) == 0x000011, "Member 'ABAgreement_GetLegalPoliciesByCountry::DefaultOnEmpty' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountry, OnSuccess) == 0x000014, "Member 'ABAgreement_GetLegalPoliciesByCountry::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountry, OnError) == 0x000028, "Member 'ABAgreement_GetLegalPoliciesByCountry::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByCountryAndTags
// 0x0058 (0x0058 - 0x0000)
struct ABAgreement_GetLegalPoliciesByCountryAndTags final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAgreementPolicyType                 AgreementPolicyType;                               // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          DefaultOnEmpty;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)> OnSuccess;              // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0040(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAgreement_GetLegalPoliciesByCountryAndTags) == 0x000008, "Wrong alignment on ABAgreement_GetLegalPoliciesByCountryAndTags");
static_assert(sizeof(ABAgreement_GetLegalPoliciesByCountryAndTags) == 0x000058, "Wrong size on ABAgreement_GetLegalPoliciesByCountryAndTags");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountryAndTags, CountryCode) == 0x000000, "Member 'ABAgreement_GetLegalPoliciesByCountryAndTags::CountryCode' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountryAndTags, AgreementPolicyType) == 0x000010, "Member 'ABAgreement_GetLegalPoliciesByCountryAndTags::AgreementPolicyType' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountryAndTags, Tags) == 0x000018, "Member 'ABAgreement_GetLegalPoliciesByCountryAndTags::Tags' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountryAndTags, DefaultOnEmpty) == 0x000028, "Member 'ABAgreement_GetLegalPoliciesByCountryAndTags::DefaultOnEmpty' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountryAndTags, OnSuccess) == 0x00002C, "Member 'ABAgreement_GetLegalPoliciesByCountryAndTags::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByCountryAndTags, OnError) == 0x000040, "Member 'ABAgreement_GetLegalPoliciesByCountryAndTags::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByNamespace
// 0x0040 (0x0040 - 0x0000)
struct ABAgreement_GetLegalPoliciesByNamespace final
{
public:
	class FString                                 Namesapce;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAgreementPolicyType                 AgreementPolicyType;                               // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultOnEmpty;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)> OnSuccess;              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAgreement_GetLegalPoliciesByNamespace) == 0x000008, "Wrong alignment on ABAgreement_GetLegalPoliciesByNamespace");
static_assert(sizeof(ABAgreement_GetLegalPoliciesByNamespace) == 0x000040, "Wrong size on ABAgreement_GetLegalPoliciesByNamespace");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByNamespace, Namesapce) == 0x000000, "Member 'ABAgreement_GetLegalPoliciesByNamespace::Namesapce' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByNamespace, AgreementPolicyType) == 0x000010, "Member 'ABAgreement_GetLegalPoliciesByNamespace::AgreementPolicyType' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByNamespace, DefaultOnEmpty) == 0x000011, "Member 'ABAgreement_GetLegalPoliciesByNamespace::DefaultOnEmpty' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByNamespace, OnSuccess) == 0x000014, "Member 'ABAgreement_GetLegalPoliciesByNamespace::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByNamespace, OnError) == 0x000028, "Member 'ABAgreement_GetLegalPoliciesByNamespace::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.GetLegalPoliciesByTags
// 0x0048 (0x0048 - 0x0000)
struct ABAgreement_GetLegalPoliciesByTags final
{
public:
	EAccelByteAgreementPolicyType                 AgreementPolicyType;                               // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         tags;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          DefaultOnEmpty;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FArrayModelsPublicPolicyResponse& Response)> OnSuccess;              // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABAgreement_GetLegalPoliciesByTags) == 0x000008, "Wrong alignment on ABAgreement_GetLegalPoliciesByTags");
static_assert(sizeof(ABAgreement_GetLegalPoliciesByTags) == 0x000048, "Wrong size on ABAgreement_GetLegalPoliciesByTags");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByTags, AgreementPolicyType) == 0x000000, "Member 'ABAgreement_GetLegalPoliciesByTags::AgreementPolicyType' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByTags, tags) == 0x000008, "Member 'ABAgreement_GetLegalPoliciesByTags::tags' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByTags, DefaultOnEmpty) == 0x000018, "Member 'ABAgreement_GetLegalPoliciesByTags::DefaultOnEmpty' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByTags, OnSuccess) == 0x00001C, "Member 'ABAgreement_GetLegalPoliciesByTags::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_GetLegalPoliciesByTags, OnError) == 0x000030, "Member 'ABAgreement_GetLegalPoliciesByTags::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABAgreement.QueryLegalEligibilities
// 0x0038 (0x0038 - 0x0000)
struct ABAgreement_QueryLegalEligibilities final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsRetrieveUserEligibilitiesResponse& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABAgreement_QueryLegalEligibilities) == 0x000008, "Wrong alignment on ABAgreement_QueryLegalEligibilities");
static_assert(sizeof(ABAgreement_QueryLegalEligibilities) == 0x000038, "Wrong size on ABAgreement_QueryLegalEligibilities");
static_assert(offsetof(ABAgreement_QueryLegalEligibilities, Namespace) == 0x000000, "Member 'ABAgreement_QueryLegalEligibilities::Namespace' has a wrong offset!");
static_assert(offsetof(ABAgreement_QueryLegalEligibilities, OnSuccess) == 0x000010, "Member 'ABAgreement_QueryLegalEligibilities::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABAgreement_QueryLegalEligibilities, OnError) == 0x000024, "Member 'ABAgreement_QueryLegalEligibilities::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetCurrentUserBinaryRecords
// 0x0038 (0x0038 - 0x0000)
struct ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)> OnSuccess;         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords");
static_assert(sizeof(ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords) == 0x000038, "Wrong size on ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords");
static_assert(offsetof(ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords, Keys) == 0x000000, "Member 'ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords::Keys' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords, OnError) == 0x000024, "Member 'ABBinaryCloudSave_BulkGetCurrentUserBinaryRecords::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetGameBinaryRecords
// 0x0038 (0x0038 - 0x0000)
struct ABBinaryCloudSave_BulkGetGameBinaryRecords final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListGameBinaryRecords& Response)> OnSuccess;         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkGetGameBinaryRecords) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkGetGameBinaryRecords");
static_assert(sizeof(ABBinaryCloudSave_BulkGetGameBinaryRecords) == 0x000038, "Wrong size on ABBinaryCloudSave_BulkGetGameBinaryRecords");
static_assert(offsetof(ABBinaryCloudSave_BulkGetGameBinaryRecords, Keys) == 0x000000, "Member 'ABBinaryCloudSave_BulkGetGameBinaryRecords::Keys' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetGameBinaryRecords, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_BulkGetGameBinaryRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetGameBinaryRecords, OnError) == 0x000024, "Member 'ABBinaryCloudSave_BulkGetGameBinaryRecords::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetPublicUserBinaryRecordsByKeys
// 0x0048 (0x0048 - 0x0000)
struct ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)> OnSuccess;         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys");
static_assert(sizeof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys) == 0x000048, "Wrong size on ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys, Keys) == 0x000000, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys::Keys' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys, UserId) == 0x000010, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys::UserId' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys, OnSuccess) == 0x000020, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys, OnError) == 0x000034, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByKeys::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkGetPublicUserBinaryRecordsByUserIds
// 0x0048 (0x0048 - 0x0000)
struct ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListUserBinaryRecords& Response)> OnSuccess;         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds");
static_assert(sizeof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds) == 0x000048, "Wrong size on ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds, Key) == 0x000000, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds, UserIds) == 0x000010, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds::UserIds' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds, OnSuccess) == 0x000020, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds, OnError) == 0x000034, "Member 'ABBinaryCloudSave_BulkGetPublicUserBinaryRecordsByUserIds::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkQueryCurrentUserBinaryRecords
// 0x0040 (0x0040 - 0x0000)
struct ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords");
static_assert(sizeof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords) == 0x000040, "Wrong size on ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords, Query) == 0x000000, "Member 'ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords::Query' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords, OnError) == 0x000024, "Member 'ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords::OnError' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords, Offset) == 0x000038, "Member 'ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords::Offset' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords, Limit) == 0x00003C, "Member 'ABBinaryCloudSave_BulkQueryCurrentUserBinaryRecords::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkQueryGameBinaryRecords
// 0x0040 (0x0040 - 0x0000)
struct ABBinaryCloudSave_BulkQueryGameBinaryRecords final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPaginatedGameBinaryRecords& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkQueryGameBinaryRecords) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkQueryGameBinaryRecords");
static_assert(sizeof(ABBinaryCloudSave_BulkQueryGameBinaryRecords) == 0x000040, "Wrong size on ABBinaryCloudSave_BulkQueryGameBinaryRecords");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryGameBinaryRecords, Query) == 0x000000, "Member 'ABBinaryCloudSave_BulkQueryGameBinaryRecords::Query' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryGameBinaryRecords, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_BulkQueryGameBinaryRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryGameBinaryRecords, OnError) == 0x000024, "Member 'ABBinaryCloudSave_BulkQueryGameBinaryRecords::OnError' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryGameBinaryRecords, Offset) == 0x000038, "Member 'ABBinaryCloudSave_BulkQueryGameBinaryRecords::Offset' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryGameBinaryRecords, Limit) == 0x00003C, "Member 'ABBinaryCloudSave_BulkQueryGameBinaryRecords::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.BulkQueryPublicUserBinaryRecords
// 0x0040 (0x0040 - 0x0000)
struct ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPaginatedUserBinaryRecords& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords) == 0x000008, "Wrong alignment on ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords");
static_assert(sizeof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords) == 0x000040, "Wrong size on ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords, UserId) == 0x000000, "Member 'ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords::UserId' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords, OnError) == 0x000024, "Member 'ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords::OnError' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords, Offset) == 0x000038, "Member 'ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords::Offset' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords, Limit) == 0x00003C, "Member 'ABBinaryCloudSave_BulkQueryPublicUserBinaryRecords::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.DeleteUserBinaryRecord
// 0x0038 (0x0038 - 0x0000)
struct ABBinaryCloudSave_DeleteUserBinaryRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_DeleteUserBinaryRecord) == 0x000008, "Wrong alignment on ABBinaryCloudSave_DeleteUserBinaryRecord");
static_assert(sizeof(ABBinaryCloudSave_DeleteUserBinaryRecord) == 0x000038, "Wrong size on ABBinaryCloudSave_DeleteUserBinaryRecord");
static_assert(offsetof(ABBinaryCloudSave_DeleteUserBinaryRecord, Key) == 0x000000, "Member 'ABBinaryCloudSave_DeleteUserBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_DeleteUserBinaryRecord, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_DeleteUserBinaryRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_DeleteUserBinaryRecord, OnError) == 0x000024, "Member 'ABBinaryCloudSave_DeleteUserBinaryRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.GetCurrentUserBinaryRecord
// 0x0038 (0x0038 - 0x0000)
struct ABBinaryCloudSave_GetCurrentUserBinaryRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)> OnSuccess;              // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_GetCurrentUserBinaryRecord) == 0x000008, "Wrong alignment on ABBinaryCloudSave_GetCurrentUserBinaryRecord");
static_assert(sizeof(ABBinaryCloudSave_GetCurrentUserBinaryRecord) == 0x000038, "Wrong size on ABBinaryCloudSave_GetCurrentUserBinaryRecord");
static_assert(offsetof(ABBinaryCloudSave_GetCurrentUserBinaryRecord, Key) == 0x000000, "Member 'ABBinaryCloudSave_GetCurrentUserBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetCurrentUserBinaryRecord, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_GetCurrentUserBinaryRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetCurrentUserBinaryRecord, OnError) == 0x000024, "Member 'ABBinaryCloudSave_GetCurrentUserBinaryRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.GetGameBinaryRecord
// 0x0038 (0x0038 - 0x0000)
struct ABBinaryCloudSave_GetGameBinaryRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameBinaryRecord& Response)> OnSuccess;              // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_GetGameBinaryRecord) == 0x000008, "Wrong alignment on ABBinaryCloudSave_GetGameBinaryRecord");
static_assert(sizeof(ABBinaryCloudSave_GetGameBinaryRecord) == 0x000038, "Wrong size on ABBinaryCloudSave_GetGameBinaryRecord");
static_assert(offsetof(ABBinaryCloudSave_GetGameBinaryRecord, Key) == 0x000000, "Member 'ABBinaryCloudSave_GetGameBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetGameBinaryRecord, OnSuccess) == 0x000010, "Member 'ABBinaryCloudSave_GetGameBinaryRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetGameBinaryRecord, OnError) == 0x000024, "Member 'ABBinaryCloudSave_GetGameBinaryRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.GetPublicUserBinaryRecord
// 0x0048 (0x0048 - 0x0000)
struct ABBinaryCloudSave_GetPublicUserBinaryRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)> OnSuccess;              // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_GetPublicUserBinaryRecord) == 0x000008, "Wrong alignment on ABBinaryCloudSave_GetPublicUserBinaryRecord");
static_assert(sizeof(ABBinaryCloudSave_GetPublicUserBinaryRecord) == 0x000048, "Wrong size on ABBinaryCloudSave_GetPublicUserBinaryRecord");
static_assert(offsetof(ABBinaryCloudSave_GetPublicUserBinaryRecord, Key) == 0x000000, "Member 'ABBinaryCloudSave_GetPublicUserBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetPublicUserBinaryRecord, UserId) == 0x000010, "Member 'ABBinaryCloudSave_GetPublicUserBinaryRecord::UserId' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetPublicUserBinaryRecord, OnSuccess) == 0x000020, "Member 'ABBinaryCloudSave_GetPublicUserBinaryRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_GetPublicUserBinaryRecord, OnError) == 0x000034, "Member 'ABBinaryCloudSave_GetPublicUserBinaryRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.RequestUserBinaryRecordPresignedUrl
// 0x0048 (0x0048 - 0x0000)
struct ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileType;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsBinaryInfo& Response)> OnSuccess;                    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl) == 0x000008, "Wrong alignment on ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl");
static_assert(sizeof(ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl) == 0x000048, "Wrong size on ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl");
static_assert(offsetof(ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl, Key) == 0x000000, "Member 'ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl, FileType) == 0x000010, "Member 'ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl::FileType' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl, OnSuccess) == 0x000020, "Member 'ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl, OnError) == 0x000034, "Member 'ABBinaryCloudSave_RequestUserBinaryRecordPresignedUrl::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.SaveUserBinaryRecord
// 0x0050 (0x0050 - 0x0000)
struct ABBinaryCloudSave_SaveUserBinaryRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPublic;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileType;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_SaveUserBinaryRecord) == 0x000008, "Wrong alignment on ABBinaryCloudSave_SaveUserBinaryRecord");
static_assert(sizeof(ABBinaryCloudSave_SaveUserBinaryRecord) == 0x000050, "Wrong size on ABBinaryCloudSave_SaveUserBinaryRecord");
static_assert(offsetof(ABBinaryCloudSave_SaveUserBinaryRecord, Key) == 0x000000, "Member 'ABBinaryCloudSave_SaveUserBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_SaveUserBinaryRecord, bIsPublic) == 0x000010, "Member 'ABBinaryCloudSave_SaveUserBinaryRecord::bIsPublic' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_SaveUserBinaryRecord, FileType) == 0x000018, "Member 'ABBinaryCloudSave_SaveUserBinaryRecord::FileType' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_SaveUserBinaryRecord, OnSuccess) == 0x000028, "Member 'ABBinaryCloudSave_SaveUserBinaryRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_SaveUserBinaryRecord, OnError) == 0x00003C, "Member 'ABBinaryCloudSave_SaveUserBinaryRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.UpdateUserBinaryRecordFile
// 0x0058 (0x0058 - 0x0000)
struct ABBinaryCloudSave_UpdateUserBinaryRecordFile final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileType;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileLocation;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)> OnSuccess;              // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBinaryCloudSave_UpdateUserBinaryRecordFile) == 0x000008, "Wrong alignment on ABBinaryCloudSave_UpdateUserBinaryRecordFile");
static_assert(sizeof(ABBinaryCloudSave_UpdateUserBinaryRecordFile) == 0x000058, "Wrong size on ABBinaryCloudSave_UpdateUserBinaryRecordFile");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordFile, Key) == 0x000000, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordFile::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordFile, FileType) == 0x000010, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordFile::FileType' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordFile, FileLocation) == 0x000020, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordFile::FileLocation' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordFile, OnSuccess) == 0x000030, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordFile::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordFile, OnError) == 0x000044, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordFile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBinaryCloudSave.UpdateUserBinaryRecordMetadata
// 0x0040 (0x0040 - 0x0000)
struct ABBinaryCloudSave_UpdateUserBinaryRecordMetadata final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPublic;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsUserBinaryRecord& Response)> OnSuccess;              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABBinaryCloudSave_UpdateUserBinaryRecordMetadata) == 0x000008, "Wrong alignment on ABBinaryCloudSave_UpdateUserBinaryRecordMetadata");
static_assert(sizeof(ABBinaryCloudSave_UpdateUserBinaryRecordMetadata) == 0x000040, "Wrong size on ABBinaryCloudSave_UpdateUserBinaryRecordMetadata");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordMetadata, Key) == 0x000000, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordMetadata::Key' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordMetadata, bIsPublic) == 0x000010, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordMetadata::bIsPublic' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordMetadata, OnSuccess) == 0x000014, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordMetadata::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABBinaryCloudSave_UpdateUserBinaryRecordMetadata, OnError) == 0x000028, "Member 'ABBinaryCloudSave_UpdateUserBinaryRecordMetadata::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBlock.BlockPlayer
// 0x0038 (0x0038 - 0x0000)
struct ABBlock_BlockPlayer final
{
public:
	struct FBlockPlayerRequest                    Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsBlockPlayerResponse& Response)> OnResponse;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBlock_BlockPlayer) == 0x000008, "Wrong alignment on ABBlock_BlockPlayer");
static_assert(sizeof(ABBlock_BlockPlayer) == 0x000038, "Wrong size on ABBlock_BlockPlayer");
static_assert(offsetof(ABBlock_BlockPlayer, Request) == 0x000000, "Member 'ABBlock_BlockPlayer::Request' has a wrong offset!");
static_assert(offsetof(ABBlock_BlockPlayer, OnResponse) == 0x000010, "Member 'ABBlock_BlockPlayer::OnResponse' has a wrong offset!");
static_assert(offsetof(ABBlock_BlockPlayer, OnError) == 0x000024, "Member 'ABBlock_BlockPlayer::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBlock.GetListOfBlockedUsers
// 0x0028 (0x0028 - 0x0000)
struct ABBlock_GetListOfBlockedUsers final
{
public:
	TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)> OnResponse;      // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBlock_GetListOfBlockedUsers) == 0x000004, "Wrong alignment on ABBlock_GetListOfBlockedUsers");
static_assert(sizeof(ABBlock_GetListOfBlockedUsers) == 0x000028, "Wrong size on ABBlock_GetListOfBlockedUsers");
static_assert(offsetof(ABBlock_GetListOfBlockedUsers, OnResponse) == 0x000000, "Member 'ABBlock_GetListOfBlockedUsers::OnResponse' has a wrong offset!");
static_assert(offsetof(ABBlock_GetListOfBlockedUsers, OnError) == 0x000014, "Member 'ABBlock_GetListOfBlockedUsers::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBlock.GetListOfBlockers
// 0x0028 (0x0028 - 0x0000)
struct ABBlock_GetListOfBlockers final
{
public:
	TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)> OnResponse;          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBlock_GetListOfBlockers) == 0x000004, "Wrong alignment on ABBlock_GetListOfBlockers");
static_assert(sizeof(ABBlock_GetListOfBlockers) == 0x000028, "Wrong size on ABBlock_GetListOfBlockers");
static_assert(offsetof(ABBlock_GetListOfBlockers, OnResponse) == 0x000000, "Member 'ABBlock_GetListOfBlockers::OnResponse' has a wrong offset!");
static_assert(offsetof(ABBlock_GetListOfBlockers, OnError) == 0x000014, "Member 'ABBlock_GetListOfBlockers::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBlock.SetBlockPlayerNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABBlock_SetBlockPlayerNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsBlockPlayerNotif& Notif)> OnNotif;                   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBlock_SetBlockPlayerNotifDelegate) == 0x000004, "Wrong alignment on ABBlock_SetBlockPlayerNotifDelegate");
static_assert(sizeof(ABBlock_SetBlockPlayerNotifDelegate) == 0x000014, "Wrong size on ABBlock_SetBlockPlayerNotifDelegate");
static_assert(offsetof(ABBlock_SetBlockPlayerNotifDelegate, OnNotif) == 0x000000, "Member 'ABBlock_SetBlockPlayerNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBlock.SetUnblockPlayerNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABBlock_SetUnblockPlayerNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsUnblockPlayerNotif& Notif)> OnNotif;                 // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBlock_SetUnblockPlayerNotifDelegate) == 0x000004, "Wrong alignment on ABBlock_SetUnblockPlayerNotifDelegate");
static_assert(sizeof(ABBlock_SetUnblockPlayerNotifDelegate) == 0x000014, "Wrong size on ABBlock_SetUnblockPlayerNotifDelegate");
static_assert(offsetof(ABBlock_SetUnblockPlayerNotifDelegate, OnNotif) == 0x000000, "Member 'ABBlock_SetUnblockPlayerNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABBlock.UnblockPlayer
// 0x0038 (0x0038 - 0x0000)
struct ABBlock_UnblockPlayer final
{
public:
	struct FUnblockPlayerRequest                  Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUnblockPlayerResponse& Response)> OnResponse;        // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABBlock_UnblockPlayer) == 0x000008, "Wrong alignment on ABBlock_UnblockPlayer");
static_assert(sizeof(ABBlock_UnblockPlayer) == 0x000038, "Wrong size on ABBlock_UnblockPlayer");
static_assert(offsetof(ABBlock_UnblockPlayer, Request) == 0x000000, "Member 'ABBlock_UnblockPlayer::Request' has a wrong offset!");
static_assert(offsetof(ABBlock_UnblockPlayer, OnResponse) == 0x000010, "Member 'ABBlock_UnblockPlayer::OnResponse' has a wrong offset!");
static_assert(offsetof(ABBlock_UnblockPlayer, OnError) == 0x000024, "Member 'ABBlock_UnblockPlayer::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetCategory
// 0x0048 (0x0048 - 0x0000)
struct ABCatalog_GetCategory final
{
public:
	class FString                                 CategoryPath;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsCategoryInfo& Response)> OnSuccess;                  // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetCategory) == 0x000008, "Wrong alignment on ABCatalog_GetCategory");
static_assert(sizeof(ABCatalog_GetCategory) == 0x000048, "Wrong size on ABCatalog_GetCategory");
static_assert(offsetof(ABCatalog_GetCategory, CategoryPath) == 0x000000, "Member 'ABCatalog_GetCategory::CategoryPath' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetCategory, Language) == 0x000010, "Member 'ABCatalog_GetCategory::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetCategory, OnSuccess) == 0x000020, "Member 'ABCatalog_GetCategory::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetCategory, OnError) == 0x000034, "Member 'ABCatalog_GetCategory::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetChildCategories
// 0x0048 (0x0048 - 0x0000)
struct ABCatalog_GetChildCategories final
{
public:
	class FString                                 CategoryPath;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess;              // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetChildCategories) == 0x000008, "Wrong alignment on ABCatalog_GetChildCategories");
static_assert(sizeof(ABCatalog_GetChildCategories) == 0x000048, "Wrong size on ABCatalog_GetChildCategories");
static_assert(offsetof(ABCatalog_GetChildCategories, CategoryPath) == 0x000000, "Member 'ABCatalog_GetChildCategories::CategoryPath' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetChildCategories, Language) == 0x000010, "Member 'ABCatalog_GetChildCategories::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetChildCategories, OnSuccess) == 0x000020, "Member 'ABCatalog_GetChildCategories::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetChildCategories, OnError) == 0x000034, "Member 'ABCatalog_GetChildCategories::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetDescendantCategories
// 0x0048 (0x0048 - 0x0000)
struct ABCatalog_GetDescendantCategories final
{
public:
	class FString                                 CategoryPath;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess;              // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetDescendantCategories) == 0x000008, "Wrong alignment on ABCatalog_GetDescendantCategories");
static_assert(sizeof(ABCatalog_GetDescendantCategories) == 0x000048, "Wrong size on ABCatalog_GetDescendantCategories");
static_assert(offsetof(ABCatalog_GetDescendantCategories, CategoryPath) == 0x000000, "Member 'ABCatalog_GetDescendantCategories::CategoryPath' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetDescendantCategories, Language) == 0x000010, "Member 'ABCatalog_GetDescendantCategories::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetDescendantCategories, OnSuccess) == 0x000020, "Member 'ABCatalog_GetDescendantCategories::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetDescendantCategories, OnError) == 0x000034, "Member 'ABCatalog_GetDescendantCategories::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetItemByAppId
// 0x0058 (0x0058 - 0x0000)
struct ABCatalog_GetItemByAppId final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemInfo& Response)> OnSuccess;                      // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetItemByAppId) == 0x000008, "Wrong alignment on ABCatalog_GetItemByAppId");
static_assert(sizeof(ABCatalog_GetItemByAppId) == 0x000058, "Wrong size on ABCatalog_GetItemByAppId");
static_assert(offsetof(ABCatalog_GetItemByAppId, AppId) == 0x000000, "Member 'ABCatalog_GetItemByAppId::AppId' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemByAppId, Language) == 0x000010, "Member 'ABCatalog_GetItemByAppId::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemByAppId, Region) == 0x000020, "Member 'ABCatalog_GetItemByAppId::Region' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemByAppId, OnSuccess) == 0x000030, "Member 'ABCatalog_GetItemByAppId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemByAppId, OnError) == 0x000044, "Member 'ABCatalog_GetItemByAppId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetItemById
// 0x0070 (0x0070 - 0x0000)
struct ABCatalog_GetItemById final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPopulateBundle;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Response)> OnSuccess;             // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0058(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCatalog_GetItemById) == 0x000008, "Wrong alignment on ABCatalog_GetItemById");
static_assert(sizeof(ABCatalog_GetItemById) == 0x000070, "Wrong size on ABCatalog_GetItemById");
static_assert(offsetof(ABCatalog_GetItemById, ItemId) == 0x000000, "Member 'ABCatalog_GetItemById::ItemId' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemById, Language) == 0x000010, "Member 'ABCatalog_GetItemById::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemById, Region) == 0x000020, "Member 'ABCatalog_GetItemById::Region' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemById, StoreId) == 0x000030, "Member 'ABCatalog_GetItemById::StoreId' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemById, bPopulateBundle) == 0x000040, "Member 'ABCatalog_GetItemById::bPopulateBundle' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemById, OnSuccess) == 0x000044, "Member 'ABCatalog_GetItemById::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemById, OnError) == 0x000058, "Member 'ABCatalog_GetItemById::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetItemDynamicData
// 0x0038 (0x0038 - 0x0000)
struct ABCatalog_GetItemDynamicData final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemDynamicData& Response)> OnSuccess;               // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetItemDynamicData) == 0x000008, "Wrong alignment on ABCatalog_GetItemDynamicData");
static_assert(sizeof(ABCatalog_GetItemDynamicData) == 0x000038, "Wrong size on ABCatalog_GetItemDynamicData");
static_assert(offsetof(ABCatalog_GetItemDynamicData, ItemId) == 0x000000, "Member 'ABCatalog_GetItemDynamicData::ItemId' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemDynamicData, OnSuccess) == 0x000010, "Member 'ABCatalog_GetItemDynamicData::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemDynamicData, OnError) == 0x000024, "Member 'ABCatalog_GetItemDynamicData::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetItemsByCriteria
// 0x00D0 (0x00D0 - 0x0000)
struct ABCatalog_GetItemsByCriteria final
{
public:
	struct FAccelByteModelsItemCriteria           ItemCriteria;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0090(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0094(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EAccelByteItemListSortBy>              SortBy;                                            // 0x0098(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)> OnSuccess;        // 0x00A8(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00BC(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetItemsByCriteria) == 0x000008, "Wrong alignment on ABCatalog_GetItemsByCriteria");
static_assert(sizeof(ABCatalog_GetItemsByCriteria) == 0x0000D0, "Wrong size on ABCatalog_GetItemsByCriteria");
static_assert(offsetof(ABCatalog_GetItemsByCriteria, ItemCriteria) == 0x000000, "Member 'ABCatalog_GetItemsByCriteria::ItemCriteria' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemsByCriteria, Offset) == 0x000090, "Member 'ABCatalog_GetItemsByCriteria::Offset' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemsByCriteria, Limit) == 0x000094, "Member 'ABCatalog_GetItemsByCriteria::Limit' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemsByCriteria, SortBy) == 0x000098, "Member 'ABCatalog_GetItemsByCriteria::SortBy' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemsByCriteria, OnSuccess) == 0x0000A8, "Member 'ABCatalog_GetItemsByCriteria::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetItemsByCriteria, OnError) == 0x0000BC, "Member 'ABCatalog_GetItemsByCriteria::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.GetRootCategories
// 0x0038 (0x0038 - 0x0000)
struct ABCatalog_GetRootCategories final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsCategoryInfoResponse& Response)> OnSuccess;              // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_GetRootCategories) == 0x000008, "Wrong alignment on ABCatalog_GetRootCategories");
static_assert(sizeof(ABCatalog_GetRootCategories) == 0x000038, "Wrong size on ABCatalog_GetRootCategories");
static_assert(offsetof(ABCatalog_GetRootCategories, Language) == 0x000000, "Member 'ABCatalog_GetRootCategories::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetRootCategories, OnSuccess) == 0x000010, "Member 'ABCatalog_GetRootCategories::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_GetRootCategories, OnError) == 0x000024, "Member 'ABCatalog_GetRootCategories::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCatalog.SearchItem
// 0x0060 (0x0060 - 0x0000)
struct ABCatalog_SearchItem final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Keyword;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0024(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Response)> OnSuccess;        // 0x0038(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x004C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCatalog_SearchItem) == 0x000008, "Wrong alignment on ABCatalog_SearchItem");
static_assert(sizeof(ABCatalog_SearchItem) == 0x000060, "Wrong size on ABCatalog_SearchItem");
static_assert(offsetof(ABCatalog_SearchItem, Language) == 0x000000, "Member 'ABCatalog_SearchItem::Language' has a wrong offset!");
static_assert(offsetof(ABCatalog_SearchItem, Keyword) == 0x000010, "Member 'ABCatalog_SearchItem::Keyword' has a wrong offset!");
static_assert(offsetof(ABCatalog_SearchItem, Offset) == 0x000020, "Member 'ABCatalog_SearchItem::Offset' has a wrong offset!");
static_assert(offsetof(ABCatalog_SearchItem, Limit) == 0x000024, "Member 'ABCatalog_SearchItem::Limit' has a wrong offset!");
static_assert(offsetof(ABCatalog_SearchItem, Region) == 0x000028, "Member 'ABCatalog_SearchItem::Region' has a wrong offset!");
static_assert(offsetof(ABCatalog_SearchItem, OnSuccess) == 0x000038, "Member 'ABCatalog_SearchItem::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCatalog_SearchItem, OnError) == 0x00004C, "Member 'ABCatalog_SearchItem::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.BulkGetGameRecords
// 0x0038 (0x0038 - 0x0000)
struct ABCloudSave_BulkGetGameRecords final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListGameRecords& Response)> OnSuccess;               // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_BulkGetGameRecords) == 0x000008, "Wrong alignment on ABCloudSave_BulkGetGameRecords");
static_assert(sizeof(ABCloudSave_BulkGetGameRecords) == 0x000038, "Wrong size on ABCloudSave_BulkGetGameRecords");
static_assert(offsetof(ABCloudSave_BulkGetGameRecords, Keys) == 0x000000, "Member 'ABCloudSave_BulkGetGameRecords::Keys' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetGameRecords, OnSuccess) == 0x000010, "Member 'ABCloudSave_BulkGetGameRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetGameRecords, OnError) == 0x000024, "Member 'ABCloudSave_BulkGetGameRecords::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.BulkGetOtherPlayerPublicRecordKeys
// 0x0040 (0x0040 - 0x0000)
struct ABCloudSave_BulkGetOtherPlayerPublicRecordKeys final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys) == 0x000008, "Wrong alignment on ABCloudSave_BulkGetOtherPlayerPublicRecordKeys");
static_assert(sizeof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys) == 0x000040, "Wrong size on ABCloudSave_BulkGetOtherPlayerPublicRecordKeys");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys, UserId) == 0x000000, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecordKeys::UserId' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys, OnSuccess) == 0x000010, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecordKeys::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys, OnError) == 0x000024, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecordKeys::OnError' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys, Offset) == 0x000038, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecordKeys::Offset' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecordKeys, Limit) == 0x00003C, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecordKeys::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.BulkGetOtherPlayerPublicRecords
// 0x0048 (0x0048 - 0x0000)
struct ABCloudSave_BulkGetOtherPlayerPublicRecords final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)> OnSuccess;                // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_BulkGetOtherPlayerPublicRecords) == 0x000008, "Wrong alignment on ABCloudSave_BulkGetOtherPlayerPublicRecords");
static_assert(sizeof(ABCloudSave_BulkGetOtherPlayerPublicRecords) == 0x000048, "Wrong size on ABCloudSave_BulkGetOtherPlayerPublicRecords");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecords, UserId) == 0x000000, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecords::UserId' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecords, Keys) == 0x000010, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecords::Keys' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecords, OnSuccess) == 0x000020, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetOtherPlayerPublicRecords, OnError) == 0x000034, "Member 'ABCloudSave_BulkGetOtherPlayerPublicRecords::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.BulkGetUserRecords
// 0x0038 (0x0038 - 0x0000)
struct ABCloudSave_BulkGetUserRecords final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FListAccelByteModelsUserRecord& Response)> OnSuccess;                // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_BulkGetUserRecords) == 0x000008, "Wrong alignment on ABCloudSave_BulkGetUserRecords");
static_assert(sizeof(ABCloudSave_BulkGetUserRecords) == 0x000038, "Wrong size on ABCloudSave_BulkGetUserRecords");
static_assert(offsetof(ABCloudSave_BulkGetUserRecords, Keys) == 0x000000, "Member 'ABCloudSave_BulkGetUserRecords::Keys' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetUserRecords, OnSuccess) == 0x000010, "Member 'ABCloudSave_BulkGetUserRecords::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_BulkGetUserRecords, OnError) == 0x000024, "Member 'ABCloudSave_BulkGetUserRecords::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.DeleteGameRecord
// 0x0038 (0x0038 - 0x0000)
struct ABCloudSave_DeleteGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_DeleteGameRecord) == 0x000008, "Wrong alignment on ABCloudSave_DeleteGameRecord");
static_assert(sizeof(ABCloudSave_DeleteGameRecord) == 0x000038, "Wrong size on ABCloudSave_DeleteGameRecord");
static_assert(offsetof(ABCloudSave_DeleteGameRecord, Key) == 0x000000, "Member 'ABCloudSave_DeleteGameRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_DeleteGameRecord, OnSuccess) == 0x000010, "Member 'ABCloudSave_DeleteGameRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_DeleteGameRecord, OnError) == 0x000024, "Member 'ABCloudSave_DeleteGameRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.DeleteUserRecord
// 0x0038 (0x0038 - 0x0000)
struct ABCloudSave_DeleteUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_DeleteUserRecord) == 0x000008, "Wrong alignment on ABCloudSave_DeleteUserRecord");
static_assert(sizeof(ABCloudSave_DeleteUserRecord) == 0x000038, "Wrong size on ABCloudSave_DeleteUserRecord");
static_assert(offsetof(ABCloudSave_DeleteUserRecord, Key) == 0x000000, "Member 'ABCloudSave_DeleteUserRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_DeleteUserRecord, OnSuccess) == 0x000010, "Member 'ABCloudSave_DeleteUserRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_DeleteUserRecord, OnError) == 0x000024, "Member 'ABCloudSave_DeleteUserRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.GetGameRecord
// 0x0038 (0x0038 - 0x0000)
struct ABCloudSave_GetGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameRecord& Response)> OnSuccess;                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_GetGameRecord) == 0x000008, "Wrong alignment on ABCloudSave_GetGameRecord");
static_assert(sizeof(ABCloudSave_GetGameRecord) == 0x000038, "Wrong size on ABCloudSave_GetGameRecord");
static_assert(offsetof(ABCloudSave_GetGameRecord, Key) == 0x000000, "Member 'ABCloudSave_GetGameRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetGameRecord, OnSuccess) == 0x000010, "Member 'ABCloudSave_GetGameRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetGameRecord, OnError) == 0x000024, "Member 'ABCloudSave_GetGameRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.GetPublicUserRecord
// 0x0048 (0x0048 - 0x0000)
struct ABCloudSave_GetPublicUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserRecord& Response)> OnSuccess;                    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_GetPublicUserRecord) == 0x000008, "Wrong alignment on ABCloudSave_GetPublicUserRecord");
static_assert(sizeof(ABCloudSave_GetPublicUserRecord) == 0x000048, "Wrong size on ABCloudSave_GetPublicUserRecord");
static_assert(offsetof(ABCloudSave_GetPublicUserRecord, Key) == 0x000000, "Member 'ABCloudSave_GetPublicUserRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetPublicUserRecord, UserId) == 0x000010, "Member 'ABCloudSave_GetPublicUserRecord::UserId' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetPublicUserRecord, OnSuccess) == 0x000020, "Member 'ABCloudSave_GetPublicUserRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetPublicUserRecord, OnError) == 0x000034, "Member 'ABCloudSave_GetPublicUserRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.GetUserRecord
// 0x0038 (0x0038 - 0x0000)
struct ABCloudSave_GetUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserRecord& Response)> OnSuccess;                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_GetUserRecord) == 0x000008, "Wrong alignment on ABCloudSave_GetUserRecord");
static_assert(sizeof(ABCloudSave_GetUserRecord) == 0x000038, "Wrong size on ABCloudSave_GetUserRecord");
static_assert(offsetof(ABCloudSave_GetUserRecord, Key) == 0x000000, "Member 'ABCloudSave_GetUserRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetUserRecord, OnSuccess) == 0x000010, "Member 'ABCloudSave_GetUserRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_GetUserRecord, OnError) == 0x000024, "Member 'ABCloudSave_GetUserRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceGameRecord
// 0x0058 (0x0058 - 0x0000)
struct ABCloudSave_ReplaceGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_ReplaceGameRecord) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceGameRecord");
static_assert(sizeof(ABCloudSave_ReplaceGameRecord) == 0x000058, "Wrong size on ABCloudSave_ReplaceGameRecord");
static_assert(offsetof(ABCloudSave_ReplaceGameRecord, Key) == 0x000000, "Member 'ABCloudSave_ReplaceGameRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecord, RecordRequest) == 0x000010, "Member 'ABCloudSave_ReplaceGameRecord::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecord, OnSuccess) == 0x000030, "Member 'ABCloudSave_ReplaceGameRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecord, OnError) == 0x000044, "Member 'ABCloudSave_ReplaceGameRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceGameRecordCheckLatest
// 0x0060 (0x0060 - 0x0000)
struct ABCloudSave_ReplaceGameRecordCheckLatest final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdated;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_ReplaceGameRecordCheckLatest) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceGameRecordCheckLatest");
static_assert(sizeof(ABCloudSave_ReplaceGameRecordCheckLatest) == 0x000060, "Wrong size on ABCloudSave_ReplaceGameRecordCheckLatest");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatest, Key) == 0x000000, "Member 'ABCloudSave_ReplaceGameRecordCheckLatest::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatest, LastUpdated) == 0x000010, "Member 'ABCloudSave_ReplaceGameRecordCheckLatest::LastUpdated' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatest, RecordRequest) == 0x000018, "Member 'ABCloudSave_ReplaceGameRecordCheckLatest::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatest, OnSuccess) == 0x000038, "Member 'ABCloudSave_ReplaceGameRecordCheckLatest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatest, OnError) == 0x00004C, "Member 'ABCloudSave_ReplaceGameRecordCheckLatest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceGameRecordCheckLatestRetry
// 0x0078 (0x0078 - 0x0000)
struct ABCloudSave_ReplaceGameRecordCheckLatestRetry final
{
public:
	int32                                         TryAttempt;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FJsonObjectWrapper& Response)> PayloadModifier;                      // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0060(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCloudSave_ReplaceGameRecordCheckLatestRetry) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceGameRecordCheckLatestRetry");
static_assert(sizeof(ABCloudSave_ReplaceGameRecordCheckLatestRetry) == 0x000078, "Wrong size on ABCloudSave_ReplaceGameRecordCheckLatestRetry");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatestRetry, TryAttempt) == 0x000000, "Member 'ABCloudSave_ReplaceGameRecordCheckLatestRetry::TryAttempt' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatestRetry, Key) == 0x000008, "Member 'ABCloudSave_ReplaceGameRecordCheckLatestRetry::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatestRetry, RecordRequest) == 0x000018, "Member 'ABCloudSave_ReplaceGameRecordCheckLatestRetry::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatestRetry, PayloadModifier) == 0x000038, "Member 'ABCloudSave_ReplaceGameRecordCheckLatestRetry::PayloadModifier' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatestRetry, OnSuccess) == 0x00004C, "Member 'ABCloudSave_ReplaceGameRecordCheckLatestRetry::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceGameRecordCheckLatestRetry, OnError) == 0x000060, "Member 'ABCloudSave_ReplaceGameRecordCheckLatestRetry::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecord
// 0x0060 (0x0060 - 0x0000)
struct ABCloudSave_ReplaceUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          IsPublic;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0048(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCloudSave_ReplaceUserRecord) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceUserRecord");
static_assert(sizeof(ABCloudSave_ReplaceUserRecord) == 0x000060, "Wrong size on ABCloudSave_ReplaceUserRecord");
static_assert(offsetof(ABCloudSave_ReplaceUserRecord, Key) == 0x000000, "Member 'ABCloudSave_ReplaceUserRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecord, RecordRequest) == 0x000010, "Member 'ABCloudSave_ReplaceUserRecord::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecord, IsPublic) == 0x000030, "Member 'ABCloudSave_ReplaceUserRecord::IsPublic' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecord, OnSuccess) == 0x000034, "Member 'ABCloudSave_ReplaceUserRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecord, OnError) == 0x000048, "Member 'ABCloudSave_ReplaceUserRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatest
// 0x0060 (0x0060 - 0x0000)
struct ABCloudSave_ReplaceUserRecordCheckLatest final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdated;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_ReplaceUserRecordCheckLatest) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceUserRecordCheckLatest");
static_assert(sizeof(ABCloudSave_ReplaceUserRecordCheckLatest) == 0x000060, "Wrong size on ABCloudSave_ReplaceUserRecordCheckLatest");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatest, Key) == 0x000000, "Member 'ABCloudSave_ReplaceUserRecordCheckLatest::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatest, LastUpdated) == 0x000010, "Member 'ABCloudSave_ReplaceUserRecordCheckLatest::LastUpdated' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatest, RecordRequest) == 0x000018, "Member 'ABCloudSave_ReplaceUserRecordCheckLatest::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatest, OnSuccess) == 0x000038, "Member 'ABCloudSave_ReplaceUserRecordCheckLatest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatest, OnError) == 0x00004C, "Member 'ABCloudSave_ReplaceUserRecordCheckLatest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatestRetry
// 0x0078 (0x0078 - 0x0000)
struct ABCloudSave_ReplaceUserRecordCheckLatestRetry final
{
public:
	int32                                         TryAttempt;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FJsonObjectWrapper& Response)> PayloadModifier;                      // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0060(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCloudSave_ReplaceUserRecordCheckLatestRetry) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceUserRecordCheckLatestRetry");
static_assert(sizeof(ABCloudSave_ReplaceUserRecordCheckLatestRetry) == 0x000078, "Wrong size on ABCloudSave_ReplaceUserRecordCheckLatestRetry");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetry, TryAttempt) == 0x000000, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetry::TryAttempt' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetry, Key) == 0x000008, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetry::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetry, RecordRequest) == 0x000018, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetry::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetry, PayloadModifier) == 0x000038, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetry::PayloadModifier' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetry, OnSuccess) == 0x00004C, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetry::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetry, OnError) == 0x000060, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetry::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatestRetryWithResponse
// 0x0078 (0x0078 - 0x0000)
struct ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse final
{
public:
	int32                                         TryAttempt;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FJsonObjectWrapper& Response)> PayloadModifier;                      // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)> OnSuccess;     // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0060(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse");
static_assert(sizeof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse) == 0x000078, "Wrong size on ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse, TryAttempt) == 0x000000, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse::TryAttempt' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse, Key) == 0x000008, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse, RecordRequest) == 0x000018, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse, PayloadModifier) == 0x000038, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse::PayloadModifier' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse, OnSuccess) == 0x00004C, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse, OnError) == 0x000060, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestRetryWithResponse::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.ReplaceUserRecordCheckLatestWithResponse
// 0x0060 (0x0060 - 0x0000)
struct ABCloudSave_ReplaceUserRecordCheckLatestWithResponse final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdated;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsReplaceUserRecordResponse& Response)> OnSuccess;     // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse) == 0x000008, "Wrong alignment on ABCloudSave_ReplaceUserRecordCheckLatestWithResponse");
static_assert(sizeof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse) == 0x000060, "Wrong size on ABCloudSave_ReplaceUserRecordCheckLatestWithResponse");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse, Key) == 0x000000, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestWithResponse::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse, LastUpdated) == 0x000010, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestWithResponse::LastUpdated' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse, RecordRequest) == 0x000018, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestWithResponse::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse, OnSuccess) == 0x000038, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestWithResponse::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_ReplaceUserRecordCheckLatestWithResponse, OnError) == 0x00004C, "Member 'ABCloudSave_ReplaceUserRecordCheckLatestWithResponse::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.SaveGameRecord
// 0x0058 (0x0058 - 0x0000)
struct ABCloudSave_SaveGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCloudSave_SaveGameRecord) == 0x000008, "Wrong alignment on ABCloudSave_SaveGameRecord");
static_assert(sizeof(ABCloudSave_SaveGameRecord) == 0x000058, "Wrong size on ABCloudSave_SaveGameRecord");
static_assert(offsetof(ABCloudSave_SaveGameRecord, Key) == 0x000000, "Member 'ABCloudSave_SaveGameRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveGameRecord, RecordRequest) == 0x000010, "Member 'ABCloudSave_SaveGameRecord::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveGameRecord, OnSuccess) == 0x000030, "Member 'ABCloudSave_SaveGameRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveGameRecord, OnError) == 0x000044, "Member 'ABCloudSave_SaveGameRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCloudSave.SaveUserRecord
// 0x0060 (0x0060 - 0x0000)
struct ABCloudSave_SaveUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RecordRequest;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          IsPublic;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0048(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCloudSave_SaveUserRecord) == 0x000008, "Wrong alignment on ABCloudSave_SaveUserRecord");
static_assert(sizeof(ABCloudSave_SaveUserRecord) == 0x000060, "Wrong size on ABCloudSave_SaveUserRecord");
static_assert(offsetof(ABCloudSave_SaveUserRecord, Key) == 0x000000, "Member 'ABCloudSave_SaveUserRecord::Key' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveUserRecord, RecordRequest) == 0x000010, "Member 'ABCloudSave_SaveUserRecord::RecordRequest' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveUserRecord, IsPublic) == 0x000030, "Member 'ABCloudSave_SaveUserRecord::IsPublic' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveUserRecord, OnSuccess) == 0x000034, "Member 'ABCloudSave_SaveUserRecord::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCloudSave_SaveUserRecord, OnError) == 0x000048, "Member 'ABCloudSave_SaveUserRecord::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCurrency.GetCurrencyList
// 0x002C (0x002C - 0x0000)
struct ABCurrency_GetCurrencyList final
{
public:
	TDelegate<void(const struct FArrayModelsCurrencyList& Response)> OnSuccess;                      // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteCurrencyType                        CurrencyType;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCurrency_GetCurrencyList) == 0x000004, "Wrong alignment on ABCurrency_GetCurrencyList");
static_assert(sizeof(ABCurrency_GetCurrencyList) == 0x00002C, "Wrong size on ABCurrency_GetCurrencyList");
static_assert(offsetof(ABCurrency_GetCurrencyList, OnSuccess) == 0x000000, "Member 'ABCurrency_GetCurrencyList::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABCurrency_GetCurrencyList, OnError) == 0x000014, "Member 'ABCurrency_GetCurrencyList::OnError' has a wrong offset!");
static_assert(offsetof(ABCurrency_GetCurrencyList, CurrencyType) == 0x000028, "Member 'ABCurrency_GetCurrencyList::CurrencyType' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.ConsumeUserEntitlement
// 0x0040 (0x0040 - 0x0000)
struct ABEntitlement_ConsumeUserEntitlement final
{
public:
	class FString                                 EntitlementId;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)> OnSuccess;               // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABEntitlement_ConsumeUserEntitlement) == 0x000008, "Wrong alignment on ABEntitlement_ConsumeUserEntitlement");
static_assert(sizeof(ABEntitlement_ConsumeUserEntitlement) == 0x000040, "Wrong size on ABEntitlement_ConsumeUserEntitlement");
static_assert(offsetof(ABEntitlement_ConsumeUserEntitlement, EntitlementId) == 0x000000, "Member 'ABEntitlement_ConsumeUserEntitlement::EntitlementId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_ConsumeUserEntitlement, UseCount) == 0x000010, "Member 'ABEntitlement_ConsumeUserEntitlement::UseCount' has a wrong offset!");
static_assert(offsetof(ABEntitlement_ConsumeUserEntitlement, OnSuccess) == 0x000014, "Member 'ABEntitlement_ConsumeUserEntitlement::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_ConsumeUserEntitlement, OnError) == 0x000028, "Member 'ABEntitlement_ConsumeUserEntitlement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.CreateDistributionReceiver
// 0x0078 (0x0078 - 0x0000)
struct ABEntitlement_CreateDistributionReceiver final
{
public:
	class FString                                 ExtUserId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsAttributes             Attributes;                                        // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0050(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0064(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_CreateDistributionReceiver) == 0x000008, "Wrong alignment on ABEntitlement_CreateDistributionReceiver");
static_assert(sizeof(ABEntitlement_CreateDistributionReceiver) == 0x000078, "Wrong size on ABEntitlement_CreateDistributionReceiver");
static_assert(offsetof(ABEntitlement_CreateDistributionReceiver, ExtUserId) == 0x000000, "Member 'ABEntitlement_CreateDistributionReceiver::ExtUserId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_CreateDistributionReceiver, Attributes) == 0x000010, "Member 'ABEntitlement_CreateDistributionReceiver::Attributes' has a wrong offset!");
static_assert(offsetof(ABEntitlement_CreateDistributionReceiver, OnSuccess) == 0x000050, "Member 'ABEntitlement_CreateDistributionReceiver::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_CreateDistributionReceiver, OnError) == 0x000064, "Member 'ABEntitlement_CreateDistributionReceiver::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.DeleteDistributionReceiver
// 0x0048 (0x0048 - 0x0000)
struct ABEntitlement_DeleteDistributionReceiver final
{
public:
	class FString                                 ExtUserId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_DeleteDistributionReceiver) == 0x000008, "Wrong alignment on ABEntitlement_DeleteDistributionReceiver");
static_assert(sizeof(ABEntitlement_DeleteDistributionReceiver) == 0x000048, "Wrong size on ABEntitlement_DeleteDistributionReceiver");
static_assert(offsetof(ABEntitlement_DeleteDistributionReceiver, ExtUserId) == 0x000000, "Member 'ABEntitlement_DeleteDistributionReceiver::ExtUserId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_DeleteDistributionReceiver, UserId) == 0x000010, "Member 'ABEntitlement_DeleteDistributionReceiver::UserId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_DeleteDistributionReceiver, OnSuccess) == 0x000020, "Member 'ABEntitlement_DeleteDistributionReceiver::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_DeleteDistributionReceiver, OnError) == 0x000034, "Member 'ABEntitlement_DeleteDistributionReceiver::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.GetDistributionReceiver
// 0x0048 (0x0048 - 0x0000)
struct ABEntitlement_GetDistributionReceiver final
{
public:
	class FString                                 PublisherNamespace;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublisherUserId;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsDistributionReceiver& Response)> OnSuccess;              // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_GetDistributionReceiver) == 0x000008, "Wrong alignment on ABEntitlement_GetDistributionReceiver");
static_assert(sizeof(ABEntitlement_GetDistributionReceiver) == 0x000048, "Wrong size on ABEntitlement_GetDistributionReceiver");
static_assert(offsetof(ABEntitlement_GetDistributionReceiver, PublisherNamespace) == 0x000000, "Member 'ABEntitlement_GetDistributionReceiver::PublisherNamespace' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetDistributionReceiver, PublisherUserId) == 0x000010, "Member 'ABEntitlement_GetDistributionReceiver::PublisherUserId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetDistributionReceiver, OnSuccess) == 0x000020, "Member 'ABEntitlement_GetDistributionReceiver::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetDistributionReceiver, OnError) == 0x000034, "Member 'ABEntitlement_GetDistributionReceiver::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementById
// 0x0038 (0x0038 - 0x0000)
struct ABEntitlement_GetUserEntitlementById final
{
public:
	class FString                                 Entitlementid;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementInfo& Response)> OnSuccess;               // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_GetUserEntitlementById) == 0x000008, "Wrong alignment on ABEntitlement_GetUserEntitlementById");
static_assert(sizeof(ABEntitlement_GetUserEntitlementById) == 0x000038, "Wrong size on ABEntitlement_GetUserEntitlementById");
static_assert(offsetof(ABEntitlement_GetUserEntitlementById, Entitlementid) == 0x000000, "Member 'ABEntitlement_GetUserEntitlementById::Entitlementid' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementById, OnSuccess) == 0x000010, "Member 'ABEntitlement_GetUserEntitlementById::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementById, OnError) == 0x000024, "Member 'ABEntitlement_GetUserEntitlementById::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipAny
// 0x0058 (0x0058 - 0x0000)
struct ABEntitlement_GetUserEntitlementOwnershipAny final
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         AppIds;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Skus;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess;          // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_GetUserEntitlementOwnershipAny) == 0x000008, "Wrong alignment on ABEntitlement_GetUserEntitlementOwnershipAny");
static_assert(sizeof(ABEntitlement_GetUserEntitlementOwnershipAny) == 0x000058, "Wrong size on ABEntitlement_GetUserEntitlementOwnershipAny");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipAny, ItemIds) == 0x000000, "Member 'ABEntitlement_GetUserEntitlementOwnershipAny::ItemIds' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipAny, AppIds) == 0x000010, "Member 'ABEntitlement_GetUserEntitlementOwnershipAny::AppIds' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipAny, Skus) == 0x000020, "Member 'ABEntitlement_GetUserEntitlementOwnershipAny::Skus' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipAny, OnSuccess) == 0x000030, "Member 'ABEntitlement_GetUserEntitlementOwnershipAny::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipAny, OnError) == 0x000044, "Member 'ABEntitlement_GetUserEntitlementOwnershipAny::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipByAppId
// 0x0038 (0x0038 - 0x0000)
struct ABEntitlement_GetUserEntitlementOwnershipByAppId final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_GetUserEntitlementOwnershipByAppId) == 0x000008, "Wrong alignment on ABEntitlement_GetUserEntitlementOwnershipByAppId");
static_assert(sizeof(ABEntitlement_GetUserEntitlementOwnershipByAppId) == 0x000038, "Wrong size on ABEntitlement_GetUserEntitlementOwnershipByAppId");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipByAppId, AppId) == 0x000000, "Member 'ABEntitlement_GetUserEntitlementOwnershipByAppId::AppId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipByAppId, OnSuccess) == 0x000010, "Member 'ABEntitlement_GetUserEntitlementOwnershipByAppId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipByAppId, OnError) == 0x000024, "Member 'ABEntitlement_GetUserEntitlementOwnershipByAppId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipByItemId
// 0x0038 (0x0038 - 0x0000)
struct ABEntitlement_GetUserEntitlementOwnershipByItemId final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_GetUserEntitlementOwnershipByItemId) == 0x000008, "Wrong alignment on ABEntitlement_GetUserEntitlementOwnershipByItemId");
static_assert(sizeof(ABEntitlement_GetUserEntitlementOwnershipByItemId) == 0x000038, "Wrong size on ABEntitlement_GetUserEntitlementOwnershipByItemId");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipByItemId, ItemId) == 0x000000, "Member 'ABEntitlement_GetUserEntitlementOwnershipByItemId::ItemId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipByItemId, OnSuccess) == 0x000010, "Member 'ABEntitlement_GetUserEntitlementOwnershipByItemId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipByItemId, OnError) == 0x000024, "Member 'ABEntitlement_GetUserEntitlementOwnershipByItemId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.GetUserEntitlementOwnershipBySku
// 0x0038 (0x0038 - 0x0000)
struct ABEntitlement_GetUserEntitlementOwnershipBySku final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementOwnership& Response)> OnSuccess;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_GetUserEntitlementOwnershipBySku) == 0x000008, "Wrong alignment on ABEntitlement_GetUserEntitlementOwnershipBySku");
static_assert(sizeof(ABEntitlement_GetUserEntitlementOwnershipBySku) == 0x000038, "Wrong size on ABEntitlement_GetUserEntitlementOwnershipBySku");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipBySku, Sku) == 0x000000, "Member 'ABEntitlement_GetUserEntitlementOwnershipBySku::Sku' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipBySku, OnSuccess) == 0x000010, "Member 'ABEntitlement_GetUserEntitlementOwnershipBySku::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_GetUserEntitlementOwnershipBySku, OnError) == 0x000024, "Member 'ABEntitlement_GetUserEntitlementOwnershipBySku::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.QueryUserEntitlements
// 0x0058 (0x0058 - 0x0000)
struct ABEntitlement_QueryUserEntitlements final
{
public:
	class FString                                 EntitlementName;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0024(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Response)> OnSuccess; // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    EntitlementClass;                                  // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABEntitlement_QueryUserEntitlements) == 0x000008, "Wrong alignment on ABEntitlement_QueryUserEntitlements");
static_assert(sizeof(ABEntitlement_QueryUserEntitlements) == 0x000058, "Wrong size on ABEntitlement_QueryUserEntitlements");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, EntitlementName) == 0x000000, "Member 'ABEntitlement_QueryUserEntitlements::EntitlementName' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, ItemIds) == 0x000010, "Member 'ABEntitlement_QueryUserEntitlements::ItemIds' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, Offset) == 0x000020, "Member 'ABEntitlement_QueryUserEntitlements::Offset' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, Limit) == 0x000024, "Member 'ABEntitlement_QueryUserEntitlements::Limit' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, OnSuccess) == 0x000028, "Member 'ABEntitlement_QueryUserEntitlements::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, OnError) == 0x00003C, "Member 'ABEntitlement_QueryUserEntitlements::OnError' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, EntitlementClass) == 0x000050, "Member 'ABEntitlement_QueryUserEntitlements::EntitlementClass' has a wrong offset!");
static_assert(offsetof(ABEntitlement_QueryUserEntitlements, AppType) == 0x000051, "Member 'ABEntitlement_QueryUserEntitlements::AppType' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.SyncMobilePlatformPurchaseApple
// 0x0080 (0x0080 - 0x0000)
struct ABEntitlement_SyncMobilePlatformPurchaseApple final
{
public:
	struct FAccelByteModelsPlatformSyncMobileApple SyncRequest;                                      // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0058(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x006C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_SyncMobilePlatformPurchaseApple) == 0x000008, "Wrong alignment on ABEntitlement_SyncMobilePlatformPurchaseApple");
static_assert(sizeof(ABEntitlement_SyncMobilePlatformPurchaseApple) == 0x000080, "Wrong size on ABEntitlement_SyncMobilePlatformPurchaseApple");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseApple, SyncRequest) == 0x000000, "Member 'ABEntitlement_SyncMobilePlatformPurchaseApple::SyncRequest' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseApple, OnSuccess) == 0x000058, "Member 'ABEntitlement_SyncMobilePlatformPurchaseApple::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseApple, OnError) == 0x00006C, "Member 'ABEntitlement_SyncMobilePlatformPurchaseApple::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.SyncMobilePlatformPurchaseGoogle
// 0x0098 (0x0098 - 0x0000)
struct ABEntitlement_SyncMobilePlatformPurchaseGoogle final
{
public:
	struct FAccelByteModelsPlatformSyncMobileGoogle SyncRequest;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_SyncMobilePlatformPurchaseGoogle) == 0x000008, "Wrong alignment on ABEntitlement_SyncMobilePlatformPurchaseGoogle");
static_assert(sizeof(ABEntitlement_SyncMobilePlatformPurchaseGoogle) == 0x000098, "Wrong size on ABEntitlement_SyncMobilePlatformPurchaseGoogle");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseGoogle, SyncRequest) == 0x000000, "Member 'ABEntitlement_SyncMobilePlatformPurchaseGoogle::SyncRequest' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseGoogle, OnSuccess) == 0x000070, "Member 'ABEntitlement_SyncMobilePlatformPurchaseGoogle::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseGoogle, OnError) == 0x000084, "Member 'ABEntitlement_SyncMobilePlatformPurchaseGoogle::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.SyncMobilePlatformPurchaseGooglePlay
// 0x0098 (0x0098 - 0x0000)
struct ABEntitlement_SyncMobilePlatformPurchaseGooglePlay final
{
public:
	struct FAccelByteModelsPlatformSyncMobileGoogle SyncRequest;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPlatformSyncMobileGoogleResponse& Response)> OnSuccess; // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_SyncMobilePlatformPurchaseGooglePlay) == 0x000008, "Wrong alignment on ABEntitlement_SyncMobilePlatformPurchaseGooglePlay");
static_assert(sizeof(ABEntitlement_SyncMobilePlatformPurchaseGooglePlay) == 0x000098, "Wrong size on ABEntitlement_SyncMobilePlatformPurchaseGooglePlay");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseGooglePlay, SyncRequest) == 0x000000, "Member 'ABEntitlement_SyncMobilePlatformPurchaseGooglePlay::SyncRequest' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseGooglePlay, OnSuccess) == 0x000070, "Member 'ABEntitlement_SyncMobilePlatformPurchaseGooglePlay::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncMobilePlatformPurchaseGooglePlay, OnError) == 0x000084, "Member 'ABEntitlement_SyncMobilePlatformPurchaseGooglePlay::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.SyncPlatformPurchase
// 0x002C (0x002C - 0x0000)
struct ABEntitlement_SyncPlatformPurchase final
{
public:
	EAccelBytePlatformSync                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_SyncPlatformPurchase) == 0x000004, "Wrong alignment on ABEntitlement_SyncPlatformPurchase");
static_assert(sizeof(ABEntitlement_SyncPlatformPurchase) == 0x00002C, "Wrong size on ABEntitlement_SyncPlatformPurchase");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchase, PlatformType) == 0x000000, "Member 'ABEntitlement_SyncPlatformPurchase::PlatformType' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchase, OnSuccess) == 0x000004, "Member 'ABEntitlement_SyncPlatformPurchase::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchase, OnError) == 0x000018, "Member 'ABEntitlement_SyncPlatformPurchase::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.SyncPlatformPurchaseSingleItem
// 0x00A0 (0x00A0 - 0x0000)
struct ABEntitlement_SyncPlatformPurchaseSingleItem final
{
public:
	struct FAccelByteModelsEntitlementSyncBase    EntitlementSyncBase;                               // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
	EAccelBytePlatformSync                        PlatformType;                                      // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0074(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0088(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABEntitlement_SyncPlatformPurchaseSingleItem) == 0x000008, "Wrong alignment on ABEntitlement_SyncPlatformPurchaseSingleItem");
static_assert(sizeof(ABEntitlement_SyncPlatformPurchaseSingleItem) == 0x0000A0, "Wrong size on ABEntitlement_SyncPlatformPurchaseSingleItem");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchaseSingleItem, EntitlementSyncBase) == 0x000000, "Member 'ABEntitlement_SyncPlatformPurchaseSingleItem::EntitlementSyncBase' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchaseSingleItem, PlatformType) == 0x000070, "Member 'ABEntitlement_SyncPlatformPurchaseSingleItem::PlatformType' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchaseSingleItem, OnSuccess) == 0x000074, "Member 'ABEntitlement_SyncPlatformPurchaseSingleItem::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncPlatformPurchaseSingleItem, OnError) == 0x000088, "Member 'ABEntitlement_SyncPlatformPurchaseSingleItem::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.SyncTwitchDropEntitlement
// 0x0058 (0x0058 - 0x0000)
struct ABEntitlement_SyncTwitchDropEntitlement final
{
public:
	struct FAccelByteModelsTwitchDropEntitlement  TwitchDropModel;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_SyncTwitchDropEntitlement) == 0x000008, "Wrong alignment on ABEntitlement_SyncTwitchDropEntitlement");
static_assert(sizeof(ABEntitlement_SyncTwitchDropEntitlement) == 0x000058, "Wrong size on ABEntitlement_SyncTwitchDropEntitlement");
static_assert(offsetof(ABEntitlement_SyncTwitchDropEntitlement, TwitchDropModel) == 0x000000, "Member 'ABEntitlement_SyncTwitchDropEntitlement::TwitchDropModel' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncTwitchDropEntitlement, OnSuccess) == 0x000030, "Member 'ABEntitlement_SyncTwitchDropEntitlement::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_SyncTwitchDropEntitlement, OnError) == 0x000044, "Member 'ABEntitlement_SyncTwitchDropEntitlement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.UpdateDistributionReceiver
// 0x0078 (0x0078 - 0x0000)
struct ABEntitlement_UpdateDistributionReceiver final
{
public:
	class FString                                 ExtUserId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsAttributes             Attributes;                                        // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0050(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0064(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_UpdateDistributionReceiver) == 0x000008, "Wrong alignment on ABEntitlement_UpdateDistributionReceiver");
static_assert(sizeof(ABEntitlement_UpdateDistributionReceiver) == 0x000078, "Wrong size on ABEntitlement_UpdateDistributionReceiver");
static_assert(offsetof(ABEntitlement_UpdateDistributionReceiver, ExtUserId) == 0x000000, "Member 'ABEntitlement_UpdateDistributionReceiver::ExtUserId' has a wrong offset!");
static_assert(offsetof(ABEntitlement_UpdateDistributionReceiver, Attributes) == 0x000010, "Member 'ABEntitlement_UpdateDistributionReceiver::Attributes' has a wrong offset!");
static_assert(offsetof(ABEntitlement_UpdateDistributionReceiver, OnSuccess) == 0x000050, "Member 'ABEntitlement_UpdateDistributionReceiver::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_UpdateDistributionReceiver, OnError) == 0x000064, "Member 'ABEntitlement_UpdateDistributionReceiver::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABEntitlement.ValidateUserItemPurchaseCondition
// 0x0038 (0x0038 - 0x0000)
struct ABEntitlement_ValidateUserItemPurchaseCondition final
{
public:
	TArray<class FString>                         Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsPlatformValidateUserItemPurchaseResponse>& Response)> OnSuccess; // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABEntitlement_ValidateUserItemPurchaseCondition) == 0x000008, "Wrong alignment on ABEntitlement_ValidateUserItemPurchaseCondition");
static_assert(sizeof(ABEntitlement_ValidateUserItemPurchaseCondition) == 0x000038, "Wrong size on ABEntitlement_ValidateUserItemPurchaseCondition");
static_assert(offsetof(ABEntitlement_ValidateUserItemPurchaseCondition, Items) == 0x000000, "Member 'ABEntitlement_ValidateUserItemPurchaseCondition::Items' has a wrong offset!");
static_assert(offsetof(ABEntitlement_ValidateUserItemPurchaseCondition, OnSuccess) == 0x000010, "Member 'ABEntitlement_ValidateUserItemPurchaseCondition::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABEntitlement_ValidateUserItemPurchaseCondition, OnError) == 0x000024, "Member 'ABEntitlement_ValidateUserItemPurchaseCondition::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.AcceptFriend
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_AcceptFriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Response)> OnResponse;        // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_AcceptFriend) == 0x000008, "Wrong alignment on ABFriends_AcceptFriend");
static_assert(sizeof(ABFriends_AcceptFriend) == 0x000038, "Wrong size on ABFriends_AcceptFriend");
static_assert(offsetof(ABFriends_AcceptFriend, UserId) == 0x000000, "Member 'ABFriends_AcceptFriend::UserId' has a wrong offset!");
static_assert(offsetof(ABFriends_AcceptFriend, OnResponse) == 0x000010, "Member 'ABFriends_AcceptFriend::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_AcceptFriend, OnError) == 0x000024, "Member 'ABFriends_AcceptFriend::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.BulkFriendRequest
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_BulkFriendRequest final
{
public:
	struct FAccelByteModelsBulkFriendsRequest     UserIds;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_BulkFriendRequest) == 0x000008, "Wrong alignment on ABFriends_BulkFriendRequest");
static_assert(sizeof(ABFriends_BulkFriendRequest) == 0x000038, "Wrong size on ABFriends_BulkFriendRequest");
static_assert(offsetof(ABFriends_BulkFriendRequest, UserIds) == 0x000000, "Member 'ABFriends_BulkFriendRequest::UserIds' has a wrong offset!");
static_assert(offsetof(ABFriends_BulkFriendRequest, OnSuccess) == 0x000010, "Member 'ABFriends_BulkFriendRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABFriends_BulkFriendRequest, OnError) == 0x000024, "Member 'ABFriends_BulkFriendRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.CancelFriendRequest
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_CancelFriendRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Response)> OnResponse;        // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_CancelFriendRequest) == 0x000008, "Wrong alignment on ABFriends_CancelFriendRequest");
static_assert(sizeof(ABFriends_CancelFriendRequest) == 0x000038, "Wrong size on ABFriends_CancelFriendRequest");
static_assert(offsetof(ABFriends_CancelFriendRequest, UserId) == 0x000000, "Member 'ABFriends_CancelFriendRequest::UserId' has a wrong offset!");
static_assert(offsetof(ABFriends_CancelFriendRequest, OnResponse) == 0x000010, "Member 'ABFriends_CancelFriendRequest::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_CancelFriendRequest, OnError) == 0x000024, "Member 'ABFriends_CancelFriendRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.GetFriendshipStatus
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_GetFriendshipStatus final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Response)> OnResponse;  // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_GetFriendshipStatus) == 0x000008, "Wrong alignment on ABFriends_GetFriendshipStatus");
static_assert(sizeof(ABFriends_GetFriendshipStatus) == 0x000038, "Wrong size on ABFriends_GetFriendshipStatus");
static_assert(offsetof(ABFriends_GetFriendshipStatus, UserId) == 0x000000, "Member 'ABFriends_GetFriendshipStatus::UserId' has a wrong offset!");
static_assert(offsetof(ABFriends_GetFriendshipStatus, OnResponse) == 0x000010, "Member 'ABFriends_GetFriendshipStatus::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_GetFriendshipStatus, OnError) == 0x000024, "Member 'ABFriends_GetFriendshipStatus::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.ListIncomingFriends
// 0x0028 (0x0028 - 0x0000)
struct ABFriends_ListIncomingFriends final
{
public:
	TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Response)> OnResponse;  // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_ListIncomingFriends) == 0x000004, "Wrong alignment on ABFriends_ListIncomingFriends");
static_assert(sizeof(ABFriends_ListIncomingFriends) == 0x000028, "Wrong size on ABFriends_ListIncomingFriends");
static_assert(offsetof(ABFriends_ListIncomingFriends, OnResponse) == 0x000000, "Member 'ABFriends_ListIncomingFriends::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_ListIncomingFriends, OnError) == 0x000014, "Member 'ABFriends_ListIncomingFriends::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.ListOutgoingFriends
// 0x0028 (0x0028 - 0x0000)
struct ABFriends_ListOutgoingFriends final
{
public:
	TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Response)> OnResponse;  // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_ListOutgoingFriends) == 0x000004, "Wrong alignment on ABFriends_ListOutgoingFriends");
static_assert(sizeof(ABFriends_ListOutgoingFriends) == 0x000028, "Wrong size on ABFriends_ListOutgoingFriends");
static_assert(offsetof(ABFriends_ListOutgoingFriends, OnResponse) == 0x000000, "Member 'ABFriends_ListOutgoingFriends::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_ListOutgoingFriends, OnError) == 0x000014, "Member 'ABFriends_ListOutgoingFriends::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.LoadFriendsList
// 0x0028 (0x0028 - 0x0000)
struct ABFriends_LoadFriendsList final
{
public:
	TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Response)> OnResponse;       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_LoadFriendsList) == 0x000004, "Wrong alignment on ABFriends_LoadFriendsList");
static_assert(sizeof(ABFriends_LoadFriendsList) == 0x000028, "Wrong size on ABFriends_LoadFriendsList");
static_assert(offsetof(ABFriends_LoadFriendsList, OnResponse) == 0x000000, "Member 'ABFriends_LoadFriendsList::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_LoadFriendsList, OnError) == 0x000014, "Member 'ABFriends_LoadFriendsList::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.RejectFriend
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_RejectFriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Response)> OnResponse;        // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_RejectFriend) == 0x000008, "Wrong alignment on ABFriends_RejectFriend");
static_assert(sizeof(ABFriends_RejectFriend) == 0x000038, "Wrong size on ABFriends_RejectFriend");
static_assert(offsetof(ABFriends_RejectFriend, UserId) == 0x000000, "Member 'ABFriends_RejectFriend::UserId' has a wrong offset!");
static_assert(offsetof(ABFriends_RejectFriend, OnResponse) == 0x000010, "Member 'ABFriends_RejectFriend::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_RejectFriend, OnError) == 0x000024, "Member 'ABFriends_RejectFriend::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.RequestFriend
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_RequestFriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Response)> OnResponse;       // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_RequestFriend) == 0x000008, "Wrong alignment on ABFriends_RequestFriend");
static_assert(sizeof(ABFriends_RequestFriend) == 0x000038, "Wrong size on ABFriends_RequestFriend");
static_assert(offsetof(ABFriends_RequestFriend, UserId) == 0x000000, "Member 'ABFriends_RequestFriend::UserId' has a wrong offset!");
static_assert(offsetof(ABFriends_RequestFriend, OnResponse) == 0x000010, "Member 'ABFriends_RequestFriend::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_RequestFriend, OnError) == 0x000024, "Member 'ABFriends_RequestFriend::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.SetOnCancelFriendsNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABFriends_SetOnCancelFriendsNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsCancelFriendsNotif& Notif)> OnNotif;                 // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_SetOnCancelFriendsNotifDelegate) == 0x000004, "Wrong alignment on ABFriends_SetOnCancelFriendsNotifDelegate");
static_assert(sizeof(ABFriends_SetOnCancelFriendsNotifDelegate) == 0x000014, "Wrong size on ABFriends_SetOnCancelFriendsNotifDelegate");
static_assert(offsetof(ABFriends_SetOnCancelFriendsNotifDelegate, OnNotif) == 0x000000, "Member 'ABFriends_SetOnCancelFriendsNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.SetOnFriendRequestAcceptedNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABFriends_SetOnFriendRequestAcceptedNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Notif)> OnNotif;                 // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_SetOnFriendRequestAcceptedNotifDelegate) == 0x000004, "Wrong alignment on ABFriends_SetOnFriendRequestAcceptedNotifDelegate");
static_assert(sizeof(ABFriends_SetOnFriendRequestAcceptedNotifDelegate) == 0x000014, "Wrong size on ABFriends_SetOnFriendRequestAcceptedNotifDelegate");
static_assert(offsetof(ABFriends_SetOnFriendRequestAcceptedNotifDelegate, OnNotif) == 0x000000, "Member 'ABFriends_SetOnFriendRequestAcceptedNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.SetOnIncomingRequestFriendsNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABFriends_SetOnIncomingRequestFriendsNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Notif)> OnNotif;                // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_SetOnIncomingRequestFriendsNotifDelegate) == 0x000004, "Wrong alignment on ABFriends_SetOnIncomingRequestFriendsNotifDelegate");
static_assert(sizeof(ABFriends_SetOnIncomingRequestFriendsNotifDelegate) == 0x000014, "Wrong size on ABFriends_SetOnIncomingRequestFriendsNotifDelegate");
static_assert(offsetof(ABFriends_SetOnIncomingRequestFriendsNotifDelegate, OnNotif) == 0x000000, "Member 'ABFriends_SetOnIncomingRequestFriendsNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.SetOnRejectFriendsNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABFriends_SetOnRejectFriendsNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRejectFriendsNotif& Notif)> OnNotif;                 // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_SetOnRejectFriendsNotifDelegate) == 0x000004, "Wrong alignment on ABFriends_SetOnRejectFriendsNotifDelegate");
static_assert(sizeof(ABFriends_SetOnRejectFriendsNotifDelegate) == 0x000014, "Wrong size on ABFriends_SetOnRejectFriendsNotifDelegate");
static_assert(offsetof(ABFriends_SetOnRejectFriendsNotifDelegate, OnNotif) == 0x000000, "Member 'ABFriends_SetOnRejectFriendsNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.SetOnUnfriendNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABFriends_SetOnUnfriendNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsUnfriendNotif& Notif)> OnNotif;                      // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_SetOnUnfriendNotifDelegate) == 0x000004, "Wrong alignment on ABFriends_SetOnUnfriendNotifDelegate");
static_assert(sizeof(ABFriends_SetOnUnfriendNotifDelegate) == 0x000014, "Wrong size on ABFriends_SetOnUnfriendNotifDelegate");
static_assert(offsetof(ABFriends_SetOnUnfriendNotifDelegate, OnNotif) == 0x000000, "Member 'ABFriends_SetOnUnfriendNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFriends.Unfriend
// 0x0038 (0x0038 - 0x0000)
struct ABFriends_Unfriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Response)> OnResponse;             // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFriends_Unfriend) == 0x000008, "Wrong alignment on ABFriends_Unfriend");
static_assert(sizeof(ABFriends_Unfriend) == 0x000038, "Wrong size on ABFriends_Unfriend");
static_assert(offsetof(ABFriends_Unfriend, UserId) == 0x000000, "Member 'ABFriends_Unfriend::UserId' has a wrong offset!");
static_assert(offsetof(ABFriends_Unfriend, OnResponse) == 0x000010, "Member 'ABFriends_Unfriend::OnResponse' has a wrong offset!");
static_assert(offsetof(ABFriends_Unfriend, OnError) == 0x000024, "Member 'ABFriends_Unfriend::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABFulfillment.RedeemCode
// 0x0058 (0x0058 - 0x0000)
struct ABFulfillment_RedeemCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsFulfillmentResult& Response)> OnSuccess;             // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABFulfillment_RedeemCode) == 0x000008, "Wrong alignment on ABFulfillment_RedeemCode");
static_assert(sizeof(ABFulfillment_RedeemCode) == 0x000058, "Wrong size on ABFulfillment_RedeemCode");
static_assert(offsetof(ABFulfillment_RedeemCode, Code) == 0x000000, "Member 'ABFulfillment_RedeemCode::Code' has a wrong offset!");
static_assert(offsetof(ABFulfillment_RedeemCode, Region) == 0x000010, "Member 'ABFulfillment_RedeemCode::Region' has a wrong offset!");
static_assert(offsetof(ABFulfillment_RedeemCode, Language) == 0x000020, "Member 'ABFulfillment_RedeemCode::Language' has a wrong offset!");
static_assert(offsetof(ABFulfillment_RedeemCode, OnSuccess) == 0x000030, "Member 'ABFulfillment_RedeemCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABFulfillment_RedeemCode, OnError) == 0x000044, "Member 'ABFulfillment_RedeemCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.AcceptGroupInvitation
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_AcceptGroupInvitation final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_AcceptGroupInvitation) == 0x000008, "Wrong alignment on ABGroup_AcceptGroupInvitation");
static_assert(sizeof(ABGroup_AcceptGroupInvitation) == 0x000038, "Wrong size on ABGroup_AcceptGroupInvitation");
static_assert(offsetof(ABGroup_AcceptGroupInvitation, GroupId) == 0x000000, "Member 'ABGroup_AcceptGroupInvitation::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptGroupInvitation, OnSuccess) == 0x000010, "Member 'ABGroup_AcceptGroupInvitation::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptGroupInvitation, OnError) == 0x000024, "Member 'ABGroup_AcceptGroupInvitation::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.AcceptGroupJoinRequest
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_AcceptGroupJoinRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_AcceptGroupJoinRequest) == 0x000008, "Wrong alignment on ABGroup_AcceptGroupJoinRequest");
static_assert(sizeof(ABGroup_AcceptGroupJoinRequest) == 0x000038, "Wrong size on ABGroup_AcceptGroupJoinRequest");
static_assert(offsetof(ABGroup_AcceptGroupJoinRequest, UserId) == 0x000000, "Member 'ABGroup_AcceptGroupJoinRequest::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptGroupJoinRequest, OnSuccess) == 0x000010, "Member 'ABGroup_AcceptGroupJoinRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptGroupJoinRequest, OnError) == 0x000024, "Member 'ABGroup_AcceptGroupJoinRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.AcceptV2GroupInvitation
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_AcceptV2GroupInvitation final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_AcceptV2GroupInvitation) == 0x000008, "Wrong alignment on ABGroup_AcceptV2GroupInvitation");
static_assert(sizeof(ABGroup_AcceptV2GroupInvitation) == 0x000038, "Wrong size on ABGroup_AcceptV2GroupInvitation");
static_assert(offsetof(ABGroup_AcceptV2GroupInvitation, GroupId) == 0x000000, "Member 'ABGroup_AcceptV2GroupInvitation::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptV2GroupInvitation, OnSuccess) == 0x000010, "Member 'ABGroup_AcceptV2GroupInvitation::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptV2GroupInvitation, OnError) == 0x000024, "Member 'ABGroup_AcceptV2GroupInvitation::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.AcceptV2GroupJoinRequest
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_AcceptV2GroupJoinRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_AcceptV2GroupJoinRequest) == 0x000008, "Wrong alignment on ABGroup_AcceptV2GroupJoinRequest");
static_assert(sizeof(ABGroup_AcceptV2GroupJoinRequest) == 0x000048, "Wrong size on ABGroup_AcceptV2GroupJoinRequest");
static_assert(offsetof(ABGroup_AcceptV2GroupJoinRequest, UserId) == 0x000000, "Member 'ABGroup_AcceptV2GroupJoinRequest::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptV2GroupJoinRequest, GroupId) == 0x000010, "Member 'ABGroup_AcceptV2GroupJoinRequest::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptV2GroupJoinRequest, OnSuccess) == 0x000020, "Member 'ABGroup_AcceptV2GroupJoinRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_AcceptV2GroupJoinRequest, OnError) == 0x000034, "Member 'ABGroup_AcceptV2GroupJoinRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.AssignMemberRole
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_AssignMemberRole final
{
public:
	class FString                                 MemberRoleId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdWrapper          RequestContent;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)> OnSuccess;      // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_AssignMemberRole) == 0x000008, "Wrong alignment on ABGroup_AssignMemberRole");
static_assert(sizeof(ABGroup_AssignMemberRole) == 0x000048, "Wrong size on ABGroup_AssignMemberRole");
static_assert(offsetof(ABGroup_AssignMemberRole, MemberRoleId) == 0x000000, "Member 'ABGroup_AssignMemberRole::MemberRoleId' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignMemberRole, RequestContent) == 0x000010, "Member 'ABGroup_AssignMemberRole::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignMemberRole, OnSuccess) == 0x000020, "Member 'ABGroup_AssignMemberRole::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignMemberRole, OnError) == 0x000034, "Member 'ABGroup_AssignMemberRole::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.AssignV2MemberRole
// 0x0058 (0x0058 - 0x0000)
struct ABGroup_AssignV2MemberRole final
{
public:
	class FString                                 MemberRoleId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdWrapper          RequestContent;                                    // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)> OnSuccess;      // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_AssignV2MemberRole) == 0x000008, "Wrong alignment on ABGroup_AssignV2MemberRole");
static_assert(sizeof(ABGroup_AssignV2MemberRole) == 0x000058, "Wrong size on ABGroup_AssignV2MemberRole");
static_assert(offsetof(ABGroup_AssignV2MemberRole, MemberRoleId) == 0x000000, "Member 'ABGroup_AssignV2MemberRole::MemberRoleId' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignV2MemberRole, GroupId) == 0x000010, "Member 'ABGroup_AssignV2MemberRole::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignV2MemberRole, RequestContent) == 0x000020, "Member 'ABGroup_AssignV2MemberRole::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignV2MemberRole, OnSuccess) == 0x000030, "Member 'ABGroup_AssignV2MemberRole::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_AssignV2MemberRole, OnError) == 0x000044, "Member 'ABGroup_AssignV2MemberRole::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.CancelGroupMemberInvitation
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_CancelGroupMemberInvitation final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_CancelGroupMemberInvitation) == 0x000008, "Wrong alignment on ABGroup_CancelGroupMemberInvitation");
static_assert(sizeof(ABGroup_CancelGroupMemberInvitation) == 0x000048, "Wrong size on ABGroup_CancelGroupMemberInvitation");
static_assert(offsetof(ABGroup_CancelGroupMemberInvitation, UserId) == 0x000000, "Member 'ABGroup_CancelGroupMemberInvitation::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_CancelGroupMemberInvitation, GroupId) == 0x000010, "Member 'ABGroup_CancelGroupMemberInvitation::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_CancelGroupMemberInvitation, OnSuccess) == 0x000020, "Member 'ABGroup_CancelGroupMemberInvitation::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_CancelGroupMemberInvitation, OnError) == 0x000034, "Member 'ABGroup_CancelGroupMemberInvitation::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.CancelJoinGroupRequest
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_CancelJoinGroupRequest final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_CancelJoinGroupRequest) == 0x000008, "Wrong alignment on ABGroup_CancelJoinGroupRequest");
static_assert(sizeof(ABGroup_CancelJoinGroupRequest) == 0x000038, "Wrong size on ABGroup_CancelJoinGroupRequest");
static_assert(offsetof(ABGroup_CancelJoinGroupRequest, GroupId) == 0x000000, "Member 'ABGroup_CancelJoinGroupRequest::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_CancelJoinGroupRequest, OnSuccess) == 0x000010, "Member 'ABGroup_CancelJoinGroupRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_CancelJoinGroupRequest, OnError) == 0x000024, "Member 'ABGroup_CancelJoinGroupRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.CreateGroup
// 0x00D8 (0x00D8 - 0x0000)
struct ABGroup_CreateGroup final
{
public:
	struct FAccelByteModelsCreateGroupRequest     RequestContent;                                    // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x00B0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00C4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_CreateGroup) == 0x000008, "Wrong alignment on ABGroup_CreateGroup");
static_assert(sizeof(ABGroup_CreateGroup) == 0x0000D8, "Wrong size on ABGroup_CreateGroup");
static_assert(offsetof(ABGroup_CreateGroup, RequestContent) == 0x000000, "Member 'ABGroup_CreateGroup::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_CreateGroup, OnSuccess) == 0x0000B0, "Member 'ABGroup_CreateGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_CreateGroup, OnError) == 0x0000C4, "Member 'ABGroup_CreateGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.CreateV2Group
// 0x00D8 (0x00D8 - 0x0000)
struct ABGroup_CreateV2Group final
{
public:
	struct FAccelByteModelsCreateGroupRequest     RequestContent;                                    // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x00B0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00C4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_CreateV2Group) == 0x000008, "Wrong alignment on ABGroup_CreateV2Group");
static_assert(sizeof(ABGroup_CreateV2Group) == 0x0000D8, "Wrong size on ABGroup_CreateV2Group");
static_assert(offsetof(ABGroup_CreateV2Group, RequestContent) == 0x000000, "Member 'ABGroup_CreateV2Group::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_CreateV2Group, OnSuccess) == 0x0000B0, "Member 'ABGroup_CreateV2Group::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_CreateV2Group, OnError) == 0x0000C4, "Member 'ABGroup_CreateV2Group::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.DeleteGroup
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_DeleteGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_DeleteGroup) == 0x000008, "Wrong alignment on ABGroup_DeleteGroup");
static_assert(sizeof(ABGroup_DeleteGroup) == 0x000038, "Wrong size on ABGroup_DeleteGroup");
static_assert(offsetof(ABGroup_DeleteGroup, GroupId) == 0x000000, "Member 'ABGroup_DeleteGroup::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteGroup, OnSuccess) == 0x000010, "Member 'ABGroup_DeleteGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteGroup, OnError) == 0x000024, "Member 'ABGroup_DeleteGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.DeleteGroupPredefinedRule
// 0x0040 (0x0040 - 0x0000)
struct ABGroup_DeleteGroupPredefinedRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABGroup_DeleteGroupPredefinedRule) == 0x000008, "Wrong alignment on ABGroup_DeleteGroupPredefinedRule");
static_assert(sizeof(ABGroup_DeleteGroupPredefinedRule) == 0x000040, "Wrong size on ABGroup_DeleteGroupPredefinedRule");
static_assert(offsetof(ABGroup_DeleteGroupPredefinedRule, GroupId) == 0x000000, "Member 'ABGroup_DeleteGroupPredefinedRule::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteGroupPredefinedRule, AllowedAction) == 0x000010, "Member 'ABGroup_DeleteGroupPredefinedRule::AllowedAction' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteGroupPredefinedRule, OnSuccess) == 0x000014, "Member 'ABGroup_DeleteGroupPredefinedRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteGroupPredefinedRule, OnError) == 0x000028, "Member 'ABGroup_DeleteGroupPredefinedRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.DeleteMemberRole
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_DeleteMemberRole final
{
public:
	class FString                                 MemberRoleId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdWrapper          RequestContent;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_DeleteMemberRole) == 0x000008, "Wrong alignment on ABGroup_DeleteMemberRole");
static_assert(sizeof(ABGroup_DeleteMemberRole) == 0x000048, "Wrong size on ABGroup_DeleteMemberRole");
static_assert(offsetof(ABGroup_DeleteMemberRole, MemberRoleId) == 0x000000, "Member 'ABGroup_DeleteMemberRole::MemberRoleId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteMemberRole, RequestContent) == 0x000010, "Member 'ABGroup_DeleteMemberRole::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteMemberRole, OnSuccess) == 0x000020, "Member 'ABGroup_DeleteMemberRole::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteMemberRole, OnError) == 0x000034, "Member 'ABGroup_DeleteMemberRole::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.DeleteV2Group
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_DeleteV2Group final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_DeleteV2Group) == 0x000008, "Wrong alignment on ABGroup_DeleteV2Group");
static_assert(sizeof(ABGroup_DeleteV2Group) == 0x000038, "Wrong size on ABGroup_DeleteV2Group");
static_assert(offsetof(ABGroup_DeleteV2Group, GroupId) == 0x000000, "Member 'ABGroup_DeleteV2Group::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2Group, OnSuccess) == 0x000010, "Member 'ABGroup_DeleteV2Group::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2Group, OnError) == 0x000024, "Member 'ABGroup_DeleteV2Group::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.DeleteV2GroupPredefinedRule
// 0x0040 (0x0040 - 0x0000)
struct ABGroup_DeleteV2GroupPredefinedRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABGroup_DeleteV2GroupPredefinedRule) == 0x000008, "Wrong alignment on ABGroup_DeleteV2GroupPredefinedRule");
static_assert(sizeof(ABGroup_DeleteV2GroupPredefinedRule) == 0x000040, "Wrong size on ABGroup_DeleteV2GroupPredefinedRule");
static_assert(offsetof(ABGroup_DeleteV2GroupPredefinedRule, GroupId) == 0x000000, "Member 'ABGroup_DeleteV2GroupPredefinedRule::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2GroupPredefinedRule, AllowedAction) == 0x000010, "Member 'ABGroup_DeleteV2GroupPredefinedRule::AllowedAction' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2GroupPredefinedRule, OnSuccess) == 0x000014, "Member 'ABGroup_DeleteV2GroupPredefinedRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2GroupPredefinedRule, OnError) == 0x000028, "Member 'ABGroup_DeleteV2GroupPredefinedRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.DeleteV2MemberRole
// 0x0058 (0x0058 - 0x0000)
struct ABGroup_DeleteV2MemberRole final
{
public:
	class FString                                 MemberRoleId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdWrapper          RequestContent;                                    // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_DeleteV2MemberRole) == 0x000008, "Wrong alignment on ABGroup_DeleteV2MemberRole");
static_assert(sizeof(ABGroup_DeleteV2MemberRole) == 0x000058, "Wrong size on ABGroup_DeleteV2MemberRole");
static_assert(offsetof(ABGroup_DeleteV2MemberRole, MemberRoleId) == 0x000000, "Member 'ABGroup_DeleteV2MemberRole::MemberRoleId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2MemberRole, GroupId) == 0x000010, "Member 'ABGroup_DeleteV2MemberRole::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2MemberRole, RequestContent) == 0x000020, "Member 'ABGroup_DeleteV2MemberRole::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2MemberRole, OnSuccess) == 0x000030, "Member 'ABGroup_DeleteV2MemberRole::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_DeleteV2MemberRole, OnError) == 0x000044, "Member 'ABGroup_DeleteV2MemberRole::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetAllMemberRoles
// 0x0030 (0x0030 - 0x0000)
struct ABGroup_GetAllMemberRoles final
{
public:
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)> OnSuccess;    // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetAllMemberRoles) == 0x000004, "Wrong alignment on ABGroup_GetAllMemberRoles");
static_assert(sizeof(ABGroup_GetAllMemberRoles) == 0x000030, "Wrong size on ABGroup_GetAllMemberRoles");
static_assert(offsetof(ABGroup_GetAllMemberRoles, RequestContent) == 0x000000, "Member 'ABGroup_GetAllMemberRoles::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetAllMemberRoles, OnSuccess) == 0x000008, "Member 'ABGroup_GetAllMemberRoles::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetAllMemberRoles, OnError) == 0x00001C, "Member 'ABGroup_GetAllMemberRoles::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroup
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_GetGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetGroup) == 0x000008, "Wrong alignment on ABGroup_GetGroup");
static_assert(sizeof(ABGroup_GetGroup) == 0x000038, "Wrong size on ABGroup_GetGroup");
static_assert(offsetof(ABGroup_GetGroup, GroupId) == 0x000000, "Member 'ABGroup_GetGroup::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroup, OnSuccess) == 0x000010, "Member 'ABGroup_GetGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroup, OnError) == 0x000024, "Member 'ABGroup_GetGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroupInviteRequestList
// 0x0040 (0x0040 - 0x0000)
struct ABGroup_GetGroupInviteRequestList final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)> OnSuccess; // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetGroupInviteRequestList) == 0x000008, "Wrong alignment on ABGroup_GetGroupInviteRequestList");
static_assert(sizeof(ABGroup_GetGroupInviteRequestList) == 0x000040, "Wrong size on ABGroup_GetGroupInviteRequestList");
static_assert(offsetof(ABGroup_GetGroupInviteRequestList, GroupId) == 0x000000, "Member 'ABGroup_GetGroupInviteRequestList::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupInviteRequestList, RequestContent) == 0x000010, "Member 'ABGroup_GetGroupInviteRequestList::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupInviteRequestList, OnSuccess) == 0x000018, "Member 'ABGroup_GetGroupInviteRequestList::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupInviteRequestList, OnError) == 0x00002C, "Member 'ABGroup_GetGroupInviteRequestList::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroupJoinRequestList
// 0x0040 (0x0040 - 0x0000)
struct ABGroup_GetGroupJoinRequestList final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)> OnSuccess; // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetGroupJoinRequestList) == 0x000008, "Wrong alignment on ABGroup_GetGroupJoinRequestList");
static_assert(sizeof(ABGroup_GetGroupJoinRequestList) == 0x000040, "Wrong size on ABGroup_GetGroupJoinRequestList");
static_assert(offsetof(ABGroup_GetGroupJoinRequestList, GroupId) == 0x000000, "Member 'ABGroup_GetGroupJoinRequestList::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupJoinRequestList, RequestContent) == 0x000010, "Member 'ABGroup_GetGroupJoinRequestList::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupJoinRequestList, OnSuccess) == 0x000018, "Member 'ABGroup_GetGroupJoinRequestList::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupJoinRequestList, OnError) == 0x00002C, "Member 'ABGroup_GetGroupJoinRequestList::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroupJoinRequests
// 0x0040 (0x0040 - 0x0000)
struct ABGroup_GetGroupJoinRequests final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)> OnSuccess; // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetGroupJoinRequests) == 0x000008, "Wrong alignment on ABGroup_GetGroupJoinRequests");
static_assert(sizeof(ABGroup_GetGroupJoinRequests) == 0x000040, "Wrong size on ABGroup_GetGroupJoinRequests");
static_assert(offsetof(ABGroup_GetGroupJoinRequests, GroupId) == 0x000000, "Member 'ABGroup_GetGroupJoinRequests::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupJoinRequests, RequestContent) == 0x000010, "Member 'ABGroup_GetGroupJoinRequests::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupJoinRequests, OnSuccess) == 0x000018, "Member 'ABGroup_GetGroupJoinRequests::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupJoinRequests, OnError) == 0x00002C, "Member 'ABGroup_GetGroupJoinRequests::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroupList
// 0x0050 (0x0050 - 0x0000)
struct ABGroup_GetGroupList final
{
public:
	struct FAccelByteModelsGetGroupListRequest    RequestContent;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)> OnSuccess;          // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetGroupList) == 0x000008, "Wrong alignment on ABGroup_GetGroupList");
static_assert(sizeof(ABGroup_GetGroupList) == 0x000050, "Wrong size on ABGroup_GetGroupList");
static_assert(offsetof(ABGroup_GetGroupList, RequestContent) == 0x000000, "Member 'ABGroup_GetGroupList::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupList, OnSuccess) == 0x000028, "Member 'ABGroup_GetGroupList::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupList, OnError) == 0x00003C, "Member 'ABGroup_GetGroupList::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroupMembersListByGroupId
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_GetGroupMembersListByGroupId final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsGetGroupMembersListByGroupIdRequest RequestContent;                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)> OnSuccess;    // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABGroup_GetGroupMembersListByGroupId) == 0x000008, "Wrong alignment on ABGroup_GetGroupMembersListByGroupId");
static_assert(sizeof(ABGroup_GetGroupMembersListByGroupId) == 0x000048, "Wrong size on ABGroup_GetGroupMembersListByGroupId");
static_assert(offsetof(ABGroup_GetGroupMembersListByGroupId, GroupId) == 0x000000, "Member 'ABGroup_GetGroupMembersListByGroupId::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupMembersListByGroupId, RequestContent) == 0x000010, "Member 'ABGroup_GetGroupMembersListByGroupId::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupMembersListByGroupId, OnSuccess) == 0x00001C, "Member 'ABGroup_GetGroupMembersListByGroupId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupMembersListByGroupId, OnError) == 0x000030, "Member 'ABGroup_GetGroupMembersListByGroupId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetGroupsByGroupIds
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_GetGroupsByGroupIds final
{
public:
	TArray<class FString>                         GroupIds;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Response)> OnSuccess;          // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetGroupsByGroupIds) == 0x000008, "Wrong alignment on ABGroup_GetGroupsByGroupIds");
static_assert(sizeof(ABGroup_GetGroupsByGroupIds) == 0x000038, "Wrong size on ABGroup_GetGroupsByGroupIds");
static_assert(offsetof(ABGroup_GetGroupsByGroupIds, GroupIds) == 0x000000, "Member 'ABGroup_GetGroupsByGroupIds::GroupIds' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupsByGroupIds, OnSuccess) == 0x000010, "Member 'ABGroup_GetGroupsByGroupIds::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetGroupsByGroupIds, OnError) == 0x000024, "Member 'ABGroup_GetGroupsByGroupIds::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetMemberRoles
// 0x0030 (0x0030 - 0x0000)
struct ABGroup_GetMemberRoles final
{
public:
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetMemberRolesListResponse& Response)> OnSuccess;    // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetMemberRoles) == 0x000004, "Wrong alignment on ABGroup_GetMemberRoles");
static_assert(sizeof(ABGroup_GetMemberRoles) == 0x000030, "Wrong size on ABGroup_GetMemberRoles");
static_assert(offsetof(ABGroup_GetMemberRoles, RequestContent) == 0x000000, "Member 'ABGroup_GetMemberRoles::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetMemberRoles, OnSuccess) == 0x000008, "Member 'ABGroup_GetMemberRoles::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetMemberRoles, OnError) == 0x00001C, "Member 'ABGroup_GetMemberRoles::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetMyJoinedGroupInfo
// 0x0030 (0x0030 - 0x0000)
struct ABGroup_GetMyJoinedGroupInfo final
{
public:
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetGroupMemberListResponse& Response)> OnSuccess;    // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetMyJoinedGroupInfo) == 0x000004, "Wrong alignment on ABGroup_GetMyJoinedGroupInfo");
static_assert(sizeof(ABGroup_GetMyJoinedGroupInfo) == 0x000030, "Wrong size on ABGroup_GetMyJoinedGroupInfo");
static_assert(offsetof(ABGroup_GetMyJoinedGroupInfo, RequestContent) == 0x000000, "Member 'ABGroup_GetMyJoinedGroupInfo::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetMyJoinedGroupInfo, OnSuccess) == 0x000008, "Member 'ABGroup_GetMyJoinedGroupInfo::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetMyJoinedGroupInfo, OnError) == 0x00001C, "Member 'ABGroup_GetMyJoinedGroupInfo::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetMyJoinGroupRequest
// 0x0030 (0x0030 - 0x0000)
struct ABGroup_GetMyJoinGroupRequest final
{
public:
	struct FAccelByteModelsLimitOffsetRequest     RequestContent;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetMemberRequestsListResponse& Response)> OnSuccess; // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetMyJoinGroupRequest) == 0x000004, "Wrong alignment on ABGroup_GetMyJoinGroupRequest");
static_assert(sizeof(ABGroup_GetMyJoinGroupRequest) == 0x000030, "Wrong size on ABGroup_GetMyJoinGroupRequest");
static_assert(offsetof(ABGroup_GetMyJoinGroupRequest, RequestContent) == 0x000000, "Member 'ABGroup_GetMyJoinGroupRequest::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_GetMyJoinGroupRequest, OnSuccess) == 0x000008, "Member 'ABGroup_GetMyJoinGroupRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetMyJoinGroupRequest, OnError) == 0x00001C, "Member 'ABGroup_GetMyJoinGroupRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetUserGroupInfoByUserId
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_GetUserGroupInfoByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)> OnSuccess;      // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetUserGroupInfoByUserId) == 0x000008, "Wrong alignment on ABGroup_GetUserGroupInfoByUserId");
static_assert(sizeof(ABGroup_GetUserGroupInfoByUserId) == 0x000038, "Wrong size on ABGroup_GetUserGroupInfoByUserId");
static_assert(offsetof(ABGroup_GetUserGroupInfoByUserId, UserId) == 0x000000, "Member 'ABGroup_GetUserGroupInfoByUserId::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetUserGroupInfoByUserId, OnSuccess) == 0x000010, "Member 'ABGroup_GetUserGroupInfoByUserId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetUserGroupInfoByUserId, OnError) == 0x000024, "Member 'ABGroup_GetUserGroupInfoByUserId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.GetUserGroupStatusInfo
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_GetUserGroupStatusInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetUserGroupInfoResponse& Response)> OnSuccess;      // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_GetUserGroupStatusInfo) == 0x000008, "Wrong alignment on ABGroup_GetUserGroupStatusInfo");
static_assert(sizeof(ABGroup_GetUserGroupStatusInfo) == 0x000048, "Wrong size on ABGroup_GetUserGroupStatusInfo");
static_assert(offsetof(ABGroup_GetUserGroupStatusInfo, UserId) == 0x000000, "Member 'ABGroup_GetUserGroupStatusInfo::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetUserGroupStatusInfo, GroupId) == 0x000010, "Member 'ABGroup_GetUserGroupStatusInfo::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_GetUserGroupStatusInfo, OnSuccess) == 0x000020, "Member 'ABGroup_GetUserGroupStatusInfo::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_GetUserGroupStatusInfo, OnError) == 0x000034, "Member 'ABGroup_GetUserGroupStatusInfo::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.InviteUserToGroup
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_InviteUserToGroup final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_InviteUserToGroup) == 0x000008, "Wrong alignment on ABGroup_InviteUserToGroup");
static_assert(sizeof(ABGroup_InviteUserToGroup) == 0x000038, "Wrong size on ABGroup_InviteUserToGroup");
static_assert(offsetof(ABGroup_InviteUserToGroup, UserId) == 0x000000, "Member 'ABGroup_InviteUserToGroup::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_InviteUserToGroup, OnSuccess) == 0x000010, "Member 'ABGroup_InviteUserToGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_InviteUserToGroup, OnError) == 0x000024, "Member 'ABGroup_InviteUserToGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.InviteUserToV2Group
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_InviteUserToV2Group final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_InviteUserToV2Group) == 0x000008, "Wrong alignment on ABGroup_InviteUserToV2Group");
static_assert(sizeof(ABGroup_InviteUserToV2Group) == 0x000048, "Wrong size on ABGroup_InviteUserToV2Group");
static_assert(offsetof(ABGroup_InviteUserToV2Group, UserId) == 0x000000, "Member 'ABGroup_InviteUserToV2Group::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_InviteUserToV2Group, GroupId) == 0x000010, "Member 'ABGroup_InviteUserToV2Group::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_InviteUserToV2Group, OnSuccess) == 0x000020, "Member 'ABGroup_InviteUserToV2Group::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_InviteUserToV2Group, OnError) == 0x000034, "Member 'ABGroup_InviteUserToV2Group::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.JoinGroup
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_JoinGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)> OnSuccess;             // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_JoinGroup) == 0x000008, "Wrong alignment on ABGroup_JoinGroup");
static_assert(sizeof(ABGroup_JoinGroup) == 0x000038, "Wrong size on ABGroup_JoinGroup");
static_assert(offsetof(ABGroup_JoinGroup, GroupId) == 0x000000, "Member 'ABGroup_JoinGroup::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_JoinGroup, OnSuccess) == 0x000010, "Member 'ABGroup_JoinGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_JoinGroup, OnError) == 0x000024, "Member 'ABGroup_JoinGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.JoinV2Group
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_JoinV2Group final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsJoinGroupResponse& Response)> OnSuccess;             // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_JoinV2Group) == 0x000008, "Wrong alignment on ABGroup_JoinV2Group");
static_assert(sizeof(ABGroup_JoinV2Group) == 0x000038, "Wrong size on ABGroup_JoinV2Group");
static_assert(offsetof(ABGroup_JoinV2Group, GroupId) == 0x000000, "Member 'ABGroup_JoinV2Group::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_JoinV2Group, OnSuccess) == 0x000010, "Member 'ABGroup_JoinV2Group::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_JoinV2Group, OnError) == 0x000024, "Member 'ABGroup_JoinV2Group::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.KickGroupMember
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_KickGroupMember final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)> OnSuccess;       // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_KickGroupMember) == 0x000008, "Wrong alignment on ABGroup_KickGroupMember");
static_assert(sizeof(ABGroup_KickGroupMember) == 0x000038, "Wrong size on ABGroup_KickGroupMember");
static_assert(offsetof(ABGroup_KickGroupMember, UserId) == 0x000000, "Member 'ABGroup_KickGroupMember::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_KickGroupMember, OnSuccess) == 0x000010, "Member 'ABGroup_KickGroupMember::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_KickGroupMember, OnError) == 0x000024, "Member 'ABGroup_KickGroupMember::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.KickV2GroupMember
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_KickV2GroupMember final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsKickGroupMemberResponse& Response)> OnSuccess;       // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_KickV2GroupMember) == 0x000008, "Wrong alignment on ABGroup_KickV2GroupMember");
static_assert(sizeof(ABGroup_KickV2GroupMember) == 0x000048, "Wrong size on ABGroup_KickV2GroupMember");
static_assert(offsetof(ABGroup_KickV2GroupMember, UserId) == 0x000000, "Member 'ABGroup_KickV2GroupMember::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_KickV2GroupMember, GroupId) == 0x000010, "Member 'ABGroup_KickV2GroupMember::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_KickV2GroupMember, OnSuccess) == 0x000020, "Member 'ABGroup_KickV2GroupMember::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_KickV2GroupMember, OnError) == 0x000034, "Member 'ABGroup_KickV2GroupMember::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.LeaveGroup
// 0x0028 (0x0028 - 0x0000)
struct ABGroup_LeaveGroup final
{
public:
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_LeaveGroup) == 0x000004, "Wrong alignment on ABGroup_LeaveGroup");
static_assert(sizeof(ABGroup_LeaveGroup) == 0x000028, "Wrong size on ABGroup_LeaveGroup");
static_assert(offsetof(ABGroup_LeaveGroup, OnSuccess) == 0x000000, "Member 'ABGroup_LeaveGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_LeaveGroup, OnError) == 0x000014, "Member 'ABGroup_LeaveGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.LeaveV2Group
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_LeaveV2Group final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_LeaveV2Group) == 0x000008, "Wrong alignment on ABGroup_LeaveV2Group");
static_assert(sizeof(ABGroup_LeaveV2Group) == 0x000038, "Wrong size on ABGroup_LeaveV2Group");
static_assert(offsetof(ABGroup_LeaveV2Group, GroupId) == 0x000000, "Member 'ABGroup_LeaveV2Group::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_LeaveV2Group, OnSuccess) == 0x000010, "Member 'ABGroup_LeaveV2Group::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_LeaveV2Group, OnError) == 0x000024, "Member 'ABGroup_LeaveV2Group::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.RejectGroupInvitation
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_RejectGroupInvitation final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_RejectGroupInvitation) == 0x000008, "Wrong alignment on ABGroup_RejectGroupInvitation");
static_assert(sizeof(ABGroup_RejectGroupInvitation) == 0x000038, "Wrong size on ABGroup_RejectGroupInvitation");
static_assert(offsetof(ABGroup_RejectGroupInvitation, GroupId) == 0x000000, "Member 'ABGroup_RejectGroupInvitation::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectGroupInvitation, OnSuccess) == 0x000010, "Member 'ABGroup_RejectGroupInvitation::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectGroupInvitation, OnError) == 0x000024, "Member 'ABGroup_RejectGroupInvitation::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.RejectGroupJoinRequest
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_RejectGroupJoinRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_RejectGroupJoinRequest) == 0x000008, "Wrong alignment on ABGroup_RejectGroupJoinRequest");
static_assert(sizeof(ABGroup_RejectGroupJoinRequest) == 0x000038, "Wrong size on ABGroup_RejectGroupJoinRequest");
static_assert(offsetof(ABGroup_RejectGroupJoinRequest, UserId) == 0x000000, "Member 'ABGroup_RejectGroupJoinRequest::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectGroupJoinRequest, OnSuccess) == 0x000010, "Member 'ABGroup_RejectGroupJoinRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectGroupJoinRequest, OnError) == 0x000024, "Member 'ABGroup_RejectGroupJoinRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.RejectV2GroupInvitation
// 0x0038 (0x0038 - 0x0000)
struct ABGroup_RejectV2GroupInvitation final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_RejectV2GroupInvitation) == 0x000008, "Wrong alignment on ABGroup_RejectV2GroupInvitation");
static_assert(sizeof(ABGroup_RejectV2GroupInvitation) == 0x000038, "Wrong size on ABGroup_RejectV2GroupInvitation");
static_assert(offsetof(ABGroup_RejectV2GroupInvitation, GroupId) == 0x000000, "Member 'ABGroup_RejectV2GroupInvitation::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectV2GroupInvitation, OnSuccess) == 0x000010, "Member 'ABGroup_RejectV2GroupInvitation::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectV2GroupInvitation, OnError) == 0x000024, "Member 'ABGroup_RejectV2GroupInvitation::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.RejectV2GroupJoinRequest
// 0x0048 (0x0048 - 0x0000)
struct ABGroup_RejectV2GroupJoinRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMemberRequestGroupResponse& Response)> OnSuccess;    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_RejectV2GroupJoinRequest) == 0x000008, "Wrong alignment on ABGroup_RejectV2GroupJoinRequest");
static_assert(sizeof(ABGroup_RejectV2GroupJoinRequest) == 0x000048, "Wrong size on ABGroup_RejectV2GroupJoinRequest");
static_assert(offsetof(ABGroup_RejectV2GroupJoinRequest, UserId) == 0x000000, "Member 'ABGroup_RejectV2GroupJoinRequest::UserId' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectV2GroupJoinRequest, GroupId) == 0x000010, "Member 'ABGroup_RejectV2GroupJoinRequest::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectV2GroupJoinRequest, OnSuccess) == 0x000020, "Member 'ABGroup_RejectV2GroupJoinRequest::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_RejectV2GroupJoinRequest, OnError) == 0x000034, "Member 'ABGroup_RejectV2GroupJoinRequest::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateGroup
// 0x00A8 (0x00A8 - 0x0000)
struct ABGroup_UpdateGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletelyReplace;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsGroupUpdatable         RequestContent;                                    // 0x0018(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateGroup) == 0x000008, "Wrong alignment on ABGroup_UpdateGroup");
static_assert(sizeof(ABGroup_UpdateGroup) == 0x0000A8, "Wrong size on ABGroup_UpdateGroup");
static_assert(offsetof(ABGroup_UpdateGroup, GroupId) == 0x000000, "Member 'ABGroup_UpdateGroup::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroup, bCompletelyReplace) == 0x000010, "Member 'ABGroup_UpdateGroup::bCompletelyReplace' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroup, RequestContent) == 0x000018, "Member 'ABGroup_UpdateGroup::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroup, OnSuccess) == 0x000080, "Member 'ABGroup_UpdateGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroup, OnError) == 0x000094, "Member 'ABGroup_UpdateGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateGroupCustomAttributes
// 0x0058 (0x0058 - 0x0000)
struct ABGroup_UpdateGroupCustomAttributes final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateGroupCustomAttributesRequest RequestContent;                        // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateGroupCustomAttributes) == 0x000008, "Wrong alignment on ABGroup_UpdateGroupCustomAttributes");
static_assert(sizeof(ABGroup_UpdateGroupCustomAttributes) == 0x000058, "Wrong size on ABGroup_UpdateGroupCustomAttributes");
static_assert(offsetof(ABGroup_UpdateGroupCustomAttributes, GroupId) == 0x000000, "Member 'ABGroup_UpdateGroupCustomAttributes::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupCustomAttributes, RequestContent) == 0x000010, "Member 'ABGroup_UpdateGroupCustomAttributes::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupCustomAttributes, OnSuccess) == 0x000030, "Member 'ABGroup_UpdateGroupCustomAttributes::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupCustomAttributes, OnError) == 0x000044, "Member 'ABGroup_UpdateGroupCustomAttributes::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateGroupCustomRule
// 0x0058 (0x0058 - 0x0000)
struct ABGroup_UpdateGroupCustomRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateCustomRulesRequest RequestContent;                                  // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateGroupCustomRule) == 0x000008, "Wrong alignment on ABGroup_UpdateGroupCustomRule");
static_assert(sizeof(ABGroup_UpdateGroupCustomRule) == 0x000058, "Wrong size on ABGroup_UpdateGroupCustomRule");
static_assert(offsetof(ABGroup_UpdateGroupCustomRule, GroupId) == 0x000000, "Member 'ABGroup_UpdateGroupCustomRule::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupCustomRule, RequestContent) == 0x000010, "Member 'ABGroup_UpdateGroupCustomRule::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupCustomRule, OnSuccess) == 0x000030, "Member 'ABGroup_UpdateGroupCustomRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupCustomRule, OnError) == 0x000044, "Member 'ABGroup_UpdateGroupCustomRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateGroupPredefinedRule
// 0x0050 (0x0050 - 0x0000)
struct ABGroup_UpdateGroupPredefinedRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsUpdateGroupPredefinedRuleRequest RequestContent;                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateGroupPredefinedRule) == 0x000008, "Wrong alignment on ABGroup_UpdateGroupPredefinedRule");
static_assert(sizeof(ABGroup_UpdateGroupPredefinedRule) == 0x000050, "Wrong size on ABGroup_UpdateGroupPredefinedRule");
static_assert(offsetof(ABGroup_UpdateGroupPredefinedRule, GroupId) == 0x000000, "Member 'ABGroup_UpdateGroupPredefinedRule::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupPredefinedRule, AllowedAction) == 0x000010, "Member 'ABGroup_UpdateGroupPredefinedRule::AllowedAction' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupPredefinedRule, RequestContent) == 0x000018, "Member 'ABGroup_UpdateGroupPredefinedRule::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupPredefinedRule, OnSuccess) == 0x000028, "Member 'ABGroup_UpdateGroupPredefinedRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateGroupPredefinedRule, OnError) == 0x00003C, "Member 'ABGroup_UpdateGroupPredefinedRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateV2Group
// 0x0080 (0x0080 - 0x0000)
struct ABGroup_UpdateV2Group final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateGroupRequest     RequestContent;                                    // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0058(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x006C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateV2Group) == 0x000008, "Wrong alignment on ABGroup_UpdateV2Group");
static_assert(sizeof(ABGroup_UpdateV2Group) == 0x000080, "Wrong size on ABGroup_UpdateV2Group");
static_assert(offsetof(ABGroup_UpdateV2Group, GroupId) == 0x000000, "Member 'ABGroup_UpdateV2Group::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2Group, RequestContent) == 0x000010, "Member 'ABGroup_UpdateV2Group::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2Group, OnSuccess) == 0x000058, "Member 'ABGroup_UpdateV2Group::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2Group, OnError) == 0x00006C, "Member 'ABGroup_UpdateV2Group::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateV2GroupCustomAttributes
// 0x0058 (0x0058 - 0x0000)
struct ABGroup_UpdateV2GroupCustomAttributes final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateGroupCustomAttributesRequest RequestContent;                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateV2GroupCustomAttributes) == 0x000008, "Wrong alignment on ABGroup_UpdateV2GroupCustomAttributes");
static_assert(sizeof(ABGroup_UpdateV2GroupCustomAttributes) == 0x000058, "Wrong size on ABGroup_UpdateV2GroupCustomAttributes");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomAttributes, GroupId) == 0x000000, "Member 'ABGroup_UpdateV2GroupCustomAttributes::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomAttributes, RequestContent) == 0x000010, "Member 'ABGroup_UpdateV2GroupCustomAttributes::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomAttributes, OnSuccess) == 0x000030, "Member 'ABGroup_UpdateV2GroupCustomAttributes::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomAttributes, OnError) == 0x000044, "Member 'ABGroup_UpdateV2GroupCustomAttributes::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateV2GroupCustomRule
// 0x0058 (0x0058 - 0x0000)
struct ABGroup_UpdateV2GroupCustomRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateCustomRulesRequest RequestContent;                                  // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateV2GroupCustomRule) == 0x000008, "Wrong alignment on ABGroup_UpdateV2GroupCustomRule");
static_assert(sizeof(ABGroup_UpdateV2GroupCustomRule) == 0x000058, "Wrong size on ABGroup_UpdateV2GroupCustomRule");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomRule, GroupId) == 0x000000, "Member 'ABGroup_UpdateV2GroupCustomRule::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomRule, RequestContent) == 0x000010, "Member 'ABGroup_UpdateV2GroupCustomRule::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomRule, OnSuccess) == 0x000030, "Member 'ABGroup_UpdateV2GroupCustomRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupCustomRule, OnError) == 0x000044, "Member 'ABGroup_UpdateV2GroupCustomRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABGroup.UpdateV2GroupPredefinedRule
// 0x0050 (0x0050 - 0x0000)
struct ABGroup_UpdateV2GroupPredefinedRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsUpdateGroupPredefinedRuleRequest RequestContent;                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Response)> OnSuccess;              // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABGroup_UpdateV2GroupPredefinedRule) == 0x000008, "Wrong alignment on ABGroup_UpdateV2GroupPredefinedRule");
static_assert(sizeof(ABGroup_UpdateV2GroupPredefinedRule) == 0x000050, "Wrong size on ABGroup_UpdateV2GroupPredefinedRule");
static_assert(offsetof(ABGroup_UpdateV2GroupPredefinedRule, GroupId) == 0x000000, "Member 'ABGroup_UpdateV2GroupPredefinedRule::GroupId' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupPredefinedRule, AllowedAction) == 0x000010, "Member 'ABGroup_UpdateV2GroupPredefinedRule::AllowedAction' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupPredefinedRule, RequestContent) == 0x000018, "Member 'ABGroup_UpdateV2GroupPredefinedRule::RequestContent' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupPredefinedRule, OnSuccess) == 0x000028, "Member 'ABGroup_UpdateV2GroupPredefinedRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABGroup_UpdateV2GroupPredefinedRule, OnError) == 0x00003C, "Member 'ABGroup_UpdateV2GroupPredefinedRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetBulkUserRankingV3
// 0x0048 (0x0048 - 0x0000)
struct ABLeaderboard_GetBulkUserRankingV3 final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardCode;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsBulkUserRankingDataV3& Response)> OnSuccess;         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLeaderboard_GetBulkUserRankingV3) == 0x000008, "Wrong alignment on ABLeaderboard_GetBulkUserRankingV3");
static_assert(sizeof(ABLeaderboard_GetBulkUserRankingV3) == 0x000048, "Wrong size on ABLeaderboard_GetBulkUserRankingV3");
static_assert(offsetof(ABLeaderboard_GetBulkUserRankingV3, UserIds) == 0x000000, "Member 'ABLeaderboard_GetBulkUserRankingV3::UserIds' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetBulkUserRankingV3, LeaderboardCode) == 0x000010, "Member 'ABLeaderboard_GetBulkUserRankingV3::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetBulkUserRankingV3, OnSuccess) == 0x000020, "Member 'ABLeaderboard_GetBulkUserRankingV3::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetBulkUserRankingV3, OnError) == 0x000034, "Member 'ABLeaderboard_GetBulkUserRankingV3::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetLeaderboards
// 0x0030 (0x0030 - 0x0000)
struct ABLeaderboard_GetLeaderboards final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPaginatedLeaderboardData& Response)> OnSuccess;      // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLeaderboard_GetLeaderboards) == 0x000004, "Wrong alignment on ABLeaderboard_GetLeaderboards");
static_assert(sizeof(ABLeaderboard_GetLeaderboards) == 0x000030, "Wrong size on ABLeaderboard_GetLeaderboards");
static_assert(offsetof(ABLeaderboard_GetLeaderboards, Offset) == 0x000000, "Member 'ABLeaderboard_GetLeaderboards::Offset' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetLeaderboards, Limit) == 0x000004, "Member 'ABLeaderboard_GetLeaderboards::Limit' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetLeaderboards, OnSuccess) == 0x000008, "Member 'ABLeaderboard_GetLeaderboards::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetLeaderboards, OnError) == 0x00001C, "Member 'ABLeaderboard_GetLeaderboards::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetRankingByCycle
// 0x0050 (0x0050 - 0x0000)
struct ABLeaderboard_GetRankingByCycle final
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CycleId;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)> OnSuccess;    // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLeaderboard_GetRankingByCycle) == 0x000008, "Wrong alignment on ABLeaderboard_GetRankingByCycle");
static_assert(sizeof(ABLeaderboard_GetRankingByCycle) == 0x000050, "Wrong size on ABLeaderboard_GetRankingByCycle");
static_assert(offsetof(ABLeaderboard_GetRankingByCycle, LeaderboardCode) == 0x000000, "Member 'ABLeaderboard_GetRankingByCycle::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingByCycle, CycleId) == 0x000010, "Member 'ABLeaderboard_GetRankingByCycle::CycleId' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingByCycle, Offset) == 0x000020, "Member 'ABLeaderboard_GetRankingByCycle::Offset' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingByCycle, Limit) == 0x000024, "Member 'ABLeaderboard_GetRankingByCycle::Limit' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingByCycle, OnSuccess) == 0x000028, "Member 'ABLeaderboard_GetRankingByCycle::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingByCycle, OnError) == 0x00003C, "Member 'ABLeaderboard_GetRankingByCycle::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetRankings
// 0x0048 (0x0048 - 0x0000)
struct ABLeaderboard_GetRankings final
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteLeaderboardTimeFrame                TimeFrame;                                         // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResult& Response)> OnSuccess;      // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABLeaderboard_GetRankings) == 0x000008, "Wrong alignment on ABLeaderboard_GetRankings");
static_assert(sizeof(ABLeaderboard_GetRankings) == 0x000048, "Wrong size on ABLeaderboard_GetRankings");
static_assert(offsetof(ABLeaderboard_GetRankings, LeaderboardCode) == 0x000000, "Member 'ABLeaderboard_GetRankings::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankings, TimeFrame) == 0x000010, "Member 'ABLeaderboard_GetRankings::TimeFrame' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankings, Offset) == 0x000014, "Member 'ABLeaderboard_GetRankings::Offset' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankings, Limit) == 0x000018, "Member 'ABLeaderboard_GetRankings::Limit' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankings, OnSuccess) == 0x00001C, "Member 'ABLeaderboard_GetRankings::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankings, OnError) == 0x000030, "Member 'ABLeaderboard_GetRankings::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetRankingsV3
// 0x0040 (0x0040 - 0x0000)
struct ABLeaderboard_GetRankingsV3 final
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsLeaderboardRankingResultV3& Response)> OnSuccess;    // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLeaderboard_GetRankingsV3) == 0x000008, "Wrong alignment on ABLeaderboard_GetRankingsV3");
static_assert(sizeof(ABLeaderboard_GetRankingsV3) == 0x000040, "Wrong size on ABLeaderboard_GetRankingsV3");
static_assert(offsetof(ABLeaderboard_GetRankingsV3, LeaderboardCode) == 0x000000, "Member 'ABLeaderboard_GetRankingsV3::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingsV3, Offset) == 0x000010, "Member 'ABLeaderboard_GetRankingsV3::Offset' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingsV3, Limit) == 0x000014, "Member 'ABLeaderboard_GetRankingsV3::Limit' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingsV3, OnSuccess) == 0x000018, "Member 'ABLeaderboard_GetRankingsV3::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetRankingsV3, OnError) == 0x00002C, "Member 'ABLeaderboard_GetRankingsV3::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetUserRanking
// 0x0048 (0x0048 - 0x0000)
struct ABLeaderboard_GetUserRanking final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardCode;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserRankingData& Response)> OnSuccess;               // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLeaderboard_GetUserRanking) == 0x000008, "Wrong alignment on ABLeaderboard_GetUserRanking");
static_assert(sizeof(ABLeaderboard_GetUserRanking) == 0x000048, "Wrong size on ABLeaderboard_GetUserRanking");
static_assert(offsetof(ABLeaderboard_GetUserRanking, UserId) == 0x000000, "Member 'ABLeaderboard_GetUserRanking::UserId' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetUserRanking, LeaderboardCode) == 0x000010, "Member 'ABLeaderboard_GetUserRanking::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetUserRanking, OnSuccess) == 0x000020, "Member 'ABLeaderboard_GetUserRanking::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetUserRanking, OnError) == 0x000034, "Member 'ABLeaderboard_GetUserRanking::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLeaderboard.GetUserRankingV3
// 0x0048 (0x0048 - 0x0000)
struct ABLeaderboard_GetUserRankingV3 final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardCode;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserRankingDataV3& Response)> OnSuccess;             // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLeaderboard_GetUserRankingV3) == 0x000008, "Wrong alignment on ABLeaderboard_GetUserRankingV3");
static_assert(sizeof(ABLeaderboard_GetUserRankingV3) == 0x000048, "Wrong size on ABLeaderboard_GetUserRankingV3");
static_assert(offsetof(ABLeaderboard_GetUserRankingV3, UserId) == 0x000000, "Member 'ABLeaderboard_GetUserRankingV3::UserId' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetUserRankingV3, LeaderboardCode) == 0x000010, "Member 'ABLeaderboard_GetUserRankingV3::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetUserRankingV3, OnSuccess) == 0x000020, "Member 'ABLeaderboard_GetUserRankingV3::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABLeaderboard_GetUserRankingV3, OnError) == 0x000034, "Member 'ABLeaderboard_GetUserRankingV3::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.CancelMatchmaking
// 0x0040 (0x0040 - 0x0000)
struct ABMatchmaking_CancelMatchmaking final
{
public:
	struct FCancelMatchmakingRequest              Request;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)> OnResponse;          // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_CancelMatchmaking) == 0x000008, "Wrong alignment on ABMatchmaking_CancelMatchmaking");
static_assert(sizeof(ABMatchmaking_CancelMatchmaking) == 0x000040, "Wrong size on ABMatchmaking_CancelMatchmaking");
static_assert(offsetof(ABMatchmaking_CancelMatchmaking, Request) == 0x000000, "Member 'ABMatchmaking_CancelMatchmaking::Request' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_CancelMatchmaking, OnResponse) == 0x000018, "Member 'ABMatchmaking_CancelMatchmaking::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_CancelMatchmaking, OnError) == 0x00002C, "Member 'ABMatchmaking_CancelMatchmaking::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetOnDs
// 0x0014 (0x0014 - 0x0000)
struct ABMatchmaking_SetOnDs final
{
public:
	TDelegate<void(const struct FAccelByteModelsDsNotice& Notif)> OnNotif;                           // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetOnDs) == 0x000004, "Wrong alignment on ABMatchmaking_SetOnDs");
static_assert(sizeof(ABMatchmaking_SetOnDs) == 0x000014, "Wrong size on ABMatchmaking_SetOnDs");
static_assert(offsetof(ABMatchmaking_SetOnDs, OnNotif) == 0x000000, "Member 'ABMatchmaking_SetOnDs::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetOnMatchmaking
// 0x0014 (0x0014 - 0x0000)
struct ABMatchmaking_SetOnMatchmaking final
{
public:
	TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Notif)> OnNotif;                  // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetOnMatchmaking) == 0x000004, "Wrong alignment on ABMatchmaking_SetOnMatchmaking");
static_assert(sizeof(ABMatchmaking_SetOnMatchmaking) == 0x000014, "Wrong size on ABMatchmaking_SetOnMatchmaking");
static_assert(offsetof(ABMatchmaking_SetOnMatchmaking, OnNotif) == 0x000000, "Member 'ABMatchmaking_SetOnMatchmaking::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetOnRematchmaking
// 0x0014 (0x0014 - 0x0000)
struct ABMatchmaking_SetOnRematchmaking final
{
public:
	TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Notif)> OnNotif;                // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetOnRematchmaking) == 0x000004, "Wrong alignment on ABMatchmaking_SetOnRematchmaking");
static_assert(sizeof(ABMatchmaking_SetOnRematchmaking) == 0x000014, "Wrong size on ABMatchmaking_SetOnRematchmaking");
static_assert(offsetof(ABMatchmaking_SetOnRematchmaking, OnNotif) == 0x000000, "Member 'ABMatchmaking_SetOnRematchmaking::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetOnSetReadyConsent
// 0x0014 (0x0014 - 0x0000)
struct ABMatchmaking_SetOnSetReadyConsent final
{
public:
	TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Notif)> OnNotif;                 // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetOnSetReadyConsent) == 0x000004, "Wrong alignment on ABMatchmaking_SetOnSetReadyConsent");
static_assert(sizeof(ABMatchmaking_SetOnSetReadyConsent) == 0x000014, "Wrong size on ABMatchmaking_SetOnSetReadyConsent");
static_assert(offsetof(ABMatchmaking_SetOnSetReadyConsent, OnNotif) == 0x000000, "Member 'ABMatchmaking_SetOnSetReadyConsent::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetOnSetRejectConsent
// 0x0014 (0x0014 - 0x0000)
struct ABMatchmaking_SetOnSetRejectConsent final
{
public:
	TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Notif)> OnNotif;                // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetOnSetRejectConsent) == 0x000004, "Wrong alignment on ABMatchmaking_SetOnSetRejectConsent");
static_assert(sizeof(ABMatchmaking_SetOnSetRejectConsent) == 0x000014, "Wrong size on ABMatchmaking_SetOnSetRejectConsent");
static_assert(offsetof(ABMatchmaking_SetOnSetRejectConsent, OnNotif) == 0x000000, "Member 'ABMatchmaking_SetOnSetRejectConsent::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetReadyConsent
// 0x0038 (0x0038 - 0x0000)
struct ABMatchmaking_SetReadyConsent final
{
public:
	struct FSetReadyConsentRequest                Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Response)> OnResponse;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetReadyConsent) == 0x000008, "Wrong alignment on ABMatchmaking_SetReadyConsent");
static_assert(sizeof(ABMatchmaking_SetReadyConsent) == 0x000038, "Wrong size on ABMatchmaking_SetReadyConsent");
static_assert(offsetof(ABMatchmaking_SetReadyConsent, Request) == 0x000000, "Member 'ABMatchmaking_SetReadyConsent::Request' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_SetReadyConsent, OnResponse) == 0x000010, "Member 'ABMatchmaking_SetReadyConsent::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_SetReadyConsent, OnError) == 0x000024, "Member 'ABMatchmaking_SetReadyConsent::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.SetRejectConsent
// 0x0038 (0x0038 - 0x0000)
struct ABMatchmaking_SetRejectConsent final
{
public:
	struct FSetRejectConsentRequest               Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Response)> OnResponse;         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_SetRejectConsent) == 0x000008, "Wrong alignment on ABMatchmaking_SetRejectConsent");
static_assert(sizeof(ABMatchmaking_SetRejectConsent) == 0x000038, "Wrong size on ABMatchmaking_SetRejectConsent");
static_assert(offsetof(ABMatchmaking_SetRejectConsent, Request) == 0x000000, "Member 'ABMatchmaking_SetRejectConsent::Request' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_SetRejectConsent, OnResponse) == 0x000010, "Member 'ABMatchmaking_SetRejectConsent::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_SetRejectConsent, OnError) == 0x000024, "Member 'ABMatchmaking_SetRejectConsent::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMatchmaking.StartMatchmaking
// 0x0038 (0x0038 - 0x0000)
struct ABMatchmaking_StartMatchmaking final
{
public:
	struct FStartMatchmakingRequest               Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Response)> OnResponse;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMatchmaking_StartMatchmaking) == 0x000008, "Wrong alignment on ABMatchmaking_StartMatchmaking");
static_assert(sizeof(ABMatchmaking_StartMatchmaking) == 0x000038, "Wrong size on ABMatchmaking_StartMatchmaking");
static_assert(offsetof(ABMatchmaking_StartMatchmaking, Request) == 0x000000, "Member 'ABMatchmaking_StartMatchmaking::Request' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_StartMatchmaking, OnResponse) == 0x000010, "Member 'ABMatchmaking_StartMatchmaking::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMatchmaking_StartMatchmaking, OnError) == 0x000024, "Member 'ABMatchmaking_StartMatchmaking::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SendChannelMessage
// 0x0048 (0x0048 - 0x0000)
struct ABMessage_SendChannelMessage final
{
public:
	struct FSendChannelMessageRequest             Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsChannelMessageResponse& Response)> OnResponse;       // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SendChannelMessage) == 0x000008, "Wrong alignment on ABMessage_SendChannelMessage");
static_assert(sizeof(ABMessage_SendChannelMessage) == 0x000048, "Wrong size on ABMessage_SendChannelMessage");
static_assert(offsetof(ABMessage_SendChannelMessage, Request) == 0x000000, "Member 'ABMessage_SendChannelMessage::Request' has a wrong offset!");
static_assert(offsetof(ABMessage_SendChannelMessage, OnResponse) == 0x000010, "Member 'ABMessage_SendChannelMessage::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMessage_SendChannelMessage, OnError) == 0x000024, "Member 'ABMessage_SendChannelMessage::OnError' has a wrong offset!");
static_assert(offsetof(ABMessage_SendChannelMessage, ReturnValue) == 0x000038, "Member 'ABMessage_SendChannelMessage::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SendJoinDefaultChannelChatRequest
// 0x0038 (0x0038 - 0x0000)
struct ABMessage_SendJoinDefaultChannelChatRequest final
{
public:
	TDelegate<void(const struct FAccelByteModelsJoinDefaultChannelResponse& Response)> OnResponse;   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SendJoinDefaultChannelChatRequest) == 0x000008, "Wrong alignment on ABMessage_SendJoinDefaultChannelChatRequest");
static_assert(sizeof(ABMessage_SendJoinDefaultChannelChatRequest) == 0x000038, "Wrong size on ABMessage_SendJoinDefaultChannelChatRequest");
static_assert(offsetof(ABMessage_SendJoinDefaultChannelChatRequest, OnResponse) == 0x000000, "Member 'ABMessage_SendJoinDefaultChannelChatRequest::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMessage_SendJoinDefaultChannelChatRequest, OnError) == 0x000014, "Member 'ABMessage_SendJoinDefaultChannelChatRequest::OnError' has a wrong offset!");
static_assert(offsetof(ABMessage_SendJoinDefaultChannelChatRequest, ReturnValue) == 0x000028, "Member 'ABMessage_SendJoinDefaultChannelChatRequest::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SendPartyMessage
// 0x0048 (0x0048 - 0x0000)
struct ABMessage_SendPartyMessage final
{
public:
	struct FSendPartyMessageRequest               Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Response)> OnResponse;         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SendPartyMessage) == 0x000008, "Wrong alignment on ABMessage_SendPartyMessage");
static_assert(sizeof(ABMessage_SendPartyMessage) == 0x000048, "Wrong size on ABMessage_SendPartyMessage");
static_assert(offsetof(ABMessage_SendPartyMessage, Request) == 0x000000, "Member 'ABMessage_SendPartyMessage::Request' has a wrong offset!");
static_assert(offsetof(ABMessage_SendPartyMessage, OnResponse) == 0x000010, "Member 'ABMessage_SendPartyMessage::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMessage_SendPartyMessage, OnError) == 0x000024, "Member 'ABMessage_SendPartyMessage::OnError' has a wrong offset!");
static_assert(offsetof(ABMessage_SendPartyMessage, ReturnValue) == 0x000038, "Member 'ABMessage_SendPartyMessage::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SendPrivateMessage
// 0x0058 (0x0058 - 0x0000)
struct ABMessage_SendPrivateMessage final
{
public:
	struct FSendPrivateMessageRequest             Request;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Response)> OnResponse;      // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SendPrivateMessage) == 0x000008, "Wrong alignment on ABMessage_SendPrivateMessage");
static_assert(sizeof(ABMessage_SendPrivateMessage) == 0x000058, "Wrong size on ABMessage_SendPrivateMessage");
static_assert(offsetof(ABMessage_SendPrivateMessage, Request) == 0x000000, "Member 'ABMessage_SendPrivateMessage::Request' has a wrong offset!");
static_assert(offsetof(ABMessage_SendPrivateMessage, OnResponse) == 0x000020, "Member 'ABMessage_SendPrivateMessage::OnResponse' has a wrong offset!");
static_assert(offsetof(ABMessage_SendPrivateMessage, OnError) == 0x000034, "Member 'ABMessage_SendPrivateMessage::OnError' has a wrong offset!");
static_assert(offsetof(ABMessage_SendPrivateMessage, ReturnValue) == 0x000048, "Member 'ABMessage_SendPrivateMessage::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SetChannelMessageNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABMessage_SetChannelMessageNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsChannelMessageNotice& Notif)> OnNotif;               // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SetChannelMessageNotifDelegate) == 0x000004, "Wrong alignment on ABMessage_SetChannelMessageNotifDelegate");
static_assert(sizeof(ABMessage_SetChannelMessageNotifDelegate) == 0x000014, "Wrong size on ABMessage_SetChannelMessageNotifDelegate");
static_assert(offsetof(ABMessage_SetChannelMessageNotifDelegate, OnNotif) == 0x000000, "Member 'ABMessage_SetChannelMessageNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SetMessageNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABMessage_SetMessageNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsNotificationMessage& Notif)> OnNotif;                // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SetMessageNotifDelegate) == 0x000004, "Wrong alignment on ABMessage_SetMessageNotifDelegate");
static_assert(sizeof(ABMessage_SetMessageNotifDelegate) == 0x000014, "Wrong size on ABMessage_SetMessageNotifDelegate");
static_assert(offsetof(ABMessage_SetMessageNotifDelegate, OnNotif) == 0x000000, "Member 'ABMessage_SetMessageNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SetOnPartyChatNotification
// 0x0014 (0x0014 - 0x0000)
struct ABMessage_SetOnPartyChatNotification final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Notif)> OnPartyChatNotif;        // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SetOnPartyChatNotification) == 0x000004, "Wrong alignment on ABMessage_SetOnPartyChatNotification");
static_assert(sizeof(ABMessage_SetOnPartyChatNotification) == 0x000014, "Wrong size on ABMessage_SetOnPartyChatNotification");
static_assert(offsetof(ABMessage_SetOnPartyChatNotification, OnPartyChatNotif) == 0x000000, "Member 'ABMessage_SetOnPartyChatNotification::OnPartyChatNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMessage.SetPrivateMessageNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABMessage_SetPrivateMessageNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Notif)> OnNotif;              // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMessage_SetPrivateMessageNotifDelegate) == 0x000004, "Wrong alignment on ABMessage_SetPrivateMessageNotifDelegate");
static_assert(sizeof(ABMessage_SetPrivateMessageNotifDelegate) == 0x000014, "Wrong size on ABMessage_SetPrivateMessageNotifDelegate");
static_assert(offsetof(ABMessage_SetPrivateMessageNotifDelegate, OnNotif) == 0x000000, "Member 'ABMessage_SetPrivateMessageNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABOrder.CancelOrder
// 0x0038 (0x0038 - 0x0000)
struct ABOrder_CancelOrder final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess;                     // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABOrder_CancelOrder) == 0x000008, "Wrong alignment on ABOrder_CancelOrder");
static_assert(sizeof(ABOrder_CancelOrder) == 0x000038, "Wrong size on ABOrder_CancelOrder");
static_assert(offsetof(ABOrder_CancelOrder, OrderNo) == 0x000000, "Member 'ABOrder_CancelOrder::OrderNo' has a wrong offset!");
static_assert(offsetof(ABOrder_CancelOrder, OnSuccess) == 0x000010, "Member 'ABOrder_CancelOrder::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABOrder_CancelOrder, OnError) == 0x000024, "Member 'ABOrder_CancelOrder::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABOrder.CreateNewOrder
// 0x0098 (0x0098 - 0x0000)
struct ABOrder_CreateNewOrder final
{
public:
	struct FAccelByteModelsOrderCreate            OrderCreateRequest;                                // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess;                     // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABOrder_CreateNewOrder) == 0x000008, "Wrong alignment on ABOrder_CreateNewOrder");
static_assert(sizeof(ABOrder_CreateNewOrder) == 0x000098, "Wrong size on ABOrder_CreateNewOrder");
static_assert(offsetof(ABOrder_CreateNewOrder, OrderCreateRequest) == 0x000000, "Member 'ABOrder_CreateNewOrder::OrderCreateRequest' has a wrong offset!");
static_assert(offsetof(ABOrder_CreateNewOrder, OnSuccess) == 0x000070, "Member 'ABOrder_CreateNewOrder::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABOrder_CreateNewOrder, OnError) == 0x000084, "Member 'ABOrder_CreateNewOrder::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABOrder.GetUserOrder
// 0x0038 (0x0038 - 0x0000)
struct ABOrder_GetUserOrder final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsOrderInfo& Response)> OnSuccess;                     // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABOrder_GetUserOrder) == 0x000008, "Wrong alignment on ABOrder_GetUserOrder");
static_assert(sizeof(ABOrder_GetUserOrder) == 0x000038, "Wrong size on ABOrder_GetUserOrder");
static_assert(offsetof(ABOrder_GetUserOrder, OrderNo) == 0x000000, "Member 'ABOrder_GetUserOrder::OrderNo' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrder, OnSuccess) == 0x000010, "Member 'ABOrder_GetUserOrder::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrder, OnError) == 0x000024, "Member 'ABOrder_GetUserOrder::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABOrder.GetUserOrderHistory
// 0x0038 (0x0038 - 0x0000)
struct ABOrder_GetUserOrderHistory final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsOrderHistoryInfo& Response)> OnSuccess;                  // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABOrder_GetUserOrderHistory) == 0x000008, "Wrong alignment on ABOrder_GetUserOrderHistory");
static_assert(sizeof(ABOrder_GetUserOrderHistory) == 0x000038, "Wrong size on ABOrder_GetUserOrderHistory");
static_assert(offsetof(ABOrder_GetUserOrderHistory, OrderNo) == 0x000000, "Member 'ABOrder_GetUserOrderHistory::OrderNo' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrderHistory, OnSuccess) == 0x000010, "Member 'ABOrder_GetUserOrderHistory::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrderHistory, OnError) == 0x000024, "Member 'ABOrder_GetUserOrderHistory::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABOrder.GetUserOrders
// 0x0030 (0x0030 - 0x0000)
struct ABOrder_GetUserOrders final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Response)> OnSuccess;                // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABOrder_GetUserOrders) == 0x000004, "Wrong alignment on ABOrder_GetUserOrders");
static_assert(sizeof(ABOrder_GetUserOrders) == 0x000030, "Wrong size on ABOrder_GetUserOrders");
static_assert(offsetof(ABOrder_GetUserOrders, Page) == 0x000000, "Member 'ABOrder_GetUserOrders::Page' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrders, Size) == 0x000004, "Member 'ABOrder_GetUserOrders::Size' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrders, OnSuccess) == 0x000008, "Member 'ABOrder_GetUserOrders::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABOrder_GetUserOrders, OnError) == 0x00001C, "Member 'ABOrder_GetUserOrders::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.CreateParty
// 0x0028 (0x0028 - 0x0000)
struct ABParty_CreateParty final
{
public:
	TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Response)> OnResponse;          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_CreateParty) == 0x000004, "Wrong alignment on ABParty_CreateParty");
static_assert(sizeof(ABParty_CreateParty) == 0x000028, "Wrong size on ABParty_CreateParty");
static_assert(offsetof(ABParty_CreateParty, OnResponse) == 0x000000, "Member 'ABParty_CreateParty::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_CreateParty, OnError) == 0x000014, "Member 'ABParty_CreateParty::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.GetPartyData
// 0x0038 (0x0038 - 0x0000)
struct ABParty_GetPartyData final
{
public:
	struct FGetPartyDataRequest                   Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyData& Response)> OnResponse;                    // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_GetPartyData) == 0x000008, "Wrong alignment on ABParty_GetPartyData");
static_assert(sizeof(ABParty_GetPartyData) == 0x000038, "Wrong size on ABParty_GetPartyData");
static_assert(offsetof(ABParty_GetPartyData, Request) == 0x000000, "Member 'ABParty_GetPartyData::Request' has a wrong offset!");
static_assert(offsetof(ABParty_GetPartyData, OnResponse) == 0x000010, "Member 'ABParty_GetPartyData::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_GetPartyData, OnError) == 0x000024, "Member 'ABParty_GetPartyData::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.GetPartyStorage
// 0x0038 (0x0038 - 0x0000)
struct ABParty_GetPartyStorage final
{
public:
	struct FGetPartyStorageRequest                Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnResponse;               // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_GetPartyStorage) == 0x000008, "Wrong alignment on ABParty_GetPartyStorage");
static_assert(sizeof(ABParty_GetPartyStorage) == 0x000038, "Wrong size on ABParty_GetPartyStorage");
static_assert(offsetof(ABParty_GetPartyStorage, Request) == 0x000000, "Member 'ABParty_GetPartyStorage::Request' has a wrong offset!");
static_assert(offsetof(ABParty_GetPartyStorage, OnResponse) == 0x000010, "Member 'ABParty_GetPartyStorage::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_GetPartyStorage, OnError) == 0x000024, "Member 'ABParty_GetPartyStorage::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyDeleteCode
// 0x0028 (0x0028 - 0x0000)
struct ABParty_PartyDeleteCode final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyDeleteCodeResponse& Response)> OnResponse;      // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyDeleteCode) == 0x000004, "Wrong alignment on ABParty_PartyDeleteCode");
static_assert(sizeof(ABParty_PartyDeleteCode) == 0x000028, "Wrong size on ABParty_PartyDeleteCode");
static_assert(offsetof(ABParty_PartyDeleteCode, OnResponse) == 0x000000, "Member 'ABParty_PartyDeleteCode::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyDeleteCode, OnError) == 0x000014, "Member 'ABParty_PartyDeleteCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyGenerateCode
// 0x0028 (0x0028 - 0x0000)
struct ABParty_PartyGenerateCode final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyGenerateCodeResponse& Response)> OnResponse;    // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyGenerateCode) == 0x000004, "Wrong alignment on ABParty_PartyGenerateCode");
static_assert(sizeof(ABParty_PartyGenerateCode) == 0x000028, "Wrong size on ABParty_PartyGenerateCode");
static_assert(offsetof(ABParty_PartyGenerateCode, OnResponse) == 0x000000, "Member 'ABParty_PartyGenerateCode::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyGenerateCode, OnError) == 0x000014, "Member 'ABParty_PartyGenerateCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyGetCode
// 0x0028 (0x0028 - 0x0000)
struct ABParty_PartyGetCode final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyGetCodeResponse& Response)> OnResponse;         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyGetCode) == 0x000004, "Wrong alignment on ABParty_PartyGetCode");
static_assert(sizeof(ABParty_PartyGetCode) == 0x000028, "Wrong size on ABParty_PartyGetCode");
static_assert(offsetof(ABParty_PartyGetCode, OnResponse) == 0x000000, "Member 'ABParty_PartyGetCode::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyGetCode, OnError) == 0x000014, "Member 'ABParty_PartyGetCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyInfo
// 0x0028 (0x0028 - 0x0000)
struct ABParty_PartyInfo final
{
public:
	TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Response)> OnResponse;            // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyInfo) == 0x000004, "Wrong alignment on ABParty_PartyInfo");
static_assert(sizeof(ABParty_PartyInfo) == 0x000028, "Wrong size on ABParty_PartyInfo");
static_assert(offsetof(ABParty_PartyInfo, OnResponse) == 0x000000, "Member 'ABParty_PartyInfo::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyInfo, OnError) == 0x000014, "Member 'ABParty_PartyInfo::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyInvite
// 0x0038 (0x0038 - 0x0000)
struct ABParty_PartyInvite final
{
public:
	struct FPartyInviteRequest                    Request;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Response)> OnResponse;          // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyInvite) == 0x000008, "Wrong alignment on ABParty_PartyInvite");
static_assert(sizeof(ABParty_PartyInvite) == 0x000038, "Wrong size on ABParty_PartyInvite");
static_assert(offsetof(ABParty_PartyInvite, Request) == 0x000000, "Member 'ABParty_PartyInvite::Request' has a wrong offset!");
static_assert(offsetof(ABParty_PartyInvite, OnResponse) == 0x000010, "Member 'ABParty_PartyInvite::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyInvite, OnError) == 0x000024, "Member 'ABParty_PartyInvite::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyJoin
// 0x0048 (0x0048 - 0x0000)
struct ABParty_PartyJoin final
{
public:
	struct FPartyJoinRequest                      Request;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)> OnResponse;            // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyJoin) == 0x000008, "Wrong alignment on ABParty_PartyJoin");
static_assert(sizeof(ABParty_PartyJoin) == 0x000048, "Wrong size on ABParty_PartyJoin");
static_assert(offsetof(ABParty_PartyJoin, Request) == 0x000000, "Member 'ABParty_PartyJoin::Request' has a wrong offset!");
static_assert(offsetof(ABParty_PartyJoin, OnResponse) == 0x000020, "Member 'ABParty_PartyJoin::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyJoin, OnError) == 0x000034, "Member 'ABParty_PartyJoin::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyJoinViaCode
// 0x0038 (0x0038 - 0x0000)
struct ABParty_PartyJoinViaCode final
{
public:
	struct FPartyJoinViaCodeRequest               Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Response)> OnResponse;            // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyJoinViaCode) == 0x000008, "Wrong alignment on ABParty_PartyJoinViaCode");
static_assert(sizeof(ABParty_PartyJoinViaCode) == 0x000038, "Wrong size on ABParty_PartyJoinViaCode");
static_assert(offsetof(ABParty_PartyJoinViaCode, Request) == 0x000000, "Member 'ABParty_PartyJoinViaCode::Request' has a wrong offset!");
static_assert(offsetof(ABParty_PartyJoinViaCode, OnResponse) == 0x000010, "Member 'ABParty_PartyJoinViaCode::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyJoinViaCode, OnError) == 0x000024, "Member 'ABParty_PartyJoinViaCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyKick
// 0x0038 (0x0038 - 0x0000)
struct ABParty_PartyKick final
{
public:
	struct FPartyKickRequest                      Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Response)> OnResponse;      // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyKick) == 0x000008, "Wrong alignment on ABParty_PartyKick");
static_assert(sizeof(ABParty_PartyKick) == 0x000038, "Wrong size on ABParty_PartyKick");
static_assert(offsetof(ABParty_PartyKick, Request) == 0x000000, "Member 'ABParty_PartyKick::Request' has a wrong offset!");
static_assert(offsetof(ABParty_PartyKick, OnResponse) == 0x000010, "Member 'ABParty_PartyKick::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyKick, OnError) == 0x000024, "Member 'ABParty_PartyKick::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyLeave
// 0x0028 (0x0028 - 0x0000)
struct ABParty_PartyLeave final
{
public:
	TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Response)> OnResponse;           // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyLeave) == 0x000004, "Wrong alignment on ABParty_PartyLeave");
static_assert(sizeof(ABParty_PartyLeave) == 0x000028, "Wrong size on ABParty_PartyLeave");
static_assert(offsetof(ABParty_PartyLeave, OnResponse) == 0x000000, "Member 'ABParty_PartyLeave::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyLeave, OnError) == 0x000014, "Member 'ABParty_PartyLeave::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyPromoteLeader
// 0x0038 (0x0038 - 0x0000)
struct ABParty_PartyPromoteLeader final
{
public:
	struct FPartyPromoteLeaderRequest             Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyPromoteLeaderResponse& Response)> OnResponse;   // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyPromoteLeader) == 0x000008, "Wrong alignment on ABParty_PartyPromoteLeader");
static_assert(sizeof(ABParty_PartyPromoteLeader) == 0x000038, "Wrong size on ABParty_PartyPromoteLeader");
static_assert(offsetof(ABParty_PartyPromoteLeader, Request) == 0x000000, "Member 'ABParty_PartyPromoteLeader::Request' has a wrong offset!");
static_assert(offsetof(ABParty_PartyPromoteLeader, OnResponse) == 0x000010, "Member 'ABParty_PartyPromoteLeader::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyPromoteLeader, OnError) == 0x000024, "Member 'ABParty_PartyPromoteLeader::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.PartyReject
// 0x0048 (0x0048 - 0x0000)
struct ABParty_PartyReject final
{
public:
	struct FPartyRejectRequest                    Request;                                           // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyRejectResponse& Response)> OnResponse;          // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_PartyReject) == 0x000008, "Wrong alignment on ABParty_PartyReject");
static_assert(sizeof(ABParty_PartyReject) == 0x000048, "Wrong size on ABParty_PartyReject");
static_assert(offsetof(ABParty_PartyReject, Request) == 0x000000, "Member 'ABParty_PartyReject::Request' has a wrong offset!");
static_assert(offsetof(ABParty_PartyReject, OnResponse) == 0x000020, "Member 'ABParty_PartyReject::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_PartyReject, OnError) == 0x000034, "Member 'ABParty_PartyReject::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyDataUpdate
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyDataUpdate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)> OnNotif;                     // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyDataUpdate) == 0x000004, "Wrong alignment on ABParty_SetOnPartyDataUpdate");
static_assert(sizeof(ABParty_SetOnPartyDataUpdate) == 0x000014, "Wrong size on ABParty_SetOnPartyDataUpdate");
static_assert(offsetof(ABParty_SetOnPartyDataUpdate, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyDataUpdate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyDataUpdateNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyDataUpdateNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Notif)> OnNotif;                     // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyDataUpdateNotifDelegate) == 0x000004, "Wrong alignment on ABParty_SetOnPartyDataUpdateNotifDelegate");
static_assert(sizeof(ABParty_SetOnPartyDataUpdateNotifDelegate) == 0x000014, "Wrong size on ABParty_SetOnPartyDataUpdateNotifDelegate");
static_assert(offsetof(ABParty_SetOnPartyDataUpdateNotifDelegate, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyDataUpdateNotifDelegate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyGetInvited
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyGetInvited final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Notif)> OnNotif;              // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyGetInvited) == 0x000004, "Wrong alignment on ABParty_SetOnPartyGetInvited");
static_assert(sizeof(ABParty_SetOnPartyGetInvited) == 0x000014, "Wrong size on ABParty_SetOnPartyGetInvited");
static_assert(offsetof(ABParty_SetOnPartyGetInvited, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyGetInvited::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyInvite
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyInvite final
{
public:
	TDelegate<void(const struct FAccelByteModelsInvitationNotice& Notif)> OnNotif;                   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyInvite) == 0x000004, "Wrong alignment on ABParty_SetOnPartyInvite");
static_assert(sizeof(ABParty_SetOnPartyInvite) == 0x000014, "Wrong size on ABParty_SetOnPartyInvite");
static_assert(offsetof(ABParty_SetOnPartyInvite, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyInvite::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyJoin
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyJoin final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Notif)> OnNotif;                    // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyJoin) == 0x000004, "Wrong alignment on ABParty_SetOnPartyJoin");
static_assert(sizeof(ABParty_SetOnPartyJoin) == 0x000014, "Wrong size on ABParty_SetOnPartyJoin");
static_assert(offsetof(ABParty_SetOnPartyJoin, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyJoin::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyKick
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyKick final
{
public:
	TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Notif)> OnNotif;           // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyKick) == 0x000004, "Wrong alignment on ABParty_SetOnPartyKick");
static_assert(sizeof(ABParty_SetOnPartyKick) == 0x000014, "Wrong size on ABParty_SetOnPartyKick");
static_assert(offsetof(ABParty_SetOnPartyKick, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyKick::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyLeave
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyLeave final
{
public:
	TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)> OnNotif;                   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyLeave) == 0x000004, "Wrong alignment on ABParty_SetOnPartyLeave");
static_assert(sizeof(ABParty_SetOnPartyLeave) == 0x000014, "Wrong size on ABParty_SetOnPartyLeave");
static_assert(offsetof(ABParty_SetOnPartyLeave, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyLeave::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyMemberConnect
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyMemberConnect final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)> OnNotif;        // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyMemberConnect) == 0x000004, "Wrong alignment on ABParty_SetOnPartyMemberConnect");
static_assert(sizeof(ABParty_SetOnPartyMemberConnect) == 0x000014, "Wrong size on ABParty_SetOnPartyMemberConnect");
static_assert(offsetof(ABParty_SetOnPartyMemberConnect, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyMemberConnect::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyMemberDisconnect
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyMemberDisconnect final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Notif)> OnNotif;        // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyMemberDisconnect) == 0x000004, "Wrong alignment on ABParty_SetOnPartyMemberDisconnect");
static_assert(sizeof(ABParty_SetOnPartyMemberDisconnect) == 0x000014, "Wrong size on ABParty_SetOnPartyMemberDisconnect");
static_assert(offsetof(ABParty_SetOnPartyMemberDisconnect, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyMemberDisconnect::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyMemberLeave
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyMemberLeave final
{
public:
	TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Notif)> OnNotif;                   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyMemberLeave) == 0x000004, "Wrong alignment on ABParty_SetOnPartyMemberLeave");
static_assert(sizeof(ABParty_SetOnPartyMemberLeave) == 0x000014, "Wrong size on ABParty_SetOnPartyMemberLeave");
static_assert(offsetof(ABParty_SetOnPartyMemberLeave, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyMemberLeave::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyReject
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyReject final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyRejectNotice& Notif)> OnNotif;                  // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyReject) == 0x000004, "Wrong alignment on ABParty_SetOnPartyReject");
static_assert(sizeof(ABParty_SetOnPartyReject) == 0x000014, "Wrong size on ABParty_SetOnPartyReject");
static_assert(offsetof(ABParty_SetOnPartyReject, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyReject::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetOnPartyUpdate
// 0x0014 (0x0014 - 0x0000)
struct ABParty_SetOnPartyUpdate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyNotif& Notif)> OnNotif;                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABParty_SetOnPartyUpdate) == 0x000004, "Wrong alignment on ABParty_SetOnPartyUpdate");
static_assert(sizeof(ABParty_SetOnPartyUpdate) == 0x000014, "Wrong size on ABParty_SetOnPartyUpdate");
static_assert(offsetof(ABParty_SetOnPartyUpdate, OnNotif) == 0x000000, "Member 'ABParty_SetOnPartyUpdate::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.SetPartySizeLimit
// 0x0040 (0x0040 - 0x0000)
struct ABParty_SetPartySizeLimit final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABParty_SetPartySizeLimit) == 0x000008, "Wrong alignment on ABParty_SetPartySizeLimit");
static_assert(sizeof(ABParty_SetPartySizeLimit) == 0x000040, "Wrong size on ABParty_SetPartySizeLimit");
static_assert(offsetof(ABParty_SetPartySizeLimit, PartyId) == 0x000000, "Member 'ABParty_SetPartySizeLimit::PartyId' has a wrong offset!");
static_assert(offsetof(ABParty_SetPartySizeLimit, Limit) == 0x000010, "Member 'ABParty_SetPartySizeLimit::Limit' has a wrong offset!");
static_assert(offsetof(ABParty_SetPartySizeLimit, OnSuccess) == 0x000014, "Member 'ABParty_SetPartySizeLimit::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABParty_SetPartySizeLimit, OnError) == 0x000028, "Member 'ABParty_SetPartySizeLimit::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABParty.WritePartyStorage
// 0x0090 (0x0090 - 0x0000)
struct ABParty_WritePartyStorage final
{
public:
	struct FWritePartyStorageRequest              Request;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnResponse;               // 0x0060(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0074(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABParty_WritePartyStorage) == 0x000010, "Wrong alignment on ABParty_WritePartyStorage");
static_assert(sizeof(ABParty_WritePartyStorage) == 0x000090, "Wrong size on ABParty_WritePartyStorage");
static_assert(offsetof(ABParty_WritePartyStorage, Request) == 0x000000, "Member 'ABParty_WritePartyStorage::Request' has a wrong offset!");
static_assert(offsetof(ABParty_WritePartyStorage, OnResponse) == 0x000060, "Member 'ABParty_WritePartyStorage::OnResponse' has a wrong offset!");
static_assert(offsetof(ABParty_WritePartyStorage, OnError) == 0x000074, "Member 'ABParty_WritePartyStorage::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABPresence.BulkGetUserPresence
// 0x0040 (0x0040 - 0x0000)
struct ABPresence_BulkGetUserPresence final
{
public:
	struct FBulkGetUserPresenceRequest            Request;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsBulkUserStatusNotif& Response)> OnResponse;          // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABPresence_BulkGetUserPresence) == 0x000008, "Wrong alignment on ABPresence_BulkGetUserPresence");
static_assert(sizeof(ABPresence_BulkGetUserPresence) == 0x000040, "Wrong size on ABPresence_BulkGetUserPresence");
static_assert(offsetof(ABPresence_BulkGetUserPresence, Request) == 0x000000, "Member 'ABPresence_BulkGetUserPresence::Request' has a wrong offset!");
static_assert(offsetof(ABPresence_BulkGetUserPresence, OnResponse) == 0x000018, "Member 'ABPresence_BulkGetUserPresence::OnResponse' has a wrong offset!");
static_assert(offsetof(ABPresence_BulkGetUserPresence, OnError) == 0x00002C, "Member 'ABPresence_BulkGetUserPresence::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABPresence.GetAllFriendsStatus
// 0x0028 (0x0028 - 0x0000)
struct ABPresence_GetAllFriendsStatus final
{
public:
	TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Response)> OnResponse;       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABPresence_GetAllFriendsStatus) == 0x000004, "Wrong alignment on ABPresence_GetAllFriendsStatus");
static_assert(sizeof(ABPresence_GetAllFriendsStatus) == 0x000028, "Wrong size on ABPresence_GetAllFriendsStatus");
static_assert(offsetof(ABPresence_GetAllFriendsStatus, OnResponse) == 0x000000, "Member 'ABPresence_GetAllFriendsStatus::OnResponse' has a wrong offset!");
static_assert(offsetof(ABPresence_GetAllFriendsStatus, OnError) == 0x000014, "Member 'ABPresence_GetAllFriendsStatus::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABPresence.SetOnFriendStatusNotif
// 0x0014 (0x0014 - 0x0000)
struct ABPresence_SetOnFriendStatusNotif final
{
public:
	TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Notif)> OnNotif;                // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABPresence_SetOnFriendStatusNotif) == 0x000004, "Wrong alignment on ABPresence_SetOnFriendStatusNotif");
static_assert(sizeof(ABPresence_SetOnFriendStatusNotif) == 0x000014, "Wrong size on ABPresence_SetOnFriendStatusNotif");
static_assert(offsetof(ABPresence_SetOnFriendStatusNotif, OnNotif) == 0x000000, "Member 'ABPresence_SetOnFriendStatusNotif::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABPresence.SetPresenceStatus
// 0x0040 (0x0040 - 0x0000)
struct ABPresence_SetPresenceStatus final
{
public:
	struct FAccelBytePresenceStatus               Request;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Response)> OnResponse;       // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABPresence_SetPresenceStatus) == 0x000008, "Wrong alignment on ABPresence_SetPresenceStatus");
static_assert(sizeof(ABPresence_SetPresenceStatus) == 0x000040, "Wrong size on ABPresence_SetPresenceStatus");
static_assert(offsetof(ABPresence_SetPresenceStatus, Request) == 0x000000, "Member 'ABPresence_SetPresenceStatus::Request' has a wrong offset!");
static_assert(offsetof(ABPresence_SetPresenceStatus, OnResponse) == 0x000018, "Member 'ABPresence_SetPresenceStatus::OnResponse' has a wrong offset!");
static_assert(offsetof(ABPresence_SetPresenceStatus, OnError) == 0x00002C, "Member 'ABPresence_SetPresenceStatus::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABReward.GetRewardByRewardCode
// 0x0038 (0x0038 - 0x0000)
struct ABReward_GetRewardByRewardCode final
{
public:
	class FString                                 RewardCode;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)> OnSuccess;                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABReward_GetRewardByRewardCode) == 0x000008, "Wrong alignment on ABReward_GetRewardByRewardCode");
static_assert(sizeof(ABReward_GetRewardByRewardCode) == 0x000038, "Wrong size on ABReward_GetRewardByRewardCode");
static_assert(offsetof(ABReward_GetRewardByRewardCode, RewardCode) == 0x000000, "Member 'ABReward_GetRewardByRewardCode::RewardCode' has a wrong offset!");
static_assert(offsetof(ABReward_GetRewardByRewardCode, OnSuccess) == 0x000010, "Member 'ABReward_GetRewardByRewardCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABReward_GetRewardByRewardCode, OnError) == 0x000024, "Member 'ABReward_GetRewardByRewardCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABReward.GetRewardByRewardId
// 0x0038 (0x0038 - 0x0000)
struct ABReward_GetRewardByRewardId final
{
public:
	class FString                                 RewardId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRewardInfo& Response)> OnSuccess;                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABReward_GetRewardByRewardId) == 0x000008, "Wrong alignment on ABReward_GetRewardByRewardId");
static_assert(sizeof(ABReward_GetRewardByRewardId) == 0x000038, "Wrong size on ABReward_GetRewardByRewardId");
static_assert(offsetof(ABReward_GetRewardByRewardId, RewardId) == 0x000000, "Member 'ABReward_GetRewardByRewardId::RewardId' has a wrong offset!");
static_assert(offsetof(ABReward_GetRewardByRewardId, OnSuccess) == 0x000010, "Member 'ABReward_GetRewardByRewardId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABReward_GetRewardByRewardId, OnError) == 0x000024, "Member 'ABReward_GetRewardByRewardId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABReward.QueryRewards
// 0x0048 (0x0048 - 0x0000)
struct ABReward_QueryRewards final
{
public:
	class FString                                 EventTopic;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteRewardListSortBy                    SortBy;                                            // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsQueryReward& Response)> OnSuccess;                   // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABReward_QueryRewards) == 0x000008, "Wrong alignment on ABReward_QueryRewards");
static_assert(sizeof(ABReward_QueryRewards) == 0x000048, "Wrong size on ABReward_QueryRewards");
static_assert(offsetof(ABReward_QueryRewards, EventTopic) == 0x000000, "Member 'ABReward_QueryRewards::EventTopic' has a wrong offset!");
static_assert(offsetof(ABReward_QueryRewards, Offset) == 0x000010, "Member 'ABReward_QueryRewards::Offset' has a wrong offset!");
static_assert(offsetof(ABReward_QueryRewards, Limit) == 0x000014, "Member 'ABReward_QueryRewards::Limit' has a wrong offset!");
static_assert(offsetof(ABReward_QueryRewards, SortBy) == 0x000018, "Member 'ABReward_QueryRewards::SortBy' has a wrong offset!");
static_assert(offsetof(ABReward_QueryRewards, OnSuccess) == 0x00001C, "Member 'ABReward_QueryRewards::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABReward_QueryRewards, OnError) == 0x000030, "Member 'ABReward_QueryRewards::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSeasonPass.BulkClaimRewards
// 0x0028 (0x0028 - 0x0000)
struct ABSeasonPass_BulkClaimRewards final
{
public:
	TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)> OnSuccess;     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSeasonPass_BulkClaimRewards) == 0x000004, "Wrong alignment on ABSeasonPass_BulkClaimRewards");
static_assert(sizeof(ABSeasonPass_BulkClaimRewards) == 0x000028, "Wrong size on ABSeasonPass_BulkClaimRewards");
static_assert(offsetof(ABSeasonPass_BulkClaimRewards, OnSuccess) == 0x000000, "Member 'ABSeasonPass_BulkClaimRewards::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_BulkClaimRewards, OnError) == 0x000014, "Member 'ABSeasonPass_BulkClaimRewards::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSeasonPass.ClaimRewards
// 0x0050 (0x0050 - 0x0000)
struct ABSeasonPass_ClaimRewards final
{
public:
	struct FAccelByteModelsSeasonClaimRewardRequest RewardRequest;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSeasonClaimRewardResponse& Response)> OnSuccess;     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSeasonPass_ClaimRewards) == 0x000008, "Wrong alignment on ABSeasonPass_ClaimRewards");
static_assert(sizeof(ABSeasonPass_ClaimRewards) == 0x000050, "Wrong size on ABSeasonPass_ClaimRewards");
static_assert(offsetof(ABSeasonPass_ClaimRewards, RewardRequest) == 0x000000, "Member 'ABSeasonPass_ClaimRewards::RewardRequest' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_ClaimRewards, OnSuccess) == 0x000028, "Member 'ABSeasonPass_ClaimRewards::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_ClaimRewards, OnError) == 0x00003C, "Member 'ABSeasonPass_ClaimRewards::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSeasonPass.GetCurrentSeason
// 0x0038 (0x0038 - 0x0000)
struct ABSeasonPass_GetCurrentSeason final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSeasonInfo& Response)> OnSuccess;                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSeasonPass_GetCurrentSeason) == 0x000008, "Wrong alignment on ABSeasonPass_GetCurrentSeason");
static_assert(sizeof(ABSeasonPass_GetCurrentSeason) == 0x000038, "Wrong size on ABSeasonPass_GetCurrentSeason");
static_assert(offsetof(ABSeasonPass_GetCurrentSeason, Language) == 0x000000, "Member 'ABSeasonPass_GetCurrentSeason::Language' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_GetCurrentSeason, OnSuccess) == 0x000010, "Member 'ABSeasonPass_GetCurrentSeason::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_GetCurrentSeason, OnError) == 0x000024, "Member 'ABSeasonPass_GetCurrentSeason::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSeasonPass.GetCurrentUserSeason
// 0x0028 (0x0028 - 0x0000)
struct ABSeasonPass_GetCurrentUserSeason final
{
public:
	TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)> OnSuccess;                // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSeasonPass_GetCurrentUserSeason) == 0x000004, "Wrong alignment on ABSeasonPass_GetCurrentUserSeason");
static_assert(sizeof(ABSeasonPass_GetCurrentUserSeason) == 0x000028, "Wrong size on ABSeasonPass_GetCurrentUserSeason");
static_assert(offsetof(ABSeasonPass_GetCurrentUserSeason, OnSuccess) == 0x000000, "Member 'ABSeasonPass_GetCurrentUserSeason::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_GetCurrentUserSeason, OnError) == 0x000014, "Member 'ABSeasonPass_GetCurrentUserSeason::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSeasonPass.GetUserSeason
// 0x0038 (0x0038 - 0x0000)
struct ABSeasonPass_GetUserSeason final
{
public:
	class FString                                 SeasonId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserSeasonInfo& Response)> OnSuccess;                // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSeasonPass_GetUserSeason) == 0x000008, "Wrong alignment on ABSeasonPass_GetUserSeason");
static_assert(sizeof(ABSeasonPass_GetUserSeason) == 0x000038, "Wrong size on ABSeasonPass_GetUserSeason");
static_assert(offsetof(ABSeasonPass_GetUserSeason, SeasonId) == 0x000000, "Member 'ABSeasonPass_GetUserSeason::SeasonId' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_GetUserSeason, OnSuccess) == 0x000010, "Member 'ABSeasonPass_GetUserSeason::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSeasonPass_GetUserSeason, OnError) == 0x000024, "Member 'ABSeasonPass_GetUserSeason::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerAchievement.UnlockAchievement
// 0x0048 (0x0048 - 0x0000)
struct ABServerAchievement_UnlockAchievement final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementCode;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerAchievement_UnlockAchievement) == 0x000008, "Wrong alignment on ABServerAchievement_UnlockAchievement");
static_assert(sizeof(ABServerAchievement_UnlockAchievement) == 0x000048, "Wrong size on ABServerAchievement_UnlockAchievement");
static_assert(offsetof(ABServerAchievement_UnlockAchievement, UserId) == 0x000000, "Member 'ABServerAchievement_UnlockAchievement::UserId' has a wrong offset!");
static_assert(offsetof(ABServerAchievement_UnlockAchievement, AchievementCode) == 0x000010, "Member 'ABServerAchievement_UnlockAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(ABServerAchievement_UnlockAchievement, OnSuccess) == 0x000020, "Member 'ABServerAchievement_UnlockAchievement::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerAchievement_UnlockAchievement, OnError) == 0x000034, "Member 'ABServerAchievement_UnlockAchievement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.ConfigureAutoShutdown
// 0x0008 (0x0008 - 0x0000)
struct ABServerDSM_ConfigureAutoShutdown final
{
public:
	int32                                         TickSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountdownStart;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_ConfigureAutoShutdown) == 0x000004, "Wrong alignment on ABServerDSM_ConfigureAutoShutdown");
static_assert(sizeof(ABServerDSM_ConfigureAutoShutdown) == 0x000008, "Wrong size on ABServerDSM_ConfigureAutoShutdown");
static_assert(offsetof(ABServerDSM_ConfigureAutoShutdown, TickSeconds) == 0x000000, "Member 'ABServerDSM_ConfigureAutoShutdown::TickSeconds' has a wrong offset!");
static_assert(offsetof(ABServerDSM_ConfigureAutoShutdown, CountdownStart) == 0x000004, "Member 'ABServerDSM_ConfigureAutoShutdown::CountdownStart' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.DeregisterLocalServerFromDSM
// 0x0038 (0x0038 - 0x0000)
struct ABServerDSM_DeregisterLocalServerFromDSM final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_DeregisterLocalServerFromDSM) == 0x000008, "Wrong alignment on ABServerDSM_DeregisterLocalServerFromDSM");
static_assert(sizeof(ABServerDSM_DeregisterLocalServerFromDSM) == 0x000038, "Wrong size on ABServerDSM_DeregisterLocalServerFromDSM");
static_assert(offsetof(ABServerDSM_DeregisterLocalServerFromDSM, ServerName) == 0x000000, "Member 'ABServerDSM_DeregisterLocalServerFromDSM::ServerName' has a wrong offset!");
static_assert(offsetof(ABServerDSM_DeregisterLocalServerFromDSM, OnSuccess) == 0x000010, "Member 'ABServerDSM_DeregisterLocalServerFromDSM::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerDSM_DeregisterLocalServerFromDSM, OnError) == 0x000024, "Member 'ABServerDSM_DeregisterLocalServerFromDSM::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.GetPlayerNum
// 0x0004 (0x0004 - 0x0000)
struct ABServerDSM_GetPlayerNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_GetPlayerNum) == 0x000004, "Wrong alignment on ABServerDSM_GetPlayerNum");
static_assert(sizeof(ABServerDSM_GetPlayerNum) == 0x000004, "Wrong size on ABServerDSM_GetPlayerNum");
static_assert(offsetof(ABServerDSM_GetPlayerNum, ReturnValue) == 0x000000, "Member 'ABServerDSM_GetPlayerNum::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.GetServerInfo
// 0x0028 (0x0028 - 0x0000)
struct ABServerDSM_GetServerInfo final
{
public:
	TDelegate<void(const struct FAccelByteModelsServerInfo& Response)> OnSuccess;                    // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_GetServerInfo) == 0x000004, "Wrong alignment on ABServerDSM_GetServerInfo");
static_assert(sizeof(ABServerDSM_GetServerInfo) == 0x000028, "Wrong size on ABServerDSM_GetServerInfo");
static_assert(offsetof(ABServerDSM_GetServerInfo, OnSuccess) == 0x000000, "Member 'ABServerDSM_GetServerInfo::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerDSM_GetServerInfo, OnError) == 0x000014, "Member 'ABServerDSM_GetServerInfo::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.GetSessionId
// 0x0028 (0x0028 - 0x0000)
struct ABServerDSM_GetSessionId final
{
public:
	TDelegate<void(const struct FAccelByteModelsServerSessionResponse& Response)> OnSuccess;         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_GetSessionId) == 0x000004, "Wrong alignment on ABServerDSM_GetSessionId");
static_assert(sizeof(ABServerDSM_GetSessionId) == 0x000028, "Wrong size on ABServerDSM_GetSessionId");
static_assert(offsetof(ABServerDSM_GetSessionId, OnSuccess) == 0x000000, "Member 'ABServerDSM_GetSessionId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerDSM_GetSessionId, OnError) == 0x000014, "Member 'ABServerDSM_GetSessionId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.RegisterLocalServerToDSM
// 0x0050 (0x0050 - 0x0000)
struct ABServerDSM_RegisterLocalServerToDSM final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_RegisterLocalServerToDSM) == 0x000008, "Wrong alignment on ABServerDSM_RegisterLocalServerToDSM");
static_assert(sizeof(ABServerDSM_RegisterLocalServerToDSM) == 0x000050, "Wrong size on ABServerDSM_RegisterLocalServerToDSM");
static_assert(offsetof(ABServerDSM_RegisterLocalServerToDSM, IPAddress) == 0x000000, "Member 'ABServerDSM_RegisterLocalServerToDSM::IPAddress' has a wrong offset!");
static_assert(offsetof(ABServerDSM_RegisterLocalServerToDSM, Port) == 0x000010, "Member 'ABServerDSM_RegisterLocalServerToDSM::Port' has a wrong offset!");
static_assert(offsetof(ABServerDSM_RegisterLocalServerToDSM, ServerName) == 0x000018, "Member 'ABServerDSM_RegisterLocalServerToDSM::ServerName' has a wrong offset!");
static_assert(offsetof(ABServerDSM_RegisterLocalServerToDSM, OnSuccess) == 0x000028, "Member 'ABServerDSM_RegisterLocalServerToDSM::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerDSM_RegisterLocalServerToDSM, OnError) == 0x00003C, "Member 'ABServerDSM_RegisterLocalServerToDSM::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.RegisterServerToDSM
// 0x002C (0x002C - 0x0000)
struct ABServerDSM_RegisterServerToDSM final
{
public:
	int32                                         Port;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_RegisterServerToDSM) == 0x000004, "Wrong alignment on ABServerDSM_RegisterServerToDSM");
static_assert(sizeof(ABServerDSM_RegisterServerToDSM) == 0x00002C, "Wrong size on ABServerDSM_RegisterServerToDSM");
static_assert(offsetof(ABServerDSM_RegisterServerToDSM, Port) == 0x000000, "Member 'ABServerDSM_RegisterServerToDSM::Port' has a wrong offset!");
static_assert(offsetof(ABServerDSM_RegisterServerToDSM, OnSuccess) == 0x000004, "Member 'ABServerDSM_RegisterServerToDSM::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerDSM_RegisterServerToDSM, OnError) == 0x000018, "Member 'ABServerDSM_RegisterServerToDSM::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.SendShutdownToDSM
// 0x0040 (0x0040 - 0x0000)
struct ABServerDSM_SendShutdownToDSM final
{
public:
	bool                                          KillMe;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_SendShutdownToDSM) == 0x000008, "Wrong alignment on ABServerDSM_SendShutdownToDSM");
static_assert(sizeof(ABServerDSM_SendShutdownToDSM) == 0x000040, "Wrong size on ABServerDSM_SendShutdownToDSM");
static_assert(offsetof(ABServerDSM_SendShutdownToDSM, KillMe) == 0x000000, "Member 'ABServerDSM_SendShutdownToDSM::KillMe' has a wrong offset!");
static_assert(offsetof(ABServerDSM_SendShutdownToDSM, MatchId) == 0x000008, "Member 'ABServerDSM_SendShutdownToDSM::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerDSM_SendShutdownToDSM, OnSuccess) == 0x000018, "Member 'ABServerDSM_SendShutdownToDSM::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerDSM_SendShutdownToDSM, OnError) == 0x00002C, "Member 'ABServerDSM_SendShutdownToDSM::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.SetOnAutoShutdownErrorDelegate
// 0x0014 (0x0014 - 0x0000)
struct ABServerDSM_SetOnAutoShutdownErrorDelegate final
{
public:
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnShutdownError;             // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_SetOnAutoShutdownErrorDelegate) == 0x000004, "Wrong alignment on ABServerDSM_SetOnAutoShutdownErrorDelegate");
static_assert(sizeof(ABServerDSM_SetOnAutoShutdownErrorDelegate) == 0x000014, "Wrong size on ABServerDSM_SetOnAutoShutdownErrorDelegate");
static_assert(offsetof(ABServerDSM_SetOnAutoShutdownErrorDelegate, OnShutdownError) == 0x000000, "Member 'ABServerDSM_SetOnAutoShutdownErrorDelegate::OnShutdownError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.SetOnAutoShutdownResponse
// 0x0014 (0x0014 - 0x0000)
struct ABServerDSM_SetOnAutoShutdownResponse final
{
public:
	TDelegate<void()>                             OnAutoShutdown;                                    // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_SetOnAutoShutdownResponse) == 0x000004, "Wrong alignment on ABServerDSM_SetOnAutoShutdownResponse");
static_assert(sizeof(ABServerDSM_SetOnAutoShutdownResponse) == 0x000014, "Wrong size on ABServerDSM_SetOnAutoShutdownResponse");
static_assert(offsetof(ABServerDSM_SetOnAutoShutdownResponse, OnAutoShutdown) == 0x000000, "Member 'ABServerDSM_SetOnAutoShutdownResponse::OnAutoShutdown' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.SetServerName
// 0x0010 (0x0010 - 0x0000)
struct ABServerDSM_SetServerName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_SetServerName) == 0x000008, "Wrong alignment on ABServerDSM_SetServerName");
static_assert(sizeof(ABServerDSM_SetServerName) == 0x000010, "Wrong size on ABServerDSM_SetServerName");
static_assert(offsetof(ABServerDSM_SetServerName, Name_0) == 0x000000, "Member 'ABServerDSM_SetServerName::Name_0' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerDSM.SetServerType
// 0x0001 (0x0001 - 0x0000)
struct ABServerDSM_SetServerType final
{
public:
	EUEnumServerType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerDSM_SetServerType) == 0x000001, "Wrong alignment on ABServerDSM_SetServerType");
static_assert(sizeof(ABServerDSM_SetServerType) == 0x000001, "Wrong size on ABServerDSM_SetServerType");
static_assert(offsetof(ABServerDSM_SetServerType, Type) == 0x000000, "Member 'ABServerDSM_SetServerType::Type' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.GetListOfBlockedUsers
// 0x0038 (0x0038 - 0x0000)
struct ABServerLobby_GetListOfBlockedUsers final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListBlockedUserResponse& Response)> OnSuccess;       // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_GetListOfBlockedUsers) == 0x000008, "Wrong alignment on ABServerLobby_GetListOfBlockedUsers");
static_assert(sizeof(ABServerLobby_GetListOfBlockedUsers) == 0x000038, "Wrong size on ABServerLobby_GetListOfBlockedUsers");
static_assert(offsetof(ABServerLobby_GetListOfBlockedUsers, UserId) == 0x000000, "Member 'ABServerLobby_GetListOfBlockedUsers::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetListOfBlockedUsers, OnSuccess) == 0x000010, "Member 'ABServerLobby_GetListOfBlockedUsers::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetListOfBlockedUsers, OnError) == 0x000024, "Member 'ABServerLobby_GetListOfBlockedUsers::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.GetListOfBlockers
// 0x0038 (0x0038 - 0x0000)
struct ABServerLobby_GetListOfBlockers final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsListBlockerResponse& Response)> OnSuccess;           // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_GetListOfBlockers) == 0x000008, "Wrong alignment on ABServerLobby_GetListOfBlockers");
static_assert(sizeof(ABServerLobby_GetListOfBlockers) == 0x000038, "Wrong size on ABServerLobby_GetListOfBlockers");
static_assert(offsetof(ABServerLobby_GetListOfBlockers, UserId) == 0x000000, "Member 'ABServerLobby_GetListOfBlockers::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetListOfBlockers, OnSuccess) == 0x000010, "Member 'ABServerLobby_GetListOfBlockers::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetListOfBlockers, OnError) == 0x000024, "Member 'ABServerLobby_GetListOfBlockers::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.GetPartyDataByUserId
// 0x0038 (0x0038 - 0x0000)
struct ABServerLobby_GetPartyDataByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsDataPartyResponse& Response)> OnSuccess;             // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_GetPartyDataByUserId) == 0x000008, "Wrong alignment on ABServerLobby_GetPartyDataByUserId");
static_assert(sizeof(ABServerLobby_GetPartyDataByUserId) == 0x000038, "Wrong size on ABServerLobby_GetPartyDataByUserId");
static_assert(offsetof(ABServerLobby_GetPartyDataByUserId, UserId) == 0x000000, "Member 'ABServerLobby_GetPartyDataByUserId::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetPartyDataByUserId, OnSuccess) == 0x000010, "Member 'ABServerLobby_GetPartyDataByUserId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetPartyDataByUserId, OnError) == 0x000024, "Member 'ABServerLobby_GetPartyDataByUserId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.GetPartyStorage
// 0x0038 (0x0038 - 0x0000)
struct ABServerLobby_GetPartyStorage final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnSuccess;                // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_GetPartyStorage) == 0x000008, "Wrong alignment on ABServerLobby_GetPartyStorage");
static_assert(sizeof(ABServerLobby_GetPartyStorage) == 0x000038, "Wrong size on ABServerLobby_GetPartyStorage");
static_assert(offsetof(ABServerLobby_GetPartyStorage, PartyId) == 0x000000, "Member 'ABServerLobby_GetPartyStorage::PartyId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetPartyStorage, OnSuccess) == 0x000010, "Member 'ABServerLobby_GetPartyStorage::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetPartyStorage, OnError) == 0x000024, "Member 'ABServerLobby_GetPartyStorage::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.GetSessionAttribute
// 0x0048 (0x0048 - 0x0000)
struct ABServerLobby_GetSessionAttribute final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetSessionAttributeResponse& Response)> OnSuccess;   // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_GetSessionAttribute) == 0x000008, "Wrong alignment on ABServerLobby_GetSessionAttribute");
static_assert(sizeof(ABServerLobby_GetSessionAttribute) == 0x000048, "Wrong size on ABServerLobby_GetSessionAttribute");
static_assert(offsetof(ABServerLobby_GetSessionAttribute, UserId) == 0x000000, "Member 'ABServerLobby_GetSessionAttribute::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetSessionAttribute, Key) == 0x000010, "Member 'ABServerLobby_GetSessionAttribute::Key' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetSessionAttribute, OnSuccess) == 0x000020, "Member 'ABServerLobby_GetSessionAttribute::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetSessionAttribute, OnError) == 0x000034, "Member 'ABServerLobby_GetSessionAttribute::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.GetSessionAttributeAll
// 0x0038 (0x0038 - 0x0000)
struct ABServerLobby_GetSessionAttributeAll final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetSessionAttributeAllResponse& Response)> OnSuccess; // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_GetSessionAttributeAll) == 0x000008, "Wrong alignment on ABServerLobby_GetSessionAttributeAll");
static_assert(sizeof(ABServerLobby_GetSessionAttributeAll) == 0x000038, "Wrong size on ABServerLobby_GetSessionAttributeAll");
static_assert(offsetof(ABServerLobby_GetSessionAttributeAll, UserId) == 0x000000, "Member 'ABServerLobby_GetSessionAttributeAll::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetSessionAttributeAll, OnSuccess) == 0x000010, "Member 'ABServerLobby_GetSessionAttributeAll::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_GetSessionAttributeAll, OnError) == 0x000024, "Member 'ABServerLobby_GetSessionAttributeAll::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.SetSessionAttribute
// 0x0088 (0x0088 - 0x0000)
struct ABServerLobby_SetSessionAttribute final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0060(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0074(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_SetSessionAttribute) == 0x000008, "Wrong alignment on ABServerLobby_SetSessionAttribute");
static_assert(sizeof(ABServerLobby_SetSessionAttribute) == 0x000088, "Wrong size on ABServerLobby_SetSessionAttribute");
static_assert(offsetof(ABServerLobby_SetSessionAttribute, UserId) == 0x000000, "Member 'ABServerLobby_SetSessionAttribute::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttribute, Attributes) == 0x000010, "Member 'ABServerLobby_SetSessionAttribute::Attributes' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttribute, OnSuccess) == 0x000060, "Member 'ABServerLobby_SetSessionAttribute::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttribute, OnError) == 0x000074, "Member 'ABServerLobby_SetSessionAttribute::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.SetSessionAttributeString
// 0x0058 (0x0058 - 0x0000)
struct ABServerLobby_SetSessionAttributeString final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_SetSessionAttributeString) == 0x000008, "Wrong alignment on ABServerLobby_SetSessionAttributeString");
static_assert(sizeof(ABServerLobby_SetSessionAttributeString) == 0x000058, "Wrong size on ABServerLobby_SetSessionAttributeString");
static_assert(offsetof(ABServerLobby_SetSessionAttributeString, UserId) == 0x000000, "Member 'ABServerLobby_SetSessionAttributeString::UserId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttributeString, Key) == 0x000010, "Member 'ABServerLobby_SetSessionAttributeString::Key' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttributeString, Value) == 0x000020, "Member 'ABServerLobby_SetSessionAttributeString::Value' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttributeString, OnSuccess) == 0x000030, "Member 'ABServerLobby_SetSessionAttributeString::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_SetSessionAttributeString, OnError) == 0x000044, "Member 'ABServerLobby_SetSessionAttributeString::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerLobby.WritePartyStorage
// 0x0050 (0x0050 - 0x0000)
struct ABServerLobby_WritePartyStorage final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FJsonObjectWrapper& Payload)> PayloadModifier;                       // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RetryAttempt;                                      // 0x0024(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyDataNotif& Response)> OnSuccess;                // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerLobby_WritePartyStorage) == 0x000008, "Wrong alignment on ABServerLobby_WritePartyStorage");
static_assert(sizeof(ABServerLobby_WritePartyStorage) == 0x000050, "Wrong size on ABServerLobby_WritePartyStorage");
static_assert(offsetof(ABServerLobby_WritePartyStorage, PartyId) == 0x000000, "Member 'ABServerLobby_WritePartyStorage::PartyId' has a wrong offset!");
static_assert(offsetof(ABServerLobby_WritePartyStorage, PayloadModifier) == 0x000010, "Member 'ABServerLobby_WritePartyStorage::PayloadModifier' has a wrong offset!");
static_assert(offsetof(ABServerLobby_WritePartyStorage, RetryAttempt) == 0x000024, "Member 'ABServerLobby_WritePartyStorage::RetryAttempt' has a wrong offset!");
static_assert(offsetof(ABServerLobby_WritePartyStorage, OnSuccess) == 0x000028, "Member 'ABServerLobby_WritePartyStorage::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerLobby_WritePartyStorage, OnError) == 0x00003C, "Member 'ABServerLobby_WritePartyStorage::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.ActivateSessionStatusPolling
// 0x0040 (0x0040 - 0x0000)
struct ABServerMatchmaking_ActivateSessionStatusPolling final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntervalSec;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess;             // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABServerMatchmaking_ActivateSessionStatusPolling) == 0x000008, "Wrong alignment on ABServerMatchmaking_ActivateSessionStatusPolling");
static_assert(sizeof(ABServerMatchmaking_ActivateSessionStatusPolling) == 0x000040, "Wrong size on ABServerMatchmaking_ActivateSessionStatusPolling");
static_assert(offsetof(ABServerMatchmaking_ActivateSessionStatusPolling, MatchId) == 0x000000, "Member 'ABServerMatchmaking_ActivateSessionStatusPolling::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_ActivateSessionStatusPolling, IntervalSec) == 0x000010, "Member 'ABServerMatchmaking_ActivateSessionStatusPolling::IntervalSec' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_ActivateSessionStatusPolling, OnSuccess) == 0x000014, "Member 'ABServerMatchmaking_ActivateSessionStatusPolling::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_ActivateSessionStatusPolling, OnError) == 0x000028, "Member 'ABServerMatchmaking_ActivateSessionStatusPolling::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.AddUserToSession
// 0x0068 (0x0068 - 0x0000)
struct ABServerMatchmaking_AddUserToSession final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionalPartyId;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0040(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0054(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerMatchmaking_AddUserToSession) == 0x000008, "Wrong alignment on ABServerMatchmaking_AddUserToSession");
static_assert(sizeof(ABServerMatchmaking_AddUserToSession) == 0x000068, "Wrong size on ABServerMatchmaking_AddUserToSession");
static_assert(offsetof(ABServerMatchmaking_AddUserToSession, ChannelName) == 0x000000, "Member 'ABServerMatchmaking_AddUserToSession::ChannelName' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_AddUserToSession, MatchId) == 0x000010, "Member 'ABServerMatchmaking_AddUserToSession::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_AddUserToSession, UserId) == 0x000020, "Member 'ABServerMatchmaking_AddUserToSession::UserId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_AddUserToSession, OptionalPartyId) == 0x000030, "Member 'ABServerMatchmaking_AddUserToSession::OptionalPartyId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_AddUserToSession, OnSuccess) == 0x000040, "Member 'ABServerMatchmaking_AddUserToSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_AddUserToSession, OnError) == 0x000054, "Member 'ABServerMatchmaking_AddUserToSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.DequeueJoinableSession
// 0x0038 (0x0038 - 0x0000)
struct ABServerMatchmaking_DequeueJoinableSession final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerMatchmaking_DequeueJoinableSession) == 0x000008, "Wrong alignment on ABServerMatchmaking_DequeueJoinableSession");
static_assert(sizeof(ABServerMatchmaking_DequeueJoinableSession) == 0x000038, "Wrong size on ABServerMatchmaking_DequeueJoinableSession");
static_assert(offsetof(ABServerMatchmaking_DequeueJoinableSession, MatchId) == 0x000000, "Member 'ABServerMatchmaking_DequeueJoinableSession::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_DequeueJoinableSession, OnSuccess) == 0x000010, "Member 'ABServerMatchmaking_DequeueJoinableSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_DequeueJoinableSession, OnError) == 0x000024, "Member 'ABServerMatchmaking_DequeueJoinableSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.EnqueueJoinableSession
// 0x00F0 (0x00F0 - 0x0000)
struct ABServerMatchmaking_EnqueueJoinableSession final
{
public:
	struct FAccelByteModelsMatchmakingResult      MatchmakingResult;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x00C8(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00DC(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerMatchmaking_EnqueueJoinableSession) == 0x000008, "Wrong alignment on ABServerMatchmaking_EnqueueJoinableSession");
static_assert(sizeof(ABServerMatchmaking_EnqueueJoinableSession) == 0x0000F0, "Wrong size on ABServerMatchmaking_EnqueueJoinableSession");
static_assert(offsetof(ABServerMatchmaking_EnqueueJoinableSession, MatchmakingResult) == 0x000000, "Member 'ABServerMatchmaking_EnqueueJoinableSession::MatchmakingResult' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_EnqueueJoinableSession, OnSuccess) == 0x0000C8, "Member 'ABServerMatchmaking_EnqueueJoinableSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_EnqueueJoinableSession, OnError) == 0x0000DC, "Member 'ABServerMatchmaking_EnqueueJoinableSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.QuerySessionStatus
// 0x0038 (0x0038 - 0x0000)
struct ABServerMatchmaking_QuerySessionStatus final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess;             // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerMatchmaking_QuerySessionStatus) == 0x000008, "Wrong alignment on ABServerMatchmaking_QuerySessionStatus");
static_assert(sizeof(ABServerMatchmaking_QuerySessionStatus) == 0x000038, "Wrong size on ABServerMatchmaking_QuerySessionStatus");
static_assert(offsetof(ABServerMatchmaking_QuerySessionStatus, MatchId) == 0x000000, "Member 'ABServerMatchmaking_QuerySessionStatus::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_QuerySessionStatus, OnSuccess) == 0x000010, "Member 'ABServerMatchmaking_QuerySessionStatus::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_QuerySessionStatus, OnError) == 0x000024, "Member 'ABServerMatchmaking_QuerySessionStatus::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.RebalanceMatchmakingBasedOnMMR
// 0x0038 (0x0038 - 0x0000)
struct ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMatchmakingResult& Response)> OnSuccess;             // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR) == 0x000008, "Wrong alignment on ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR");
static_assert(sizeof(ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR) == 0x000038, "Wrong size on ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR");
static_assert(offsetof(ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR, MatchId) == 0x000000, "Member 'ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR, OnSuccess) == 0x000010, "Member 'ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR, OnError) == 0x000024, "Member 'ABServerMatchmaking_RebalanceMatchmakingBasedOnMMR::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerMatchmaking.RemoveUserFromSession
// 0x0120 (0x0120 - 0x0000)
struct ABServerMatchmaking_RemoveUserFromSession final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsMatchmakingResult      OptionalBody;                                      // 0x0030(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x00F8(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x010C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerMatchmaking_RemoveUserFromSession) == 0x000008, "Wrong alignment on ABServerMatchmaking_RemoveUserFromSession");
static_assert(sizeof(ABServerMatchmaking_RemoveUserFromSession) == 0x000120, "Wrong size on ABServerMatchmaking_RemoveUserFromSession");
static_assert(offsetof(ABServerMatchmaking_RemoveUserFromSession, ChannelName) == 0x000000, "Member 'ABServerMatchmaking_RemoveUserFromSession::ChannelName' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RemoveUserFromSession, MatchId) == 0x000010, "Member 'ABServerMatchmaking_RemoveUserFromSession::MatchId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RemoveUserFromSession, UserId) == 0x000020, "Member 'ABServerMatchmaking_RemoveUserFromSession::UserId' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RemoveUserFromSession, OptionalBody) == 0x000030, "Member 'ABServerMatchmaking_RemoveUserFromSession::OptionalBody' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RemoveUserFromSession, OnSuccess) == 0x0000F8, "Member 'ABServerMatchmaking_RemoveUserFromSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerMatchmaking_RemoveUserFromSession, OnError) == 0x00010C, "Member 'ABServerMatchmaking_RemoveUserFromSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerOauth2.GetJwks
// 0x0028 (0x0028 - 0x0000)
struct ABServerOauth2_GetJwks final
{
public:
	TDelegate<void(const struct FJwkSet& Response)> OnSuccess;                                       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerOauth2_GetJwks) == 0x000004, "Wrong alignment on ABServerOauth2_GetJwks");
static_assert(sizeof(ABServerOauth2_GetJwks) == 0x000028, "Wrong size on ABServerOauth2_GetJwks");
static_assert(offsetof(ABServerOauth2_GetJwks, OnSuccess) == 0x000000, "Member 'ABServerOauth2_GetJwks::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerOauth2_GetJwks, OnError) == 0x000014, "Member 'ABServerOauth2_GetJwks::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerOauth2.LoginWithClientCredentials
// 0x0028 (0x0028 - 0x0000)
struct ABServerOauth2_LoginWithClientCredentials final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerOauth2_LoginWithClientCredentials) == 0x000004, "Wrong alignment on ABServerOauth2_LoginWithClientCredentials");
static_assert(sizeof(ABServerOauth2_LoginWithClientCredentials) == 0x000028, "Wrong size on ABServerOauth2_LoginWithClientCredentials");
static_assert(offsetof(ABServerOauth2_LoginWithClientCredentials, OnSuccess) == 0x000000, "Member 'ABServerOauth2_LoginWithClientCredentials::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerOauth2_LoginWithClientCredentials, OnError) == 0x000014, "Member 'ABServerOauth2_LoginWithClientCredentials::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionPrivate
// 0x0098 (0x0098 - 0x0000)
struct ABServerSessionBrowser_CreateGameSessionPrivate final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpectator;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0070(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_CreateGameSessionPrivate) == 0x000008, "Wrong alignment on ABServerSessionBrowser_CreateGameSessionPrivate");
static_assert(sizeof(ABServerSessionBrowser_CreateGameSessionPrivate) == 0x000098, "Wrong size on ABServerSessionBrowser_CreateGameSessionPrivate");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, GameMode) == 0x000000, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, GameMapName) == 0x000010, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::GameMapName' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, GameVersion) == 0x000020, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::GameVersion' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, BotCount) == 0x000030, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::BotCount' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, MaxPlayer) == 0x000034, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, MaxSpectator) == 0x000038, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::MaxSpectator' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, Password) == 0x000040, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::Password' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, OtherSettings) == 0x000050, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, OnSuccess) == 0x000070, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPrivate, OnError) == 0x000084, "Member 'ABServerSessionBrowser_CreateGameSessionPrivate::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionPublic
// 0x0080 (0x0080 - 0x0000)
struct ABServerSessionBrowser_CreateGameSessionPublic final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0058(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x006C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_CreateGameSessionPublic) == 0x000008, "Wrong alignment on ABServerSessionBrowser_CreateGameSessionPublic");
static_assert(sizeof(ABServerSessionBrowser_CreateGameSessionPublic) == 0x000080, "Wrong size on ABServerSessionBrowser_CreateGameSessionPublic");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, GameMode) == 0x000000, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, GameMapName) == 0x000010, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::GameMapName' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, GameVersion) == 0x000020, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::GameVersion' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, BotCount) == 0x000030, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::BotCount' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, MaxPlayer) == 0x000034, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, OtherSettings) == 0x000038, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, OnSuccess) == 0x000058, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionPublic, OnError) == 0x00006C, "Member 'ABServerSessionBrowser_CreateGameSessionPublic::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionTypeSpecificByStruct
// 0x00D0 (0x00D0 - 0x0000)
struct ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct final
{
public:
	struct FAccelByteModelsSessionBrowserCreateRequest CreateSessionRequest;                         // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x00A8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00BC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct) == 0x000008, "Wrong alignment on ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct");
static_assert(sizeof(ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct) == 0x0000D0, "Wrong size on ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct, CreateSessionRequest) == 0x000000, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct::CreateSessionRequest' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct, OnSuccess) == 0x0000A8, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct, OnError) == 0x0000BC, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecificByStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionTypeSpecifiedByEnum
// 0x00A0 (0x00A0 - 0x0000)
struct ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum final
{
public:
	EAccelByteSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpectator;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0078(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x008C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum) == 0x000008, "Wrong alignment on ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum");
static_assert(sizeof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum) == 0x0000A0, "Wrong size on ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, SessionType) == 0x000000, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::SessionType' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, GameMode) == 0x000008, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, GameMapName) == 0x000018, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::GameMapName' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, GameVersion) == 0x000028, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::GameVersion' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, BotCount) == 0x000038, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::BotCount' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, MaxPlayer) == 0x00003C, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, MaxSpectator) == 0x000040, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::MaxSpectator' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, Password) == 0x000048, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::Password' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, OtherSettings) == 0x000058, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, OnSuccess) == 0x000078, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, OnError) == 0x00008C, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.CreateGameSessionTypeSpecifiedByString
// 0x00A8 (0x00A8 - 0x0000)
struct ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString final
{
public:
	class FString                                 SessionTypeString;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpectator;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0060(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString) == 0x000008, "Wrong alignment on ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString");
static_assert(sizeof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString) == 0x0000A8, "Wrong size on ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, SessionTypeString) == 0x000000, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::SessionTypeString' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, GameMode) == 0x000010, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, GameMapName) == 0x000020, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::GameMapName' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, GameVersion) == 0x000030, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::GameVersion' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, BotCount) == 0x000040, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::BotCount' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, MaxPlayer) == 0x000044, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, MaxSpectator) == 0x000048, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::MaxSpectator' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, Password) == 0x000050, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::Password' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, OtherSettings) == 0x000060, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, OnSuccess) == 0x000080, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString, OnError) == 0x000094, "Member 'ABServerSessionBrowser_CreateGameSessionTypeSpecifiedByString::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeEnum
// 0x0048 (0x0048 - 0x0000)
struct ABServerSessionBrowser_GetGameSessionsByTypeEnum final
{
public:
	EAccelByteSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_GetGameSessionsByTypeEnum) == 0x000008, "Wrong alignment on ABServerSessionBrowser_GetGameSessionsByTypeEnum");
static_assert(sizeof(ABServerSessionBrowser_GetGameSessionsByTypeEnum) == 0x000048, "Wrong size on ABServerSessionBrowser_GetGameSessionsByTypeEnum");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnum, SessionType) == 0x000000, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnum::SessionType' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnum, GameMode) == 0x000008, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnum::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnum, OnSuccess) == 0x000018, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnum::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnum, OnError) == 0x00002C, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnum::OnError' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnum, Offset) == 0x000040, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnum::Offset' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnum, Limit) == 0x000044, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnum::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeEnumAndMatchExist
// 0x0058 (0x0058 - 0x0000)
struct ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist final
{
public:
	EAccelByteSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchExist;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist) == 0x000008, "Wrong alignment on ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist");
static_assert(sizeof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist) == 0x000058, "Wrong size on ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, SessionType) == 0x000000, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::SessionType' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, GameMode) == 0x000008, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, MatchExist) == 0x000018, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::MatchExist' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, OnSuccess) == 0x000028, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, OnError) == 0x00003C, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::OnError' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, Offset) == 0x000050, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::Offset' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, Limit) == 0x000054, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeString
// 0x0050 (0x0050 - 0x0000)
struct ABServerSessionBrowser_GetGameSessionsByTypeString final
{
public:
	class FString                                 SessionTypeString;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_GetGameSessionsByTypeString) == 0x000008, "Wrong alignment on ABServerSessionBrowser_GetGameSessionsByTypeString");
static_assert(sizeof(ABServerSessionBrowser_GetGameSessionsByTypeString) == 0x000050, "Wrong size on ABServerSessionBrowser_GetGameSessionsByTypeString");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeString, SessionTypeString) == 0x000000, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeString::SessionTypeString' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeString, GameMode) == 0x000010, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeString::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeString, OnSuccess) == 0x000020, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeString::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeString, OnError) == 0x000034, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeString::OnError' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeString, Offset) == 0x000048, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeString::Offset' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeString, Limit) == 0x00004C, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeString::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetGameSessionsByTypeStringAndMatchExist
// 0x0060 (0x0060 - 0x0000)
struct ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist final
{
public:
	class FString                                 SessionTypeString;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchExist;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist) == 0x000008, "Wrong alignment on ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist");
static_assert(sizeof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist) == 0x000060, "Wrong size on ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, SessionTypeString) == 0x000000, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::SessionTypeString' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, GameMode) == 0x000010, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::GameMode' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, MatchExist) == 0x000020, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::MatchExist' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, OnSuccess) == 0x000030, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, OnError) == 0x000044, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::OnError' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, Offset) == 0x000058, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::Offset' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, Limit) == 0x00005C, "Member 'ABServerSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.GetRecentPlayer
// 0x0040 (0x0040 - 0x0000)
struct ABServerSessionBrowser_GetRecentPlayer final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_GetRecentPlayer) == 0x000008, "Wrong alignment on ABServerSessionBrowser_GetRecentPlayer");
static_assert(sizeof(ABServerSessionBrowser_GetRecentPlayer) == 0x000040, "Wrong size on ABServerSessionBrowser_GetRecentPlayer");
static_assert(offsetof(ABServerSessionBrowser_GetRecentPlayer, UserId) == 0x000000, "Member 'ABServerSessionBrowser_GetRecentPlayer::UserId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetRecentPlayer, OnSuccess) == 0x000010, "Member 'ABServerSessionBrowser_GetRecentPlayer::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetRecentPlayer, OnError) == 0x000024, "Member 'ABServerSessionBrowser_GetRecentPlayer::OnError' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetRecentPlayer, Offset) == 0x000038, "Member 'ABServerSessionBrowser_GetRecentPlayer::Offset' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_GetRecentPlayer, Limit) == 0x00003C, "Member 'ABServerSessionBrowser_GetRecentPlayer::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.JoinSession
// 0x0048 (0x0048 - 0x0000)
struct ABServerSessionBrowser_JoinSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_JoinSession) == 0x000008, "Wrong alignment on ABServerSessionBrowser_JoinSession");
static_assert(sizeof(ABServerSessionBrowser_JoinSession) == 0x000048, "Wrong size on ABServerSessionBrowser_JoinSession");
static_assert(offsetof(ABServerSessionBrowser_JoinSession, SessionId) == 0x000000, "Member 'ABServerSessionBrowser_JoinSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_JoinSession, Password) == 0x000010, "Member 'ABServerSessionBrowser_JoinSession::Password' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_JoinSession, OnSuccess) == 0x000020, "Member 'ABServerSessionBrowser_JoinSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_JoinSession, OnError) == 0x000034, "Member 'ABServerSessionBrowser_JoinSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.RegisterPlayer
// 0x0050 (0x0050 - 0x0000)
struct ABServerSessionBrowser_RegisterPlayer final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerToAdd;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsSpectator;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)> OnSuccess; // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABServerSessionBrowser_RegisterPlayer) == 0x000008, "Wrong alignment on ABServerSessionBrowser_RegisterPlayer");
static_assert(sizeof(ABServerSessionBrowser_RegisterPlayer) == 0x000050, "Wrong size on ABServerSessionBrowser_RegisterPlayer");
static_assert(offsetof(ABServerSessionBrowser_RegisterPlayer, SessionId) == 0x000000, "Member 'ABServerSessionBrowser_RegisterPlayer::SessionId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_RegisterPlayer, PlayerToAdd) == 0x000010, "Member 'ABServerSessionBrowser_RegisterPlayer::PlayerToAdd' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_RegisterPlayer, AsSpectator) == 0x000020, "Member 'ABServerSessionBrowser_RegisterPlayer::AsSpectator' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_RegisterPlayer, OnSuccess) == 0x000024, "Member 'ABServerSessionBrowser_RegisterPlayer::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_RegisterPlayer, OnError) == 0x000038, "Member 'ABServerSessionBrowser_RegisterPlayer::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.RemoveGameSession
// 0x0038 (0x0038 - 0x0000)
struct ABServerSessionBrowser_RemoveGameSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_RemoveGameSession) == 0x000008, "Wrong alignment on ABServerSessionBrowser_RemoveGameSession");
static_assert(sizeof(ABServerSessionBrowser_RemoveGameSession) == 0x000038, "Wrong size on ABServerSessionBrowser_RemoveGameSession");
static_assert(offsetof(ABServerSessionBrowser_RemoveGameSession, SessionId) == 0x000000, "Member 'ABServerSessionBrowser_RemoveGameSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_RemoveGameSession, OnSuccess) == 0x000010, "Member 'ABServerSessionBrowser_RemoveGameSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_RemoveGameSession, OnError) == 0x000024, "Member 'ABServerSessionBrowser_RemoveGameSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.UnregisterPlayer
// 0x0048 (0x0048 - 0x0000)
struct ABServerSessionBrowser_UnregisterPlayer final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerToRemove;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)> OnSuccess; // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_UnregisterPlayer) == 0x000008, "Wrong alignment on ABServerSessionBrowser_UnregisterPlayer");
static_assert(sizeof(ABServerSessionBrowser_UnregisterPlayer) == 0x000048, "Wrong size on ABServerSessionBrowser_UnregisterPlayer");
static_assert(offsetof(ABServerSessionBrowser_UnregisterPlayer, SessionId) == 0x000000, "Member 'ABServerSessionBrowser_UnregisterPlayer::SessionId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UnregisterPlayer, PlayerToRemove) == 0x000010, "Member 'ABServerSessionBrowser_UnregisterPlayer::PlayerToRemove' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UnregisterPlayer, OnSuccess) == 0x000020, "Member 'ABServerSessionBrowser_UnregisterPlayer::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UnregisterPlayer, OnError) == 0x000034, "Member 'ABServerSessionBrowser_UnregisterPlayer::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.UpdateGameSession
// 0x0040 (0x0040 - 0x0000)
struct ABServerSessionBrowser_UpdateGameSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlayerCount;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_UpdateGameSession) == 0x000008, "Wrong alignment on ABServerSessionBrowser_UpdateGameSession");
static_assert(sizeof(ABServerSessionBrowser_UpdateGameSession) == 0x000040, "Wrong size on ABServerSessionBrowser_UpdateGameSession");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSession, SessionId) == 0x000000, "Member 'ABServerSessionBrowser_UpdateGameSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSession, MaxPlayer) == 0x000010, "Member 'ABServerSessionBrowser_UpdateGameSession::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSession, CurrentPlayerCount) == 0x000014, "Member 'ABServerSessionBrowser_UpdateGameSession::CurrentPlayerCount' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSession, OnSuccess) == 0x000018, "Member 'ABServerSessionBrowser_UpdateGameSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSession, OnError) == 0x00002C, "Member 'ABServerSessionBrowser_UpdateGameSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerSessionBrowser.UpdateGameSessionByStruct
// 0x0040 (0x0040 - 0x0000)
struct ABServerSessionBrowser_UpdateGameSessionByStruct final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsSessionBrowserUpdateRequest UpdateSessionRequest;                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerSessionBrowser_UpdateGameSessionByStruct) == 0x000008, "Wrong alignment on ABServerSessionBrowser_UpdateGameSessionByStruct");
static_assert(sizeof(ABServerSessionBrowser_UpdateGameSessionByStruct) == 0x000040, "Wrong size on ABServerSessionBrowser_UpdateGameSessionByStruct");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSessionByStruct, SessionId) == 0x000000, "Member 'ABServerSessionBrowser_UpdateGameSessionByStruct::SessionId' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSessionByStruct, UpdateSessionRequest) == 0x000010, "Member 'ABServerSessionBrowser_UpdateGameSessionByStruct::UpdateSessionRequest' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSessionByStruct, OnSuccess) == 0x000018, "Member 'ABServerSessionBrowser_UpdateGameSessionByStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerSessionBrowser_UpdateGameSessionByStruct, OnError) == 0x00002C, "Member 'ABServerSessionBrowser_UpdateGameSessionByStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.BulkFetchStatItemsValue
// 0x0048 (0x0048 - 0x0000)
struct ABServerStatistic_BulkFetchStatItemsValue final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)> OnSuccess; // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerStatistic_BulkFetchStatItemsValue) == 0x000008, "Wrong alignment on ABServerStatistic_BulkFetchStatItemsValue");
static_assert(sizeof(ABServerStatistic_BulkFetchStatItemsValue) == 0x000048, "Wrong size on ABServerStatistic_BulkFetchStatItemsValue");
static_assert(offsetof(ABServerStatistic_BulkFetchStatItemsValue, StatCode) == 0x000000, "Member 'ABServerStatistic_BulkFetchStatItemsValue::StatCode' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_BulkFetchStatItemsValue, UserIds) == 0x000010, "Member 'ABServerStatistic_BulkFetchStatItemsValue::UserIds' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_BulkFetchStatItemsValue, OnSuccess) == 0x000020, "Member 'ABServerStatistic_BulkFetchStatItemsValue::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_BulkFetchStatItemsValue, OnError) == 0x000034, "Member 'ABServerStatistic_BulkFetchStatItemsValue::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.CreateUserStatItems
// 0x0048 (0x0048 - 0x0000)
struct ABServerStatistic_CreateUserStatItems final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StatCodes;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess; // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerStatistic_CreateUserStatItems) == 0x000008, "Wrong alignment on ABServerStatistic_CreateUserStatItems");
static_assert(sizeof(ABServerStatistic_CreateUserStatItems) == 0x000048, "Wrong size on ABServerStatistic_CreateUserStatItems");
static_assert(offsetof(ABServerStatistic_CreateUserStatItems, UserId) == 0x000000, "Member 'ABServerStatistic_CreateUserStatItems::UserId' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_CreateUserStatItems, StatCodes) == 0x000010, "Member 'ABServerStatistic_CreateUserStatItems::StatCodes' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_CreateUserStatItems, OnSuccess) == 0x000020, "Member 'ABServerStatistic_CreateUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_CreateUserStatItems, OnError) == 0x000034, "Member 'ABServerStatistic_CreateUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.GetAllUserStatItems
// 0x0048 (0x0048 - 0x0000)
struct ABServerStatistic_GetAllUserStatItems final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess; // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticSortBy                     SortBy;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABServerStatistic_GetAllUserStatItems) == 0x000008, "Wrong alignment on ABServerStatistic_GetAllUserStatItems");
static_assert(sizeof(ABServerStatistic_GetAllUserStatItems) == 0x000048, "Wrong size on ABServerStatistic_GetAllUserStatItems");
static_assert(offsetof(ABServerStatistic_GetAllUserStatItems, UserId) == 0x000000, "Member 'ABServerStatistic_GetAllUserStatItems::UserId' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetAllUserStatItems, OnSuccess) == 0x000010, "Member 'ABServerStatistic_GetAllUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetAllUserStatItems, OnError) == 0x000024, "Member 'ABServerStatistic_GetAllUserStatItems::OnError' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetAllUserStatItems, Limit) == 0x000038, "Member 'ABServerStatistic_GetAllUserStatItems::Limit' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetAllUserStatItems, Offset) == 0x00003C, "Member 'ABServerStatistic_GetAllUserStatItems::Offset' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetAllUserStatItems, SortBy) == 0x000040, "Member 'ABServerStatistic_GetAllUserStatItems::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.GetGlobalStatItemsByStatCode
// 0x0038 (0x0038 - 0x0000)
struct ABServerStatistic_GetGlobalStatItemsByStatCode final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)> OnSuccess;   // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerStatistic_GetGlobalStatItemsByStatCode) == 0x000008, "Wrong alignment on ABServerStatistic_GetGlobalStatItemsByStatCode");
static_assert(sizeof(ABServerStatistic_GetGlobalStatItemsByStatCode) == 0x000038, "Wrong size on ABServerStatistic_GetGlobalStatItemsByStatCode");
static_assert(offsetof(ABServerStatistic_GetGlobalStatItemsByStatCode, StatCode) == 0x000000, "Member 'ABServerStatistic_GetGlobalStatItemsByStatCode::StatCode' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetGlobalStatItemsByStatCode, OnSuccess) == 0x000010, "Member 'ABServerStatistic_GetGlobalStatItemsByStatCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetGlobalStatItemsByStatCode, OnError) == 0x000024, "Member 'ABServerStatistic_GetGlobalStatItemsByStatCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.GetUserStatItems
// 0x0068 (0x0068 - 0x0000)
struct ABServerStatistic_GetUserStatItems final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StatCodes;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess; // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticSortBy                     SortBy;                                            // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABServerStatistic_GetUserStatItems) == 0x000008, "Wrong alignment on ABServerStatistic_GetUserStatItems");
static_assert(sizeof(ABServerStatistic_GetUserStatItems) == 0x000068, "Wrong size on ABServerStatistic_GetUserStatItems");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, UserId) == 0x000000, "Member 'ABServerStatistic_GetUserStatItems::UserId' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, StatCodes) == 0x000010, "Member 'ABServerStatistic_GetUserStatItems::StatCodes' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, Tags) == 0x000020, "Member 'ABServerStatistic_GetUserStatItems::Tags' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, OnSuccess) == 0x000030, "Member 'ABServerStatistic_GetUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, OnError) == 0x000044, "Member 'ABServerStatistic_GetUserStatItems::OnError' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, Limit) == 0x000058, "Member 'ABServerStatistic_GetUserStatItems::Limit' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, Offset) == 0x00005C, "Member 'ABServerStatistic_GetUserStatItems::Offset' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_GetUserStatItems, SortBy) == 0x000060, "Member 'ABServerStatistic_GetUserStatItems::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.IncrementManyUsersStatItems
// 0x0038 (0x0038 - 0x0000)
struct ABServerStatistic_IncrementManyUsersStatItems final
{
public:
	TArray<struct FAccelByteModelsBulkUserStatItemInc> Data;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess; // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerStatistic_IncrementManyUsersStatItems) == 0x000008, "Wrong alignment on ABServerStatistic_IncrementManyUsersStatItems");
static_assert(sizeof(ABServerStatistic_IncrementManyUsersStatItems) == 0x000038, "Wrong size on ABServerStatistic_IncrementManyUsersStatItems");
static_assert(offsetof(ABServerStatistic_IncrementManyUsersStatItems, Data) == 0x000000, "Member 'ABServerStatistic_IncrementManyUsersStatItems::Data' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_IncrementManyUsersStatItems, OnSuccess) == 0x000010, "Member 'ABServerStatistic_IncrementManyUsersStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_IncrementManyUsersStatItems, OnError) == 0x000024, "Member 'ABServerStatistic_IncrementManyUsersStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerStatistic.IncrementUserStatItems
// 0x0048 (0x0048 - 0x0000)
struct ABServerStatistic_IncrementUserStatItems final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsBulkStatItemInc> Data;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Response)> OnSuccess; // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerStatistic_IncrementUserStatItems) == 0x000008, "Wrong alignment on ABServerStatistic_IncrementUserStatItems");
static_assert(sizeof(ABServerStatistic_IncrementUserStatItems) == 0x000048, "Wrong size on ABServerStatistic_IncrementUserStatItems");
static_assert(offsetof(ABServerStatistic_IncrementUserStatItems, UserId) == 0x000000, "Member 'ABServerStatistic_IncrementUserStatItems::UserId' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_IncrementUserStatItems, Data) == 0x000010, "Member 'ABServerStatistic_IncrementUserStatItems::Data' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_IncrementUserStatItems, OnSuccess) == 0x000020, "Member 'ABServerStatistic_IncrementUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerStatistic_IncrementUserStatItems, OnError) == 0x000034, "Member 'ABServerStatistic_IncrementUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerUGC.DeleteContentByShareCode
// 0x0058 (0x0058 - 0x0000)
struct ABServerUGC_DeleteContentByShareCode final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerUGC_DeleteContentByShareCode) == 0x000008, "Wrong alignment on ABServerUGC_DeleteContentByShareCode");
static_assert(sizeof(ABServerUGC_DeleteContentByShareCode) == 0x000058, "Wrong size on ABServerUGC_DeleteContentByShareCode");
static_assert(offsetof(ABServerUGC_DeleteContentByShareCode, UserId) == 0x000000, "Member 'ABServerUGC_DeleteContentByShareCode::UserId' has a wrong offset!");
static_assert(offsetof(ABServerUGC_DeleteContentByShareCode, ChannelId) == 0x000010, "Member 'ABServerUGC_DeleteContentByShareCode::ChannelId' has a wrong offset!");
static_assert(offsetof(ABServerUGC_DeleteContentByShareCode, ShareCode) == 0x000020, "Member 'ABServerUGC_DeleteContentByShareCode::ShareCode' has a wrong offset!");
static_assert(offsetof(ABServerUGC_DeleteContentByShareCode, OnSuccess) == 0x000030, "Member 'ABServerUGC_DeleteContentByShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerUGC_DeleteContentByShareCode, OnError) == 0x000044, "Member 'ABServerUGC_DeleteContentByShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerUGC.ModifyContentByShareCode
// 0x0110 (0x0110 - 0x0000)
struct ABServerUGC_ModifyContentByShareCode final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCUpdateRequest       ModifyRequest;                                     // 0x0030(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x00E8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00FC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerUGC_ModifyContentByShareCode) == 0x000008, "Wrong alignment on ABServerUGC_ModifyContentByShareCode");
static_assert(sizeof(ABServerUGC_ModifyContentByShareCode) == 0x000110, "Wrong size on ABServerUGC_ModifyContentByShareCode");
static_assert(offsetof(ABServerUGC_ModifyContentByShareCode, UserId) == 0x000000, "Member 'ABServerUGC_ModifyContentByShareCode::UserId' has a wrong offset!");
static_assert(offsetof(ABServerUGC_ModifyContentByShareCode, ChannelId) == 0x000010, "Member 'ABServerUGC_ModifyContentByShareCode::ChannelId' has a wrong offset!");
static_assert(offsetof(ABServerUGC_ModifyContentByShareCode, ShareCode) == 0x000020, "Member 'ABServerUGC_ModifyContentByShareCode::ShareCode' has a wrong offset!");
static_assert(offsetof(ABServerUGC_ModifyContentByShareCode, ModifyRequest) == 0x000030, "Member 'ABServerUGC_ModifyContentByShareCode::ModifyRequest' has a wrong offset!");
static_assert(offsetof(ABServerUGC_ModifyContentByShareCode, OnSuccess) == 0x0000E8, "Member 'ABServerUGC_ModifyContentByShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerUGC_ModifyContentByShareCode, OnError) == 0x0000FC, "Member 'ABServerUGC_ModifyContentByShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerUGC.SearchContents
// 0x00A0 (0x00A0 - 0x0000)
struct ABServerUGC_SearchContents final
{
public:
	struct FAccelByteModelsUGCSearchContentsRequest Request;                                         // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)> OnSuccess; // 0x0070(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerUGC_SearchContents) == 0x000008, "Wrong alignment on ABServerUGC_SearchContents");
static_assert(sizeof(ABServerUGC_SearchContents) == 0x0000A0, "Wrong size on ABServerUGC_SearchContents");
static_assert(offsetof(ABServerUGC_SearchContents, Request) == 0x000000, "Member 'ABServerUGC_SearchContents::Request' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContents, OnSuccess) == 0x000070, "Member 'ABServerUGC_SearchContents::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContents, OnError) == 0x000084, "Member 'ABServerUGC_SearchContents::OnError' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContents, Limit) == 0x000098, "Member 'ABServerUGC_SearchContents::Limit' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContents, Offset) == 0x00009C, "Member 'ABServerUGC_SearchContents::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerUGC.SearchContentsSpecificToChannel
// 0x00B0 (0x00B0 - 0x0000)
struct ABServerUGC_SearchContentsSpecificToChannel final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCSearchContentsRequest Request;                                         // 0x0010(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)> OnSuccess; // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerUGC_SearchContentsSpecificToChannel) == 0x000008, "Wrong alignment on ABServerUGC_SearchContentsSpecificToChannel");
static_assert(sizeof(ABServerUGC_SearchContentsSpecificToChannel) == 0x0000B0, "Wrong size on ABServerUGC_SearchContentsSpecificToChannel");
static_assert(offsetof(ABServerUGC_SearchContentsSpecificToChannel, ChannelId) == 0x000000, "Member 'ABServerUGC_SearchContentsSpecificToChannel::ChannelId' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContentsSpecificToChannel, Request) == 0x000010, "Member 'ABServerUGC_SearchContentsSpecificToChannel::Request' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContentsSpecificToChannel, OnSuccess) == 0x000080, "Member 'ABServerUGC_SearchContentsSpecificToChannel::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContentsSpecificToChannel, OnError) == 0x000094, "Member 'ABServerUGC_SearchContentsSpecificToChannel::OnError' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContentsSpecificToChannel, Limit) == 0x0000A8, "Member 'ABServerUGC_SearchContentsSpecificToChannel::Limit' has a wrong offset!");
static_assert(offsetof(ABServerUGC_SearchContentsSpecificToChannel, Offset) == 0x0000AC, "Member 'ABServerUGC_SearchContentsSpecificToChannel::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionAttribute.GetAllSessionAttribute
// 0x0038 (0x0038 - 0x0000)
struct ABSessionAttribute_GetAllSessionAttribute final
{
public:
	TDelegate<void(const struct FAccelByteModelsGetAllSessionAttributesResponse& Response)> OnResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionAttribute_GetAllSessionAttribute) == 0x000008, "Wrong alignment on ABSessionAttribute_GetAllSessionAttribute");
static_assert(sizeof(ABSessionAttribute_GetAllSessionAttribute) == 0x000038, "Wrong size on ABSessionAttribute_GetAllSessionAttribute");
static_assert(offsetof(ABSessionAttribute_GetAllSessionAttribute, OnResponse) == 0x000000, "Member 'ABSessionAttribute_GetAllSessionAttribute::OnResponse' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_GetAllSessionAttribute, OnError) == 0x000014, "Member 'ABSessionAttribute_GetAllSessionAttribute::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_GetAllSessionAttribute, ReturnValue) == 0x000028, "Member 'ABSessionAttribute_GetAllSessionAttribute::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionAttribute.GetSessionAttribute
// 0x0048 (0x0048 - 0x0000)
struct ABSessionAttribute_GetSessionAttribute final
{
public:
	struct FGetSessionAttributeRequest            Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetSessionAttributesResponse& Response)> OnResponse; // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionAttribute_GetSessionAttribute) == 0x000008, "Wrong alignment on ABSessionAttribute_GetSessionAttribute");
static_assert(sizeof(ABSessionAttribute_GetSessionAttribute) == 0x000048, "Wrong size on ABSessionAttribute_GetSessionAttribute");
static_assert(offsetof(ABSessionAttribute_GetSessionAttribute, Request) == 0x000000, "Member 'ABSessionAttribute_GetSessionAttribute::Request' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_GetSessionAttribute, OnResponse) == 0x000010, "Member 'ABSessionAttribute_GetSessionAttribute::OnResponse' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_GetSessionAttribute, OnError) == 0x000024, "Member 'ABSessionAttribute_GetSessionAttribute::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_GetSessionAttribute, ReturnValue) == 0x000038, "Member 'ABSessionAttribute_GetSessionAttribute::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionAttribute.SetSessionAttribute
// 0x0058 (0x0058 - 0x0000)
struct ABSessionAttribute_SetSessionAttribute final
{
public:
	struct FSetSessionAttributeRequest            Request;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSetSessionAttributesResponse& Response)> OnResponse; // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionAttribute_SetSessionAttribute) == 0x000008, "Wrong alignment on ABSessionAttribute_SetSessionAttribute");
static_assert(sizeof(ABSessionAttribute_SetSessionAttribute) == 0x000058, "Wrong size on ABSessionAttribute_SetSessionAttribute");
static_assert(offsetof(ABSessionAttribute_SetSessionAttribute, Request) == 0x000000, "Member 'ABSessionAttribute_SetSessionAttribute::Request' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_SetSessionAttribute, OnResponse) == 0x000020, "Member 'ABSessionAttribute_SetSessionAttribute::OnResponse' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_SetSessionAttribute, OnError) == 0x000034, "Member 'ABSessionAttribute_SetSessionAttribute::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionAttribute_SetSessionAttribute, ReturnValue) == 0x000048, "Member 'ABSessionAttribute_SetSessionAttribute::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionPrivate
// 0x0098 (0x0098 - 0x0000)
struct ABSessionBrowser_CreateGameSessionPrivate final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpectator;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0070(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_CreateGameSessionPrivate) == 0x000008, "Wrong alignment on ABSessionBrowser_CreateGameSessionPrivate");
static_assert(sizeof(ABSessionBrowser_CreateGameSessionPrivate) == 0x000098, "Wrong size on ABSessionBrowser_CreateGameSessionPrivate");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, GameMode) == 0x000000, "Member 'ABSessionBrowser_CreateGameSessionPrivate::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, GameMapName) == 0x000010, "Member 'ABSessionBrowser_CreateGameSessionPrivate::GameMapName' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, GameVersion) == 0x000020, "Member 'ABSessionBrowser_CreateGameSessionPrivate::GameVersion' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, BotCount) == 0x000030, "Member 'ABSessionBrowser_CreateGameSessionPrivate::BotCount' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, MaxPlayer) == 0x000034, "Member 'ABSessionBrowser_CreateGameSessionPrivate::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, MaxSpectator) == 0x000038, "Member 'ABSessionBrowser_CreateGameSessionPrivate::MaxSpectator' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, Password) == 0x000040, "Member 'ABSessionBrowser_CreateGameSessionPrivate::Password' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, OtherSettings) == 0x000050, "Member 'ABSessionBrowser_CreateGameSessionPrivate::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, OnSuccess) == 0x000070, "Member 'ABSessionBrowser_CreateGameSessionPrivate::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPrivate, OnError) == 0x000084, "Member 'ABSessionBrowser_CreateGameSessionPrivate::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionPublic
// 0x0080 (0x0080 - 0x0000)
struct ABSessionBrowser_CreateGameSessionPublic final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0058(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x006C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_CreateGameSessionPublic) == 0x000008, "Wrong alignment on ABSessionBrowser_CreateGameSessionPublic");
static_assert(sizeof(ABSessionBrowser_CreateGameSessionPublic) == 0x000080, "Wrong size on ABSessionBrowser_CreateGameSessionPublic");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, GameMode) == 0x000000, "Member 'ABSessionBrowser_CreateGameSessionPublic::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, GameMapName) == 0x000010, "Member 'ABSessionBrowser_CreateGameSessionPublic::GameMapName' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, GameVersion) == 0x000020, "Member 'ABSessionBrowser_CreateGameSessionPublic::GameVersion' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, BotCount) == 0x000030, "Member 'ABSessionBrowser_CreateGameSessionPublic::BotCount' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, MaxPlayer) == 0x000034, "Member 'ABSessionBrowser_CreateGameSessionPublic::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, OtherSettings) == 0x000038, "Member 'ABSessionBrowser_CreateGameSessionPublic::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, OnSuccess) == 0x000058, "Member 'ABSessionBrowser_CreateGameSessionPublic::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionPublic, OnError) == 0x00006C, "Member 'ABSessionBrowser_CreateGameSessionPublic::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionTypeSpecificByStruct
// 0x00D0 (0x00D0 - 0x0000)
struct ABSessionBrowser_CreateGameSessionTypeSpecificByStruct final
{
public:
	struct FAccelByteModelsSessionBrowserCreateRequest CreateSessionRequest;                         // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x00A8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00BC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_CreateGameSessionTypeSpecificByStruct) == 0x000008, "Wrong alignment on ABSessionBrowser_CreateGameSessionTypeSpecificByStruct");
static_assert(sizeof(ABSessionBrowser_CreateGameSessionTypeSpecificByStruct) == 0x0000D0, "Wrong size on ABSessionBrowser_CreateGameSessionTypeSpecificByStruct");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecificByStruct, CreateSessionRequest) == 0x000000, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecificByStruct::CreateSessionRequest' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecificByStruct, OnSuccess) == 0x0000A8, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecificByStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecificByStruct, OnError) == 0x0000BC, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecificByStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionTypeSpecifiedByEnum
// 0x00A0 (0x00A0 - 0x0000)
struct ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum final
{
public:
	EAccelByteSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpectator;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0078(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x008C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum) == 0x000008, "Wrong alignment on ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum");
static_assert(sizeof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum) == 0x0000A0, "Wrong size on ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, SessionType) == 0x000000, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::SessionType' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, GameMode) == 0x000008, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, GameMapName) == 0x000018, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::GameMapName' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, GameVersion) == 0x000028, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::GameVersion' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, BotCount) == 0x000038, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::BotCount' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, MaxPlayer) == 0x00003C, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, MaxSpectator) == 0x000040, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::MaxSpectator' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, Password) == 0x000048, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::Password' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, OtherSettings) == 0x000058, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, OnSuccess) == 0x000078, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum, OnError) == 0x00008C, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByEnum::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.CreateGameSessionTypeSpecifiedByString
// 0x00A8 (0x00A8 - 0x0000)
struct ABSessionBrowser_CreateGameSessionTypeSpecifiedByString final
{
public:
	class FString                                 SessionTypeString;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMapName;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpectator;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OtherSettings;                                     // 0x0060(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString) == 0x000008, "Wrong alignment on ABSessionBrowser_CreateGameSessionTypeSpecifiedByString");
static_assert(sizeof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString) == 0x0000A8, "Wrong size on ABSessionBrowser_CreateGameSessionTypeSpecifiedByString");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, SessionTypeString) == 0x000000, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::SessionTypeString' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, GameMode) == 0x000010, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, GameMapName) == 0x000020, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::GameMapName' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, GameVersion) == 0x000030, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::GameVersion' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, BotCount) == 0x000040, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::BotCount' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, MaxPlayer) == 0x000044, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, MaxSpectator) == 0x000048, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::MaxSpectator' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, Password) == 0x000050, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::Password' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, OtherSettings) == 0x000060, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::OtherSettings' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, OnSuccess) == 0x000080, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_CreateGameSessionTypeSpecifiedByString, OnError) == 0x000094, "Member 'ABSessionBrowser_CreateGameSessionTypeSpecifiedByString::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSession
// 0x0038 (0x0038 - 0x0000)
struct ABSessionBrowser_GetGameSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetGameSession) == 0x000008, "Wrong alignment on ABSessionBrowser_GetGameSession");
static_assert(sizeof(ABSessionBrowser_GetGameSession) == 0x000038, "Wrong size on ABSessionBrowser_GetGameSession");
static_assert(offsetof(ABSessionBrowser_GetGameSession, SessionId) == 0x000000, "Member 'ABSessionBrowser_GetGameSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSession, OnSuccess) == 0x000010, "Member 'ABSessionBrowser_GetGameSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSession, OnError) == 0x000024, "Member 'ABSessionBrowser_GetGameSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeEnum
// 0x0048 (0x0048 - 0x0000)
struct ABSessionBrowser_GetGameSessionsByTypeEnum final
{
public:
	EAccelByteSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetGameSessionsByTypeEnum) == 0x000008, "Wrong alignment on ABSessionBrowser_GetGameSessionsByTypeEnum");
static_assert(sizeof(ABSessionBrowser_GetGameSessionsByTypeEnum) == 0x000048, "Wrong size on ABSessionBrowser_GetGameSessionsByTypeEnum");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnum, SessionType) == 0x000000, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnum::SessionType' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnum, GameMode) == 0x000008, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnum::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnum, OnSuccess) == 0x000018, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnum::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnum, OnError) == 0x00002C, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnum::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnum, Offset) == 0x000040, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnum::Offset' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnum, Limit) == 0x000044, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnum::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeEnumAndMatchExist
// 0x0058 (0x0058 - 0x0000)
struct ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist final
{
public:
	EAccelByteSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchExist;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist) == 0x000008, "Wrong alignment on ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist");
static_assert(sizeof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist) == 0x000058, "Wrong size on ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, SessionType) == 0x000000, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::SessionType' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, GameMode) == 0x000008, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, MatchExist) == 0x000018, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::MatchExist' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, OnSuccess) == 0x000028, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, OnError) == 0x00003C, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, Offset) == 0x000050, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::Offset' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist, Limit) == 0x000054, "Member 'ABSessionBrowser_GetGameSessionsByTypeEnumAndMatchExist::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeString
// 0x0050 (0x0050 - 0x0000)
struct ABSessionBrowser_GetGameSessionsByTypeString final
{
public:
	class FString                                 SessionTypeString;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetGameSessionsByTypeString) == 0x000008, "Wrong alignment on ABSessionBrowser_GetGameSessionsByTypeString");
static_assert(sizeof(ABSessionBrowser_GetGameSessionsByTypeString) == 0x000050, "Wrong size on ABSessionBrowser_GetGameSessionsByTypeString");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeString, SessionTypeString) == 0x000000, "Member 'ABSessionBrowser_GetGameSessionsByTypeString::SessionTypeString' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeString, GameMode) == 0x000010, "Member 'ABSessionBrowser_GetGameSessionsByTypeString::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeString, OnSuccess) == 0x000020, "Member 'ABSessionBrowser_GetGameSessionsByTypeString::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeString, OnError) == 0x000034, "Member 'ABSessionBrowser_GetGameSessionsByTypeString::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeString, Offset) == 0x000048, "Member 'ABSessionBrowser_GetGameSessionsByTypeString::Offset' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeString, Limit) == 0x00004C, "Member 'ABSessionBrowser_GetGameSessionsByTypeString::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByTypeStringAndMatchExist
// 0x0060 (0x0060 - 0x0000)
struct ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist final
{
public:
	class FString                                 SessionTypeString;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchExist;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetResult& Response)> OnSuccess;       // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist) == 0x000008, "Wrong alignment on ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist");
static_assert(sizeof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist) == 0x000060, "Wrong size on ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, SessionTypeString) == 0x000000, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::SessionTypeString' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, GameMode) == 0x000010, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::GameMode' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, MatchExist) == 0x000020, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::MatchExist' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, OnSuccess) == 0x000030, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, OnError) == 0x000044, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, Offset) == 0x000058, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::Offset' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist, Limit) == 0x00005C, "Member 'ABSessionBrowser_GetGameSessionsByTypeStringAndMatchExist::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetGameSessionsByUserIds
// 0x0038 (0x0038 - 0x0000)
struct ABSessionBrowser_GetGameSessionsByUserIds final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserGetByUserIdsResult& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetGameSessionsByUserIds) == 0x000008, "Wrong alignment on ABSessionBrowser_GetGameSessionsByUserIds");
static_assert(sizeof(ABSessionBrowser_GetGameSessionsByUserIds) == 0x000038, "Wrong size on ABSessionBrowser_GetGameSessionsByUserIds");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByUserIds, UserIds) == 0x000000, "Member 'ABSessionBrowser_GetGameSessionsByUserIds::UserIds' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByUserIds, OnSuccess) == 0x000010, "Member 'ABSessionBrowser_GetGameSessionsByUserIds::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetGameSessionsByUserIds, OnError) == 0x000024, "Member 'ABSessionBrowser_GetGameSessionsByUserIds::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.GetRecentPlayer
// 0x0040 (0x0040 - 0x0000)
struct ABSessionBrowser_GetRecentPlayer final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserRecentPlayerGetResult& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_GetRecentPlayer) == 0x000008, "Wrong alignment on ABSessionBrowser_GetRecentPlayer");
static_assert(sizeof(ABSessionBrowser_GetRecentPlayer) == 0x000040, "Wrong size on ABSessionBrowser_GetRecentPlayer");
static_assert(offsetof(ABSessionBrowser_GetRecentPlayer, UserId) == 0x000000, "Member 'ABSessionBrowser_GetRecentPlayer::UserId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetRecentPlayer, OnSuccess) == 0x000010, "Member 'ABSessionBrowser_GetRecentPlayer::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetRecentPlayer, OnError) == 0x000024, "Member 'ABSessionBrowser_GetRecentPlayer::OnError' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetRecentPlayer, Offset) == 0x000038, "Member 'ABSessionBrowser_GetRecentPlayer::Offset' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_GetRecentPlayer, Limit) == 0x00003C, "Member 'ABSessionBrowser_GetRecentPlayer::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.JoinSession
// 0x0048 (0x0048 - 0x0000)
struct ABSessionBrowser_JoinSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_JoinSession) == 0x000008, "Wrong alignment on ABSessionBrowser_JoinSession");
static_assert(sizeof(ABSessionBrowser_JoinSession) == 0x000048, "Wrong size on ABSessionBrowser_JoinSession");
static_assert(offsetof(ABSessionBrowser_JoinSession, SessionId) == 0x000000, "Member 'ABSessionBrowser_JoinSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_JoinSession, Password) == 0x000010, "Member 'ABSessionBrowser_JoinSession::Password' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_JoinSession, OnSuccess) == 0x000020, "Member 'ABSessionBrowser_JoinSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_JoinSession, OnError) == 0x000034, "Member 'ABSessionBrowser_JoinSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.RegisterPlayer
// 0x0050 (0x0050 - 0x0000)
struct ABSessionBrowser_RegisterPlayer final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerToAdd;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsSpectator;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)> OnSuccess; // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABSessionBrowser_RegisterPlayer) == 0x000008, "Wrong alignment on ABSessionBrowser_RegisterPlayer");
static_assert(sizeof(ABSessionBrowser_RegisterPlayer) == 0x000050, "Wrong size on ABSessionBrowser_RegisterPlayer");
static_assert(offsetof(ABSessionBrowser_RegisterPlayer, SessionId) == 0x000000, "Member 'ABSessionBrowser_RegisterPlayer::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_RegisterPlayer, PlayerToAdd) == 0x000010, "Member 'ABSessionBrowser_RegisterPlayer::PlayerToAdd' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_RegisterPlayer, AsSpectator) == 0x000020, "Member 'ABSessionBrowser_RegisterPlayer::AsSpectator' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_RegisterPlayer, OnSuccess) == 0x000024, "Member 'ABSessionBrowser_RegisterPlayer::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_RegisterPlayer, OnError) == 0x000038, "Member 'ABSessionBrowser_RegisterPlayer::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.RemoveGameSession
// 0x0038 (0x0038 - 0x0000)
struct ABSessionBrowser_RemoveGameSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_RemoveGameSession) == 0x000008, "Wrong alignment on ABSessionBrowser_RemoveGameSession");
static_assert(sizeof(ABSessionBrowser_RemoveGameSession) == 0x000038, "Wrong size on ABSessionBrowser_RemoveGameSession");
static_assert(offsetof(ABSessionBrowser_RemoveGameSession, SessionId) == 0x000000, "Member 'ABSessionBrowser_RemoveGameSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_RemoveGameSession, OnSuccess) == 0x000010, "Member 'ABSessionBrowser_RemoveGameSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_RemoveGameSession, OnError) == 0x000024, "Member 'ABSessionBrowser_RemoveGameSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.UnregisterPlayer
// 0x0048 (0x0048 - 0x0000)
struct ABSessionBrowser_UnregisterPlayer final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerToRemove;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserAddPlayerResponse& Response)> OnSuccess; // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_UnregisterPlayer) == 0x000008, "Wrong alignment on ABSessionBrowser_UnregisterPlayer");
static_assert(sizeof(ABSessionBrowser_UnregisterPlayer) == 0x000048, "Wrong size on ABSessionBrowser_UnregisterPlayer");
static_assert(offsetof(ABSessionBrowser_UnregisterPlayer, SessionId) == 0x000000, "Member 'ABSessionBrowser_UnregisterPlayer::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UnregisterPlayer, PlayerToRemove) == 0x000010, "Member 'ABSessionBrowser_UnregisterPlayer::PlayerToRemove' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UnregisterPlayer, OnSuccess) == 0x000020, "Member 'ABSessionBrowser_UnregisterPlayer::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UnregisterPlayer, OnError) == 0x000034, "Member 'ABSessionBrowser_UnregisterPlayer::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSession
// 0x0040 (0x0040 - 0x0000)
struct ABSessionBrowser_UpdateGameSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlayerCount;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_UpdateGameSession) == 0x000008, "Wrong alignment on ABSessionBrowser_UpdateGameSession");
static_assert(sizeof(ABSessionBrowser_UpdateGameSession) == 0x000040, "Wrong size on ABSessionBrowser_UpdateGameSession");
static_assert(offsetof(ABSessionBrowser_UpdateGameSession, SessionId) == 0x000000, "Member 'ABSessionBrowser_UpdateGameSession::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSession, MaxPlayer) == 0x000010, "Member 'ABSessionBrowser_UpdateGameSession::MaxPlayer' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSession, CurrentPlayerCount) == 0x000014, "Member 'ABSessionBrowser_UpdateGameSession::CurrentPlayerCount' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSession, OnSuccess) == 0x000018, "Member 'ABSessionBrowser_UpdateGameSession::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSession, OnError) == 0x00002C, "Member 'ABSessionBrowser_UpdateGameSession::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSessionByStruct
// 0x0040 (0x0040 - 0x0000)
struct ABSessionBrowser_UpdateGameSessionByStruct final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsSessionBrowserUpdateRequest UpdateSessionRequest;                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_UpdateGameSessionByStruct) == 0x000008, "Wrong alignment on ABSessionBrowser_UpdateGameSessionByStruct");
static_assert(sizeof(ABSessionBrowser_UpdateGameSessionByStruct) == 0x000040, "Wrong size on ABSessionBrowser_UpdateGameSessionByStruct");
static_assert(offsetof(ABSessionBrowser_UpdateGameSessionByStruct, SessionId) == 0x000000, "Member 'ABSessionBrowser_UpdateGameSessionByStruct::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSessionByStruct, UpdateSessionRequest) == 0x000010, "Member 'ABSessionBrowser_UpdateGameSessionByStruct::UpdateSessionRequest' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSessionByStruct, OnSuccess) == 0x000018, "Member 'ABSessionBrowser_UpdateGameSessionByStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSessionByStruct, OnError) == 0x00002C, "Member 'ABSessionBrowser_UpdateGameSessionByStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSettings
// 0x0088 (0x0088 - 0x0000)
struct ABSessionBrowser_UpdateGameSettings final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Settings;                                          // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0060(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0074(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_UpdateGameSettings) == 0x000008, "Wrong alignment on ABSessionBrowser_UpdateGameSettings");
static_assert(sizeof(ABSessionBrowser_UpdateGameSettings) == 0x000088, "Wrong size on ABSessionBrowser_UpdateGameSettings");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettings, SessionId) == 0x000000, "Member 'ABSessionBrowser_UpdateGameSettings::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettings, Settings) == 0x000010, "Member 'ABSessionBrowser_UpdateGameSettings::Settings' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettings, OnSuccess) == 0x000060, "Member 'ABSessionBrowser_UpdateGameSettings::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettings, OnError) == 0x000074, "Member 'ABSessionBrowser_UpdateGameSettings::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSessionBrowser.UpdateGameSettingsByJsonObject
// 0x0058 (0x0058 - 0x0000)
struct ABSessionBrowser_UpdateGameSettingsByJsonObject final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Settings;                                          // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSessionBrowserData& Response)> OnSuccess;            // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSessionBrowser_UpdateGameSettingsByJsonObject) == 0x000008, "Wrong alignment on ABSessionBrowser_UpdateGameSettingsByJsonObject");
static_assert(sizeof(ABSessionBrowser_UpdateGameSettingsByJsonObject) == 0x000058, "Wrong size on ABSessionBrowser_UpdateGameSettingsByJsonObject");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettingsByJsonObject, SessionId) == 0x000000, "Member 'ABSessionBrowser_UpdateGameSettingsByJsonObject::SessionId' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettingsByJsonObject, Settings) == 0x000010, "Member 'ABSessionBrowser_UpdateGameSettingsByJsonObject::Settings' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettingsByJsonObject, OnSuccess) == 0x000030, "Member 'ABSessionBrowser_UpdateGameSettingsByJsonObject::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABSessionBrowser_UpdateGameSettingsByJsonObject, OnError) == 0x000044, "Member 'ABSessionBrowser_UpdateGameSettingsByJsonObject::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSignaling.SendSignalingMessage
// 0x0030 (0x0030 - 0x0000)
struct ABSignaling_SendSignalingMessage final
{
public:
	struct FSendSignalingMessageRequest           Request;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSignaling_SendSignalingMessage) == 0x000008, "Wrong alignment on ABSignaling_SendSignalingMessage");
static_assert(sizeof(ABSignaling_SendSignalingMessage) == 0x000030, "Wrong size on ABSignaling_SendSignalingMessage");
static_assert(offsetof(ABSignaling_SendSignalingMessage, Request) == 0x000000, "Member 'ABSignaling_SendSignalingMessage::Request' has a wrong offset!");
static_assert(offsetof(ABSignaling_SendSignalingMessage, ReturnValue) == 0x000020, "Member 'ABSignaling_SendSignalingMessage::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABSignaling.SetSignalingP2PNotif
// 0x0014 (0x0014 - 0x0000)
struct ABSignaling_SetSignalingP2PNotif final
{
public:
	TDelegate<void(const class FString& UserID, const class FString& Message)> OnNotif;              // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABSignaling_SetSignalingP2PNotif) == 0x000004, "Wrong alignment on ABSignaling_SetSignalingP2PNotif");
static_assert(sizeof(ABSignaling_SetSignalingP2PNotif) == 0x000014, "Wrong size on ABSignaling_SetSignalingP2PNotif");
static_assert(offsetof(ABSignaling_SetSignalingP2PNotif, OnNotif) == 0x000000, "Member 'ABSignaling_SetSignalingP2PNotif::OnNotif' has a wrong offset!");

// Function AccelByteUe4Sdk.ABStatistic.BulkFetchStatItemsValue
// 0x0048 (0x0048 - 0x0000)
struct ABStatistic_BulkFetchStatItemsValue final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsStatItemValueResponse>& Response)> OnSuccess; // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABStatistic_BulkFetchStatItemsValue) == 0x000008, "Wrong alignment on ABStatistic_BulkFetchStatItemsValue");
static_assert(sizeof(ABStatistic_BulkFetchStatItemsValue) == 0x000048, "Wrong size on ABStatistic_BulkFetchStatItemsValue");
static_assert(offsetof(ABStatistic_BulkFetchStatItemsValue, StatCode) == 0x000000, "Member 'ABStatistic_BulkFetchStatItemsValue::StatCode' has a wrong offset!");
static_assert(offsetof(ABStatistic_BulkFetchStatItemsValue, UserIds) == 0x000010, "Member 'ABStatistic_BulkFetchStatItemsValue::UserIds' has a wrong offset!");
static_assert(offsetof(ABStatistic_BulkFetchStatItemsValue, OnSuccess) == 0x000020, "Member 'ABStatistic_BulkFetchStatItemsValue::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABStatistic_BulkFetchStatItemsValue, OnError) == 0x000034, "Member 'ABStatistic_BulkFetchStatItemsValue::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABStatistic.CreateUserStatItems
// 0x0038 (0x0038 - 0x0000)
struct ABStatistic_CreateUserStatItems final
{
public:
	TArray<class FString>                         StatCodes;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABStatistic_CreateUserStatItems) == 0x000008, "Wrong alignment on ABStatistic_CreateUserStatItems");
static_assert(sizeof(ABStatistic_CreateUserStatItems) == 0x000038, "Wrong size on ABStatistic_CreateUserStatItems");
static_assert(offsetof(ABStatistic_CreateUserStatItems, StatCodes) == 0x000000, "Member 'ABStatistic_CreateUserStatItems::StatCodes' has a wrong offset!");
static_assert(offsetof(ABStatistic_CreateUserStatItems, OnSuccess) == 0x000010, "Member 'ABStatistic_CreateUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABStatistic_CreateUserStatItems, OnError) == 0x000024, "Member 'ABStatistic_CreateUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABStatistic.GetAllUserStatItems
// 0x0034 (0x0034 - 0x0000)
struct ABStatistic_GetAllUserStatItems final
{
public:
	TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess; // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticSortBy                     SortBy;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABStatistic_GetAllUserStatItems) == 0x000004, "Wrong alignment on ABStatistic_GetAllUserStatItems");
static_assert(sizeof(ABStatistic_GetAllUserStatItems) == 0x000034, "Wrong size on ABStatistic_GetAllUserStatItems");
static_assert(offsetof(ABStatistic_GetAllUserStatItems, OnSuccess) == 0x000000, "Member 'ABStatistic_GetAllUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetAllUserStatItems, OnError) == 0x000014, "Member 'ABStatistic_GetAllUserStatItems::OnError' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetAllUserStatItems, Limit) == 0x000028, "Member 'ABStatistic_GetAllUserStatItems::Limit' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetAllUserStatItems, Offset) == 0x00002C, "Member 'ABStatistic_GetAllUserStatItems::Offset' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetAllUserStatItems, SortBy) == 0x000030, "Member 'ABStatistic_GetAllUserStatItems::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABStatistic.GetGlobalStatItemsByStatCode
// 0x0038 (0x0038 - 0x0000)
struct ABStatistic_GetGlobalStatItemsByStatCode final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Response)> OnSuccess;   // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABStatistic_GetGlobalStatItemsByStatCode) == 0x000008, "Wrong alignment on ABStatistic_GetGlobalStatItemsByStatCode");
static_assert(sizeof(ABStatistic_GetGlobalStatItemsByStatCode) == 0x000038, "Wrong size on ABStatistic_GetGlobalStatItemsByStatCode");
static_assert(offsetof(ABStatistic_GetGlobalStatItemsByStatCode, StatCode) == 0x000000, "Member 'ABStatistic_GetGlobalStatItemsByStatCode::StatCode' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetGlobalStatItemsByStatCode, OnSuccess) == 0x000010, "Member 'ABStatistic_GetGlobalStatItemsByStatCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetGlobalStatItemsByStatCode, OnError) == 0x000024, "Member 'ABStatistic_GetGlobalStatItemsByStatCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABStatistic.GetUserStatItems
// 0x0058 (0x0058 - 0x0000)
struct ABStatistic_GetUserStatItems final
{
public:
	TArray<class FString>                         StatCodes;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Response)> OnSuccess; // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticSortBy                     SortBy;                                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABStatistic_GetUserStatItems) == 0x000008, "Wrong alignment on ABStatistic_GetUserStatItems");
static_assert(sizeof(ABStatistic_GetUserStatItems) == 0x000058, "Wrong size on ABStatistic_GetUserStatItems");
static_assert(offsetof(ABStatistic_GetUserStatItems, StatCodes) == 0x000000, "Member 'ABStatistic_GetUserStatItems::StatCodes' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetUserStatItems, Tags) == 0x000010, "Member 'ABStatistic_GetUserStatItems::Tags' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetUserStatItems, OnSuccess) == 0x000020, "Member 'ABStatistic_GetUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetUserStatItems, OnError) == 0x000034, "Member 'ABStatistic_GetUserStatItems::OnError' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetUserStatItems, Limit) == 0x000048, "Member 'ABStatistic_GetUserStatItems::Limit' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetUserStatItems, Offset) == 0x00004C, "Member 'ABStatistic_GetUserStatItems::Offset' has a wrong offset!");
static_assert(offsetof(ABStatistic_GetUserStatItems, SortBy) == 0x000050, "Member 'ABStatistic_GetUserStatItems::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABStatistic.IncrementUserStatItems
// 0x0038 (0x0038 - 0x0000)
struct ABStatistic_IncrementUserStatItems final
{
public:
	TArray<struct FAccelByteModelsBulkStatItemInc> Data;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FArrayModelsBulkStatItemOperationResultResponse& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABStatistic_IncrementUserStatItems) == 0x000008, "Wrong alignment on ABStatistic_IncrementUserStatItems");
static_assert(sizeof(ABStatistic_IncrementUserStatItems) == 0x000038, "Wrong size on ABStatistic_IncrementUserStatItems");
static_assert(offsetof(ABStatistic_IncrementUserStatItems, Data) == 0x000000, "Member 'ABStatistic_IncrementUserStatItems::Data' has a wrong offset!");
static_assert(offsetof(ABStatistic_IncrementUserStatItems, OnSuccess) == 0x000010, "Member 'ABStatistic_IncrementUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABStatistic_IncrementUserStatItems, OnError) == 0x000024, "Member 'ABStatistic_IncrementUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.AddDownloadContentCountV2
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_AddDownloadContentCountV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCAddDownloadContentCountResponseV2& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_AddDownloadContentCountV2) == 0x000008, "Wrong alignment on ABUGC_AddDownloadContentCountV2");
static_assert(sizeof(ABUGC_AddDownloadContentCountV2) == 0x000038, "Wrong size on ABUGC_AddDownloadContentCountV2");
static_assert(offsetof(ABUGC_AddDownloadContentCountV2, ContentId) == 0x000000, "Member 'ABUGC_AddDownloadContentCountV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_AddDownloadContentCountV2, OnSuccess) == 0x000010, "Member 'ABUGC_AddDownloadContentCountV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_AddDownloadContentCountV2, OnError) == 0x000024, "Member 'ABUGC_AddDownloadContentCountV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.BulkGetContentByShareCode
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_BulkGetContentByShareCode final
{
public:
	TArray<class FString>                         ShareCodes;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponse>& Response)> OnSuccess;    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_BulkGetContentByShareCode) == 0x000008, "Wrong alignment on ABUGC_BulkGetContentByShareCode");
static_assert(sizeof(ABUGC_BulkGetContentByShareCode) == 0x000038, "Wrong size on ABUGC_BulkGetContentByShareCode");
static_assert(offsetof(ABUGC_BulkGetContentByShareCode, ShareCodes) == 0x000000, "Member 'ABUGC_BulkGetContentByShareCode::ShareCodes' has a wrong offset!");
static_assert(offsetof(ABUGC_BulkGetContentByShareCode, OnSuccess) == 0x000010, "Member 'ABUGC_BulkGetContentByShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_BulkGetContentByShareCode, OnError) == 0x000024, "Member 'ABUGC_BulkGetContentByShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.BulkGetContentByShareCodeV2
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_BulkGetContentByShareCodeV2 final
{
public:
	TArray<class FString>                         ShareCodes;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)> OnSuccess;  // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_BulkGetContentByShareCodeV2) == 0x000008, "Wrong alignment on ABUGC_BulkGetContentByShareCodeV2");
static_assert(sizeof(ABUGC_BulkGetContentByShareCodeV2) == 0x000038, "Wrong size on ABUGC_BulkGetContentByShareCodeV2");
static_assert(offsetof(ABUGC_BulkGetContentByShareCodeV2, ShareCodes) == 0x000000, "Member 'ABUGC_BulkGetContentByShareCodeV2::ShareCodes' has a wrong offset!");
static_assert(offsetof(ABUGC_BulkGetContentByShareCodeV2, OnSuccess) == 0x000010, "Member 'ABUGC_BulkGetContentByShareCodeV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_BulkGetContentByShareCodeV2, OnError) == 0x000024, "Member 'ABUGC_BulkGetContentByShareCodeV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.CreateChannel
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_CreateChannel final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCChannelResponse& Response)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_CreateChannel) == 0x000008, "Wrong alignment on ABUGC_CreateChannel");
static_assert(sizeof(ABUGC_CreateChannel) == 0x000038, "Wrong size on ABUGC_CreateChannel");
static_assert(offsetof(ABUGC_CreateChannel, ChannelName) == 0x000000, "Member 'ABUGC_CreateChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateChannel, OnSuccess) == 0x000010, "Member 'ABUGC_CreateChannel::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateChannel, OnError) == 0x000024, "Member 'ABUGC_CreateChannel::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.CreateContent
// 0x00A8 (0x00A8 - 0x0000)
struct ABUGC_CreateContent final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Preview;                                           // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x0070(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_CreateContent) == 0x000008, "Wrong alignment on ABUGC_CreateContent");
static_assert(sizeof(ABUGC_CreateContent) == 0x0000A8, "Wrong size on ABUGC_CreateContent");
static_assert(offsetof(ABUGC_CreateContent, ChannelId) == 0x000000, "Member 'ABUGC_CreateContent::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, Name_0) == 0x000010, "Member 'ABUGC_CreateContent::Name_0' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, Type) == 0x000020, "Member 'ABUGC_CreateContent::Type' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, SubType) == 0x000030, "Member 'ABUGC_CreateContent::SubType' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, Tags) == 0x000040, "Member 'ABUGC_CreateContent::Tags' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, Preview) == 0x000050, "Member 'ABUGC_CreateContent::Preview' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, FileExtension) == 0x000060, "Member 'ABUGC_CreateContent::FileExtension' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, OnSuccess) == 0x000070, "Member 'ABUGC_CreateContent::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, OnError) == 0x000084, "Member 'ABUGC_CreateContent::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContent, ContentType) == 0x000098, "Member 'ABUGC_CreateContent::ContentType' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.CreateContentByStruct
// 0x00E8 (0x00E8 - 0x0000)
struct ABUGC_CreateContentByStruct final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCRequest             UGCRequest;                                        // 0x0010(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x00C0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00D4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_CreateContentByStruct) == 0x000008, "Wrong alignment on ABUGC_CreateContentByStruct");
static_assert(sizeof(ABUGC_CreateContentByStruct) == 0x0000E8, "Wrong size on ABUGC_CreateContentByStruct");
static_assert(offsetof(ABUGC_CreateContentByStruct, ChannelId) == 0x000000, "Member 'ABUGC_CreateContentByStruct::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContentByStruct, UGCRequest) == 0x000010, "Member 'ABUGC_CreateContentByStruct::UGCRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContentByStruct, OnSuccess) == 0x0000C0, "Member 'ABUGC_CreateContentByStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContentByStruct, OnError) == 0x0000D4, "Member 'ABUGC_CreateContentByStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.CreateContentV2
// 0x00B8 (0x00B8 - 0x0000)
struct ABUGC_CreateContentV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsCreateUGCRequestV2     CreateRequest;                                     // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)> OnSuccess;        // 0x0090(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00A4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_CreateContentV2) == 0x000008, "Wrong alignment on ABUGC_CreateContentV2");
static_assert(sizeof(ABUGC_CreateContentV2) == 0x0000B8, "Wrong size on ABUGC_CreateContentV2");
static_assert(offsetof(ABUGC_CreateContentV2, ChannelId) == 0x000000, "Member 'ABUGC_CreateContentV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContentV2, CreateRequest) == 0x000010, "Member 'ABUGC_CreateContentV2::CreateRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContentV2, OnSuccess) == 0x000090, "Member 'ABUGC_CreateContentV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_CreateContentV2, OnError) == 0x0000A4, "Member 'ABUGC_CreateContentV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.DeleteChannel
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_DeleteChannel final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_DeleteChannel) == 0x000008, "Wrong alignment on ABUGC_DeleteChannel");
static_assert(sizeof(ABUGC_DeleteChannel) == 0x000038, "Wrong size on ABUGC_DeleteChannel");
static_assert(offsetof(ABUGC_DeleteChannel, ChannelId) == 0x000000, "Member 'ABUGC_DeleteChannel::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteChannel, OnSuccess) == 0x000010, "Member 'ABUGC_DeleteChannel::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteChannel, OnError) == 0x000024, "Member 'ABUGC_DeleteChannel::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.DeleteContent
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_DeleteContent final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_DeleteContent) == 0x000008, "Wrong alignment on ABUGC_DeleteContent");
static_assert(sizeof(ABUGC_DeleteContent) == 0x000048, "Wrong size on ABUGC_DeleteContent");
static_assert(offsetof(ABUGC_DeleteContent, ChannelId) == 0x000000, "Member 'ABUGC_DeleteContent::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContent, ContentId) == 0x000010, "Member 'ABUGC_DeleteContent::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContent, OnSuccess) == 0x000020, "Member 'ABUGC_DeleteContent::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContent, OnError) == 0x000034, "Member 'ABUGC_DeleteContent::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.DeleteContentByShareCode
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_DeleteContentByShareCode final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_DeleteContentByShareCode) == 0x000008, "Wrong alignment on ABUGC_DeleteContentByShareCode");
static_assert(sizeof(ABUGC_DeleteContentByShareCode) == 0x000048, "Wrong size on ABUGC_DeleteContentByShareCode");
static_assert(offsetof(ABUGC_DeleteContentByShareCode, ChannelId) == 0x000000, "Member 'ABUGC_DeleteContentByShareCode::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentByShareCode, ShareCode) == 0x000010, "Member 'ABUGC_DeleteContentByShareCode::ShareCode' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentByShareCode, OnSuccess) == 0x000020, "Member 'ABUGC_DeleteContentByShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentByShareCode, OnError) == 0x000034, "Member 'ABUGC_DeleteContentByShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.DeleteContentScreenshotV2
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_DeleteContentScreenshotV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenshotId;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_DeleteContentScreenshotV2) == 0x000008, "Wrong alignment on ABUGC_DeleteContentScreenshotV2");
static_assert(sizeof(ABUGC_DeleteContentScreenshotV2) == 0x000048, "Wrong size on ABUGC_DeleteContentScreenshotV2");
static_assert(offsetof(ABUGC_DeleteContentScreenshotV2, ContentId) == 0x000000, "Member 'ABUGC_DeleteContentScreenshotV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentScreenshotV2, ScreenshotId) == 0x000010, "Member 'ABUGC_DeleteContentScreenshotV2::ScreenshotId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentScreenshotV2, OnSuccess) == 0x000020, "Member 'ABUGC_DeleteContentScreenshotV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentScreenshotV2, OnError) == 0x000034, "Member 'ABUGC_DeleteContentScreenshotV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.DeleteContentV2
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_DeleteContentV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_DeleteContentV2) == 0x000008, "Wrong alignment on ABUGC_DeleteContentV2");
static_assert(sizeof(ABUGC_DeleteContentV2) == 0x000048, "Wrong size on ABUGC_DeleteContentV2");
static_assert(offsetof(ABUGC_DeleteContentV2, ChannelId) == 0x000000, "Member 'ABUGC_DeleteContentV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentV2, ContentId) == 0x000010, "Member 'ABUGC_DeleteContentV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentV2, OnSuccess) == 0x000020, "Member 'ABUGC_DeleteContentV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_DeleteContentV2, OnError) == 0x000034, "Member 'ABUGC_DeleteContentV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GenerateUploadContentURLV2
// 0x0068 (0x0068 - 0x0000)
struct ABUGC_GenerateUploadContentURLV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUploadContentURLRequestV2 UploadRequest;                                  // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCUploadContentURLResponseV2& Response)> OnSuccess; // 0x0040(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0054(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GenerateUploadContentURLV2) == 0x000008, "Wrong alignment on ABUGC_GenerateUploadContentURLV2");
static_assert(sizeof(ABUGC_GenerateUploadContentURLV2) == 0x000068, "Wrong size on ABUGC_GenerateUploadContentURLV2");
static_assert(offsetof(ABUGC_GenerateUploadContentURLV2, ChannelId) == 0x000000, "Member 'ABUGC_GenerateUploadContentURLV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_GenerateUploadContentURLV2, ContentId) == 0x000010, "Member 'ABUGC_GenerateUploadContentURLV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GenerateUploadContentURLV2, UploadRequest) == 0x000020, "Member 'ABUGC_GenerateUploadContentURLV2::UploadRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_GenerateUploadContentURLV2, OnSuccess) == 0x000040, "Member 'ABUGC_GenerateUploadContentURLV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GenerateUploadContentURLV2, OnError) == 0x000054, "Member 'ABUGC_GenerateUploadContentURLV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetChannels
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_GetChannels final
{
public:
	TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)> OnSuccess;     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelName;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetChannels) == 0x000008, "Wrong alignment on ABUGC_GetChannels");
static_assert(sizeof(ABUGC_GetChannels) == 0x000040, "Wrong size on ABUGC_GetChannels");
static_assert(offsetof(ABUGC_GetChannels, OnSuccess) == 0x000000, "Member 'ABUGC_GetChannels::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannels, OnError) == 0x000014, "Member 'ABUGC_GetChannels::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannels, Limit) == 0x000028, "Member 'ABUGC_GetChannels::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannels, Offset) == 0x00002C, "Member 'ABUGC_GetChannels::Offset' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannels, ChannelName) == 0x000030, "Member 'ABUGC_GetChannels::ChannelName' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetChannelsByUserId
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_GetChannelsByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCChannelsPagingResponse& Response)> OnSuccess;     // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetChannelsByUserId) == 0x000008, "Wrong alignment on ABUGC_GetChannelsByUserId");
static_assert(sizeof(ABUGC_GetChannelsByUserId) == 0x000040, "Wrong size on ABUGC_GetChannelsByUserId");
static_assert(offsetof(ABUGC_GetChannelsByUserId, UserId) == 0x000000, "Member 'ABUGC_GetChannelsByUserId::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannelsByUserId, OnSuccess) == 0x000010, "Member 'ABUGC_GetChannelsByUserId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannelsByUserId, OnError) == 0x000024, "Member 'ABUGC_GetChannelsByUserId::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannelsByUserId, Limit) == 0x000038, "Member 'ABUGC_GetChannelsByUserId::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetChannelsByUserId, Offset) == 0x00003C, "Member 'ABUGC_GetChannelsByUserId::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentBulkByIdsV2
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentBulkByIdsV2 final
{
public:
	TArray<class FString>                         ContentIds;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsUGCContentResponseV2>& Response)> OnSuccess;  // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentBulkByIdsV2) == 0x000008, "Wrong alignment on ABUGC_GetContentBulkByIdsV2");
static_assert(sizeof(ABUGC_GetContentBulkByIdsV2) == 0x000038, "Wrong size on ABUGC_GetContentBulkByIdsV2");
static_assert(offsetof(ABUGC_GetContentBulkByIdsV2, ContentIds) == 0x000000, "Member 'ABUGC_GetContentBulkByIdsV2::ContentIds' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentBulkByIdsV2, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentBulkByIdsV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentBulkByIdsV2, OnError) == 0x000024, "Member 'ABUGC_GetContentBulkByIdsV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentByContentId
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentByContentId final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentByContentId) == 0x000008, "Wrong alignment on ABUGC_GetContentByContentId");
static_assert(sizeof(ABUGC_GetContentByContentId) == 0x000038, "Wrong size on ABUGC_GetContentByContentId");
static_assert(offsetof(ABUGC_GetContentByContentId, ContentId) == 0x000000, "Member 'ABUGC_GetContentByContentId::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByContentId, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentByContentId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByContentId, OnError) == 0x000024, "Member 'ABUGC_GetContentByContentId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentByContentIdV2
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentByContentIdV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)> OnSuccess;          // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentByContentIdV2) == 0x000008, "Wrong alignment on ABUGC_GetContentByContentIdV2");
static_assert(sizeof(ABUGC_GetContentByContentIdV2) == 0x000038, "Wrong size on ABUGC_GetContentByContentIdV2");
static_assert(offsetof(ABUGC_GetContentByContentIdV2, ContentId) == 0x000000, "Member 'ABUGC_GetContentByContentIdV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByContentIdV2, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentByContentIdV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByContentIdV2, OnError) == 0x000024, "Member 'ABUGC_GetContentByContentIdV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentByShareCode
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentByShareCode final
{
public:
	class FString                                 ShareCode;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCContentResponse& Response)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentByShareCode) == 0x000008, "Wrong alignment on ABUGC_GetContentByShareCode");
static_assert(sizeof(ABUGC_GetContentByShareCode) == 0x000038, "Wrong size on ABUGC_GetContentByShareCode");
static_assert(offsetof(ABUGC_GetContentByShareCode, ShareCode) == 0x000000, "Member 'ABUGC_GetContentByShareCode::ShareCode' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByShareCode, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentByShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByShareCode, OnError) == 0x000024, "Member 'ABUGC_GetContentByShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentByShareCodeV2
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentByShareCodeV2 final
{
public:
	class FString                                 ShareCode;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCContentResponseV2& Response)> OnSuccess;          // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentByShareCodeV2) == 0x000008, "Wrong alignment on ABUGC_GetContentByShareCodeV2");
static_assert(sizeof(ABUGC_GetContentByShareCodeV2) == 0x000038, "Wrong size on ABUGC_GetContentByShareCodeV2");
static_assert(offsetof(ABUGC_GetContentByShareCodeV2, ShareCode) == 0x000000, "Member 'ABUGC_GetContentByShareCodeV2::ShareCode' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByShareCodeV2, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentByShareCodeV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentByShareCodeV2, OnError) == 0x000024, "Member 'ABUGC_GetContentByShareCodeV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentPreviewAsIntArray
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentPreviewAsIntArray final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<uint8>& Response)> OnSuccess;                                        // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentPreviewAsIntArray) == 0x000008, "Wrong alignment on ABUGC_GetContentPreviewAsIntArray");
static_assert(sizeof(ABUGC_GetContentPreviewAsIntArray) == 0x000038, "Wrong size on ABUGC_GetContentPreviewAsIntArray");
static_assert(offsetof(ABUGC_GetContentPreviewAsIntArray, ContentId) == 0x000000, "Member 'ABUGC_GetContentPreviewAsIntArray::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentPreviewAsIntArray, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentPreviewAsIntArray::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentPreviewAsIntArray, OnError) == 0x000024, "Member 'ABUGC_GetContentPreviewAsIntArray::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetContentPreviewAsStruct
// 0x0038 (0x0038 - 0x0000)
struct ABUGC_GetContentPreviewAsStruct final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCPreview& Response)> OnSuccess;                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetContentPreviewAsStruct) == 0x000008, "Wrong alignment on ABUGC_GetContentPreviewAsStruct");
static_assert(sizeof(ABUGC_GetContentPreviewAsStruct) == 0x000038, "Wrong size on ABUGC_GetContentPreviewAsStruct");
static_assert(offsetof(ABUGC_GetContentPreviewAsStruct, ContentId) == 0x000000, "Member 'ABUGC_GetContentPreviewAsStruct::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentPreviewAsStruct, OnSuccess) == 0x000010, "Member 'ABUGC_GetContentPreviewAsStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetContentPreviewAsStruct, OnError) == 0x000024, "Member 'ABUGC_GetContentPreviewAsStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetListContentDownloaderV2
// 0x0058 (0x0058 - 0x0000)
struct ABUGC_GetListContentDownloaderV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUGCContentUtilitiesSortByV2         SortBy;                                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_GetListContentDownloaderV2) == 0x000008, "Wrong alignment on ABUGC_GetListContentDownloaderV2");
static_assert(sizeof(ABUGC_GetListContentDownloaderV2) == 0x000058, "Wrong size on ABUGC_GetListContentDownloaderV2");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, ContentId) == 0x000000, "Member 'ABUGC_GetListContentDownloaderV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, OnSuccess) == 0x000010, "Member 'ABUGC_GetListContentDownloaderV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, OnError) == 0x000024, "Member 'ABUGC_GetListContentDownloaderV2::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, UserId) == 0x000038, "Member 'ABUGC_GetListContentDownloaderV2::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, Limit) == 0x000048, "Member 'ABUGC_GetListContentDownloaderV2::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, Offset) == 0x00004C, "Member 'ABUGC_GetListContentDownloaderV2::Offset' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentDownloaderV2, SortBy) == 0x000050, "Member 'ABUGC_GetListContentDownloaderV2::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetListContentLikerV2
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_GetListContentLikerV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCGetPaginatedContentLikerResponseV2& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetListContentLikerV2) == 0x000008, "Wrong alignment on ABUGC_GetListContentLikerV2");
static_assert(sizeof(ABUGC_GetListContentLikerV2) == 0x000040, "Wrong size on ABUGC_GetListContentLikerV2");
static_assert(offsetof(ABUGC_GetListContentLikerV2, ContentId) == 0x000000, "Member 'ABUGC_GetListContentLikerV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentLikerV2, OnSuccess) == 0x000010, "Member 'ABUGC_GetListContentLikerV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentLikerV2, OnError) == 0x000024, "Member 'ABUGC_GetListContentLikerV2::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentLikerV2, Limit) == 0x000038, "Member 'ABUGC_GetListContentLikerV2::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListContentLikerV2, Offset) == 0x00003C, "Member 'ABUGC_GetListContentLikerV2::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetListFollowers
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_GetListFollowers final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCGetListFollowersPagingResponse& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetListFollowers) == 0x000008, "Wrong alignment on ABUGC_GetListFollowers");
static_assert(sizeof(ABUGC_GetListFollowers) == 0x000040, "Wrong size on ABUGC_GetListFollowers");
static_assert(offsetof(ABUGC_GetListFollowers, UserId) == 0x000000, "Member 'ABUGC_GetListFollowers::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListFollowers, OnSuccess) == 0x000010, "Member 'ABUGC_GetListFollowers::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListFollowers, OnError) == 0x000024, "Member 'ABUGC_GetListFollowers::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListFollowers, Limit) == 0x000038, "Member 'ABUGC_GetListFollowers::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetListFollowers, Offset) == 0x00003C, "Member 'ABUGC_GetListFollowers::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetTags
// 0x0030 (0x0030 - 0x0000)
struct ABUGC_GetTags final
{
public:
	TDelegate<void(const struct FAccelByteModelsUGCTagsPagingResponse& Response)> OnSuccess;         // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetTags) == 0x000004, "Wrong alignment on ABUGC_GetTags");
static_assert(sizeof(ABUGC_GetTags) == 0x000030, "Wrong size on ABUGC_GetTags");
static_assert(offsetof(ABUGC_GetTags, OnSuccess) == 0x000000, "Member 'ABUGC_GetTags::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetTags, OnError) == 0x000014, "Member 'ABUGC_GetTags::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetTags, Limit) == 0x000028, "Member 'ABUGC_GetTags::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetTags, Offset) == 0x00002C, "Member 'ABUGC_GetTags::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetTypes
// 0x0030 (0x0030 - 0x0000)
struct ABUGC_GetTypes final
{
public:
	TDelegate<void(const struct FAccelByteModelsUGCTypesPagingResponse& Response)> OnSuccess;        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetTypes) == 0x000004, "Wrong alignment on ABUGC_GetTypes");
static_assert(sizeof(ABUGC_GetTypes) == 0x000030, "Wrong size on ABUGC_GetTypes");
static_assert(offsetof(ABUGC_GetTypes, OnSuccess) == 0x000000, "Member 'ABUGC_GetTypes::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetTypes, OnError) == 0x000014, "Member 'ABUGC_GetTypes::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetTypes, Limit) == 0x000028, "Member 'ABUGC_GetTypes::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetTypes, Offset) == 0x00002C, "Member 'ABUGC_GetTypes::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.GetUserContentsV2
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_GetUserContentsV2 final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_GetUserContentsV2) == 0x000008, "Wrong alignment on ABUGC_GetUserContentsV2");
static_assert(sizeof(ABUGC_GetUserContentsV2) == 0x000040, "Wrong size on ABUGC_GetUserContentsV2");
static_assert(offsetof(ABUGC_GetUserContentsV2, UserId) == 0x000000, "Member 'ABUGC_GetUserContentsV2::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_GetUserContentsV2, OnSuccess) == 0x000010, "Member 'ABUGC_GetUserContentsV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_GetUserContentsV2, OnError) == 0x000024, "Member 'ABUGC_GetUserContentsV2::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_GetUserContentsV2, Limit) == 0x000038, "Member 'ABUGC_GetUserContentsV2::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_GetUserContentsV2, Offset) == 0x00003C, "Member 'ABUGC_GetUserContentsV2::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContent
// 0x00B8 (0x00B8 - 0x0000)
struct ABUGC_ModifyContent final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Preview;                                           // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x00A8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContent) == 0x000008, "Wrong alignment on ABUGC_ModifyContent");
static_assert(sizeof(ABUGC_ModifyContent) == 0x0000B8, "Wrong size on ABUGC_ModifyContent");
static_assert(offsetof(ABUGC_ModifyContent, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContent::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, ContentId) == 0x000010, "Member 'ABUGC_ModifyContent::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, Name_0) == 0x000020, "Member 'ABUGC_ModifyContent::Name_0' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, Type) == 0x000030, "Member 'ABUGC_ModifyContent::Type' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, SubType) == 0x000040, "Member 'ABUGC_ModifyContent::SubType' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, Tags) == 0x000050, "Member 'ABUGC_ModifyContent::Tags' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, Preview) == 0x000060, "Member 'ABUGC_ModifyContent::Preview' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, FileExtension) == 0x000070, "Member 'ABUGC_ModifyContent::FileExtension' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, OnSuccess) == 0x000080, "Member 'ABUGC_ModifyContent::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, OnError) == 0x000094, "Member 'ABUGC_ModifyContent::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContent, ContentType) == 0x0000A8, "Member 'ABUGC_ModifyContent::ContentType' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContentByShareCode
// 0x0100 (0x0100 - 0x0000)
struct ABUGC_ModifyContentByShareCode final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCUpdateRequest       ModifyRequest;                                     // 0x0020(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x00D8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00EC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContentByShareCode) == 0x000008, "Wrong alignment on ABUGC_ModifyContentByShareCode");
static_assert(sizeof(ABUGC_ModifyContentByShareCode) == 0x000100, "Wrong size on ABUGC_ModifyContentByShareCode");
static_assert(offsetof(ABUGC_ModifyContentByShareCode, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContentByShareCode::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByShareCode, ShareCode) == 0x000010, "Member 'ABUGC_ModifyContentByShareCode::ShareCode' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByShareCode, ModifyRequest) == 0x000020, "Member 'ABUGC_ModifyContentByShareCode::ModifyRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByShareCode, OnSuccess) == 0x0000D8, "Member 'ABUGC_ModifyContentByShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByShareCode, OnError) == 0x0000EC, "Member 'ABUGC_ModifyContentByShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContentByStruct
// 0x00F8 (0x00F8 - 0x0000)
struct ABUGC_ModifyContentByStruct final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCRequest             UGCRequest;                                        // 0x0020(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x00D0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00E4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContentByStruct) == 0x000008, "Wrong alignment on ABUGC_ModifyContentByStruct");
static_assert(sizeof(ABUGC_ModifyContentByStruct) == 0x0000F8, "Wrong size on ABUGC_ModifyContentByStruct");
static_assert(offsetof(ABUGC_ModifyContentByStruct, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContentByStruct::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByStruct, ContentId) == 0x000010, "Member 'ABUGC_ModifyContentByStruct::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByStruct, UGCRequest) == 0x000020, "Member 'ABUGC_ModifyContentByStruct::UGCRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByStruct, OnSuccess) == 0x0000D0, "Member 'ABUGC_ModifyContentByStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByStruct, OnError) == 0x0000E4, "Member 'ABUGC_ModifyContentByStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContentByUpdateStruct
// 0x0100 (0x0100 - 0x0000)
struct ABUGC_ModifyContentByUpdateStruct final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCUpdateRequest       UGCRequest;                                        // 0x0020(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x00D8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00EC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContentByUpdateStruct) == 0x000008, "Wrong alignment on ABUGC_ModifyContentByUpdateStruct");
static_assert(sizeof(ABUGC_ModifyContentByUpdateStruct) == 0x000100, "Wrong size on ABUGC_ModifyContentByUpdateStruct");
static_assert(offsetof(ABUGC_ModifyContentByUpdateStruct, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContentByUpdateStruct::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByUpdateStruct, ContentId) == 0x000010, "Member 'ABUGC_ModifyContentByUpdateStruct::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByUpdateStruct, UGCRequest) == 0x000020, "Member 'ABUGC_ModifyContentByUpdateStruct::UGCRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByUpdateStruct, OnSuccess) == 0x0000D8, "Member 'ABUGC_ModifyContentByUpdateStruct::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentByUpdateStruct, OnError) == 0x0000EC, "Member 'ABUGC_ModifyContentByUpdateStruct::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContentShareCode
// 0x0058 (0x0058 - 0x0000)
struct ABUGC_ModifyContentShareCode final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCModifyContentShareCodeRequest ModifyContentShareCodeRequest;           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCResponse& Response)> OnSuccess;                   // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContentShareCode) == 0x000008, "Wrong alignment on ABUGC_ModifyContentShareCode");
static_assert(sizeof(ABUGC_ModifyContentShareCode) == 0x000058, "Wrong size on ABUGC_ModifyContentShareCode");
static_assert(offsetof(ABUGC_ModifyContentShareCode, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContentShareCode::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCode, ContentId) == 0x000010, "Member 'ABUGC_ModifyContentShareCode::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCode, ModifyContentShareCodeRequest) == 0x000020, "Member 'ABUGC_ModifyContentShareCode::ModifyContentShareCodeRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCode, OnSuccess) == 0x000030, "Member 'ABUGC_ModifyContentShareCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCode, OnError) == 0x000044, "Member 'ABUGC_ModifyContentShareCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContentShareCodeV2
// 0x0058 (0x0058 - 0x0000)
struct ABUGC_ModifyContentShareCodeV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCModifyContentShareCodeRequest ModifyContentShareCodeRequest;           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCCreateUGCResponseV2& Response)> OnSuccess;        // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContentShareCodeV2) == 0x000008, "Wrong alignment on ABUGC_ModifyContentShareCodeV2");
static_assert(sizeof(ABUGC_ModifyContentShareCodeV2) == 0x000058, "Wrong size on ABUGC_ModifyContentShareCodeV2");
static_assert(offsetof(ABUGC_ModifyContentShareCodeV2, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContentShareCodeV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCodeV2, ContentId) == 0x000010, "Member 'ABUGC_ModifyContentShareCodeV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCodeV2, ModifyContentShareCodeRequest) == 0x000020, "Member 'ABUGC_ModifyContentShareCodeV2::ModifyContentShareCodeRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCodeV2, OnSuccess) == 0x000030, "Member 'ABUGC_ModifyContentShareCodeV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentShareCodeV2, OnError) == 0x000044, "Member 'ABUGC_ModifyContentShareCodeV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.ModifyContentV2
// 0x00A8 (0x00A8 - 0x0000)
struct ABUGC_ModifyContentV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsModifyUGCRequestV2     ModifyRequest;                                     // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCModifyUGCResponseV2& Response)> OnSuccess;        // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_ModifyContentV2) == 0x000008, "Wrong alignment on ABUGC_ModifyContentV2");
static_assert(sizeof(ABUGC_ModifyContentV2) == 0x0000A8, "Wrong size on ABUGC_ModifyContentV2");
static_assert(offsetof(ABUGC_ModifyContentV2, ChannelId) == 0x000000, "Member 'ABUGC_ModifyContentV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentV2, ContentId) == 0x000010, "Member 'ABUGC_ModifyContentV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentV2, ModifyRequest) == 0x000020, "Member 'ABUGC_ModifyContentV2::ModifyRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentV2, OnSuccess) == 0x000080, "Member 'ABUGC_ModifyContentV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_ModifyContentV2, OnError) == 0x000094, "Member 'ABUGC_ModifyContentV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.SearchAllContents
// 0x00A0 (0x00A0 - 0x0000)
struct ABUGC_SearchAllContents final
{
public:
	struct FAccelByteModelsUGCSearchContentsRequest Request;                                         // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)> OnSuccess; // 0x0070(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_SearchAllContents) == 0x000008, "Wrong alignment on ABUGC_SearchAllContents");
static_assert(sizeof(ABUGC_SearchAllContents) == 0x0000A0, "Wrong size on ABUGC_SearchAllContents");
static_assert(offsetof(ABUGC_SearchAllContents, Request) == 0x000000, "Member 'ABUGC_SearchAllContents::Request' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchAllContents, OnSuccess) == 0x000070, "Member 'ABUGC_SearchAllContents::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchAllContents, OnError) == 0x000084, "Member 'ABUGC_SearchAllContents::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchAllContents, Limit) == 0x000098, "Member 'ABUGC_SearchAllContents::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchAllContents, Offset) == 0x00009C, "Member 'ABUGC_SearchAllContents::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.SearchContents
// 0x00A0 (0x00A0 - 0x0000)
struct ABUGC_SearchContents final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Creator;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtype;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)> OnSuccess; // 0x0068(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x007C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteUgcSortBy                           SortBy;                                            // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUgcOrderBy                          OrderBy;                                           // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit;                                             // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_SearchContents) == 0x000008, "Wrong alignment on ABUGC_SearchContents");
static_assert(sizeof(ABUGC_SearchContents) == 0x0000A0, "Wrong size on ABUGC_SearchContents");
static_assert(offsetof(ABUGC_SearchContents, Name_0) == 0x000000, "Member 'ABUGC_SearchContents::Name_0' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, Creator) == 0x000010, "Member 'ABUGC_SearchContents::Creator' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, Type) == 0x000020, "Member 'ABUGC_SearchContents::Type' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, Subtype) == 0x000030, "Member 'ABUGC_SearchContents::Subtype' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, Tags) == 0x000040, "Member 'ABUGC_SearchContents::Tags' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, IsOfficial) == 0x000050, "Member 'ABUGC_SearchContents::IsOfficial' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, UserId) == 0x000058, "Member 'ABUGC_SearchContents::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, OnSuccess) == 0x000068, "Member 'ABUGC_SearchContents::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, OnError) == 0x00007C, "Member 'ABUGC_SearchContents::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, SortBy) == 0x000090, "Member 'ABUGC_SearchContents::SortBy' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, OrderBy) == 0x000091, "Member 'ABUGC_SearchContents::OrderBy' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, Limit) == 0x000094, "Member 'ABUGC_SearchContents::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContents, Offset) == 0x000098, "Member 'ABUGC_SearchContents::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.SearchContentsByChannelId
// 0x00B0 (0x00B0 - 0x0000)
struct ABUGC_SearchContentsByChannelId final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCSearchContentsRequest Request;                                         // 0x0010(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)> OnSuccess; // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_SearchContentsByChannelId) == 0x000008, "Wrong alignment on ABUGC_SearchContentsByChannelId");
static_assert(sizeof(ABUGC_SearchContentsByChannelId) == 0x0000B0, "Wrong size on ABUGC_SearchContentsByChannelId");
static_assert(offsetof(ABUGC_SearchContentsByChannelId, ChannelId) == 0x000000, "Member 'ABUGC_SearchContentsByChannelId::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsByChannelId, Request) == 0x000010, "Member 'ABUGC_SearchContentsByChannelId::Request' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsByChannelId, OnSuccess) == 0x000080, "Member 'ABUGC_SearchContentsByChannelId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsByChannelId, OnError) == 0x000094, "Member 'ABUGC_SearchContentsByChannelId::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsByChannelId, Limit) == 0x0000A8, "Member 'ABUGC_SearchContentsByChannelId::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsByChannelId, Offset) == 0x0000AC, "Member 'ABUGC_SearchContentsByChannelId::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.SearchContentsSpecificToChannel
// 0x00B0 (0x00B0 - 0x0000)
struct ABUGC_SearchContentsSpecificToChannel final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Creator;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtype;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponse& Response)> OnSuccess; // 0x0078(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x008C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteUgcSortBy                           SortBy;                                            // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUgcOrderBy                          OrderBy;                                           // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit;                                             // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_SearchContentsSpecificToChannel) == 0x000008, "Wrong alignment on ABUGC_SearchContentsSpecificToChannel");
static_assert(sizeof(ABUGC_SearchContentsSpecificToChannel) == 0x0000B0, "Wrong size on ABUGC_SearchContentsSpecificToChannel");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, ChannelId) == 0x000000, "Member 'ABUGC_SearchContentsSpecificToChannel::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Name_0) == 0x000010, "Member 'ABUGC_SearchContentsSpecificToChannel::Name_0' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Creator) == 0x000020, "Member 'ABUGC_SearchContentsSpecificToChannel::Creator' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Type) == 0x000030, "Member 'ABUGC_SearchContentsSpecificToChannel::Type' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Subtype) == 0x000040, "Member 'ABUGC_SearchContentsSpecificToChannel::Subtype' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Tags) == 0x000050, "Member 'ABUGC_SearchContentsSpecificToChannel::Tags' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, IsOfficial) == 0x000060, "Member 'ABUGC_SearchContentsSpecificToChannel::IsOfficial' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, UserId) == 0x000068, "Member 'ABUGC_SearchContentsSpecificToChannel::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, OnSuccess) == 0x000078, "Member 'ABUGC_SearchContentsSpecificToChannel::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, OnError) == 0x00008C, "Member 'ABUGC_SearchContentsSpecificToChannel::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, SortBy) == 0x0000A0, "Member 'ABUGC_SearchContentsSpecificToChannel::SortBy' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, OrderBy) == 0x0000A1, "Member 'ABUGC_SearchContentsSpecificToChannel::OrderBy' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Limit) == 0x0000A4, "Member 'ABUGC_SearchContentsSpecificToChannel::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannel, Offset) == 0x0000A8, "Member 'ABUGC_SearchContentsSpecificToChannel::Offset' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.SearchContentsSpecificToChannelV2
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_SearchContentsSpecificToChannelV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUGCContentSortByV2                  SortBy;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_SearchContentsSpecificToChannelV2) == 0x000008, "Wrong alignment on ABUGC_SearchContentsSpecificToChannelV2");
static_assert(sizeof(ABUGC_SearchContentsSpecificToChannelV2) == 0x000048, "Wrong size on ABUGC_SearchContentsSpecificToChannelV2");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannelV2, ChannelId) == 0x000000, "Member 'ABUGC_SearchContentsSpecificToChannelV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannelV2, OnSuccess) == 0x000010, "Member 'ABUGC_SearchContentsSpecificToChannelV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannelV2, OnError) == 0x000024, "Member 'ABUGC_SearchContentsSpecificToChannelV2::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannelV2, Limit) == 0x000038, "Member 'ABUGC_SearchContentsSpecificToChannelV2::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannelV2, Offset) == 0x00003C, "Member 'ABUGC_SearchContentsSpecificToChannelV2::Offset' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsSpecificToChannelV2, SortBy) == 0x000040, "Member 'ABUGC_SearchContentsSpecificToChannelV2::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.SearchContentsV2
// 0x0078 (0x0078 - 0x0000)
struct ABUGC_SearchContentsV2 final
{
public:
	struct FAccelByteModelsUGCFilterRequestV2     Filter;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCSearchContentsPagingResponseV2& Response)> OnSuccess; // 0x0040(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0054(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUGCContentSortByV2                  SortBy;                                            // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_SearchContentsV2) == 0x000008, "Wrong alignment on ABUGC_SearchContentsV2");
static_assert(sizeof(ABUGC_SearchContentsV2) == 0x000078, "Wrong size on ABUGC_SearchContentsV2");
static_assert(offsetof(ABUGC_SearchContentsV2, Filter) == 0x000000, "Member 'ABUGC_SearchContentsV2::Filter' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsV2, OnSuccess) == 0x000040, "Member 'ABUGC_SearchContentsV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsV2, OnError) == 0x000054, "Member 'ABUGC_SearchContentsV2::OnError' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsV2, Limit) == 0x000068, "Member 'ABUGC_SearchContentsV2::Limit' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsV2, Offset) == 0x00006C, "Member 'ABUGC_SearchContentsV2::Offset' has a wrong offset!");
static_assert(offsetof(ABUGC_SearchContentsV2, SortBy) == 0x000070, "Member 'ABUGC_SearchContentsV2::SortBy' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.UpdateContentFileLocationV2
// 0x0068 (0x0068 - 0x0000)
struct ABUGC_UpdateContentFileLocationV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 S3Key;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCUpdateContentFileLocationResponseV2& Response)> OnSuccess; // 0x0040(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0054(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_UpdateContentFileLocationV2) == 0x000008, "Wrong alignment on ABUGC_UpdateContentFileLocationV2");
static_assert(sizeof(ABUGC_UpdateContentFileLocationV2) == 0x000068, "Wrong size on ABUGC_UpdateContentFileLocationV2");
static_assert(offsetof(ABUGC_UpdateContentFileLocationV2, ChannelId) == 0x000000, "Member 'ABUGC_UpdateContentFileLocationV2::ChannelId' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentFileLocationV2, ContentId) == 0x000010, "Member 'ABUGC_UpdateContentFileLocationV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentFileLocationV2, FileExtension) == 0x000020, "Member 'ABUGC_UpdateContentFileLocationV2::FileExtension' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentFileLocationV2, S3Key) == 0x000030, "Member 'ABUGC_UpdateContentFileLocationV2::S3Key' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentFileLocationV2, OnSuccess) == 0x000040, "Member 'ABUGC_UpdateContentFileLocationV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentFileLocationV2, OnError) == 0x000054, "Member 'ABUGC_UpdateContentFileLocationV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.UpdateContentScreenshotV2
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_UpdateContentScreenshotV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCUpdateScreenshotsV2 ScreenshotsRequest;                                // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCUpdateScreenshotsV2& Response)> OnSuccess;        // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_UpdateContentScreenshotV2) == 0x000008, "Wrong alignment on ABUGC_UpdateContentScreenshotV2");
static_assert(sizeof(ABUGC_UpdateContentScreenshotV2) == 0x000048, "Wrong size on ABUGC_UpdateContentScreenshotV2");
static_assert(offsetof(ABUGC_UpdateContentScreenshotV2, ContentId) == 0x000000, "Member 'ABUGC_UpdateContentScreenshotV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentScreenshotV2, ScreenshotsRequest) == 0x000010, "Member 'ABUGC_UpdateContentScreenshotV2::ScreenshotsRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentScreenshotV2, OnSuccess) == 0x000020, "Member 'ABUGC_UpdateContentScreenshotV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateContentScreenshotV2, OnError) == 0x000034, "Member 'ABUGC_UpdateContentScreenshotV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.UpdateFollowStatusToUser
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_UpdateFollowStatusToUser final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowStatus;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsUGCUpdateFollowStatusToUserResponse& Response)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_UpdateFollowStatusToUser) == 0x000008, "Wrong alignment on ABUGC_UpdateFollowStatusToUser");
static_assert(sizeof(ABUGC_UpdateFollowStatusToUser) == 0x000040, "Wrong size on ABUGC_UpdateFollowStatusToUser");
static_assert(offsetof(ABUGC_UpdateFollowStatusToUser, UserId) == 0x000000, "Member 'ABUGC_UpdateFollowStatusToUser::UserId' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateFollowStatusToUser, bFollowStatus) == 0x000010, "Member 'ABUGC_UpdateFollowStatusToUser::bFollowStatus' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateFollowStatusToUser, OnSuccess) == 0x000014, "Member 'ABUGC_UpdateFollowStatusToUser::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateFollowStatusToUser, OnError) == 0x000028, "Member 'ABUGC_UpdateFollowStatusToUser::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.UpdateLikeStatusToContent
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_UpdateLikeStatusToContent final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLikeStatus;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_UpdateLikeStatusToContent) == 0x000008, "Wrong alignment on ABUGC_UpdateLikeStatusToContent");
static_assert(sizeof(ABUGC_UpdateLikeStatusToContent) == 0x000040, "Wrong size on ABUGC_UpdateLikeStatusToContent");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContent, ContentId) == 0x000000, "Member 'ABUGC_UpdateLikeStatusToContent::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContent, bLikeStatus) == 0x000010, "Member 'ABUGC_UpdateLikeStatusToContent::bLikeStatus' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContent, OnSuccess) == 0x000014, "Member 'ABUGC_UpdateLikeStatusToContent::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContent, OnError) == 0x000028, "Member 'ABUGC_UpdateLikeStatusToContent::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.UpdateLikeStatusToContentV2
// 0x0040 (0x0040 - 0x0000)
struct ABUGC_UpdateLikeStatusToContentV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLikeStatus;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse& Response)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUGC_UpdateLikeStatusToContentV2) == 0x000008, "Wrong alignment on ABUGC_UpdateLikeStatusToContentV2");
static_assert(sizeof(ABUGC_UpdateLikeStatusToContentV2) == 0x000040, "Wrong size on ABUGC_UpdateLikeStatusToContentV2");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContentV2, ContentId) == 0x000000, "Member 'ABUGC_UpdateLikeStatusToContentV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContentV2, bLikeStatus) == 0x000010, "Member 'ABUGC_UpdateLikeStatusToContentV2::bLikeStatus' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContentV2, OnSuccess) == 0x000014, "Member 'ABUGC_UpdateLikeStatusToContentV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_UpdateLikeStatusToContentV2, OnError) == 0x000028, "Member 'ABUGC_UpdateLikeStatusToContentV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUGC.UploadContentScreenshotV2
// 0x0048 (0x0048 - 0x0000)
struct ABUGC_UploadContentScreenshotV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCUploadScreenshotsRequestV2 ScreenshotsRequest;                         // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUGCUpdateContentScreenshotResponse& Response)> OnSuccess; // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUGC_UploadContentScreenshotV2) == 0x000008, "Wrong alignment on ABUGC_UploadContentScreenshotV2");
static_assert(sizeof(ABUGC_UploadContentScreenshotV2) == 0x000048, "Wrong size on ABUGC_UploadContentScreenshotV2");
static_assert(offsetof(ABUGC_UploadContentScreenshotV2, ContentId) == 0x000000, "Member 'ABUGC_UploadContentScreenshotV2::ContentId' has a wrong offset!");
static_assert(offsetof(ABUGC_UploadContentScreenshotV2, ScreenshotsRequest) == 0x000010, "Member 'ABUGC_UploadContentScreenshotV2::ScreenshotsRequest' has a wrong offset!");
static_assert(offsetof(ABUGC_UploadContentScreenshotV2, OnSuccess) == 0x000020, "Member 'ABUGC_UploadContentScreenshotV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUGC_UploadContentScreenshotV2, OnError) == 0x000034, "Member 'ABUGC_UploadContentScreenshotV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.BulkGetUserByOtherPlatformUserIds
// 0x0040 (0x0040 - 0x0000)
struct ABUser_BulkGetUserByOtherPlatformUserIds final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OtherPlatformUserId;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FBulkPlatformUserIdResponse& Response)> OnSuccess;                   // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_BulkGetUserByOtherPlatformUserIds) == 0x000008, "Wrong alignment on ABUser_BulkGetUserByOtherPlatformUserIds");
static_assert(sizeof(ABUser_BulkGetUserByOtherPlatformUserIds) == 0x000040, "Wrong size on ABUser_BulkGetUserByOtherPlatformUserIds");
static_assert(offsetof(ABUser_BulkGetUserByOtherPlatformUserIds, PlatformType) == 0x000000, "Member 'ABUser_BulkGetUserByOtherPlatformUserIds::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_BulkGetUserByOtherPlatformUserIds, OtherPlatformUserId) == 0x000008, "Member 'ABUser_BulkGetUserByOtherPlatformUserIds::OtherPlatformUserId' has a wrong offset!");
static_assert(offsetof(ABUser_BulkGetUserByOtherPlatformUserIds, OnSuccess) == 0x000018, "Member 'ABUser_BulkGetUserByOtherPlatformUserIds::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_BulkGetUserByOtherPlatformUserIds, OnError) == 0x00002C, "Member 'ABUser_BulkGetUserByOtherPlatformUserIds::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.BulkGetUserInfo
// 0x0038 (0x0038 - 0x0000)
struct ABUser_BulkGetUserInfo final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FListBulkUserInfo& Response)> OnSuccess;                             // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_BulkGetUserInfo) == 0x000008, "Wrong alignment on ABUser_BulkGetUserInfo");
static_assert(sizeof(ABUser_BulkGetUserInfo) == 0x000038, "Wrong size on ABUser_BulkGetUserInfo");
static_assert(offsetof(ABUser_BulkGetUserInfo, UserIds) == 0x000000, "Member 'ABUser_BulkGetUserInfo::UserIds' has a wrong offset!");
static_assert(offsetof(ABUser_BulkGetUserInfo, OnSuccess) == 0x000010, "Member 'ABUser_BulkGetUserInfo::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_BulkGetUserInfo, OnError) == 0x000024, "Member 'ABUser_BulkGetUserInfo::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.ForcedLinkOtherPlatform
// 0x0040 (0x0040 - 0x0000)
struct ABUser_ForcedLinkOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)> OnError; // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_ForcedLinkOtherPlatform) == 0x000008, "Wrong alignment on ABUser_ForcedLinkOtherPlatform");
static_assert(sizeof(ABUser_ForcedLinkOtherPlatform) == 0x000040, "Wrong size on ABUser_ForcedLinkOtherPlatform");
static_assert(offsetof(ABUser_ForcedLinkOtherPlatform, PlatformType) == 0x000000, "Member 'ABUser_ForcedLinkOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_ForcedLinkOtherPlatform, PlatformUserId) == 0x000008, "Member 'ABUser_ForcedLinkOtherPlatform::PlatformUserId' has a wrong offset!");
static_assert(offsetof(ABUser_ForcedLinkOtherPlatform, OnSuccess) == 0x000018, "Member 'ABUser_ForcedLinkOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_ForcedLinkOtherPlatform, OnError) == 0x00002C, "Member 'ABUser_ForcedLinkOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.GetCountryFromIP
// 0x0028 (0x0028 - 0x0000)
struct ABUser_GetCountryFromIP final
{
public:
	TDelegate<void(const struct FCountryInfo& Response)> OnSuccess;                                  // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_GetCountryFromIP) == 0x000004, "Wrong alignment on ABUser_GetCountryFromIP");
static_assert(sizeof(ABUser_GetCountryFromIP) == 0x000028, "Wrong size on ABUser_GetCountryFromIP");
static_assert(offsetof(ABUser_GetCountryFromIP, OnSuccess) == 0x000000, "Member 'ABUser_GetCountryFromIP::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_GetCountryFromIP, OnError) == 0x000014, "Member 'ABUser_GetCountryFromIP::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.GetData
// 0x0028 (0x0028 - 0x0000)
struct ABUser_GetData final
{
public:
	TDelegate<void(const struct FAccountUserData& Response)> OnSuccess;                              // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_GetData) == 0x000004, "Wrong alignment on ABUser_GetData");
static_assert(sizeof(ABUser_GetData) == 0x000028, "Wrong size on ABUser_GetData");
static_assert(offsetof(ABUser_GetData, OnSuccess) == 0x000000, "Member 'ABUser_GetData::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_GetData, OnError) == 0x000014, "Member 'ABUser_GetData::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.GetPlatformLinks
// 0x0028 (0x0028 - 0x0000)
struct ABUser_GetPlatformLinks final
{
public:
	TDelegate<void(const struct FPagedPlatformLinks& Response)> OnSuccess;                           // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_GetPlatformLinks) == 0x000004, "Wrong alignment on ABUser_GetPlatformLinks");
static_assert(sizeof(ABUser_GetPlatformLinks) == 0x000028, "Wrong size on ABUser_GetPlatformLinks");
static_assert(offsetof(ABUser_GetPlatformLinks, OnSuccess) == 0x000000, "Member 'ABUser_GetPlatformLinks::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_GetPlatformLinks, OnError) == 0x000014, "Member 'ABUser_GetPlatformLinks::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.GetUserByOtherPlatformUserId
// 0x0040 (0x0040 - 0x0000)
struct ABUser_GetUserByOtherPlatformUserId final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OtherPlatformUserId;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Response)> OnSuccess;                              // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_GetUserByOtherPlatformUserId) == 0x000008, "Wrong alignment on ABUser_GetUserByOtherPlatformUserId");
static_assert(sizeof(ABUser_GetUserByOtherPlatformUserId) == 0x000040, "Wrong size on ABUser_GetUserByOtherPlatformUserId");
static_assert(offsetof(ABUser_GetUserByOtherPlatformUserId, PlatformType) == 0x000000, "Member 'ABUser_GetUserByOtherPlatformUserId::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_GetUserByOtherPlatformUserId, OtherPlatformUserId) == 0x000008, "Member 'ABUser_GetUserByOtherPlatformUserId::OtherPlatformUserId' has a wrong offset!");
static_assert(offsetof(ABUser_GetUserByOtherPlatformUserId, OnSuccess) == 0x000018, "Member 'ABUser_GetUserByOtherPlatformUserId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_GetUserByOtherPlatformUserId, OnError) == 0x00002C, "Member 'ABUser_GetUserByOtherPlatformUserId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.GetUserByUserId
// 0x0038 (0x0038 - 0x0000)
struct ABUser_GetUserByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FSimpleUserData& Response)> OnSuccess;                               // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_GetUserByUserId) == 0x000008, "Wrong alignment on ABUser_GetUserByUserId");
static_assert(sizeof(ABUser_GetUserByUserId) == 0x000038, "Wrong size on ABUser_GetUserByUserId");
static_assert(offsetof(ABUser_GetUserByUserId, UserId) == 0x000000, "Member 'ABUser_GetUserByUserId::UserId' has a wrong offset!");
static_assert(offsetof(ABUser_GetUserByUserId, OnSuccess) == 0x000010, "Member 'ABUser_GetUserByUserId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_GetUserByUserId, OnError) == 0x000024, "Member 'ABUser_GetUserByUserId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.GetUserEligibleToPlay
// 0x0028 (0x0028 - 0x0000)
struct ABUser_GetUserEligibleToPlay final
{
public:
	TDelegate<void(bool Response)>                OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_GetUserEligibleToPlay) == 0x000004, "Wrong alignment on ABUser_GetUserEligibleToPlay");
static_assert(sizeof(ABUser_GetUserEligibleToPlay) == 0x000028, "Wrong size on ABUser_GetUserEligibleToPlay");
static_assert(offsetof(ABUser_GetUserEligibleToPlay, OnSuccess) == 0x000000, "Member 'ABUser_GetUserEligibleToPlay::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_GetUserEligibleToPlay, OnError) == 0x000014, "Member 'ABUser_GetUserEligibleToPlay::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LinkOtherPlatform
// 0x0040 (0x0040 - 0x0000)
struct ABUser_LinkOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ticket;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FAccountLinkConflictErrorJson& Response)> OnError; // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_LinkOtherPlatform) == 0x000008, "Wrong alignment on ABUser_LinkOtherPlatform");
static_assert(sizeof(ABUser_LinkOtherPlatform) == 0x000040, "Wrong size on ABUser_LinkOtherPlatform");
static_assert(offsetof(ABUser_LinkOtherPlatform, PlatformType) == 0x000000, "Member 'ABUser_LinkOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_LinkOtherPlatform, Ticket) == 0x000008, "Member 'ABUser_LinkOtherPlatform::Ticket' has a wrong offset!");
static_assert(offsetof(ABUser_LinkOtherPlatform, OnSuccess) == 0x000018, "Member 'ABUser_LinkOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LinkOtherPlatform, OnError) == 0x00002C, "Member 'ABUser_LinkOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginByExchangeCodeForToken
// 0x0038 (0x0038 - 0x0000)
struct ABUser_LoginByExchangeCodeForToken final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_LoginByExchangeCodeForToken) == 0x000008, "Wrong alignment on ABUser_LoginByExchangeCodeForToken");
static_assert(sizeof(ABUser_LoginByExchangeCodeForToken) == 0x000038, "Wrong size on ABUser_LoginByExchangeCodeForToken");
static_assert(offsetof(ABUser_LoginByExchangeCodeForToken, Code) == 0x000000, "Member 'ABUser_LoginByExchangeCodeForToken::Code' has a wrong offset!");
static_assert(offsetof(ABUser_LoginByExchangeCodeForToken, OnSuccess) == 0x000010, "Member 'ABUser_LoginByExchangeCodeForToken::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginByExchangeCodeForToken, OnError) == 0x000024, "Member 'ABUser_LoginByExchangeCodeForToken::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginWithDeviceId
// 0x0028 (0x0028 - 0x0000)
struct ABUser_LoginWithDeviceId final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_LoginWithDeviceId) == 0x000004, "Wrong alignment on ABUser_LoginWithDeviceId");
static_assert(sizeof(ABUser_LoginWithDeviceId) == 0x000028, "Wrong size on ABUser_LoginWithDeviceId");
static_assert(offsetof(ABUser_LoginWithDeviceId, OnSuccess) == 0x000000, "Member 'ABUser_LoginWithDeviceId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithDeviceId, OnError) == 0x000014, "Member 'ABUser_LoginWithDeviceId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginWithLauncher
// 0x0028 (0x0028 - 0x0000)
struct ABUser_LoginWithLauncher final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_LoginWithLauncher) == 0x000004, "Wrong alignment on ABUser_LoginWithLauncher");
static_assert(sizeof(ABUser_LoginWithLauncher) == 0x000028, "Wrong size on ABUser_LoginWithLauncher");
static_assert(offsetof(ABUser_LoginWithLauncher, OnSuccess) == 0x000000, "Member 'ABUser_LoginWithLauncher::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithLauncher, OnError) == 0x000014, "Member 'ABUser_LoginWithLauncher::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginWithOtherPlatform
// 0x0048 (0x0048 - 0x0000)
struct ABUser_LoginWithOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformToken;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCreateHeadless;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUser_LoginWithOtherPlatform) == 0x000008, "Wrong alignment on ABUser_LoginWithOtherPlatform");
static_assert(sizeof(ABUser_LoginWithOtherPlatform) == 0x000048, "Wrong size on ABUser_LoginWithOtherPlatform");
static_assert(offsetof(ABUser_LoginWithOtherPlatform, PlatformType) == 0x000000, "Member 'ABUser_LoginWithOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatform, PlatformToken) == 0x000008, "Member 'ABUser_LoginWithOtherPlatform::PlatformToken' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatform, OnSuccess) == 0x000018, "Member 'ABUser_LoginWithOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatform, OnError) == 0x00002C, "Member 'ABUser_LoginWithOtherPlatform::OnError' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatform, bCreateHeadless) == 0x000040, "Member 'ABUser_LoginWithOtherPlatform::bCreateHeadless' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginWithOtherPlatformId
// 0x0050 (0x0050 - 0x0000)
struct ABUser_LoginWithOtherPlatformId final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformToken;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCreateHeadless;                                   // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUser_LoginWithOtherPlatformId) == 0x000008, "Wrong alignment on ABUser_LoginWithOtherPlatformId");
static_assert(sizeof(ABUser_LoginWithOtherPlatformId) == 0x000050, "Wrong size on ABUser_LoginWithOtherPlatformId");
static_assert(offsetof(ABUser_LoginWithOtherPlatformId, PlatformId) == 0x000000, "Member 'ABUser_LoginWithOtherPlatformId::PlatformId' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatformId, PlatformToken) == 0x000010, "Member 'ABUser_LoginWithOtherPlatformId::PlatformToken' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatformId, OnSuccess) == 0x000020, "Member 'ABUser_LoginWithOtherPlatformId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatformId, OnError) == 0x000034, "Member 'ABUser_LoginWithOtherPlatformId::OnError' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithOtherPlatformId, bCreateHeadless) == 0x000048, "Member 'ABUser_LoginWithOtherPlatformId::bCreateHeadless' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginWithRefreshToken
// 0x0028 (0x0028 - 0x0000)
struct ABUser_LoginWithRefreshToken final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_LoginWithRefreshToken) == 0x000004, "Wrong alignment on ABUser_LoginWithRefreshToken");
static_assert(sizeof(ABUser_LoginWithRefreshToken) == 0x000028, "Wrong size on ABUser_LoginWithRefreshToken");
static_assert(offsetof(ABUser_LoginWithRefreshToken, OnSuccess) == 0x000000, "Member 'ABUser_LoginWithRefreshToken::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithRefreshToken, OnError) == 0x000014, "Member 'ABUser_LoginWithRefreshToken::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.LoginWithUsername
// 0x0048 (0x0048 - 0x0000)
struct ABUser_LoginWithUsername final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_LoginWithUsername) == 0x000008, "Wrong alignment on ABUser_LoginWithUsername");
static_assert(sizeof(ABUser_LoginWithUsername) == 0x000048, "Wrong size on ABUser_LoginWithUsername");
static_assert(offsetof(ABUser_LoginWithUsername, Username) == 0x000000, "Member 'ABUser_LoginWithUsername::Username' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithUsername, Password) == 0x000010, "Member 'ABUser_LoginWithUsername::Password' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithUsername, OnSuccess) == 0x000020, "Member 'ABUser_LoginWithUsername::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_LoginWithUsername, OnError) == 0x000034, "Member 'ABUser_LoginWithUsername::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Logout
// 0x0028 (0x0028 - 0x0000)
struct ABUser_Logout final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Logout) == 0x000004, "Wrong alignment on ABUser_Logout");
static_assert(sizeof(ABUser_Logout) == 0x000028, "Wrong size on ABUser_Logout");
static_assert(offsetof(ABUser_Logout, OnSuccess) == 0x000000, "Member 'ABUser_Logout::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Logout, OnError) == 0x000014, "Member 'ABUser_Logout::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Register
// 0x0078 (0x0078 - 0x0000)
struct ABUser_Register final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess;                             // 0x0050(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0064(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Register) == 0x000008, "Wrong alignment on ABUser_Register");
static_assert(sizeof(ABUser_Register) == 0x000078, "Wrong size on ABUser_Register");
static_assert(offsetof(ABUser_Register, Username) == 0x000000, "Member 'ABUser_Register::Username' has a wrong offset!");
static_assert(offsetof(ABUser_Register, Password) == 0x000010, "Member 'ABUser_Register::Password' has a wrong offset!");
static_assert(offsetof(ABUser_Register, DisplayName) == 0x000020, "Member 'ABUser_Register::DisplayName' has a wrong offset!");
static_assert(offsetof(ABUser_Register, Country) == 0x000030, "Member 'ABUser_Register::Country' has a wrong offset!");
static_assert(offsetof(ABUser_Register, DateOfBirth) == 0x000040, "Member 'ABUser_Register::DateOfBirth' has a wrong offset!");
static_assert(offsetof(ABUser_Register, OnSuccess) == 0x000050, "Member 'ABUser_Register::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Register, OnError) == 0x000064, "Member 'ABUser_Register::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Registerv2
// 0x0088 (0x0088 - 0x0000)
struct ABUser_Registerv2 final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess;                             // 0x0060(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0074(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Registerv2) == 0x000008, "Wrong alignment on ABUser_Registerv2");
static_assert(sizeof(ABUser_Registerv2) == 0x000088, "Wrong size on ABUser_Registerv2");
static_assert(offsetof(ABUser_Registerv2, EmailAddress) == 0x000000, "Member 'ABUser_Registerv2::EmailAddress' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, Username) == 0x000010, "Member 'ABUser_Registerv2::Username' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, Password) == 0x000020, "Member 'ABUser_Registerv2::Password' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, DisplayName) == 0x000030, "Member 'ABUser_Registerv2::DisplayName' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, Country) == 0x000040, "Member 'ABUser_Registerv2::Country' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, DateOfBirth) == 0x000050, "Member 'ABUser_Registerv2::DateOfBirth' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, OnSuccess) == 0x000060, "Member 'ABUser_Registerv2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv2, OnError) == 0x000074, "Member 'ABUser_Registerv2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Registerv3
// 0x00A8 (0x00A8 - 0x0000)
struct ABUser_Registerv3 final
{
public:
	struct FRegisterRequestv3                     RegisterRequest;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRegisterResponse& Response)> OnSuccess;                             // 0x0080(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Registerv3) == 0x000008, "Wrong alignment on ABUser_Registerv3");
static_assert(sizeof(ABUser_Registerv3) == 0x0000A8, "Wrong size on ABUser_Registerv3");
static_assert(offsetof(ABUser_Registerv3, RegisterRequest) == 0x000000, "Member 'ABUser_Registerv3::RegisterRequest' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv3, OnSuccess) == 0x000080, "Member 'ABUser_Registerv3::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Registerv3, OnError) == 0x000094, "Member 'ABUser_Registerv3::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.ResetPassword
// 0x0058 (0x0058 - 0x0000)
struct ABUser_ResetPassword final
{
public:
	class FString                                 VerificationCode;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPassword;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_ResetPassword) == 0x000008, "Wrong alignment on ABUser_ResetPassword");
static_assert(sizeof(ABUser_ResetPassword) == 0x000058, "Wrong size on ABUser_ResetPassword");
static_assert(offsetof(ABUser_ResetPassword, VerificationCode) == 0x000000, "Member 'ABUser_ResetPassword::VerificationCode' has a wrong offset!");
static_assert(offsetof(ABUser_ResetPassword, EmailAddress) == 0x000010, "Member 'ABUser_ResetPassword::EmailAddress' has a wrong offset!");
static_assert(offsetof(ABUser_ResetPassword, NewPassword) == 0x000020, "Member 'ABUser_ResetPassword::NewPassword' has a wrong offset!");
static_assert(offsetof(ABUser_ResetPassword, OnSuccess) == 0x000030, "Member 'ABUser_ResetPassword::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_ResetPassword, OnError) == 0x000044, "Member 'ABUser_ResetPassword::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.SearchUsers
// 0x0038 (0x0038 - 0x0000)
struct ABUser_SearchUsers final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FPagedPublicUsersInfo& Response)> OnSuccess;                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_SearchUsers) == 0x000008, "Wrong alignment on ABUser_SearchUsers");
static_assert(sizeof(ABUser_SearchUsers) == 0x000038, "Wrong size on ABUser_SearchUsers");
static_assert(offsetof(ABUser_SearchUsers, Query) == 0x000000, "Member 'ABUser_SearchUsers::Query' has a wrong offset!");
static_assert(offsetof(ABUser_SearchUsers, OnSuccess) == 0x000010, "Member 'ABUser_SearchUsers::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_SearchUsers, OnError) == 0x000024, "Member 'ABUser_SearchUsers::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.SearchUsersByType
// 0x0040 (0x0040 - 0x0000)
struct ABUser_SearchUsersByType final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSearchType                          By;                                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FPagedPublicUsersInfo& Response)> OnSuccess;                         // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUser_SearchUsersByType) == 0x000008, "Wrong alignment on ABUser_SearchUsersByType");
static_assert(sizeof(ABUser_SearchUsersByType) == 0x000040, "Wrong size on ABUser_SearchUsersByType");
static_assert(offsetof(ABUser_SearchUsersByType, Query) == 0x000000, "Member 'ABUser_SearchUsersByType::Query' has a wrong offset!");
static_assert(offsetof(ABUser_SearchUsersByType, By) == 0x000010, "Member 'ABUser_SearchUsersByType::By' has a wrong offset!");
static_assert(offsetof(ABUser_SearchUsersByType, OnSuccess) == 0x000014, "Member 'ABUser_SearchUsersByType::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_SearchUsersByType, OnError) == 0x000028, "Member 'ABUser_SearchUsersByType::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.SendResetPasswordCode
// 0x0038 (0x0038 - 0x0000)
struct ABUser_SendResetPasswordCode final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_SendResetPasswordCode) == 0x000008, "Wrong alignment on ABUser_SendResetPasswordCode");
static_assert(sizeof(ABUser_SendResetPasswordCode) == 0x000038, "Wrong size on ABUser_SendResetPasswordCode");
static_assert(offsetof(ABUser_SendResetPasswordCode, EmailAddress) == 0x000000, "Member 'ABUser_SendResetPasswordCode::EmailAddress' has a wrong offset!");
static_assert(offsetof(ABUser_SendResetPasswordCode, OnSuccess) == 0x000010, "Member 'ABUser_SendResetPasswordCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_SendResetPasswordCode, OnError) == 0x000024, "Member 'ABUser_SendResetPasswordCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.SendUpdateEmailVerificationCode
// 0x0028 (0x0028 - 0x0000)
struct ABUser_SendUpdateEmailVerificationCode final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_SendUpdateEmailVerificationCode) == 0x000004, "Wrong alignment on ABUser_SendUpdateEmailVerificationCode");
static_assert(sizeof(ABUser_SendUpdateEmailVerificationCode) == 0x000028, "Wrong size on ABUser_SendUpdateEmailVerificationCode");
static_assert(offsetof(ABUser_SendUpdateEmailVerificationCode, OnSuccess) == 0x000000, "Member 'ABUser_SendUpdateEmailVerificationCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_SendUpdateEmailVerificationCode, OnError) == 0x000014, "Member 'ABUser_SendUpdateEmailVerificationCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.SendUpgradeVerificationCode
// 0x0038 (0x0038 - 0x0000)
struct ABUser_SendUpgradeVerificationCode final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_SendUpgradeVerificationCode) == 0x000008, "Wrong alignment on ABUser_SendUpgradeVerificationCode");
static_assert(sizeof(ABUser_SendUpgradeVerificationCode) == 0x000038, "Wrong size on ABUser_SendUpgradeVerificationCode");
static_assert(offsetof(ABUser_SendUpgradeVerificationCode, EmailAddress) == 0x000000, "Member 'ABUser_SendUpgradeVerificationCode::EmailAddress' has a wrong offset!");
static_assert(offsetof(ABUser_SendUpgradeVerificationCode, OnSuccess) == 0x000010, "Member 'ABUser_SendUpgradeVerificationCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_SendUpgradeVerificationCode, OnError) == 0x000024, "Member 'ABUser_SendUpgradeVerificationCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.SendVerificationCode
// 0x0028 (0x0028 - 0x0000)
struct ABUser_SendVerificationCode final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_SendVerificationCode) == 0x000004, "Wrong alignment on ABUser_SendVerificationCode");
static_assert(sizeof(ABUser_SendVerificationCode) == 0x000028, "Wrong size on ABUser_SendVerificationCode");
static_assert(offsetof(ABUser_SendVerificationCode, OnSuccess) == 0x000000, "Member 'ABUser_SendVerificationCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_SendVerificationCode, OnError) == 0x000014, "Member 'ABUser_SendVerificationCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.TryRelogin
// 0x0038 (0x0038 - 0x0000)
struct ABUser_TryRelogin final
{
public:
	class FString                                 PlatformUserID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_TryRelogin) == 0x000008, "Wrong alignment on ABUser_TryRelogin");
static_assert(sizeof(ABUser_TryRelogin) == 0x000038, "Wrong size on ABUser_TryRelogin");
static_assert(offsetof(ABUser_TryRelogin, PlatformUserID) == 0x000000, "Member 'ABUser_TryRelogin::PlatformUserID' has a wrong offset!");
static_assert(offsetof(ABUser_TryRelogin, OnSuccess) == 0x000010, "Member 'ABUser_TryRelogin::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_TryRelogin, OnError) == 0x000024, "Member 'ABUser_TryRelogin::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UnlinkAllOtherPlatform
// 0x002C (0x002C - 0x0000)
struct ABUser_UnlinkAllOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UnlinkAllOtherPlatform) == 0x000004, "Wrong alignment on ABUser_UnlinkAllOtherPlatform");
static_assert(sizeof(ABUser_UnlinkAllOtherPlatform) == 0x00002C, "Wrong size on ABUser_UnlinkAllOtherPlatform");
static_assert(offsetof(ABUser_UnlinkAllOtherPlatform, PlatformType) == 0x000000, "Member 'ABUser_UnlinkAllOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkAllOtherPlatform, OnSuccess) == 0x000004, "Member 'ABUser_UnlinkAllOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkAllOtherPlatform, OnError) == 0x000018, "Member 'ABUser_UnlinkAllOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UnlinkAllOtherPlatformId
// 0x0038 (0x0038 - 0x0000)
struct ABUser_UnlinkAllOtherPlatformId final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UnlinkAllOtherPlatformId) == 0x000008, "Wrong alignment on ABUser_UnlinkAllOtherPlatformId");
static_assert(sizeof(ABUser_UnlinkAllOtherPlatformId) == 0x000038, "Wrong size on ABUser_UnlinkAllOtherPlatformId");
static_assert(offsetof(ABUser_UnlinkAllOtherPlatformId, PlatformId) == 0x000000, "Member 'ABUser_UnlinkAllOtherPlatformId::PlatformId' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkAllOtherPlatformId, OnSuccess) == 0x000010, "Member 'ABUser_UnlinkAllOtherPlatformId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkAllOtherPlatformId, OnError) == 0x000024, "Member 'ABUser_UnlinkAllOtherPlatformId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UnlinkOtherPlatform
// 0x002C (0x002C - 0x0000)
struct ABUser_UnlinkOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UnlinkOtherPlatform) == 0x000004, "Wrong alignment on ABUser_UnlinkOtherPlatform");
static_assert(sizeof(ABUser_UnlinkOtherPlatform) == 0x00002C, "Wrong size on ABUser_UnlinkOtherPlatform");
static_assert(offsetof(ABUser_UnlinkOtherPlatform, PlatformType) == 0x000000, "Member 'ABUser_UnlinkOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkOtherPlatform, OnSuccess) == 0x000004, "Member 'ABUser_UnlinkOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkOtherPlatform, OnError) == 0x000018, "Member 'ABUser_UnlinkOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UnlinkOtherPlatformId
// 0x0038 (0x0038 - 0x0000)
struct ABUser_UnlinkOtherPlatformId final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UnlinkOtherPlatformId) == 0x000008, "Wrong alignment on ABUser_UnlinkOtherPlatformId");
static_assert(sizeof(ABUser_UnlinkOtherPlatformId) == 0x000038, "Wrong size on ABUser_UnlinkOtherPlatformId");
static_assert(offsetof(ABUser_UnlinkOtherPlatformId, PlatformId) == 0x000000, "Member 'ABUser_UnlinkOtherPlatformId::PlatformId' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkOtherPlatformId, OnSuccess) == 0x000010, "Member 'ABUser_UnlinkOtherPlatformId::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkOtherPlatformId, OnError) == 0x000024, "Member 'ABUser_UnlinkOtherPlatformId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UnlinkOtherPlatformWithCustomErrorHandler
// 0x002C (0x002C - 0x0000)
struct ABUser_UnlinkOtherPlatformWithCustomErrorHandler final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UnlinkOtherPlatformWithCustomErrorHandler) == 0x000004, "Wrong alignment on ABUser_UnlinkOtherPlatformWithCustomErrorHandler");
static_assert(sizeof(ABUser_UnlinkOtherPlatformWithCustomErrorHandler) == 0x00002C, "Wrong size on ABUser_UnlinkOtherPlatformWithCustomErrorHandler");
static_assert(offsetof(ABUser_UnlinkOtherPlatformWithCustomErrorHandler, PlatformType) == 0x000000, "Member 'ABUser_UnlinkOtherPlatformWithCustomErrorHandler::PlatformType' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkOtherPlatformWithCustomErrorHandler, OnSuccess) == 0x000004, "Member 'ABUser_UnlinkOtherPlatformWithCustomErrorHandler::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UnlinkOtherPlatformWithCustomErrorHandler, OnError) == 0x000018, "Member 'ABUser_UnlinkOtherPlatformWithCustomErrorHandler::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UpdateEmail
// 0x0048 (0x0048 - 0x0000)
struct ABUser_UpdateEmail final
{
public:
	struct FUpdateEmailRequest                    UpdateEmailRequest;                                // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UpdateEmail) == 0x000008, "Wrong alignment on ABUser_UpdateEmail");
static_assert(sizeof(ABUser_UpdateEmail) == 0x000048, "Wrong size on ABUser_UpdateEmail");
static_assert(offsetof(ABUser_UpdateEmail, UpdateEmailRequest) == 0x000000, "Member 'ABUser_UpdateEmail::UpdateEmailRequest' has a wrong offset!");
static_assert(offsetof(ABUser_UpdateEmail, OnSuccess) == 0x000020, "Member 'ABUser_UpdateEmail::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UpdateEmail, OnError) == 0x000034, "Member 'ABUser_UpdateEmail::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UpdateUser
// 0x0098 (0x0098 - 0x0000)
struct ABUser_UpdateUser final
{
public:
	struct FUserUpdateRequest                     UpdateRequest;                                     // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Response)> OnSuccess;                              // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UpdateUser) == 0x000008, "Wrong alignment on ABUser_UpdateUser");
static_assert(sizeof(ABUser_UpdateUser) == 0x000098, "Wrong size on ABUser_UpdateUser");
static_assert(offsetof(ABUser_UpdateUser, UpdateRequest) == 0x000000, "Member 'ABUser_UpdateUser::UpdateRequest' has a wrong offset!");
static_assert(offsetof(ABUser_UpdateUser, OnSuccess) == 0x000070, "Member 'ABUser_UpdateUser::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UpdateUser, OnError) == 0x000084, "Member 'ABUser_UpdateUser::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Upgrade
// 0x0048 (0x0048 - 0x0000)
struct ABUser_Upgrade final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Response)> OnSuccess;                              // 0x0020(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Upgrade) == 0x000008, "Wrong alignment on ABUser_Upgrade");
static_assert(sizeof(ABUser_Upgrade) == 0x000048, "Wrong size on ABUser_Upgrade");
static_assert(offsetof(ABUser_Upgrade, Username) == 0x000000, "Member 'ABUser_Upgrade::Username' has a wrong offset!");
static_assert(offsetof(ABUser_Upgrade, Password) == 0x000010, "Member 'ABUser_Upgrade::Password' has a wrong offset!");
static_assert(offsetof(ABUser_Upgrade, OnSuccess) == 0x000020, "Member 'ABUser_Upgrade::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Upgrade, OnError) == 0x000034, "Member 'ABUser_Upgrade::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.UpgradeAndVerify
// 0x0058 (0x0058 - 0x0000)
struct ABUser_UpgradeAndVerify final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerificationCode;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Response)> OnSuccess;                              // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_UpgradeAndVerify) == 0x000008, "Wrong alignment on ABUser_UpgradeAndVerify");
static_assert(sizeof(ABUser_UpgradeAndVerify) == 0x000058, "Wrong size on ABUser_UpgradeAndVerify");
static_assert(offsetof(ABUser_UpgradeAndVerify, Username) == 0x000000, "Member 'ABUser_UpgradeAndVerify::Username' has a wrong offset!");
static_assert(offsetof(ABUser_UpgradeAndVerify, Password) == 0x000010, "Member 'ABUser_UpgradeAndVerify::Password' has a wrong offset!");
static_assert(offsetof(ABUser_UpgradeAndVerify, VerificationCode) == 0x000020, "Member 'ABUser_UpgradeAndVerify::VerificationCode' has a wrong offset!");
static_assert(offsetof(ABUser_UpgradeAndVerify, OnSuccess) == 0x000030, "Member 'ABUser_UpgradeAndVerify::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_UpgradeAndVerify, OnError) == 0x000044, "Member 'ABUser_UpgradeAndVerify::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Upgradev2
// 0x0058 (0x0058 - 0x0000)
struct ABUser_Upgradev2 final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Response)> OnSuccess;                              // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Upgradev2) == 0x000008, "Wrong alignment on ABUser_Upgradev2");
static_assert(sizeof(ABUser_Upgradev2) == 0x000058, "Wrong size on ABUser_Upgradev2");
static_assert(offsetof(ABUser_Upgradev2, EmailAddress) == 0x000000, "Member 'ABUser_Upgradev2::EmailAddress' has a wrong offset!");
static_assert(offsetof(ABUser_Upgradev2, Username) == 0x000010, "Member 'ABUser_Upgradev2::Username' has a wrong offset!");
static_assert(offsetof(ABUser_Upgradev2, Password) == 0x000020, "Member 'ABUser_Upgradev2::Password' has a wrong offset!");
static_assert(offsetof(ABUser_Upgradev2, OnSuccess) == 0x000030, "Member 'ABUser_Upgradev2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Upgradev2, OnError) == 0x000044, "Member 'ABUser_Upgradev2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUser.Verify
// 0x0038 (0x0038 - 0x0000)
struct ABUser_Verify final
{
public:
	class FString                                 VerificationCode;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUser_Verify) == 0x000008, "Wrong alignment on ABUser_Verify");
static_assert(sizeof(ABUser_Verify) == 0x000038, "Wrong size on ABUser_Verify");
static_assert(offsetof(ABUser_Verify, VerificationCode) == 0x000000, "Member 'ABUser_Verify::VerificationCode' has a wrong offset!");
static_assert(offsetof(ABUser_Verify, OnSuccess) == 0x000010, "Member 'ABUser_Verify::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABUser_Verify, OnError) == 0x000024, "Member 'ABUser_Verify::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonArrayValue
// 0x0040 (0x0040 - 0x0000)
struct ABUtilities_AddOrReplaceJsonArrayValue final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUtilities_AddOrReplaceJsonArrayValue) == 0x000008, "Wrong alignment on ABUtilities_AddOrReplaceJsonArrayValue");
static_assert(sizeof(ABUtilities_AddOrReplaceJsonArrayValue) == 0x000040, "Wrong size on ABUtilities_AddOrReplaceJsonArrayValue");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonArrayValue, ObjectWrapper) == 0x000000, "Member 'ABUtilities_AddOrReplaceJsonArrayValue::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonArrayValue, Key) == 0x000020, "Member 'ABUtilities_AddOrReplaceJsonArrayValue::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonArrayValue, Value) == 0x000030, "Member 'ABUtilities_AddOrReplaceJsonArrayValue::Value' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonBoolValue
// 0x0038 (0x0038 - 0x0000)
struct ABUtilities_AddOrReplaceJsonBoolValue final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUtilities_AddOrReplaceJsonBoolValue) == 0x000008, "Wrong alignment on ABUtilities_AddOrReplaceJsonBoolValue");
static_assert(sizeof(ABUtilities_AddOrReplaceJsonBoolValue) == 0x000038, "Wrong size on ABUtilities_AddOrReplaceJsonBoolValue");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonBoolValue, ObjectWrapper) == 0x000000, "Member 'ABUtilities_AddOrReplaceJsonBoolValue::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonBoolValue, Key) == 0x000020, "Member 'ABUtilities_AddOrReplaceJsonBoolValue::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonBoolValue, Value) == 0x000030, "Member 'ABUtilities_AddOrReplaceJsonBoolValue::Value' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonNumberValue
// 0x0038 (0x0038 - 0x0000)
struct ABUtilities_AddOrReplaceJsonNumberValue final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUtilities_AddOrReplaceJsonNumberValue) == 0x000008, "Wrong alignment on ABUtilities_AddOrReplaceJsonNumberValue");
static_assert(sizeof(ABUtilities_AddOrReplaceJsonNumberValue) == 0x000038, "Wrong size on ABUtilities_AddOrReplaceJsonNumberValue");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonNumberValue, ObjectWrapper) == 0x000000, "Member 'ABUtilities_AddOrReplaceJsonNumberValue::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonNumberValue, Key) == 0x000020, "Member 'ABUtilities_AddOrReplaceJsonNumberValue::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonNumberValue, Value) == 0x000030, "Member 'ABUtilities_AddOrReplaceJsonNumberValue::Value' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.AddOrReplaceJsonStringValue
// 0x0040 (0x0040 - 0x0000)
struct ABUtilities_AddOrReplaceJsonStringValue final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUtilities_AddOrReplaceJsonStringValue) == 0x000008, "Wrong alignment on ABUtilities_AddOrReplaceJsonStringValue");
static_assert(sizeof(ABUtilities_AddOrReplaceJsonStringValue) == 0x000040, "Wrong size on ABUtilities_AddOrReplaceJsonStringValue");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonStringValue, ObjectWrapper) == 0x000000, "Member 'ABUtilities_AddOrReplaceJsonStringValue::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonStringValue, Key) == 0x000020, "Member 'ABUtilities_AddOrReplaceJsonStringValue::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_AddOrReplaceJsonStringValue, Value) == 0x000030, "Member 'ABUtilities_AddOrReplaceJsonStringValue::Value' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.DateTimeToString
// 0x0018 (0x0018 - 0x0000)
struct ABUtilities_DateTimeToString final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUtilities_DateTimeToString) == 0x000008, "Wrong alignment on ABUtilities_DateTimeToString");
static_assert(sizeof(ABUtilities_DateTimeToString) == 0x000018, "Wrong size on ABUtilities_DateTimeToString");
static_assert(offsetof(ABUtilities_DateTimeToString, DateTime) == 0x000000, "Member 'ABUtilities_DateTimeToString::DateTime' has a wrong offset!");
static_assert(offsetof(ABUtilities_DateTimeToString, ReturnValue) == 0x000008, "Member 'ABUtilities_DateTimeToString::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.GetJsonObjectAsJsonString
// 0x0030 (0x0030 - 0x0000)
struct ABUtilities_GetJsonObjectAsJsonString final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABUtilities_GetJsonObjectAsJsonString) == 0x000008, "Wrong alignment on ABUtilities_GetJsonObjectAsJsonString");
static_assert(sizeof(ABUtilities_GetJsonObjectAsJsonString) == 0x000030, "Wrong size on ABUtilities_GetJsonObjectAsJsonString");
static_assert(offsetof(ABUtilities_GetJsonObjectAsJsonString, ObjectWrapper) == 0x000000, "Member 'ABUtilities_GetJsonObjectAsJsonString::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonObjectAsJsonString, ReturnValue) == 0x000020, "Member 'ABUtilities_GetJsonObjectAsJsonString::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsArray
// 0x0048 (0x0048 - 0x0000)
struct ABUtilities_GetJsonValueAsArray final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutArray;                                          // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUtilities_GetJsonValueAsArray) == 0x000008, "Wrong alignment on ABUtilities_GetJsonValueAsArray");
static_assert(sizeof(ABUtilities_GetJsonValueAsArray) == 0x000048, "Wrong size on ABUtilities_GetJsonValueAsArray");
static_assert(offsetof(ABUtilities_GetJsonValueAsArray, ObjectWrapper) == 0x000000, "Member 'ABUtilities_GetJsonValueAsArray::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsArray, Key) == 0x000020, "Member 'ABUtilities_GetJsonValueAsArray::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsArray, OutArray) == 0x000030, "Member 'ABUtilities_GetJsonValueAsArray::OutArray' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsArray, ReturnValue) == 0x000040, "Member 'ABUtilities_GetJsonValueAsArray::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsBool
// 0x0038 (0x0038 - 0x0000)
struct ABUtilities_GetJsonValueAsBool final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutBool;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUtilities_GetJsonValueAsBool) == 0x000008, "Wrong alignment on ABUtilities_GetJsonValueAsBool");
static_assert(sizeof(ABUtilities_GetJsonValueAsBool) == 0x000038, "Wrong size on ABUtilities_GetJsonValueAsBool");
static_assert(offsetof(ABUtilities_GetJsonValueAsBool, ObjectWrapper) == 0x000000, "Member 'ABUtilities_GetJsonValueAsBool::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsBool, Key) == 0x000020, "Member 'ABUtilities_GetJsonValueAsBool::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsBool, OutBool) == 0x000030, "Member 'ABUtilities_GetJsonValueAsBool::OutBool' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsBool, ReturnValue) == 0x000031, "Member 'ABUtilities_GetJsonValueAsBool::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsNumber
// 0x0038 (0x0038 - 0x0000)
struct ABUtilities_GetJsonValueAsNumber final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutNumber;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUtilities_GetJsonValueAsNumber) == 0x000008, "Wrong alignment on ABUtilities_GetJsonValueAsNumber");
static_assert(sizeof(ABUtilities_GetJsonValueAsNumber) == 0x000038, "Wrong size on ABUtilities_GetJsonValueAsNumber");
static_assert(offsetof(ABUtilities_GetJsonValueAsNumber, ObjectWrapper) == 0x000000, "Member 'ABUtilities_GetJsonValueAsNumber::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsNumber, Key) == 0x000020, "Member 'ABUtilities_GetJsonValueAsNumber::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsNumber, OutNumber) == 0x000030, "Member 'ABUtilities_GetJsonValueAsNumber::OutNumber' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsNumber, ReturnValue) == 0x000034, "Member 'ABUtilities_GetJsonValueAsNumber::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABUtilities.GetJsonValueAsString
// 0x0048 (0x0048 - 0x0000)
struct ABUtilities_GetJsonValueAsString final
{
public:
	struct FJsonObjectWrapper                     ObjectWrapper;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABUtilities_GetJsonValueAsString) == 0x000008, "Wrong alignment on ABUtilities_GetJsonValueAsString");
static_assert(sizeof(ABUtilities_GetJsonValueAsString) == 0x000048, "Wrong size on ABUtilities_GetJsonValueAsString");
static_assert(offsetof(ABUtilities_GetJsonValueAsString, ObjectWrapper) == 0x000000, "Member 'ABUtilities_GetJsonValueAsString::ObjectWrapper' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsString, Key) == 0x000020, "Member 'ABUtilities_GetJsonValueAsString::Key' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsString, OutString) == 0x000030, "Member 'ABUtilities_GetJsonValueAsString::OutString' has a wrong offset!");
static_assert(offsetof(ABUtilities_GetJsonValueAsString, ReturnValue) == 0x000040, "Member 'ABUtilities_GetJsonValueAsString::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABWallet.GetWalletInfoByCurrencyCode
// 0x0038 (0x0038 - 0x0000)
struct ABWallet_GetWalletInfoByCurrencyCode final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsWalletInfo& Response)> OnSuccess;                    // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABWallet_GetWalletInfoByCurrencyCode) == 0x000008, "Wrong alignment on ABWallet_GetWalletInfoByCurrencyCode");
static_assert(sizeof(ABWallet_GetWalletInfoByCurrencyCode) == 0x000038, "Wrong size on ABWallet_GetWalletInfoByCurrencyCode");
static_assert(offsetof(ABWallet_GetWalletInfoByCurrencyCode, CurrencyCode) == 0x000000, "Member 'ABWallet_GetWalletInfoByCurrencyCode::CurrencyCode' has a wrong offset!");
static_assert(offsetof(ABWallet_GetWalletInfoByCurrencyCode, OnSuccess) == 0x000010, "Member 'ABWallet_GetWalletInfoByCurrencyCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABWallet_GetWalletInfoByCurrencyCode, OnError) == 0x000024, "Member 'ABWallet_GetWalletInfoByCurrencyCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABWallet.GetWalletInfoByCurrencyCodeV2
// 0x0038 (0x0038 - 0x0000)
struct ABWallet_GetWalletInfoByCurrencyCodeV2 final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Response)> OnSuccess;            // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABWallet_GetWalletInfoByCurrencyCodeV2) == 0x000008, "Wrong alignment on ABWallet_GetWalletInfoByCurrencyCodeV2");
static_assert(sizeof(ABWallet_GetWalletInfoByCurrencyCodeV2) == 0x000038, "Wrong size on ABWallet_GetWalletInfoByCurrencyCodeV2");
static_assert(offsetof(ABWallet_GetWalletInfoByCurrencyCodeV2, CurrencyCode) == 0x000000, "Member 'ABWallet_GetWalletInfoByCurrencyCodeV2::CurrencyCode' has a wrong offset!");
static_assert(offsetof(ABWallet_GetWalletInfoByCurrencyCodeV2, OnSuccess) == 0x000010, "Member 'ABWallet_GetWalletInfoByCurrencyCodeV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(ABWallet_GetWalletInfoByCurrencyCodeV2, OnError) == 0x000024, "Member 'ABWallet_GetWalletInfoByCurrencyCodeV2::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.ClaimGlobalAchievements
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsAchievement_ClaimGlobalAchievements final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsAchievement_ClaimGlobalAchievements) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_ClaimGlobalAchievements");
static_assert(sizeof(AccelByteBlueprintsAchievement_ClaimGlobalAchievements) == 0x000038, "Wrong size on AccelByteBlueprintsAchievement_ClaimGlobalAchievements");
static_assert(offsetof(AccelByteBlueprintsAchievement_ClaimGlobalAchievements, AchievementCode) == 0x000000, "Member 'AccelByteBlueprintsAchievement_ClaimGlobalAchievements::AchievementCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_ClaimGlobalAchievements, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsAchievement_ClaimGlobalAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_ClaimGlobalAchievements, OnError) == 0x000024, "Member 'AccelByteBlueprintsAchievement_ClaimGlobalAchievements::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.GetAchievement
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsAchievement_GetAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMultiLanguageAchievement& Result)> OnSuccess;        // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsAchievement_GetAchievement) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_GetAchievement");
static_assert(sizeof(AccelByteBlueprintsAchievement_GetAchievement) == 0x000038, "Wrong size on AccelByteBlueprintsAchievement_GetAchievement");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetAchievement, AchievementCode) == 0x000000, "Member 'AccelByteBlueprintsAchievement_GetAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetAchievement, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsAchievement_GetAchievement::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetAchievement, OnError) == 0x000024, "Member 'AccelByteBlueprintsAchievement_GetAchievement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.GetTags
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsAchievement_GetTags final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAchievementListSortBy               SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedPublicTag& Result)> OnSuccess;              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsAchievement_GetTags) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_GetTags");
static_assert(sizeof(AccelByteBlueprintsAchievement_GetTags) == 0x000048, "Wrong size on AccelByteBlueprintsAchievement_GetTags");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetTags, Name_0) == 0x000000, "Member 'AccelByteBlueprintsAchievement_GetTags::Name_0' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetTags, SortBy) == 0x000010, "Member 'AccelByteBlueprintsAchievement_GetTags::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetTags, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsAchievement_GetTags::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetTags, OnError) == 0x000028, "Member 'AccelByteBlueprintsAchievement_GetTags::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetTags, Offset) == 0x00003C, "Member 'AccelByteBlueprintsAchievement_GetTags::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_GetTags, Limit) == 0x000040, "Member 'AccelByteBlueprintsAchievement_GetTags::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryAchievements
// 0x0060 (0x0060 - 0x0000)
struct AccelByteBlueprintsAchievement_QueryAchievements final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAchievementListSortBy               SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedPublicAchievement& Result)> OnSuccess;      // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TagQuery;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobal;                                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsAchievement_QueryAchievements) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_QueryAchievements");
static_assert(sizeof(AccelByteBlueprintsAchievement_QueryAchievements) == 0x000060, "Wrong size on AccelByteBlueprintsAchievement_QueryAchievements");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, Language) == 0x000000, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, SortBy) == 0x000010, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, OnError) == 0x000028, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, Offset) == 0x00003C, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, Limit) == 0x000040, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::Limit' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, TagQuery) == 0x000048, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::TagQuery' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryAchievements, bGlobal) == 0x000058, "Member 'AccelByteBlueprintsAchievement_QueryAchievements::bGlobal' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryGlobalAchievementContributors
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementContributorsSortBy SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementContributors& Result)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors");
static_assert(sizeof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors) == 0x000048, "Wrong size on AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors, AchievementCode) == 0x000000, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors::AchievementCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors, SortBy) == 0x000010, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors, OnError) == 0x000028, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors, Offset) == 0x00003C, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors, Limit) == 0x000040, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementContributors::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryGlobalAchievements
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsAchievement_QueryGlobalAchievements final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementStatus             AchievementStatus;                                 // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementListSortBy         SortBy;                                            // 0x0011(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedUserGlobalAchievement& Result)> OnSuccess;  // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsAchievement_QueryGlobalAchievements) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_QueryGlobalAchievements");
static_assert(sizeof(AccelByteBlueprintsAchievement_QueryGlobalAchievements) == 0x000048, "Wrong size on AccelByteBlueprintsAchievement_QueryGlobalAchievements");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, AchievementCode) == 0x000000, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::AchievementCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, AchievementStatus) == 0x000010, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::AchievementStatus' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, SortBy) == 0x000011, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, OnError) == 0x000028, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, Offset) == 0x00003C, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievements, Limit) == 0x000040, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievements::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryGlobalAchievementUserContributed
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGlobalAchievementContributorsSortBy SortBy;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedGlobalAchievementUserContributed& Result)> OnSuccess; // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed");
static_assert(sizeof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed) == 0x000048, "Wrong size on AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed, AchievementCode) == 0x000000, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed::AchievementCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed, SortBy) == 0x000010, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed, OnError) == 0x000028, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed, Offset) == 0x00003C, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed, Limit) == 0x000040, "Member 'AccelByteBlueprintsAchievement_QueryGlobalAchievementUserContributed::Limit' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.QueryUserAchievements
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsAchievement_QueryUserAchievements final
{
public:
	EAccelByteAchievementListSortBy               SortBy;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsPaginatedUserAchievement& Result)> OnSuccess;        // 0x0004(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x002C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0030(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          preferUnlocked;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TagQuery;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsAchievement_QueryUserAchievements) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_QueryUserAchievements");
static_assert(sizeof(AccelByteBlueprintsAchievement_QueryUserAchievements) == 0x000048, "Wrong size on AccelByteBlueprintsAchievement_QueryUserAchievements");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, SortBy) == 0x000000, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, OnSuccess) == 0x000004, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, OnError) == 0x000018, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, Offset) == 0x00002C, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, Limit) == 0x000030, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::Limit' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, preferUnlocked) == 0x000034, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::preferUnlocked' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_QueryUserAchievements, TagQuery) == 0x000038, "Member 'AccelByteBlueprintsAchievement_QueryUserAchievements::TagQuery' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsAchievement.UnlockAchievement
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsAchievement_UnlockAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsAchievement_UnlockAchievement) == 0x000008, "Wrong alignment on AccelByteBlueprintsAchievement_UnlockAchievement");
static_assert(sizeof(AccelByteBlueprintsAchievement_UnlockAchievement) == 0x000038, "Wrong size on AccelByteBlueprintsAchievement_UnlockAchievement");
static_assert(offsetof(AccelByteBlueprintsAchievement_UnlockAchievement, AchievementCode) == 0x000000, "Member 'AccelByteBlueprintsAchievement_UnlockAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_UnlockAchievement, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsAchievement_UnlockAchievement::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsAchievement_UnlockAchievement, OnError) == 0x000024, "Member 'AccelByteBlueprintsAchievement_UnlockAchievement::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetAccessToken
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetAccessToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetAccessToken) == 0x000008, "Wrong alignment on ABCredentials_GetAccessToken");
static_assert(sizeof(ABCredentials_GetAccessToken) == 0x000010, "Wrong size on ABCredentials_GetAccessToken");
static_assert(offsetof(ABCredentials_GetAccessToken, ReturnValue) == 0x000000, "Member 'ABCredentials_GetAccessToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetAccountUserData
// 0x01A0 (0x01A0 - 0x0000)
struct ABCredentials_GetAccountUserData final
{
public:
	struct FAccountUserData                       ReturnValue;                                       // 0x0000(0x01A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetAccountUserData) == 0x000008, "Wrong alignment on ABCredentials_GetAccountUserData");
static_assert(sizeof(ABCredentials_GetAccountUserData) == 0x0001A0, "Wrong size on ABCredentials_GetAccountUserData");
static_assert(offsetof(ABCredentials_GetAccountUserData, ReturnValue) == 0x000000, "Member 'ABCredentials_GetAccountUserData::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetAuthToken
// 0x00D0 (0x00D0 - 0x0000)
struct ABCredentials_GetAuthToken final
{
public:
	struct FOauth2Token                           ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetAuthToken) == 0x000008, "Wrong alignment on ABCredentials_GetAuthToken");
static_assert(sizeof(ABCredentials_GetAuthToken) == 0x0000D0, "Wrong size on ABCredentials_GetAuthToken");
static_assert(offsetof(ABCredentials_GetAuthToken, ReturnValue) == 0x000000, "Member 'ABCredentials_GetAuthToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetLinkingToken
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetLinkingToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetLinkingToken) == 0x000008, "Wrong alignment on ABCredentials_GetLinkingToken");
static_assert(sizeof(ABCredentials_GetLinkingToken) == 0x000010, "Wrong size on ABCredentials_GetLinkingToken");
static_assert(offsetof(ABCredentials_GetLinkingToken, ReturnValue) == 0x000000, "Member 'ABCredentials_GetLinkingToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetNamespace
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetNamespace) == 0x000008, "Wrong alignment on ABCredentials_GetNamespace");
static_assert(sizeof(ABCredentials_GetNamespace) == 0x000010, "Wrong size on ABCredentials_GetNamespace");
static_assert(offsetof(ABCredentials_GetNamespace, ReturnValue) == 0x000000, "Member 'ABCredentials_GetNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetPlatformUserId
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetPlatformUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetPlatformUserId) == 0x000008, "Wrong alignment on ABCredentials_GetPlatformUserId");
static_assert(sizeof(ABCredentials_GetPlatformUserId) == 0x000010, "Wrong size on ABCredentials_GetPlatformUserId");
static_assert(offsetof(ABCredentials_GetPlatformUserId, ReturnValue) == 0x000000, "Member 'ABCredentials_GetPlatformUserId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetRefreshToken
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetRefreshToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetRefreshToken) == 0x000008, "Wrong alignment on ABCredentials_GetRefreshToken");
static_assert(sizeof(ABCredentials_GetRefreshToken) == 0x000010, "Wrong size on ABCredentials_GetRefreshToken");
static_assert(offsetof(ABCredentials_GetRefreshToken, ReturnValue) == 0x000000, "Member 'ABCredentials_GetRefreshToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetUserDisplayName
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetUserDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetUserDisplayName) == 0x000008, "Wrong alignment on ABCredentials_GetUserDisplayName");
static_assert(sizeof(ABCredentials_GetUserDisplayName) == 0x000010, "Wrong size on ABCredentials_GetUserDisplayName");
static_assert(offsetof(ABCredentials_GetUserDisplayName, ReturnValue) == 0x000000, "Member 'ABCredentials_GetUserDisplayName::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetUserEmailAddress
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetUserEmailAddress final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetUserEmailAddress) == 0x000008, "Wrong alignment on ABCredentials_GetUserEmailAddress");
static_assert(sizeof(ABCredentials_GetUserEmailAddress) == 0x000010, "Wrong size on ABCredentials_GetUserEmailAddress");
static_assert(offsetof(ABCredentials_GetUserEmailAddress, ReturnValue) == 0x000000, "Member 'ABCredentials_GetUserEmailAddress::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.GetUserId
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_GetUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_GetUserId) == 0x000008, "Wrong alignment on ABCredentials_GetUserId");
static_assert(sizeof(ABCredentials_GetUserId) == 0x000010, "Wrong size on ABCredentials_GetUserId");
static_assert(offsetof(ABCredentials_GetUserId, ReturnValue) == 0x000000, "Member 'ABCredentials_GetUserId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.IsComply
// 0x0001 (0x0001 - 0x0000)
struct ABCredentials_IsComply final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_IsComply) == 0x000001, "Wrong alignment on ABCredentials_IsComply");
static_assert(sizeof(ABCredentials_IsComply) == 0x000001, "Wrong size on ABCredentials_IsComply");
static_assert(offsetof(ABCredentials_IsComply, ReturnValue) == 0x000000, "Member 'ABCredentials_IsComply::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.IsSessionValid
// 0x0001 (0x0001 - 0x0000)
struct ABCredentials_IsSessionValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_IsSessionValid) == 0x000001, "Wrong alignment on ABCredentials_IsSessionValid");
static_assert(sizeof(ABCredentials_IsSessionValid) == 0x000001, "Wrong size on ABCredentials_IsSessionValid");
static_assert(offsetof(ABCredentials_IsSessionValid, ReturnValue) == 0x000000, "Member 'ABCredentials_IsSessionValid::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.PollRefreshToken
// 0x0004 (0x0004 - 0x0000)
struct ABCredentials_PollRefreshToken final
{
public:
	float                                         CurrentTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_PollRefreshToken) == 0x000004, "Wrong alignment on ABCredentials_PollRefreshToken");
static_assert(sizeof(ABCredentials_PollRefreshToken) == 0x000004, "Wrong size on ABCredentials_PollRefreshToken");
static_assert(offsetof(ABCredentials_PollRefreshToken, CurrentTime) == 0x000000, "Member 'ABCredentials_PollRefreshToken::CurrentTime' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.ScheduleRefreshToken
// 0x0004 (0x0004 - 0x0000)
struct ABCredentials_ScheduleRefreshToken final
{
public:
	float                                         NextRefreshTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_ScheduleRefreshToken) == 0x000004, "Wrong alignment on ABCredentials_ScheduleRefreshToken");
static_assert(sizeof(ABCredentials_ScheduleRefreshToken) == 0x000004, "Wrong size on ABCredentials_ScheduleRefreshToken");
static_assert(offsetof(ABCredentials_ScheduleRefreshToken, NextRefreshTime) == 0x000000, "Member 'ABCredentials_ScheduleRefreshToken::NextRefreshTime' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.SetAccountUserData
// 0x01A0 (0x01A0 - 0x0000)
struct ABCredentials_SetAccountUserData final
{
public:
	struct FAccountUserData                       InAccountUserData;                                 // 0x0000(0x01A0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_SetAccountUserData) == 0x000008, "Wrong alignment on ABCredentials_SetAccountUserData");
static_assert(sizeof(ABCredentials_SetAccountUserData) == 0x0001A0, "Wrong size on ABCredentials_SetAccountUserData");
static_assert(offsetof(ABCredentials_SetAccountUserData, InAccountUserData) == 0x000000, "Member 'ABCredentials_SetAccountUserData::InAccountUserData' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.SetAuthToken
// 0x00D8 (0x00D8 - 0x0000)
struct ABCredentials_SetAuthToken final
{
public:
	struct FOauth2Token                           NewAuthToken;                                      // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ABCredentials_SetAuthToken) == 0x000008, "Wrong alignment on ABCredentials_SetAuthToken");
static_assert(sizeof(ABCredentials_SetAuthToken) == 0x0000D8, "Wrong size on ABCredentials_SetAuthToken");
static_assert(offsetof(ABCredentials_SetAuthToken, NewAuthToken) == 0x000000, "Member 'ABCredentials_SetAuthToken::NewAuthToken' has a wrong offset!");
static_assert(offsetof(ABCredentials_SetAuthToken, CurrentTime) == 0x0000D0, "Member 'ABCredentials_SetAuthToken::CurrentTime' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.SetClientCredentials
// 0x0001 (0x0001 - 0x0000)
struct ABCredentials_SetClientCredentials final
{
public:
	ESettingsEnvironment                          Environment;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_SetClientCredentials) == 0x000001, "Wrong alignment on ABCredentials_SetClientCredentials");
static_assert(sizeof(ABCredentials_SetClientCredentials) == 0x000001, "Wrong size on ABCredentials_SetClientCredentials");
static_assert(offsetof(ABCredentials_SetClientCredentials, Environment) == 0x000000, "Member 'ABCredentials_SetClientCredentials::Environment' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.SetErrorOAuth
// 0x0100 (0x0100 - 0x0000)
struct ABCredentials_SetErrorOAuth final
{
public:
	struct FErrorOAuthInfo                        ErrorOAuthInfo;                                    // 0x0000(0x0100)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_SetErrorOAuth) == 0x000008, "Wrong alignment on ABCredentials_SetErrorOAuth");
static_assert(sizeof(ABCredentials_SetErrorOAuth) == 0x000100, "Wrong size on ABCredentials_SetErrorOAuth");
static_assert(offsetof(ABCredentials_SetErrorOAuth, ErrorOAuthInfo) == 0x000000, "Member 'ABCredentials_SetErrorOAuth::ErrorOAuthInfo' has a wrong offset!");

// Function AccelByteUe4Sdk.ABCredentials.SetUserEmailAddress
// 0x0010 (0x0010 - 0x0000)
struct ABCredentials_SetUserEmailAddress final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABCredentials_SetUserEmailAddress) == 0x000008, "Wrong alignment on ABCredentials_SetUserEmailAddress");
static_assert(sizeof(ABCredentials_SetUserEmailAddress) == 0x000010, "Wrong size on ABCredentials_SetUserEmailAddress");
static_assert(offsetof(ABCredentials_SetUserEmailAddress, EmailAddress) == 0x000000, "Member 'ABCredentials_SetUserEmailAddress::EmailAddress' has a wrong offset!");

// Function AccelByteUe4Sdk.ABMultiRegistry.GetApiClient
// 0x0018 (0x0018 - 0x0000)
struct ABMultiRegistry_GetApiClient final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UABApiClient*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABMultiRegistry_GetApiClient) == 0x000008, "Wrong alignment on ABMultiRegistry_GetApiClient");
static_assert(sizeof(ABMultiRegistry_GetApiClient) == 0x000018, "Wrong size on ABMultiRegistry_GetApiClient");
static_assert(offsetof(ABMultiRegistry_GetApiClient, Key) == 0x000000, "Member 'ABMultiRegistry_GetApiClient::Key' has a wrong offset!");
static_assert(offsetof(ABMultiRegistry_GetApiClient, ReturnValue) == 0x000010, "Member 'ABMultiRegistry_GetApiClient::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct ABLobby_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_IsConnected) == 0x000001, "Wrong alignment on ABLobby_IsConnected");
static_assert(sizeof(ABLobby_IsConnected) == 0x000001, "Wrong size on ABLobby_IsConnected");
static_assert(offsetof(ABLobby_IsConnected, ReturnValue) == 0x000000, "Member 'ABLobby_IsConnected::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.RefreshToken
// 0x0048 (0x0048 - 0x0000)
struct ABLobby_RefreshToken final
{
public:
	struct FRefreshTokenRequest                   Request;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRefreshTokenResponse& Response)> OnResponse;         // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_RefreshToken) == 0x000008, "Wrong alignment on ABLobby_RefreshToken");
static_assert(sizeof(ABLobby_RefreshToken) == 0x000048, "Wrong size on ABLobby_RefreshToken");
static_assert(offsetof(ABLobby_RefreshToken, Request) == 0x000000, "Member 'ABLobby_RefreshToken::Request' has a wrong offset!");
static_assert(offsetof(ABLobby_RefreshToken, OnResponse) == 0x000010, "Member 'ABLobby_RefreshToken::OnResponse' has a wrong offset!");
static_assert(offsetof(ABLobby_RefreshToken, OnError) == 0x000024, "Member 'ABLobby_RefreshToken::OnError' has a wrong offset!");
static_assert(offsetof(ABLobby_RefreshToken, ReturnValue) == 0x000038, "Member 'ABLobby_RefreshToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.RequestDS
// 0x0070 (0x0070 - 0x0000)
struct ABLobby_RequestDS final
{
public:
	struct FRequestDSModel                        Request;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_RequestDS) == 0x000008, "Wrong alignment on ABLobby_RequestDS");
static_assert(sizeof(ABLobby_RequestDS) == 0x000070, "Wrong size on ABLobby_RequestDS");
static_assert(offsetof(ABLobby_RequestDS, Request) == 0x000000, "Member 'ABLobby_RequestDS::Request' has a wrong offset!");
static_assert(offsetof(ABLobby_RequestDS, ReturnValue) == 0x000060, "Member 'ABLobby_RequestDS::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.SetOnConnected
// 0x0014 (0x0014 - 0x0000)
struct ABLobby_SetOnConnected final
{
public:
	TDelegate<void()>                             OnConnected;                                       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_SetOnConnected) == 0x000004, "Wrong alignment on ABLobby_SetOnConnected");
static_assert(sizeof(ABLobby_SetOnConnected) == 0x000014, "Wrong size on ABLobby_SetOnConnected");
static_assert(offsetof(ABLobby_SetOnConnected, OnConnected) == 0x000000, "Member 'ABLobby_SetOnConnected::OnConnected' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.SetOnConnectFailed
// 0x0014 (0x0014 - 0x0000)
struct ABLobby_SetOnConnectFailed final
{
public:
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnConnectError;              // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_SetOnConnectFailed) == 0x000004, "Wrong alignment on ABLobby_SetOnConnectFailed");
static_assert(sizeof(ABLobby_SetOnConnectFailed) == 0x000014, "Wrong size on ABLobby_SetOnConnectFailed");
static_assert(offsetof(ABLobby_SetOnConnectFailed, OnConnectError) == 0x000000, "Member 'ABLobby_SetOnConnectFailed::OnConnectError' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.SetOnConnectionClosed
// 0x0014 (0x0014 - 0x0000)
struct ABLobby_SetOnConnectionClosed final
{
public:
	TDelegate<void(int32 StatusCode, const class FString& Reason, bool bWasClean)> OnConnectionClosed; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_SetOnConnectionClosed) == 0x000004, "Wrong alignment on ABLobby_SetOnConnectionClosed");
static_assert(sizeof(ABLobby_SetOnConnectionClosed) == 0x000014, "Wrong size on ABLobby_SetOnConnectionClosed");
static_assert(offsetof(ABLobby_SetOnConnectionClosed, OnConnectionClosed) == 0x000000, "Member 'ABLobby_SetOnConnectionClosed::OnConnectionClosed' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.SetOnDisconnect
// 0x0014 (0x0014 - 0x0000)
struct ABLobby_SetOnDisconnect final
{
public:
	TDelegate<void(const struct FAccelByteModelsDisconnectNotif& Notif)> OnDisconnected;             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_SetOnDisconnect) == 0x000004, "Wrong alignment on ABLobby_SetOnDisconnect");
static_assert(sizeof(ABLobby_SetOnDisconnect) == 0x000014, "Wrong size on ABLobby_SetOnDisconnect");
static_assert(offsetof(ABLobby_SetOnDisconnect, OnDisconnected) == 0x000000, "Member 'ABLobby_SetOnDisconnect::OnDisconnected' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.SetOnErrorNotification
// 0x0014 (0x0014 - 0x0000)
struct ABLobby_SetOnErrorNotification final
{
public:
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnErrorNotification;         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_SetOnErrorNotification) == 0x000004, "Wrong alignment on ABLobby_SetOnErrorNotification");
static_assert(sizeof(ABLobby_SetOnErrorNotification) == 0x000014, "Wrong size on ABLobby_SetOnErrorNotification");
static_assert(offsetof(ABLobby_SetOnErrorNotification, OnErrorNotification) == 0x000000, "Member 'ABLobby_SetOnErrorNotification::OnErrorNotification' has a wrong offset!");

// Function AccelByteUe4Sdk.ABLobby.SetRetryParameters
// 0x000C (0x000C - 0x0000)
struct ABLobby_SetRetryParameters final
{
public:
	struct FSetRetryParametersRequest             Request;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABLobby_SetRetryParameters) == 0x000004, "Wrong alignment on ABLobby_SetRetryParameters");
static_assert(sizeof(ABLobby_SetRetryParameters) == 0x00000C, "Wrong size on ABLobby_SetRetryParameters");
static_assert(offsetof(ABLobby_SetRetryParameters, Request) == 0x000000, "Member 'ABLobby_SetRetryParameters::Request' has a wrong offset!");

// Function AccelByteUe4Sdk.ABServerCredentials.GetAccessToken
// 0x0010 (0x0010 - 0x0000)
struct ABServerCredentials_GetAccessToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABServerCredentials_GetAccessToken) == 0x000008, "Wrong alignment on ABServerCredentials_GetAccessToken");
static_assert(sizeof(ABServerCredentials_GetAccessToken) == 0x000010, "Wrong size on ABServerCredentials_GetAccessToken");
static_assert(offsetof(ABServerCredentials_GetAccessToken, ReturnValue) == 0x000000, "Member 'ABServerCredentials_GetAccessToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.ServerMultiRegistry.GetServerApiClient
// 0x0018 (0x0018 - 0x0000)
struct ServerMultiRegistry_GetServerApiClient final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UServerApiClient*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerMultiRegistry_GetServerApiClient) == 0x000008, "Wrong alignment on ServerMultiRegistry_GetServerApiClient");
static_assert(sizeof(ServerMultiRegistry_GetServerApiClient) == 0x000018, "Wrong size on ServerMultiRegistry_GetServerApiClient");
static_assert(offsetof(ServerMultiRegistry_GetServerApiClient, Key) == 0x000000, "Member 'ServerMultiRegistry_GetServerApiClient::Key' has a wrong offset!");
static_assert(offsetof(ServerMultiRegistry_GetServerApiClient, ReturnValue) == 0x000010, "Member 'ServerMultiRegistry_GetServerApiClient::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetCategory
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsCategory_GetCategory final
{
public:
	class FString                                 ParentPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsCategoryInfo& Result)> OnSuccess;                    // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCategory_GetCategory) == 0x000008, "Wrong alignment on AccelByteBlueprintsCategory_GetCategory");
static_assert(sizeof(AccelByteBlueprintsCategory_GetCategory) == 0x000048, "Wrong size on AccelByteBlueprintsCategory_GetCategory");
static_assert(offsetof(AccelByteBlueprintsCategory_GetCategory, ParentPath) == 0x000000, "Member 'AccelByteBlueprintsCategory_GetCategory::ParentPath' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetCategory, Language) == 0x000010, "Member 'AccelByteBlueprintsCategory_GetCategory::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetCategory, OnSuccess) == 0x000020, "Member 'AccelByteBlueprintsCategory_GetCategory::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetCategory, OnError) == 0x000034, "Member 'AccelByteBlueprintsCategory_GetCategory::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetChildCategories
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsCategory_GetChildCategories final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)> OnSuccess;            // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCategory_GetChildCategories) == 0x000008, "Wrong alignment on AccelByteBlueprintsCategory_GetChildCategories");
static_assert(sizeof(AccelByteBlueprintsCategory_GetChildCategories) == 0x000048, "Wrong size on AccelByteBlueprintsCategory_GetChildCategories");
static_assert(offsetof(AccelByteBlueprintsCategory_GetChildCategories, Language) == 0x000000, "Member 'AccelByteBlueprintsCategory_GetChildCategories::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetChildCategories, CategoryPath) == 0x000010, "Member 'AccelByteBlueprintsCategory_GetChildCategories::CategoryPath' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetChildCategories, OnSuccess) == 0x000020, "Member 'AccelByteBlueprintsCategory_GetChildCategories::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetChildCategories, OnError) == 0x000034, "Member 'AccelByteBlueprintsCategory_GetChildCategories::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetDescendantCategories
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsCategory_GetDescendantCategories final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)> OnSuccess;            // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCategory_GetDescendantCategories) == 0x000008, "Wrong alignment on AccelByteBlueprintsCategory_GetDescendantCategories");
static_assert(sizeof(AccelByteBlueprintsCategory_GetDescendantCategories) == 0x000048, "Wrong size on AccelByteBlueprintsCategory_GetDescendantCategories");
static_assert(offsetof(AccelByteBlueprintsCategory_GetDescendantCategories, Language) == 0x000000, "Member 'AccelByteBlueprintsCategory_GetDescendantCategories::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetDescendantCategories, CategoryPath) == 0x000010, "Member 'AccelByteBlueprintsCategory_GetDescendantCategories::CategoryPath' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetDescendantCategories, OnSuccess) == 0x000020, "Member 'AccelByteBlueprintsCategory_GetDescendantCategories::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetDescendantCategories, OnError) == 0x000034, "Member 'AccelByteBlueprintsCategory_GetDescendantCategories::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCategory.GetRootCategories
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsCategory_GetRootCategories final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsCategoryInfo>& Result)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCategory_GetRootCategories) == 0x000008, "Wrong alignment on AccelByteBlueprintsCategory_GetRootCategories");
static_assert(sizeof(AccelByteBlueprintsCategory_GetRootCategories) == 0x000038, "Wrong size on AccelByteBlueprintsCategory_GetRootCategories");
static_assert(offsetof(AccelByteBlueprintsCategory_GetRootCategories, Language) == 0x000000, "Member 'AccelByteBlueprintsCategory_GetRootCategories::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetRootCategories, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsCategory_GetRootCategories::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCategory_GetRootCategories, OnError) == 0x000024, "Member 'AccelByteBlueprintsCategory_GetRootCategories::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.CreateSlot
// 0x0078 (0x0078 - 0x0000)
struct AccelByteBlueprintsCloudStorage_CreateSlot final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FileName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSlot& Result)> OnSuccess;                            // 0x0050(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0064(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCloudStorage_CreateSlot) == 0x000008, "Wrong alignment on AccelByteBlueprintsCloudStorage_CreateSlot");
static_assert(sizeof(AccelByteBlueprintsCloudStorage_CreateSlot) == 0x000078, "Wrong size on AccelByteBlueprintsCloudStorage_CreateSlot");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, Data) == 0x000000, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::Data' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, FileName) == 0x000010, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::FileName' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, Tags) == 0x000020, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::Tags' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, Label) == 0x000030, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::Label' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, CustomAttribute) == 0x000040, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::CustomAttribute' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, OnSuccess) == 0x000050, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_CreateSlot, OnError) == 0x000064, "Member 'AccelByteBlueprintsCloudStorage_CreateSlot::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.DeleteSlot
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsCloudStorage_DeleteSlot final
{
public:
	class FString                                 SlotId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCloudStorage_DeleteSlot) == 0x000008, "Wrong alignment on AccelByteBlueprintsCloudStorage_DeleteSlot");
static_assert(sizeof(AccelByteBlueprintsCloudStorage_DeleteSlot) == 0x000038, "Wrong size on AccelByteBlueprintsCloudStorage_DeleteSlot");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_DeleteSlot, SlotId) == 0x000000, "Member 'AccelByteBlueprintsCloudStorage_DeleteSlot::SlotId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_DeleteSlot, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsCloudStorage_DeleteSlot::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_DeleteSlot, OnError) == 0x000024, "Member 'AccelByteBlueprintsCloudStorage_DeleteSlot::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.GetAllSlots
// 0x0028 (0x0028 - 0x0000)
struct AccelByteBlueprintsCloudStorage_GetAllSlots final
{
public:
	TDelegate<void(const TArray<struct FAccelByteModelsSlot>& Result)> OnSuccess;                    // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCloudStorage_GetAllSlots) == 0x000004, "Wrong alignment on AccelByteBlueprintsCloudStorage_GetAllSlots");
static_assert(sizeof(AccelByteBlueprintsCloudStorage_GetAllSlots) == 0x000028, "Wrong size on AccelByteBlueprintsCloudStorage_GetAllSlots");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_GetAllSlots, OnSuccess) == 0x000000, "Member 'AccelByteBlueprintsCloudStorage_GetAllSlots::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_GetAllSlots, OnError) == 0x000014, "Member 'AccelByteBlueprintsCloudStorage_GetAllSlots::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.GetSlot
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsCloudStorage_GetSlot final
{
public:
	class FString                                 SlotId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<uint8>& Result)>  OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCloudStorage_GetSlot) == 0x000008, "Wrong alignment on AccelByteBlueprintsCloudStorage_GetSlot");
static_assert(sizeof(AccelByteBlueprintsCloudStorage_GetSlot) == 0x000038, "Wrong size on AccelByteBlueprintsCloudStorage_GetSlot");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_GetSlot, SlotId) == 0x000000, "Member 'AccelByteBlueprintsCloudStorage_GetSlot::SlotId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_GetSlot, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsCloudStorage_GetSlot::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_GetSlot, OnError) == 0x000024, "Member 'AccelByteBlueprintsCloudStorage_GetSlot::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.UpdateSlot
// 0x0088 (0x0088 - 0x0000)
struct AccelByteBlueprintsCloudStorage_UpdateSlot final
{
public:
	class FString                                 SlotId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSlot& Result)> OnSuccess;                            // 0x0060(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0074(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCloudStorage_UpdateSlot) == 0x000008, "Wrong alignment on AccelByteBlueprintsCloudStorage_UpdateSlot");
static_assert(sizeof(AccelByteBlueprintsCloudStorage_UpdateSlot) == 0x000088, "Wrong size on AccelByteBlueprintsCloudStorage_UpdateSlot");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, SlotId) == 0x000000, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::SlotId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, FileName) == 0x000010, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::FileName' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, Data) == 0x000020, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::Data' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, Tags) == 0x000030, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::Tags' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, Label) == 0x000040, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::Label' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, CustomAttribute) == 0x000050, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::CustomAttribute' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, OnSuccess) == 0x000060, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlot, OnError) == 0x000074, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlot::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCloudStorage.UpdateSlotMetadata
// 0x0078 (0x0078 - 0x0000)
struct AccelByteBlueprintsCloudStorage_UpdateSlotMetadata final
{
public:
	class FString                                 SlotId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsSlot& Result)> OnSuccess;                            // 0x0050(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0064(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata) == 0x000008, "Wrong alignment on AccelByteBlueprintsCloudStorage_UpdateSlotMetadata");
static_assert(sizeof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata) == 0x000078, "Wrong size on AccelByteBlueprintsCloudStorage_UpdateSlotMetadata");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, SlotId) == 0x000000, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::SlotId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, FileName) == 0x000010, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::FileName' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, Tags) == 0x000020, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::Tags' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, Label) == 0x000030, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::Label' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, CustomAttribute) == 0x000040, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::CustomAttribute' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, OnSuccess) == 0x000050, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCloudStorage_UpdateSlotMetadata, OnError) == 0x000064, "Member 'AccelByteBlueprintsCloudStorage_UpdateSlotMetadata::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetOAuthClientId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetOAuthClientId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetOAuthClientId) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetOAuthClientId");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetOAuthClientId) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetOAuthClientId");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetOAuthClientId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetOAuthClientId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetOAuthClientSecret
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetOAuthClientSecret final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetOAuthClientSecret) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetOAuthClientSecret");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetOAuthClientSecret) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetOAuthClientSecret");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetOAuthClientSecret, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetOAuthClientSecret::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserDisplayName
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetUserDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetUserDisplayName) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetUserDisplayName");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetUserDisplayName) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetUserDisplayName");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetUserDisplayName, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetUserDisplayName::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserEmailAddress
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetUserEmailAddress final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetUserEmailAddress) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetUserEmailAddress");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetUserEmailAddress) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetUserEmailAddress");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetUserEmailAddress, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetUserEmailAddress::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetUserId) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetUserId");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetUserId) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetUserId");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetUserId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetUserId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserName
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetUserName) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetUserName");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetUserName) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetUserName");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetUserName, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetUserName::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetUserNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetUserNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetUserNamespace");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetUserNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetUserNamespace");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetUserNamespace, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetUserNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCredentials.GetUserSessionId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsCredentials_GetUserSessionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsCredentials_GetUserSessionId) == 0x000008, "Wrong alignment on AccelByteBlueprintsCredentials_GetUserSessionId");
static_assert(sizeof(AccelByteBlueprintsCredentials_GetUserSessionId) == 0x000010, "Wrong size on AccelByteBlueprintsCredentials_GetUserSessionId");
static_assert(offsetof(AccelByteBlueprintsCredentials_GetUserSessionId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsCredentials_GetUserSessionId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsCurrency.GetCurrencyList
// 0x0040 (0x0040 - 0x0000)
struct AccelByteBlueprintsCurrency_GetCurrencyList final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsCurrencyList>& Result)> OnSuccess;            // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteCurrencyType                        CurrencyType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsCurrency_GetCurrencyList) == 0x000008, "Wrong alignment on AccelByteBlueprintsCurrency_GetCurrencyList");
static_assert(sizeof(AccelByteBlueprintsCurrency_GetCurrencyList) == 0x000040, "Wrong size on AccelByteBlueprintsCurrency_GetCurrencyList");
static_assert(offsetof(AccelByteBlueprintsCurrency_GetCurrencyList, Namespace) == 0x000000, "Member 'AccelByteBlueprintsCurrency_GetCurrencyList::Namespace' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCurrency_GetCurrencyList, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsCurrency_GetCurrencyList::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCurrency_GetCurrencyList, OnError) == 0x000024, "Member 'AccelByteBlueprintsCurrency_GetCurrencyList::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsCurrency_GetCurrencyList, CurrencyType) == 0x000038, "Member 'AccelByteBlueprintsCurrency_GetCurrencyList::CurrencyType' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsEntitlement.QueryUserEntitlements
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsEntitlement_QueryUserEntitlements final
{
public:
	class FString                                 EntitlementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)> OnSuccess;   // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    EntitlementClass;                                  // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsEntitlement_QueryUserEntitlements) == 0x000008, "Wrong alignment on AccelByteBlueprintsEntitlement_QueryUserEntitlements");
static_assert(sizeof(AccelByteBlueprintsEntitlement_QueryUserEntitlements) == 0x000058, "Wrong size on AccelByteBlueprintsEntitlement_QueryUserEntitlements");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, EntitlementName) == 0x000000, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::EntitlementName' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, ItemId) == 0x000010, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::ItemId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, Page) == 0x000020, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::Page' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, Size) == 0x000024, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::Size' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, OnSuccess) == 0x000028, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, OnError) == 0x00003C, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, EntitlementClass) == 0x000050, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::EntitlementClass' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlements, AppType) == 0x000051, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlements::AppType' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsEntitlement.QueryUserEntitlementsMany
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany final
{
public:
	class FString                                 EntitlementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsEntitlementPagingSlicedResult& Result)> OnSuccess;   // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    EntitlementClass;                                  // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany) == 0x000008, "Wrong alignment on AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany");
static_assert(sizeof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany) == 0x000058, "Wrong size on AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, EntitlementName) == 0x000000, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::EntitlementName' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, ItemIds) == 0x000010, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::ItemIds' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, Page) == 0x000020, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::Page' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, Size) == 0x000024, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::Size' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, OnSuccess) == 0x000028, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, OnError) == 0x00003C, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::OnError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, EntitlementClass) == 0x000050, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::EntitlementClass' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany, AppType) == 0x000051, "Member 'AccelByteBlueprintsEntitlement_QueryUserEntitlementsMany::AppType' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.BatchGetPublicGameProfiles
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsPublicGameProfile>& Result)> OnSuccess;       // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles");
static_assert(sizeof(AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles) == 0x000038, "Wrong size on AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles");
static_assert(offsetof(AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles, UserIds) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles::UserIds' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles, OnError) == 0x000024, "Member 'AccelByteBlueprintsGameProfile_BatchGetPublicGameProfiles::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.CreateGameProfile
// 0x00B8 (0x00B8 - 0x0000)
struct AccelByteBlueprintsGameProfile_CreateGameProfile final
{
public:
	struct FAccelByteModelsGameProfileRequest     GameProfileRequest;                                // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameProfile& Result)> OnSuccess;                     // 0x0090(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00A4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_CreateGameProfile) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_CreateGameProfile");
static_assert(sizeof(AccelByteBlueprintsGameProfile_CreateGameProfile) == 0x0000B8, "Wrong size on AccelByteBlueprintsGameProfile_CreateGameProfile");
static_assert(offsetof(AccelByteBlueprintsGameProfile_CreateGameProfile, GameProfileRequest) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_CreateGameProfile::GameProfileRequest' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_CreateGameProfile, OnSuccess) == 0x000090, "Member 'AccelByteBlueprintsGameProfile_CreateGameProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_CreateGameProfile, OnError) == 0x0000A4, "Member 'AccelByteBlueprintsGameProfile_CreateGameProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.DeleteGameProfile
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsGameProfile_DeleteGameProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_DeleteGameProfile) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_DeleteGameProfile");
static_assert(sizeof(AccelByteBlueprintsGameProfile_DeleteGameProfile) == 0x000038, "Wrong size on AccelByteBlueprintsGameProfile_DeleteGameProfile");
static_assert(offsetof(AccelByteBlueprintsGameProfile_DeleteGameProfile, ProfileId) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_DeleteGameProfile::ProfileId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_DeleteGameProfile, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsGameProfile_DeleteGameProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_DeleteGameProfile, OnError) == 0x000024, "Member 'AccelByteBlueprintsGameProfile_DeleteGameProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.GetAllGameProfiles
// 0x0028 (0x0028 - 0x0000)
struct AccelByteBlueprintsGameProfile_GetAllGameProfiles final
{
public:
	TDelegate<void(const TArray<struct FAccelByteModelsGameProfile>& Result)> OnSuccess;             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_GetAllGameProfiles) == 0x000004, "Wrong alignment on AccelByteBlueprintsGameProfile_GetAllGameProfiles");
static_assert(sizeof(AccelByteBlueprintsGameProfile_GetAllGameProfiles) == 0x000028, "Wrong size on AccelByteBlueprintsGameProfile_GetAllGameProfiles");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetAllGameProfiles, OnSuccess) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_GetAllGameProfiles::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetAllGameProfiles, OnError) == 0x000014, "Member 'AccelByteBlueprintsGameProfile_GetAllGameProfiles::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.GetGameProfile
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsGameProfile_GetGameProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameProfile& Result)> OnSuccess;                     // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_GetGameProfile) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_GetGameProfile");
static_assert(sizeof(AccelByteBlueprintsGameProfile_GetGameProfile) == 0x000038, "Wrong size on AccelByteBlueprintsGameProfile_GetGameProfile");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfile, ProfileId) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_GetGameProfile::ProfileId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfile, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsGameProfile_GetGameProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfile, OnError) == 0x000024, "Member 'AccelByteBlueprintsGameProfile_GetGameProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.GetGameProfileAttribute
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsGameProfile_GetGameProfileAttribute final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttributeName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameProfileAttribute& Result)> OnSuccess;            // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_GetGameProfileAttribute) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_GetGameProfileAttribute");
static_assert(sizeof(AccelByteBlueprintsGameProfile_GetGameProfileAttribute) == 0x000048, "Wrong size on AccelByteBlueprintsGameProfile_GetGameProfileAttribute");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfileAttribute, ProfileId) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_GetGameProfileAttribute::ProfileId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfileAttribute, AttributeName) == 0x000010, "Member 'AccelByteBlueprintsGameProfile_GetGameProfileAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfileAttribute, OnSuccess) == 0x000020, "Member 'AccelByteBlueprintsGameProfile_GetGameProfileAttribute::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_GetGameProfileAttribute, OnError) == 0x000034, "Member 'AccelByteBlueprintsGameProfile_GetGameProfileAttribute::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.UpdateGameProfile
// 0x00C8 (0x00C8 - 0x0000)
struct AccelByteBlueprintsGameProfile_UpdateGameProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsGameProfileRequest     GameProfileRequest;                                // 0x0010(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameProfile& Result)> OnSuccess;                     // 0x00A0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00B4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_UpdateGameProfile) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_UpdateGameProfile");
static_assert(sizeof(AccelByteBlueprintsGameProfile_UpdateGameProfile) == 0x0000C8, "Wrong size on AccelByteBlueprintsGameProfile_UpdateGameProfile");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfile, ProfileId) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfile::ProfileId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfile, GameProfileRequest) == 0x000010, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfile::GameProfileRequest' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfile, OnSuccess) == 0x0000A0, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfile, OnError) == 0x0000B4, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGameProfile.UpdateGameProfileAttribute
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsGameProfileAttribute   Attribute;                                         // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGameProfile& Result)> OnSuccess;                     // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute) == 0x000008, "Wrong alignment on AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute");
static_assert(sizeof(AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute) == 0x000058, "Wrong size on AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute, ProfileId) == 0x000000, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute::ProfileId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute, Attribute) == 0x000010, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute, OnSuccess) == 0x000030, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute, OnError) == 0x000044, "Member 'AccelByteBlueprintsGameProfile_UpdateGameProfileAttribute::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.CreateGroup
// 0x00D8 (0x00D8 - 0x0000)
struct AccelByteBlueprintsGroup_CreateGroup final
{
public:
	struct FAccelByteModelsCreateGroupRequest     RequestContent;                                    // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)> OnSuccess;                // 0x00B0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00C4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_CreateGroup) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_CreateGroup");
static_assert(sizeof(AccelByteBlueprintsGroup_CreateGroup) == 0x0000D8, "Wrong size on AccelByteBlueprintsGroup_CreateGroup");
static_assert(offsetof(AccelByteBlueprintsGroup_CreateGroup, RequestContent) == 0x000000, "Member 'AccelByteBlueprintsGroup_CreateGroup::RequestContent' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_CreateGroup, OnSuccess) == 0x0000B0, "Member 'AccelByteBlueprintsGroup_CreateGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_CreateGroup, OnError) == 0x0000C4, "Member 'AccelByteBlueprintsGroup_CreateGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.DeleteGroup
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsGroup_DeleteGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_DeleteGroup) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_DeleteGroup");
static_assert(sizeof(AccelByteBlueprintsGroup_DeleteGroup) == 0x000038, "Wrong size on AccelByteBlueprintsGroup_DeleteGroup");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroup, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_DeleteGroup::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroup, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsGroup_DeleteGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroup, OnError) == 0x000024, "Member 'AccelByteBlueprintsGroup_DeleteGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.DeleteGroupPredefinedRule
// 0x0040 (0x0040 - 0x0000)
struct AccelByteBlueprintsGroup_DeleteGroupPredefinedRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsGroup_DeleteGroupPredefinedRule) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_DeleteGroupPredefinedRule");
static_assert(sizeof(AccelByteBlueprintsGroup_DeleteGroupPredefinedRule) == 0x000040, "Wrong size on AccelByteBlueprintsGroup_DeleteGroupPredefinedRule");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroupPredefinedRule, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_DeleteGroupPredefinedRule::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroupPredefinedRule, AllowedAction) == 0x000010, "Member 'AccelByteBlueprintsGroup_DeleteGroupPredefinedRule::AllowedAction' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroupPredefinedRule, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsGroup_DeleteGroupPredefinedRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_DeleteGroupPredefinedRule, OnError) == 0x000028, "Member 'AccelByteBlueprintsGroup_DeleteGroupPredefinedRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.GetGroup
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsGroup_GetGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)> OnSuccess;                // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_GetGroup) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_GetGroup");
static_assert(sizeof(AccelByteBlueprintsGroup_GetGroup) == 0x000038, "Wrong size on AccelByteBlueprintsGroup_GetGroup");
static_assert(offsetof(AccelByteBlueprintsGroup_GetGroup, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_GetGroup::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_GetGroup, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsGroup_GetGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_GetGroup, OnError) == 0x000024, "Member 'AccelByteBlueprintsGroup_GetGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.GetGroupList
// 0x0050 (0x0050 - 0x0000)
struct AccelByteBlueprintsGroup_GetGroupList final
{
public:
	struct FAccelByteModelsGetGroupListRequest    RequestContent;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGetGroupListResponse& Result)> OnSuccess;            // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_GetGroupList) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_GetGroupList");
static_assert(sizeof(AccelByteBlueprintsGroup_GetGroupList) == 0x000050, "Wrong size on AccelByteBlueprintsGroup_GetGroupList");
static_assert(offsetof(AccelByteBlueprintsGroup_GetGroupList, RequestContent) == 0x000000, "Member 'AccelByteBlueprintsGroup_GetGroupList::RequestContent' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_GetGroupList, OnSuccess) == 0x000028, "Member 'AccelByteBlueprintsGroup_GetGroupList::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_GetGroupList, OnError) == 0x00003C, "Member 'AccelByteBlueprintsGroup_GetGroupList::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroup
// 0x00A8 (0x00A8 - 0x0000)
struct AccelByteBlueprintsGroup_UpdateGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletelyReplace;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsGroupUpdatable         RequestContent;                                    // 0x0018(0x0068)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)> OnSuccess;                // 0x0080(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0094(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_UpdateGroup) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_UpdateGroup");
static_assert(sizeof(AccelByteBlueprintsGroup_UpdateGroup) == 0x0000A8, "Wrong size on AccelByteBlueprintsGroup_UpdateGroup");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroup, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_UpdateGroup::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroup, bCompletelyReplace) == 0x000010, "Member 'AccelByteBlueprintsGroup_UpdateGroup::bCompletelyReplace' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroup, RequestContent) == 0x000018, "Member 'AccelByteBlueprintsGroup_UpdateGroup::RequestContent' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroup, OnSuccess) == 0x000080, "Member 'AccelByteBlueprintsGroup_UpdateGroup::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroup, OnError) == 0x000094, "Member 'AccelByteBlueprintsGroup_UpdateGroup::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroupCustomAttributes
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsGroup_UpdateGroupCustomAttributes final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateGroupCustomAttributesRequest RequestContent;                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)> OnSuccess;                // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_UpdateGroupCustomAttributes) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_UpdateGroupCustomAttributes");
static_assert(sizeof(AccelByteBlueprintsGroup_UpdateGroupCustomAttributes) == 0x000058, "Wrong size on AccelByteBlueprintsGroup_UpdateGroupCustomAttributes");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomAttributes, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomAttributes::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomAttributes, RequestContent) == 0x000010, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomAttributes::RequestContent' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomAttributes, OnSuccess) == 0x000030, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomAttributes::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomAttributes, OnError) == 0x000044, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomAttributes::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroupCustomRule
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsGroup_UpdateGroupCustomRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUpdateCustomRulesRequest RequestContent;                                  // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)> OnSuccess;                // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_UpdateGroupCustomRule) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_UpdateGroupCustomRule");
static_assert(sizeof(AccelByteBlueprintsGroup_UpdateGroupCustomRule) == 0x000058, "Wrong size on AccelByteBlueprintsGroup_UpdateGroupCustomRule");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomRule, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomRule::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomRule, RequestContent) == 0x000010, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomRule::RequestContent' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomRule, OnSuccess) == 0x000030, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupCustomRule, OnError) == 0x000044, "Member 'AccelByteBlueprintsGroup_UpdateGroupCustomRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsGroup.UpdateGroupPredefinedRule
// 0x0050 (0x0050 - 0x0000)
struct AccelByteBlueprintsGroup_UpdateGroupPredefinedRule final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsUpdateGroupPredefinedRuleRequest RequestContent;                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGroupInformation& Result)> OnSuccess;                // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule) == 0x000008, "Wrong alignment on AccelByteBlueprintsGroup_UpdateGroupPredefinedRule");
static_assert(sizeof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule) == 0x000050, "Wrong size on AccelByteBlueprintsGroup_UpdateGroupPredefinedRule");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule, GroupId) == 0x000000, "Member 'AccelByteBlueprintsGroup_UpdateGroupPredefinedRule::GroupId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule, AllowedAction) == 0x000010, "Member 'AccelByteBlueprintsGroup_UpdateGroupPredefinedRule::AllowedAction' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule, RequestContent) == 0x000018, "Member 'AccelByteBlueprintsGroup_UpdateGroupPredefinedRule::RequestContent' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule, OnSuccess) == 0x000028, "Member 'AccelByteBlueprintsGroup_UpdateGroupPredefinedRule::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsGroup_UpdateGroupPredefinedRule, OnError) == 0x00003C, "Member 'AccelByteBlueprintsGroup_UpdateGroupPredefinedRule::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.GetItemById
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsItem_GetItemById final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPopulatedItemInfo& Result)> OnSuccess;               // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsItem_GetItemById) == 0x000008, "Wrong alignment on AccelByteBlueprintsItem_GetItemById");
static_assert(sizeof(AccelByteBlueprintsItem_GetItemById) == 0x000058, "Wrong size on AccelByteBlueprintsItem_GetItemById");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemById, ItemId) == 0x000000, "Member 'AccelByteBlueprintsItem_GetItemById::ItemId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemById, Region) == 0x000010, "Member 'AccelByteBlueprintsItem_GetItemById::Region' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemById, Language) == 0x000020, "Member 'AccelByteBlueprintsItem_GetItemById::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemById, OnSuccess) == 0x000030, "Member 'AccelByteBlueprintsItem_GetItemById::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemById, OnError) == 0x000044, "Member 'AccelByteBlueprintsItem_GetItemById::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.GetItemsByCriteria
// 0x00D0 (0x00D0 - 0x0000)
struct AccelByteBlueprintsItem_GetItemsByCriteria final
{
public:
	struct FAccelByteModelsItemCriteria           ItemCriteria;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0090(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0094(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EAccelByteItemListSortBy>              SortBy;                                            // 0x0098(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)> OnSuccess;          // 0x00A8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00BC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsItem_GetItemsByCriteria) == 0x000008, "Wrong alignment on AccelByteBlueprintsItem_GetItemsByCriteria");
static_assert(sizeof(AccelByteBlueprintsItem_GetItemsByCriteria) == 0x0000D0, "Wrong size on AccelByteBlueprintsItem_GetItemsByCriteria");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemsByCriteria, ItemCriteria) == 0x000000, "Member 'AccelByteBlueprintsItem_GetItemsByCriteria::ItemCriteria' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemsByCriteria, Offset) == 0x000090, "Member 'AccelByteBlueprintsItem_GetItemsByCriteria::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemsByCriteria, Limit) == 0x000094, "Member 'AccelByteBlueprintsItem_GetItemsByCriteria::Limit' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemsByCriteria, SortBy) == 0x000098, "Member 'AccelByteBlueprintsItem_GetItemsByCriteria::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemsByCriteria, OnSuccess) == 0x0000A8, "Member 'AccelByteBlueprintsItem_GetItemsByCriteria::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemsByCriteria, OnError) == 0x0000BC, "Member 'AccelByteBlueprintsItem_GetItemsByCriteria::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.SearchItem
// 0x0060 (0x0060 - 0x0000)
struct AccelByteBlueprintsItem_SearchItem final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Keyword;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemPagingSlicedResult& Result)> OnSuccess;          // 0x0038(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x004C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsItem_SearchItem) == 0x000008, "Wrong alignment on AccelByteBlueprintsItem_SearchItem");
static_assert(sizeof(AccelByteBlueprintsItem_SearchItem) == 0x000060, "Wrong size on AccelByteBlueprintsItem_SearchItem");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, Language) == 0x000000, "Member 'AccelByteBlueprintsItem_SearchItem::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, Keyword) == 0x000010, "Member 'AccelByteBlueprintsItem_SearchItem::Keyword' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, Page) == 0x000020, "Member 'AccelByteBlueprintsItem_SearchItem::Page' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, Size) == 0x000024, "Member 'AccelByteBlueprintsItem_SearchItem::Size' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, Region) == 0x000028, "Member 'AccelByteBlueprintsItem_SearchItem::Region' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, OnSuccess) == 0x000038, "Member 'AccelByteBlueprintsItem_SearchItem::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_SearchItem, OnError) == 0x00004C, "Member 'AccelByteBlueprintsItem_SearchItem::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsItem.GetItemByAppId
// 0x0058 (0x0058 - 0x0000)
struct AccelByteBlueprintsItem_GetItemByAppId final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsItemInfo& Result)> OnSuccess;                        // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsItem_GetItemByAppId) == 0x000008, "Wrong alignment on AccelByteBlueprintsItem_GetItemByAppId");
static_assert(sizeof(AccelByteBlueprintsItem_GetItemByAppId) == 0x000058, "Wrong size on AccelByteBlueprintsItem_GetItemByAppId");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemByAppId, AppId) == 0x000000, "Member 'AccelByteBlueprintsItem_GetItemByAppId::AppId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemByAppId, Region) == 0x000010, "Member 'AccelByteBlueprintsItem_GetItemByAppId::Region' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemByAppId, Language) == 0x000020, "Member 'AccelByteBlueprintsItem_GetItemByAppId::Language' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemByAppId, OnSuccess) == 0x000030, "Member 'AccelByteBlueprintsItem_GetItemByAppId::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsItem_GetItemByAppId, OnError) == 0x000044, "Member 'AccelByteBlueprintsItem_GetItemByAppId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.AcceptFriend
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_AcceptFriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_AcceptFriend) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_AcceptFriend");
static_assert(sizeof(AccelByteBlueprintsLobby_AcceptFriend) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_AcceptFriend");
static_assert(offsetof(AccelByteBlueprintsLobby_AcceptFriend, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_AcceptFriend::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.BindEvent
// 0x01A4 (0x01A4 - 0x0000)
struct AccelByteBlueprintsLobby_BindEvent final
{
public:
	TDelegate<void()>                             OnConnectSuccess;                                  // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnConnectError;              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, const class FString& Reason, bool WasClean)> OnConnectionClosed; // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsLeavePartyNotice& Result)> OnLeavePartyNotice;       // 0x003C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsInvitationNotice& Result)> OnInvitePartyInvitationNotice; // 0x0050(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyGetInvitedNotice& Result)> OnInvitePartyGetInvitedNotice; // 0x0064(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyJoinNotice& Result)> OnInvitePartyJoinNotice;   // 0x0078(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGotKickedFromPartyNotice& Result)> OnInvitePartyKickedNotice; // 0x008C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)> OnPartyConnectNotice; // 0x00A0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyMemberConnectionNotice& Result)> OnPartyDisconnectNotice; // 0x00B4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPersonalMessageNotice& Result)> OnPrivateMessageNotice; // 0x00C8(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPartyMessageNotice& Result)> OnPartyMessageNotice;   // 0x00DC(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUsersPresenceNotice& Result)> OnUserPresenceNotice;  // 0x00F0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsNotificationMessage& Result)> OnNotificationMessage; // 0x0104(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)> OnMatchmakingNotice;     // 0x0118(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)> OnReadyConsentNotice;   // 0x012C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)> OnRematchmakingNotice; // 0x0140(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsDsNotice& Result)> OnDsNotice;                       // 0x0154(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsAcceptFriendsNotif& Result)> OnAcceptFriendsNotifDelegate; // 0x0168(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRequestFriendsNotif& Result)> OnRequestFriendsNotifDelegate; // 0x017C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnParsingError;              // 0x0190(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_BindEvent) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_BindEvent");
static_assert(sizeof(AccelByteBlueprintsLobby_BindEvent) == 0x0001A4, "Wrong size on AccelByteBlueprintsLobby_BindEvent");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnConnectSuccess) == 0x000000, "Member 'AccelByteBlueprintsLobby_BindEvent::OnConnectSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnConnectError) == 0x000014, "Member 'AccelByteBlueprintsLobby_BindEvent::OnConnectError' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnConnectionClosed) == 0x000028, "Member 'AccelByteBlueprintsLobby_BindEvent::OnConnectionClosed' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnLeavePartyNotice) == 0x00003C, "Member 'AccelByteBlueprintsLobby_BindEvent::OnLeavePartyNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnInvitePartyInvitationNotice) == 0x000050, "Member 'AccelByteBlueprintsLobby_BindEvent::OnInvitePartyInvitationNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnInvitePartyGetInvitedNotice) == 0x000064, "Member 'AccelByteBlueprintsLobby_BindEvent::OnInvitePartyGetInvitedNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnInvitePartyJoinNotice) == 0x000078, "Member 'AccelByteBlueprintsLobby_BindEvent::OnInvitePartyJoinNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnInvitePartyKickedNotice) == 0x00008C, "Member 'AccelByteBlueprintsLobby_BindEvent::OnInvitePartyKickedNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnPartyConnectNotice) == 0x0000A0, "Member 'AccelByteBlueprintsLobby_BindEvent::OnPartyConnectNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnPartyDisconnectNotice) == 0x0000B4, "Member 'AccelByteBlueprintsLobby_BindEvent::OnPartyDisconnectNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnPrivateMessageNotice) == 0x0000C8, "Member 'AccelByteBlueprintsLobby_BindEvent::OnPrivateMessageNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnPartyMessageNotice) == 0x0000DC, "Member 'AccelByteBlueprintsLobby_BindEvent::OnPartyMessageNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnUserPresenceNotice) == 0x0000F0, "Member 'AccelByteBlueprintsLobby_BindEvent::OnUserPresenceNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnNotificationMessage) == 0x000104, "Member 'AccelByteBlueprintsLobby_BindEvent::OnNotificationMessage' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnMatchmakingNotice) == 0x000118, "Member 'AccelByteBlueprintsLobby_BindEvent::OnMatchmakingNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnReadyConsentNotice) == 0x00012C, "Member 'AccelByteBlueprintsLobby_BindEvent::OnReadyConsentNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnRematchmakingNotice) == 0x000140, "Member 'AccelByteBlueprintsLobby_BindEvent::OnRematchmakingNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnDsNotice) == 0x000154, "Member 'AccelByteBlueprintsLobby_BindEvent::OnDsNotice' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnAcceptFriendsNotifDelegate) == 0x000168, "Member 'AccelByteBlueprintsLobby_BindEvent::OnAcceptFriendsNotifDelegate' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnRequestFriendsNotifDelegate) == 0x00017C, "Member 'AccelByteBlueprintsLobby_BindEvent::OnRequestFriendsNotifDelegate' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_BindEvent, OnParsingError) == 0x000190, "Member 'AccelByteBlueprintsLobby_BindEvent::OnParsingError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.CancelFriendRequest
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_CancelFriendRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_CancelFriendRequest) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_CancelFriendRequest");
static_assert(sizeof(AccelByteBlueprintsLobby_CancelFriendRequest) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_CancelFriendRequest");
static_assert(offsetof(AccelByteBlueprintsLobby_CancelFriendRequest, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_CancelFriendRequest::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.GetFriendshipStatus
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_GetFriendshipStatus final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_GetFriendshipStatus) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_GetFriendshipStatus");
static_assert(sizeof(AccelByteBlueprintsLobby_GetFriendshipStatus) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_GetFriendshipStatus");
static_assert(offsetof(AccelByteBlueprintsLobby_GetFriendshipStatus, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_GetFriendshipStatus::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsLobby_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_IsConnected) == 0x000001, "Wrong alignment on AccelByteBlueprintsLobby_IsConnected");
static_assert(sizeof(AccelByteBlueprintsLobby_IsConnected) == 0x000001, "Wrong size on AccelByteBlueprintsLobby_IsConnected");
static_assert(offsetof(AccelByteBlueprintsLobby_IsConnected, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsLobby_IsConnected::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.RejectFriend
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_RejectFriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_RejectFriend) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_RejectFriend");
static_assert(sizeof(AccelByteBlueprintsLobby_RejectFriend) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_RejectFriend");
static_assert(offsetof(AccelByteBlueprintsLobby_RejectFriend, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_RejectFriend::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.RequestFriend
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_RequestFriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_RequestFriend) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_RequestFriend");
static_assert(sizeof(AccelByteBlueprintsLobby_RequestFriend) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_RequestFriend");
static_assert(offsetof(AccelByteBlueprintsLobby_RequestFriend, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_RequestFriend::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendAcceptInvitationRequest
// 0x0020 (0x0020 - 0x0000)
struct AccelByteBlueprintsLobby_SendAcceptInvitationRequest final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendAcceptInvitationRequest) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendAcceptInvitationRequest");
static_assert(sizeof(AccelByteBlueprintsLobby_SendAcceptInvitationRequest) == 0x000020, "Wrong size on AccelByteBlueprintsLobby_SendAcceptInvitationRequest");
static_assert(offsetof(AccelByteBlueprintsLobby_SendAcceptInvitationRequest, PartyId) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendAcceptInvitationRequest::PartyId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_SendAcceptInvitationRequest, InvitationToken) == 0x000010, "Member 'AccelByteBlueprintsLobby_SendAcceptInvitationRequest::InvitationToken' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendCancelMatchmaking
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendCancelMatchmaking final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendCancelMatchmaking) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendCancelMatchmaking");
static_assert(sizeof(AccelByteBlueprintsLobby_SendCancelMatchmaking) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendCancelMatchmaking");
static_assert(offsetof(AccelByteBlueprintsLobby_SendCancelMatchmaking, GameMode) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendCancelMatchmaking::GameMode' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendInviteToPartyRequest
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendInviteToPartyRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendInviteToPartyRequest) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendInviteToPartyRequest");
static_assert(sizeof(AccelByteBlueprintsLobby_SendInviteToPartyRequest) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendInviteToPartyRequest");
static_assert(offsetof(AccelByteBlueprintsLobby_SendInviteToPartyRequest, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendInviteToPartyRequest::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendKickPartyMemberRequest
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendKickPartyMemberRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendKickPartyMemberRequest) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendKickPartyMemberRequest");
static_assert(sizeof(AccelByteBlueprintsLobby_SendKickPartyMemberRequest) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendKickPartyMemberRequest");
static_assert(offsetof(AccelByteBlueprintsLobby_SendKickPartyMemberRequest, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendKickPartyMemberRequest::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendPartyMessage
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendPartyMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendPartyMessage) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendPartyMessage");
static_assert(sizeof(AccelByteBlueprintsLobby_SendPartyMessage) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendPartyMessage");
static_assert(offsetof(AccelByteBlueprintsLobby_SendPartyMessage, Message) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendPartyMessage::Message' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendPrivateMessage
// 0x0020 (0x0020 - 0x0000)
struct AccelByteBlueprintsLobby_SendPrivateMessage final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendPrivateMessage) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendPrivateMessage");
static_assert(sizeof(AccelByteBlueprintsLobby_SendPrivateMessage) == 0x000020, "Wrong size on AccelByteBlueprintsLobby_SendPrivateMessage");
static_assert(offsetof(AccelByteBlueprintsLobby_SendPrivateMessage, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendPrivateMessage::UserId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_SendPrivateMessage, Message) == 0x000010, "Member 'AccelByteBlueprintsLobby_SendPrivateMessage::Message' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendReadyConsentRequest
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendReadyConsentRequest final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendReadyConsentRequest) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendReadyConsentRequest");
static_assert(sizeof(AccelByteBlueprintsLobby_SendReadyConsentRequest) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendReadyConsentRequest");
static_assert(offsetof(AccelByteBlueprintsLobby_SendReadyConsentRequest, MatchId) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendReadyConsentRequest::MatchId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendRejectConsentRequest
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendRejectConsentRequest final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendRejectConsentRequest) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendRejectConsentRequest");
static_assert(sizeof(AccelByteBlueprintsLobby_SendRejectConsentRequest) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendRejectConsentRequest");
static_assert(offsetof(AccelByteBlueprintsLobby_SendRejectConsentRequest, MatchId) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendRejectConsentRequest::MatchId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SendStartMatchmaking
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_SendStartMatchmaking final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SendStartMatchmaking) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SendStartMatchmaking");
static_assert(sizeof(AccelByteBlueprintsLobby_SendStartMatchmaking) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_SendStartMatchmaking");
static_assert(offsetof(AccelByteBlueprintsLobby_SendStartMatchmaking, GameMode) == 0x000000, "Member 'AccelByteBlueprintsLobby_SendStartMatchmaking::GameMode' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetAcceptFriendResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsAcceptFriendsResponse& Result)> OnAcceptFriendsResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate, OnAcceptFriendsResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetAcceptFriendResponseDelegate::OnAcceptFriendsResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetCancelFriendRequestResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsCancelFriendsResponse& Result)> OnCancelFriendsResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate, OnCancelFriendsResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetCancelFriendRequestResponseDelegate::OnCancelFriendsResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetCancelMatchmakingResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)> OnMatchmakingCancel;   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate, OnMatchmakingCancel) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetCancelMatchmakingResponseDelegate::OnMatchmakingCancel' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetCreatePartyResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsCreatePartyResponse& Result)> OnCreatePartyResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate, OnCreatePartyResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetCreatePartyResponseDelegate::OnCreatePartyResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetDsNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetDsNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsDsNotice& Result)> OnDsNotice;                       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetDsNotifDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetDsNotifDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetDsNotifDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetDsNotifDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetDsNotifDelegate, OnDsNotice) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetDsNotifDelegate::OnDsNotice' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetGetAllUserPresenceResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsGetOnlineUsersResponse& Result)> OnGetAllUserPresenceResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate, OnGetAllUserPresenceResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetGetAllUserPresenceResponseDelegate::OnGetAllUserPresenceResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetGetFriendshipStatusResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsGetFriendshipStatusResponse& Result)> OnGetFriendshipStatusResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate, OnGetFriendshipStatusResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetGetFriendshipStatusResponseDelegate::OnGetFriendshipStatusResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInfoPartyResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsInfoPartyResponse& Result)> OnInfoPartyResponse;     // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate, OnInfoPartyResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetInfoPartyResponseDelegate::OnInfoPartyResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInvitePartyJoinResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyJoinResponse& Result)> OnInvitePartyJoinResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate, OnInvitePartyJoinResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetInvitePartyJoinResponseDelegate::OnInvitePartyJoinResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInvitePartyKickMemberResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsKickPartyMemberResponse& Result)> OnInvitePartyKickMemberResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate, OnInvitePartyKickMemberResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetInvitePartyKickMemberResponseDelegate::OnInvitePartyKickMemberResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetInvitePartyResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyInviteResponse& Result)> OnInvitePartyResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate, OnInvitePartyResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetInvitePartyResponseDelegate::OnInvitePartyResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetLeavePartyResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsLeavePartyResponse& Result)> OnLeavePartyResponse;   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate, OnLeavePartyResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetLeavePartyResponseDelegate::OnLeavePartyResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetListIncomingFriendsResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsListIncomingFriendsResponse& Result)> OnListIncomingFriendsResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate, OnListIncomingFriendsResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetListIncomingFriendsResponseDelegate::OnListIncomingFriendsResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetListOutgoingFriendsResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsListOutgoingFriendsResponse& Result)> OnListOutgoingFriendsResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate, OnListOutgoingFriendsResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetListOutgoingFriendsResponseDelegate::OnListOutgoingFriendsResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetLoadFriendsListResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsLoadFriendListResponse& Result)> OnLoadFriendListResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate, OnLoadFriendListResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetLoadFriendsListResponseDelegate::OnLoadFriendListResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetMatchmakingNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsMatchmakingNotice& Result)> OnMatchmakingNotice;     // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate, OnMatchmakingNotice) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetMatchmakingNotifDelegate::OnMatchmakingNotice' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetPartyMessageResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPartyMessageResponse& Result)> OnPartyMessageResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate, OnPartyMessageResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetPartyMessageResponseDelegate::OnPartyMessageResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetPresenceStatus
// 0x0018 (0x0018 - 0x0000)
struct AccelByteBlueprintsLobby_SetPresenceStatus final
{
public:
	EAvailability                                 State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetPresenceStatus) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_SetPresenceStatus");
static_assert(sizeof(AccelByteBlueprintsLobby_SetPresenceStatus) == 0x000018, "Wrong size on AccelByteBlueprintsLobby_SetPresenceStatus");
static_assert(offsetof(AccelByteBlueprintsLobby_SetPresenceStatus, State) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetPresenceStatus::State' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsLobby_SetPresenceStatus, Activity) == 0x000008, "Member 'AccelByteBlueprintsLobby_SetPresenceStatus::Activity' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetPrivateMessageResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsPersonalMessageResponse& Result)> OnPrivateMessageResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate, OnPrivateMessageResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetPrivateMessageResponseDelegate::OnPrivateMessageResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetReadyConsentNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsReadyConsentNotice& Result)> OnReadyConsentNotice;   // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate, OnReadyConsentNotice) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetReadyConsentNotifDelegate::OnReadyConsentNotice' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetReadyConsentResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsReadyConsentRequest& Result)> OnReadyConsentResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate, OnReadyConsentResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetReadyConsentResponseDelegate::OnReadyConsentResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRejectConsentNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRejectConsentNotice& Result)> OnRejectConsentNotice; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate, OnRejectConsentNotice) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetRejectConsentNotifDelegate::OnRejectConsentNotice' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRejectConsentResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRejectConsentRequest& Result)> OnRejectConsentResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate, OnRejectConsentResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetRejectConsentResponseDelegate::OnRejectConsentResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRejectFriendResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRejectFriendsResponse& Result)> OnRejectFriendsResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate, OnRejectFriendsResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetRejectFriendResponseDelegate::OnRejectFriendsResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRematchmakingNotifDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRematchmakingNotice& Result)> OnRematchmakingNotice; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate, OnRematchmakingNotice) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetRematchmakingNotifDelegate::OnRematchmakingNotice' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetRequestFriendResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsRequestFriendsResponse& Result)> OnRequestFriendsResponseDelegate; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate, OnRequestFriendsResponseDelegate) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetRequestFriendResponseDelegate::OnRequestFriendsResponseDelegate' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetStartMatchmakingResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsMatchmakingResponse& Result)> OnMatchmakingStart;    // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate, OnMatchmakingStart) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetStartMatchmakingResponseDelegate::OnMatchmakingStart' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetUnfriendResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetUnfriendResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsUnfriendResponse& Result)> OnUnfriendResponse;       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetUnfriendResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetUnfriendResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetUnfriendResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetUnfriendResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetUnfriendResponseDelegate, OnUnfriendResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetUnfriendResponseDelegate::OnUnfriendResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.SetUserPresenceResponseDelegate
// 0x0014 (0x0014 - 0x0000)
struct AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate final
{
public:
	TDelegate<void(const struct FAccelByteModelsSetOnlineUsersResponse& Result)> OnUserPresenceResponse; // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate) == 0x000004, "Wrong alignment on AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate");
static_assert(sizeof(AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate) == 0x000014, "Wrong size on AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate");
static_assert(offsetof(AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate, OnUserPresenceResponse) == 0x000000, "Member 'AccelByteBlueprintsLobby_SetUserPresenceResponseDelegate::OnUserPresenceResponse' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsLobby.Unfriend
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsLobby_Unfriend final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsLobby_Unfriend) == 0x000008, "Wrong alignment on AccelByteBlueprintsLobby_Unfriend");
static_assert(sizeof(AccelByteBlueprintsLobby_Unfriend) == 0x000010, "Wrong size on AccelByteBlueprintsLobby_Unfriend");
static_assert(offsetof(AccelByteBlueprintsLobby_Unfriend, UserId) == 0x000000, "Member 'AccelByteBlueprintsLobby_Unfriend::UserId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.CancelOrder
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsOrder_CancelOrder final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)> OnSuccess;                       // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsOrder_CancelOrder) == 0x000008, "Wrong alignment on AccelByteBlueprintsOrder_CancelOrder");
static_assert(sizeof(AccelByteBlueprintsOrder_CancelOrder) == 0x000038, "Wrong size on AccelByteBlueprintsOrder_CancelOrder");
static_assert(offsetof(AccelByteBlueprintsOrder_CancelOrder, OrderNo) == 0x000000, "Member 'AccelByteBlueprintsOrder_CancelOrder::OrderNo' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_CancelOrder, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsOrder_CancelOrder::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_CancelOrder, OnError) == 0x000024, "Member 'AccelByteBlueprintsOrder_CancelOrder::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.CreateNewOrder
// 0x0098 (0x0098 - 0x0000)
struct AccelByteBlueprintsOrder_CreateNewOrder final
{
public:
	struct FAccelByteModelsOrderCreate            OrderCreate;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)> OnSuccess;                       // 0x0070(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0084(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsOrder_CreateNewOrder) == 0x000008, "Wrong alignment on AccelByteBlueprintsOrder_CreateNewOrder");
static_assert(sizeof(AccelByteBlueprintsOrder_CreateNewOrder) == 0x000098, "Wrong size on AccelByteBlueprintsOrder_CreateNewOrder");
static_assert(offsetof(AccelByteBlueprintsOrder_CreateNewOrder, OrderCreate) == 0x000000, "Member 'AccelByteBlueprintsOrder_CreateNewOrder::OrderCreate' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_CreateNewOrder, OnSuccess) == 0x000070, "Member 'AccelByteBlueprintsOrder_CreateNewOrder::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_CreateNewOrder, OnError) == 0x000084, "Member 'AccelByteBlueprintsOrder_CreateNewOrder::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.GetUserOrder
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsOrder_GetUserOrder final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsOrderInfo& Result)> OnSuccess;                       // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsOrder_GetUserOrder) == 0x000008, "Wrong alignment on AccelByteBlueprintsOrder_GetUserOrder");
static_assert(sizeof(AccelByteBlueprintsOrder_GetUserOrder) == 0x000038, "Wrong size on AccelByteBlueprintsOrder_GetUserOrder");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrder, OrderNo) == 0x000000, "Member 'AccelByteBlueprintsOrder_GetUserOrder::OrderNo' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrder, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsOrder_GetUserOrder::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrder, OnError) == 0x000024, "Member 'AccelByteBlueprintsOrder_GetUserOrder::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.GetUserOrderHistory
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsOrder_GetUserOrderHistory final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsOrderHistoryInfo>& Result)> OnSuccess;        // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsOrder_GetUserOrderHistory) == 0x000008, "Wrong alignment on AccelByteBlueprintsOrder_GetUserOrderHistory");
static_assert(sizeof(AccelByteBlueprintsOrder_GetUserOrderHistory) == 0x000038, "Wrong size on AccelByteBlueprintsOrder_GetUserOrderHistory");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrderHistory, OrderNo) == 0x000000, "Member 'AccelByteBlueprintsOrder_GetUserOrderHistory::OrderNo' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrderHistory, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsOrder_GetUserOrderHistory::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrderHistory, OnError) == 0x000024, "Member 'AccelByteBlueprintsOrder_GetUserOrderHistory::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsOrder.GetUserOrders
// 0x0030 (0x0030 - 0x0000)
struct AccelByteBlueprintsOrder_GetUserOrders final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsPagedOrderInfo& Result)> OnSuccess;                  // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsOrder_GetUserOrders) == 0x000004, "Wrong alignment on AccelByteBlueprintsOrder_GetUserOrders");
static_assert(sizeof(AccelByteBlueprintsOrder_GetUserOrders) == 0x000030, "Wrong size on AccelByteBlueprintsOrder_GetUserOrders");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrders, Page) == 0x000000, "Member 'AccelByteBlueprintsOrder_GetUserOrders::Page' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrders, Size) == 0x000004, "Member 'AccelByteBlueprintsOrder_GetUserOrders::Size' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrders, OnSuccess) == 0x000008, "Member 'AccelByteBlueprintsOrder_GetUserOrders::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsOrder_GetUserOrders, OnError) == 0x00001C, "Member 'AccelByteBlueprintsOrder_GetUserOrders::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsReward.GetRewardByRewardCode
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsReward_GetRewardByRewardCode final
{
public:
	class FString                                 RewardCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)> OnSuccess;                      // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsReward_GetRewardByRewardCode) == 0x000008, "Wrong alignment on AccelByteBlueprintsReward_GetRewardByRewardCode");
static_assert(sizeof(AccelByteBlueprintsReward_GetRewardByRewardCode) == 0x000038, "Wrong size on AccelByteBlueprintsReward_GetRewardByRewardCode");
static_assert(offsetof(AccelByteBlueprintsReward_GetRewardByRewardCode, RewardCode) == 0x000000, "Member 'AccelByteBlueprintsReward_GetRewardByRewardCode::RewardCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_GetRewardByRewardCode, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsReward_GetRewardByRewardCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_GetRewardByRewardCode, OnError) == 0x000024, "Member 'AccelByteBlueprintsReward_GetRewardByRewardCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsReward.GetRewardByRewardId
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsReward_GetRewardByRewardId final
{
public:
	class FString                                 RewardId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsRewardInfo& Result)> OnSuccess;                      // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsReward_GetRewardByRewardId) == 0x000008, "Wrong alignment on AccelByteBlueprintsReward_GetRewardByRewardId");
static_assert(sizeof(AccelByteBlueprintsReward_GetRewardByRewardId) == 0x000038, "Wrong size on AccelByteBlueprintsReward_GetRewardByRewardId");
static_assert(offsetof(AccelByteBlueprintsReward_GetRewardByRewardId, RewardId) == 0x000000, "Member 'AccelByteBlueprintsReward_GetRewardByRewardId::RewardId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_GetRewardByRewardId, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsReward_GetRewardByRewardId::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_GetRewardByRewardId, OnError) == 0x000024, "Member 'AccelByteBlueprintsReward_GetRewardByRewardId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsReward.QueryRewards
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsReward_QueryRewards final
{
public:
	class FString                                 EventTopic;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteRewardListSortBy                    SortBy;                                            // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsQueryReward& Result)> OnSuccess;                     // 0x001C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsReward_QueryRewards) == 0x000008, "Wrong alignment on AccelByteBlueprintsReward_QueryRewards");
static_assert(sizeof(AccelByteBlueprintsReward_QueryRewards) == 0x000048, "Wrong size on AccelByteBlueprintsReward_QueryRewards");
static_assert(offsetof(AccelByteBlueprintsReward_QueryRewards, EventTopic) == 0x000000, "Member 'AccelByteBlueprintsReward_QueryRewards::EventTopic' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_QueryRewards, Offset) == 0x000010, "Member 'AccelByteBlueprintsReward_QueryRewards::Offset' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_QueryRewards, Limit) == 0x000014, "Member 'AccelByteBlueprintsReward_QueryRewards::Limit' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_QueryRewards, SortBy) == 0x000018, "Member 'AccelByteBlueprintsReward_QueryRewards::SortBy' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_QueryRewards, OnSuccess) == 0x00001C, "Member 'AccelByteBlueprintsReward_QueryRewards::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsReward_QueryRewards, OnError) == 0x000030, "Member 'AccelByteBlueprintsReward_QueryRewards::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials.GetClientAccessToken
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerCredentials_GetClientAccessToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerCredentials_GetClientAccessToken) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerCredentials_GetClientAccessToken");
static_assert(sizeof(AccelByteBlueprintsServerCredentials_GetClientAccessToken) == 0x000010, "Wrong size on AccelByteBlueprintsServerCredentials_GetClientAccessToken");
static_assert(offsetof(AccelByteBlueprintsServerCredentials_GetClientAccessToken, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerCredentials_GetClientAccessToken::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials.GetClientNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerCredentials_GetClientNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerCredentials_GetClientNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerCredentials_GetClientNamespace");
static_assert(sizeof(AccelByteBlueprintsServerCredentials_GetClientNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsServerCredentials_GetClientNamespace");
static_assert(offsetof(AccelByteBlueprintsServerCredentials_GetClientNamespace, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerCredentials_GetClientNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerCredentials.GetMatchId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerCredentials_GetMatchId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerCredentials_GetMatchId) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerCredentials_GetMatchId");
static_assert(sizeof(AccelByteBlueprintsServerCredentials_GetMatchId) == 0x000010, "Wrong size on AccelByteBlueprintsServerCredentials_GetMatchId");
static_assert(offsetof(AccelByteBlueprintsServerCredentials_GetMatchId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerCredentials_GetMatchId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetAchievementServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetAchievementServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetAchievementServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetAchievementServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetAchievementServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetAchievementServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetAchievementServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetAchievementServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetAMSServerWatchdogUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetAMSServerWatchdogUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetChatServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetChatServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetChatServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetChatServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetChatServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetChatServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetChatServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetChatServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetClientId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetClientId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetClientId) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetClientId");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetClientId) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetClientId");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetClientId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetClientId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetClientSecret
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetClientSecret final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetClientSecret) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetClientSecret");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetClientSecret) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetClientSecret");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetClientSecret, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetClientSecret::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetCloudSaveServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetCloudSaveServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetDSHubServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetDSHubServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetDSHubServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetDSHubServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetDSHubServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetDSHubServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetDSHubServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetDSHubServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetDSMControllerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetDSMControllerServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetGameTelemetryServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetGameTelemetryServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetGDPRServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetGDPRServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetGDPRServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetGDPRServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetGDPRServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetGDPRServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetGDPRServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetGDPRServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetIamServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetIamServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetIamServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetIamServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetIamServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetIamServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetIamServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetIamServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetLobbyServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetLobbyServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetLobbyServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetLobbyServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetLobbyServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetLobbyServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetLobbyServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetLobbyServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetMatchmakingServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetMatchmakingServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetMatchmakingV2ServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetMatchmakingV2ServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetNamespace");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetNamespace");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetNamespace, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetPlatformServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetPlatformServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetPlatformServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetPlatformServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetPlatformServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetPlatformServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetPlatformServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetPlatformServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetPublisherNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetPublisherNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetPublisherNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetPublisherNamespace");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetPublisherNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetPublisherNamespace");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetPublisherNamespace, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetPublisherNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetQosManagerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetQosManagerServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetQosManagerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetQosManagerServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetQosManagerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetQosManagerServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetQosManagerServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetQosManagerServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetQosPingTimeout
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetQosPingTimeout final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetQosPingTimeout) == 0x000004, "Wrong alignment on AccelByteBlueprintsServerSettings_GetQosPingTimeout");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetQosPingTimeout) == 0x000004, "Wrong size on AccelByteBlueprintsServerSettings_GetQosPingTimeout");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetQosPingTimeout, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetQosPingTimeout::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetSeasonPassServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetSeasonPassServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetSessionBrowserServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetSessionBrowserServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetSessionServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetSessionServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetSessionServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetSessionServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetSessionServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetSessionServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetSessionServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetSessionServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetStatisticServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetStatisticServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetStatisticServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetStatisticServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetStatisticServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetStatisticServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetStatisticServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetStatisticServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.GetUGCServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_GetUGCServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_GetUGCServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_GetUGCServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_GetUGCServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_GetUGCServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_GetUGCServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_GetUGCServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.IsSendPredefinedEvent
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsServerSettings_IsSendPredefinedEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_IsSendPredefinedEvent) == 0x000001, "Wrong alignment on AccelByteBlueprintsServerSettings_IsSendPredefinedEvent");
static_assert(sizeof(AccelByteBlueprintsServerSettings_IsSendPredefinedEvent) == 0x000001, "Wrong size on AccelByteBlueprintsServerSettings_IsSendPredefinedEvent");
static_assert(offsetof(AccelByteBlueprintsServerSettings_IsSendPredefinedEvent, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_IsSendPredefinedEvent::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.ResetSettings
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsServerSettings_ResetSettings final
{
public:
	ESettingsEnvironment                          Environment;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_ResetSettings) == 0x000001, "Wrong alignment on AccelByteBlueprintsServerSettings_ResetSettings");
static_assert(sizeof(AccelByteBlueprintsServerSettings_ResetSettings) == 0x000001, "Wrong size on AccelByteBlueprintsServerSettings_ResetSettings");
static_assert(offsetof(AccelByteBlueprintsServerSettings_ResetSettings, Environment) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_ResetSettings::Environment' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetAchievementServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetAchievementServerUrl final
{
public:
	class FString                                 AchievementServerUrl;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetAchievementServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetAchievementServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetAchievementServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetAchievementServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetAchievementServerUrl, AchievementServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetAchievementServerUrl::AchievementServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetAMSServerWatchdogUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl final
{
public:
	class FString                                 AMSServerUrl;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl, AMSServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetAMSServerWatchdogUrl::AMSServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetChatServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetChatServerUrl final
{
public:
	class FString                                 ChatServerUrl;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetChatServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetChatServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetChatServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetChatServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetChatServerUrl, ChatServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetChatServerUrl::ChatServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetClientId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetClientId final
{
public:
	class FString                                 ClientId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetClientId) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetClientId");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetClientId) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetClientId");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetClientId, ClientId) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetClientId::ClientId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetClientSecret
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetClientSecret final
{
public:
	class FString                                 ClientSecret;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetClientSecret) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetClientSecret");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetClientSecret) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetClientSecret");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetClientSecret, ClientSecret) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetClientSecret::ClientSecret' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetCloudSaveServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl final
{
public:
	class FString                                 CloudServerUrl;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl, CloudServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetCloudSaveServerUrl::CloudServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetDSHubServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetDSHubServerUrl final
{
public:
	class FString                                 DSHubServerUrl;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetDSHubServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetDSHubServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetDSHubServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetDSHubServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetDSHubServerUrl, DSHubServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetDSHubServerUrl::DSHubServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetDSMControllerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl final
{
public:
	class FString                                 DSMControllerServerUrl;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl, DSMControllerServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetDSMControllerServerUrl::DSMControllerServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetGameTelemetryServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl final
{
public:
	class FString                                 GameTelemetryServerUrl;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl, GameTelemetryServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetGameTelemetryServerUrl::GameTelemetryServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetIamServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetIamServerUrl final
{
public:
	class FString                                 IamServerUrl;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetIamServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetIamServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetIamServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetIamServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetIamServerUrl, IamServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetIamServerUrl::IamServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetLobbyServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetLobbyServerUrl final
{
public:
	class FString                                 LobbyServerUrl;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetLobbyServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetLobbyServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetLobbyServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetLobbyServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetLobbyServerUrl, LobbyServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetLobbyServerUrl::LobbyServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetMatchmakingServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl final
{
public:
	class FString                                 MatchmakingServerurl;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl, MatchmakingServerurl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetMatchmakingServerUrl::MatchmakingServerurl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetMatchmakingV2ServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl final
{
public:
	class FString                                 MatchmakingV2ServerUrl;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl, MatchmakingV2ServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetMatchmakingV2ServerUrl::MatchmakingV2ServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetNamespace final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetNamespace");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetNamespace");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetNamespace, Namespace) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetNamespace::Namespace' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetPlatformServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetPlatformServerUrl final
{
public:
	class FString                                 PlatformServerUrl;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetPlatformServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetPlatformServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetPlatformServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetPlatformServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetPlatformServerUrl, PlatformServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetPlatformServerUrl::PlatformServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetPublisherNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetPublisherNamespace final
{
public:
	class FString                                 PublisherNamespace;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetPublisherNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetPublisherNamespace");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetPublisherNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetPublisherNamespace");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetPublisherNamespace, PublisherNamespace) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetPublisherNamespace::PublisherNamespace' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetQosManagerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetQosManagerServerUrl final
{
public:
	class FString                                 PlatformServerUrl;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetQosManagerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetQosManagerServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetQosManagerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetQosManagerServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetQosManagerServerUrl, PlatformServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetQosManagerServerUrl::PlatformServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetQosPingTimeout
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetQosPingTimeout final
{
public:
	float                                         QosPingTimeout;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetQosPingTimeout) == 0x000004, "Wrong alignment on AccelByteBlueprintsServerSettings_SetQosPingTimeout");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetQosPingTimeout) == 0x000004, "Wrong size on AccelByteBlueprintsServerSettings_SetQosPingTimeout");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetQosPingTimeout, QosPingTimeout) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetQosPingTimeout::QosPingTimeout' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSeasonPassServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl final
{
public:
	class FString                                 SessionPassServerUrl;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl, SessionPassServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetSeasonPassServerUrl::SessionPassServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSendPredefinedEvent
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetSendPredefinedEvent final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetSendPredefinedEvent) == 0x000001, "Wrong alignment on AccelByteBlueprintsServerSettings_SetSendPredefinedEvent");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetSendPredefinedEvent) == 0x000001, "Wrong size on AccelByteBlueprintsServerSettings_SetSendPredefinedEvent");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetSendPredefinedEvent, bEnabled) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetSendPredefinedEvent::bEnabled' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSessionBrowserServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl final
{
public:
	class FString                                 SessionBrowserServerUrl;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl, SessionBrowserServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetSessionBrowserServerUrl::SessionBrowserServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetSessionServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetSessionServerUrl final
{
public:
	class FString                                 SessionServerUrl;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetSessionServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetSessionServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetSessionServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetSessionServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetSessionServerUrl, SessionServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetSessionServerUrl::SessionServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetStatisticServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetStatisticServerUrl final
{
public:
	class FString                                 StatisticServerUrl;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetStatisticServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetStatisticServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetStatisticServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetStatisticServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetStatisticServerUrl, StatisticServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetStatisticServerUrl::StatisticServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetUGCServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetUGCServerUrl final
{
public:
	class FString                                 UGCServerUrl;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetUGCServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetUGCServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetUGCServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetUGCServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetUGCServerUrl, UGCServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetUGCServerUrl::UGCServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsServerSettings.SetGDPRServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsServerSettings_SetGDPRServerUrl final
{
public:
	class FString                                 GDPRServerUrl;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsServerSettings_SetGDPRServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsServerSettings_SetGDPRServerUrl");
static_assert(sizeof(AccelByteBlueprintsServerSettings_SetGDPRServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsServerSettings_SetGDPRServerUrl");
static_assert(offsetof(AccelByteBlueprintsServerSettings_SetGDPRServerUrl, GDPRServerUrl) == 0x000000, "Member 'AccelByteBlueprintsServerSettings_SetGDPRServerUrl::GDPRServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetAchievementServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetAchievementServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetAchievementServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetAchievementServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetAchievementServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetAchievementServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetAchievementServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetAchievementServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetAppId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetAppId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetAppId) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetAppId");
static_assert(sizeof(AccelByteBlueprintsSettings_GetAppId) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetAppId");
static_assert(offsetof(AccelByteBlueprintsSettings_GetAppId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetAppId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetBasicServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetBasicServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetBasicServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetBasicServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetBasicServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetBasicServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetBasicServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetBasicServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetChatServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetChatServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetChatServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetChatServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetChatServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetChatServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetChatServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetChatServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetClientId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetClientId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetClientId) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetClientId");
static_assert(sizeof(AccelByteBlueprintsSettings_GetClientId) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetClientId");
static_assert(offsetof(AccelByteBlueprintsSettings_GetClientId, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetClientId::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetClientSecret
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetClientSecret final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetClientSecret) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetClientSecret");
static_assert(sizeof(AccelByteBlueprintsSettings_GetClientSecret) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetClientSecret");
static_assert(offsetof(AccelByteBlueprintsSettings_GetClientSecret, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetClientSecret::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetCloudSaveServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetCloudSaveServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetCloudSaveServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetCloudSaveServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetCloudSaveServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetCloudSaveServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetCloudSaveServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetCloudSaveServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetCloudStorageServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetCloudStorageServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetCloudStorageServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetCloudStorageServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetCloudStorageServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetCloudStorageServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetCloudStorageServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetCloudStorageServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetCustomerName
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetCustomerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetCustomerName) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetCustomerName");
static_assert(sizeof(AccelByteBlueprintsSettings_GetCustomerName) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetCustomerName");
static_assert(offsetof(AccelByteBlueprintsSettings_GetCustomerName, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetCustomerName::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGameProfileServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetGameProfileServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetGameProfileServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetGameProfileServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetGameProfileServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetGameProfileServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetGameProfileServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetGameProfileServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGameTelemetryServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetGameTelemetryServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetGameTelemetryServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetGameTelemetryServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetGameTelemetryServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetGameTelemetryServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetGameTelemetryServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetGameTelemetryServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGDPRServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetGDPRServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetGDPRServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetGDPRServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetGDPRServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetGDPRServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetGDPRServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetGDPRServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetGroupServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetGroupServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetGroupServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetGroupServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetGroupServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetGroupServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetGroupServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetGroupServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetHeartBeatData
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetHeartBeatData final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetHeartBeatData) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetHeartBeatData");
static_assert(sizeof(AccelByteBlueprintsSettings_GetHeartBeatData) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetHeartBeatData");
static_assert(offsetof(AccelByteBlueprintsSettings_GetHeartBeatData, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetHeartBeatData::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetHttpCacheType
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_GetHttpCacheType final
{
public:
	EHttpCacheType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetHttpCacheType) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_GetHttpCacheType");
static_assert(sizeof(AccelByteBlueprintsSettings_GetHttpCacheType) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_GetHttpCacheType");
static_assert(offsetof(AccelByteBlueprintsSettings_GetHttpCacheType, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetHttpCacheType::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetIamServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetIamServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetIamServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetIamServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetIamServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetIamServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetIamServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetIamServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetLeaderboardServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetLeaderboardServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetLeaderboardServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetLeaderboardServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetLeaderboardServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetLeaderboardServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetLeaderboardServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetLeaderboardServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetLobbyServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetLobbyServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetLobbyServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetLobbyServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetLobbyServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetLobbyServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetLobbyServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetLobbyServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetMatchmakingV2ServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetMatchmakingV2ServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetNamespace");
static_assert(sizeof(AccelByteBlueprintsSettings_GetNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetNamespace");
static_assert(offsetof(AccelByteBlueprintsSettings_GetNamespace, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetPlatformServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetPlatformServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetPlatformServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetPlatformServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetPlatformServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetPlatformServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetPlatformServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetPlatformServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetPublisherNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetPublisherNamespace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetPublisherNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetPublisherNamespace");
static_assert(sizeof(AccelByteBlueprintsSettings_GetPublisherNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetPublisherNamespace");
static_assert(offsetof(AccelByteBlueprintsSettings_GetPublisherNamespace, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetPublisherNamespace::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosLatencyPollIntervalSecs
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs) == 0x000004, "Wrong alignment on AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs");
static_assert(sizeof(AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs) == 0x000004, "Wrong size on AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs");
static_assert(offsetof(AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetQosLatencyPollIntervalSecs::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosManagerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetQosManagerServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetQosManagerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetQosManagerServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetQosManagerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetQosManagerServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetQosManagerServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetQosManagerServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosPingTimeout
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsSettings_GetQosPingTimeout final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetQosPingTimeout) == 0x000004, "Wrong alignment on AccelByteBlueprintsSettings_GetQosPingTimeout");
static_assert(sizeof(AccelByteBlueprintsSettings_GetQosPingTimeout) == 0x000004, "Wrong size on AccelByteBlueprintsSettings_GetQosPingTimeout");
static_assert(offsetof(AccelByteBlueprintsSettings_GetQosPingTimeout, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetQosPingTimeout::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetQosServerLatencyPollIntervalSecs
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs) == 0x000004, "Wrong alignment on AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs");
static_assert(sizeof(AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs) == 0x000004, "Wrong size on AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs");
static_assert(offsetof(AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetQosServerLatencyPollIntervalSecs::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetReportingServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetReportingServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetReportingServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetReportingServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetReportingServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetReportingServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetReportingServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetReportingServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetSessionBrowserServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetSessionBrowserServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetSessionBrowserServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetSessionBrowserServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetSessionBrowserServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetSessionBrowserServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetSessionBrowserServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetSessionBrowserServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetSessionServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetSessionServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetSessionServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetSessionServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetSessionServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetSessionServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetSessionServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetSessionServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetSettingsEnvironment
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetSettingsEnvironment final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetSettingsEnvironment) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetSettingsEnvironment");
static_assert(sizeof(AccelByteBlueprintsSettings_GetSettingsEnvironment) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetSettingsEnvironment");
static_assert(offsetof(AccelByteBlueprintsSettings_GetSettingsEnvironment, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetSettingsEnvironment::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetStatisticServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetStatisticServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetStatisticServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetStatisticServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetStatisticServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetStatisticServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetStatisticServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetStatisticServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetTurnManagerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetTurnManagerServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetTurnManagerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetTurnManagerServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetTurnManagerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetTurnManagerServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetTurnManagerServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetTurnManagerServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.GetUGCServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_GetUGCServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_GetUGCServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_GetUGCServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_GetUGCServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_GetUGCServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_GetUGCServerUrl, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_GetUGCServerUrl::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.IsHttpCacheEnabled
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_IsHttpCacheEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_IsHttpCacheEnabled) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_IsHttpCacheEnabled");
static_assert(sizeof(AccelByteBlueprintsSettings_IsHttpCacheEnabled) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_IsHttpCacheEnabled");
static_assert(offsetof(AccelByteBlueprintsSettings_IsHttpCacheEnabled, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_IsHttpCacheEnabled::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.IsSendPredefinedEvent
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_IsSendPredefinedEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_IsSendPredefinedEvent) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_IsSendPredefinedEvent");
static_assert(sizeof(AccelByteBlueprintsSettings_IsSendPredefinedEvent) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_IsSendPredefinedEvent");
static_assert(offsetof(AccelByteBlueprintsSettings_IsSendPredefinedEvent, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_IsSendPredefinedEvent::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.IsServerUseAMS
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_IsServerUseAMS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_IsServerUseAMS) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_IsServerUseAMS");
static_assert(sizeof(AccelByteBlueprintsSettings_IsServerUseAMS) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_IsServerUseAMS");
static_assert(offsetof(AccelByteBlueprintsSettings_IsServerUseAMS, ReturnValue) == 0x000000, "Member 'AccelByteBlueprintsSettings_IsServerUseAMS::ReturnValue' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.ResetSettings
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_ResetSettings final
{
public:
	ESettingsEnvironment                          Environment;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_ResetSettings) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_ResetSettings");
static_assert(sizeof(AccelByteBlueprintsSettings_ResetSettings) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_ResetSettings");
static_assert(offsetof(AccelByteBlueprintsSettings_ResetSettings, Environment) == 0x000000, "Member 'AccelByteBlueprintsSettings_ResetSettings::Environment' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetAchievementServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetAchievementServerUrl final
{
public:
	class FString                                 CloudSaveServerUrl;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetAchievementServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetAchievementServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetAchievementServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetAchievementServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetAchievementServerUrl, CloudSaveServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetAchievementServerUrl::CloudSaveServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetAppId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetAppId final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetAppId) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetAppId");
static_assert(sizeof(AccelByteBlueprintsSettings_SetAppId) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetAppId");
static_assert(offsetof(AccelByteBlueprintsSettings_SetAppId, AppId) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetAppId::AppId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetBasicServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetBasicServerUrl final
{
public:
	class FString                                 BasicServerUrl;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetBasicServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetBasicServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetBasicServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetBasicServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetBasicServerUrl, BasicServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetBasicServerUrl::BasicServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetChatServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetChatServerUrl final
{
public:
	class FString                                 ChatServerUrl;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetChatServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetChatServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetChatServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetChatServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetChatServerUrl, ChatServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetChatServerUrl::ChatServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetClientId
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetClientId final
{
public:
	class FString                                 ClientId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetClientId) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetClientId");
static_assert(sizeof(AccelByteBlueprintsSettings_SetClientId) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetClientId");
static_assert(offsetof(AccelByteBlueprintsSettings_SetClientId, ClientId) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetClientId::ClientId' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetClientSecret
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetClientSecret final
{
public:
	class FString                                 ClientSecret;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetClientSecret) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetClientSecret");
static_assert(sizeof(AccelByteBlueprintsSettings_SetClientSecret) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetClientSecret");
static_assert(offsetof(AccelByteBlueprintsSettings_SetClientSecret, ClientSecret) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetClientSecret::ClientSecret' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetCloudSaveServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetCloudSaveServerUrl final
{
public:
	class FString                                 CloudSaveServerUrl;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetCloudSaveServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetCloudSaveServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetCloudSaveServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetCloudSaveServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetCloudSaveServerUrl, CloudSaveServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetCloudSaveServerUrl::CloudSaveServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetCloudStorageServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetCloudStorageServerUrl final
{
public:
	class FString                                 CloudStorageServerUrl;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetCloudStorageServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetCloudStorageServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetCloudStorageServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetCloudStorageServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetCloudStorageServerUrl, CloudStorageServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetCloudStorageServerUrl::CloudStorageServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGameProfileServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetGameProfileServerUrl final
{
public:
	class FString                                 GameProfileServerUrl;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetGameProfileServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetGameProfileServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetGameProfileServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetGameProfileServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetGameProfileServerUrl, GameProfileServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetGameProfileServerUrl::GameProfileServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGameTelemetryServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetGameTelemetryServerUrl final
{
public:
	class FString                                 GameTelemetryServerUrl;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetGameTelemetryServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetGameTelemetryServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetGameTelemetryServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetGameTelemetryServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetGameTelemetryServerUrl, GameTelemetryServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetGameTelemetryServerUrl::GameTelemetryServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGDPRServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetGDPRServerUrl final
{
public:
	class FString                                 GDPRServerUrl;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetGDPRServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetGDPRServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetGDPRServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetGDPRServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetGDPRServerUrl, GDPRServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetGDPRServerUrl::GDPRServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetGroupServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetGroupServerUrl final
{
public:
	class FString                                 GroupServerUrl;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetGroupServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetGroupServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetGroupServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetGroupServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetGroupServerUrl, GroupServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetGroupServerUrl::GroupServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetHttpCacheType
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_SetHttpCacheType final
{
public:
	EHttpCacheType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetHttpCacheType) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_SetHttpCacheType");
static_assert(sizeof(AccelByteBlueprintsSettings_SetHttpCacheType) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_SetHttpCacheType");
static_assert(offsetof(AccelByteBlueprintsSettings_SetHttpCacheType, Type) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetHttpCacheType::Type' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetIamServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetIamServerUrl final
{
public:
	class FString                                 IamServerUrl;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetIamServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetIamServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetIamServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetIamServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetIamServerUrl, IamServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetIamServerUrl::IamServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetLeaderboardServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetLeaderboardServerUrl final
{
public:
	class FString                                 LeaderboardServerUrl;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetLeaderboardServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetLeaderboardServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetLeaderboardServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetLeaderboardServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetLeaderboardServerUrl, LeaderboardServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetLeaderboardServerUrl::LeaderboardServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetLobbyServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetLobbyServerUrl final
{
public:
	class FString                                 LobbyServerUrl;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetLobbyServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetLobbyServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetLobbyServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetLobbyServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetLobbyServerUrl, LobbyServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetLobbyServerUrl::LobbyServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetMatchmakingV2ServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl final
{
public:
	class FString                                 MatchmakingV2ServerUrl;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl, MatchmakingV2ServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetMatchmakingV2ServerUrl::MatchmakingV2ServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetNamespace final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetNamespace");
static_assert(sizeof(AccelByteBlueprintsSettings_SetNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetNamespace");
static_assert(offsetof(AccelByteBlueprintsSettings_SetNamespace, Namespace) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetNamespace::Namespace' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetPlatformServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetPlatformServerUrl final
{
public:
	class FString                                 PlatformServerUrl;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetPlatformServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetPlatformServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetPlatformServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetPlatformServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetPlatformServerUrl, PlatformServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetPlatformServerUrl::PlatformServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetPublisherNamespace
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetPublisherNamespace final
{
public:
	class FString                                 PublisherNamespace;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetPublisherNamespace) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetPublisherNamespace");
static_assert(sizeof(AccelByteBlueprintsSettings_SetPublisherNamespace) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetPublisherNamespace");
static_assert(offsetof(AccelByteBlueprintsSettings_SetPublisherNamespace, PublisherNamespace) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetPublisherNamespace::PublisherNamespace' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetQosLatencyPollIntervalSecs
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs final
{
public:
	float                                         QosLatencyPollIntervalSecs;                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs) == 0x000004, "Wrong alignment on AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs");
static_assert(sizeof(AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs) == 0x000004, "Wrong size on AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs");
static_assert(offsetof(AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs, QosLatencyPollIntervalSecs) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetQosLatencyPollIntervalSecs::QosLatencyPollIntervalSecs' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetQosManagerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetQosManagerServerUrl final
{
public:
	class FString                                 QosManagerServerUrl;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetQosManagerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetQosManagerServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetQosManagerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetQosManagerServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetQosManagerServerUrl, QosManagerServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetQosManagerServerUrl::QosManagerServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetQosPingTimeout
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsSettings_SetQosPingTimeout final
{
public:
	float                                         QosPingTimeout;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetQosPingTimeout) == 0x000004, "Wrong alignment on AccelByteBlueprintsSettings_SetQosPingTimeout");
static_assert(sizeof(AccelByteBlueprintsSettings_SetQosPingTimeout) == 0x000004, "Wrong size on AccelByteBlueprintsSettings_SetQosPingTimeout");
static_assert(offsetof(AccelByteBlueprintsSettings_SetQosPingTimeout, QosPingTimeout) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetQosPingTimeout::QosPingTimeout' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetReportingServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetReportingServerUrl final
{
public:
	class FString                                 ReportingServerUrl;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetReportingServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetReportingServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetReportingServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetReportingServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetReportingServerUrl, ReportingServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetReportingServerUrl::ReportingServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetSeasonPassServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetSeasonPassServerUrl final
{
public:
	class FString                                 SeasonPassServerUrl;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetSeasonPassServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetSeasonPassServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetSeasonPassServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetSeasonPassServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetSeasonPassServerUrl, SeasonPassServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetSeasonPassServerUrl::SeasonPassServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetServerQosLatencyPollIntervalSecs
// 0x0004 (0x0004 - 0x0000)
struct AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs final
{
public:
	float                                         QosServerLatencyPollIntervalSecs;                  // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs) == 0x000004, "Wrong alignment on AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs");
static_assert(sizeof(AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs) == 0x000004, "Wrong size on AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs");
static_assert(offsetof(AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs, QosServerLatencyPollIntervalSecs) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetServerQosLatencyPollIntervalSecs::QosServerLatencyPollIntervalSecs' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetServerUseAMS
// 0x0001 (0x0001 - 0x0000)
struct AccelByteBlueprintsSettings_SetServerUseAMS final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetServerUseAMS) == 0x000001, "Wrong alignment on AccelByteBlueprintsSettings_SetServerUseAMS");
static_assert(sizeof(AccelByteBlueprintsSettings_SetServerUseAMS) == 0x000001, "Wrong size on AccelByteBlueprintsSettings_SetServerUseAMS");
static_assert(offsetof(AccelByteBlueprintsSettings_SetServerUseAMS, bEnable) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetServerUseAMS::bEnable' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetSessionBrowserServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetSessionBrowserServerUrl final
{
public:
	class FString                                 SessionBrowserServerUrl;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetSessionBrowserServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetSessionBrowserServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetSessionBrowserServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetSessionBrowserServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetSessionBrowserServerUrl, SessionBrowserServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetSessionBrowserServerUrl::SessionBrowserServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetSessionServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetSessionServerUrl final
{
public:
	class FString                                 SessionServerUrl;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetSessionServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetSessionServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetSessionServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetSessionServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetSessionServerUrl, SessionServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetSessionServerUrl::SessionServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetStatisticServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetStatisticServerUrl final
{
public:
	class FString                                 StatisticServerUrl;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetStatisticServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetStatisticServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetStatisticServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetStatisticServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetStatisticServerUrl, StatisticServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetStatisticServerUrl::StatisticServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetTurnManagerServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetTurnManagerServerUrl final
{
public:
	class FString                                 TurnManagerServerUrl;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetTurnManagerServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetTurnManagerServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetTurnManagerServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetTurnManagerServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetTurnManagerServerUrl, TurnManagerServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetTurnManagerServerUrl::TurnManagerServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsSettings.SetUGCServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AccelByteBlueprintsSettings_SetUGCServerUrl final
{
public:
	class FString                                 UGCServerUrl;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsSettings_SetUGCServerUrl) == 0x000008, "Wrong alignment on AccelByteBlueprintsSettings_SetUGCServerUrl");
static_assert(sizeof(AccelByteBlueprintsSettings_SetUGCServerUrl) == 0x000010, "Wrong size on AccelByteBlueprintsSettings_SetUGCServerUrl");
static_assert(offsetof(AccelByteBlueprintsSettings_SetUGCServerUrl, UGCServerUrl) == 0x000000, "Member 'AccelByteBlueprintsSettings_SetUGCServerUrl::UGCServerUrl' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.CreateUserStatItems
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsStatistic_CreateUserStatItems final
{
public:
	TArray<class FString>                         StatCodes;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsStatistic_CreateUserStatItems) == 0x000008, "Wrong alignment on AccelByteBlueprintsStatistic_CreateUserStatItems");
static_assert(sizeof(AccelByteBlueprintsStatistic_CreateUserStatItems) == 0x000038, "Wrong size on AccelByteBlueprintsStatistic_CreateUserStatItems");
static_assert(offsetof(AccelByteBlueprintsStatistic_CreateUserStatItems, StatCodes) == 0x000000, "Member 'AccelByteBlueprintsStatistic_CreateUserStatItems::StatCodes' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_CreateUserStatItems, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsStatistic_CreateUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_CreateUserStatItems, OnError) == 0x000024, "Member 'AccelByteBlueprintsStatistic_CreateUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.GetAllUserStatItems
// 0x0028 (0x0028 - 0x0000)
struct AccelByteBlueprintsStatistic_GetAllUserStatItems final
{
public:
	TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)> OnSuccess;  // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsStatistic_GetAllUserStatItems) == 0x000004, "Wrong alignment on AccelByteBlueprintsStatistic_GetAllUserStatItems");
static_assert(sizeof(AccelByteBlueprintsStatistic_GetAllUserStatItems) == 0x000028, "Wrong size on AccelByteBlueprintsStatistic_GetAllUserStatItems");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetAllUserStatItems, OnSuccess) == 0x000000, "Member 'AccelByteBlueprintsStatistic_GetAllUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetAllUserStatItems, OnError) == 0x000014, "Member 'AccelByteBlueprintsStatistic_GetAllUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.GetGlobalStatItemsByStatCode
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsGlobalStatItemValueResponse& Result)> OnSuccess;     // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode) == 0x000008, "Wrong alignment on AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode");
static_assert(sizeof(AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode) == 0x000038, "Wrong size on AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode, StatCode) == 0x000000, "Member 'AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode::StatCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode, OnError) == 0x000024, "Member 'AccelByteBlueprintsStatistic_GetGlobalStatItemsByStatCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.GetUserStatItems
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsStatistic_GetUserStatItems final
{
public:
	TArray<class FString>                         StatCodes;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserStatItemPagingSlicedResult& Result)> OnSuccess;  // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsStatistic_GetUserStatItems) == 0x000008, "Wrong alignment on AccelByteBlueprintsStatistic_GetUserStatItems");
static_assert(sizeof(AccelByteBlueprintsStatistic_GetUserStatItems) == 0x000048, "Wrong size on AccelByteBlueprintsStatistic_GetUserStatItems");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetUserStatItems, StatCodes) == 0x000000, "Member 'AccelByteBlueprintsStatistic_GetUserStatItems::StatCodes' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetUserStatItems, Tags) == 0x000010, "Member 'AccelByteBlueprintsStatistic_GetUserStatItems::Tags' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetUserStatItems, OnSuccess) == 0x000020, "Member 'AccelByteBlueprintsStatistic_GetUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_GetUserStatItems, OnError) == 0x000034, "Member 'AccelByteBlueprintsStatistic_GetUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsStatistic.IncrementUserStatItems
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsStatistic_IncrementUserStatItems final
{
public:
	TArray<struct FAccelByteModelsBulkStatItemInc> Data;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FAccelByteModelsBulkStatItemOperationResult>& Result)> OnSuccess; // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsStatistic_IncrementUserStatItems) == 0x000008, "Wrong alignment on AccelByteBlueprintsStatistic_IncrementUserStatItems");
static_assert(sizeof(AccelByteBlueprintsStatistic_IncrementUserStatItems) == 0x000038, "Wrong size on AccelByteBlueprintsStatistic_IncrementUserStatItems");
static_assert(offsetof(AccelByteBlueprintsStatistic_IncrementUserStatItems, Data) == 0x000000, "Member 'AccelByteBlueprintsStatistic_IncrementUserStatItems::Data' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_IncrementUserStatItems, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsStatistic_IncrementUserStatItems::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsStatistic_IncrementUserStatItems, OnError) == 0x000024, "Member 'AccelByteBlueprintsStatistic_IncrementUserStatItems::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.GetPlatformLinks
// 0x0028 (0x0028 - 0x0000)
struct BPUser_GetPlatformLinks final
{
public:
	TDelegate<void(const struct FPagedPlatformLinks& PlatformLinks)> OnSuccess;                      // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_GetPlatformLinks) == 0x000004, "Wrong alignment on BPUser_GetPlatformLinks");
static_assert(sizeof(BPUser_GetPlatformLinks) == 0x000028, "Wrong size on BPUser_GetPlatformLinks");
static_assert(offsetof(BPUser_GetPlatformLinks, OnSuccess) == 0x000000, "Member 'BPUser_GetPlatformLinks::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_GetPlatformLinks, OnError) == 0x000014, "Member 'BPUser_GetPlatformLinks::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.GetUserEligibleToPlay
// 0x0028 (0x0028 - 0x0000)
struct BPUser_GetUserEligibleToPlay final
{
public:
	TDelegate<void(const bool Result)>            OnSuccess;                                         // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_GetUserEligibleToPlay) == 0x000004, "Wrong alignment on BPUser_GetUserEligibleToPlay");
static_assert(sizeof(BPUser_GetUserEligibleToPlay) == 0x000028, "Wrong size on BPUser_GetUserEligibleToPlay");
static_assert(offsetof(BPUser_GetUserEligibleToPlay, OnSuccess) == 0x000000, "Member 'BPUser_GetUserEligibleToPlay::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_GetUserEligibleToPlay, OnError) == 0x000014, "Member 'BPUser_GetUserEligibleToPlay::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.LinkOtherPlatform
// 0x0040 (0x0040 - 0x0000)
struct BPUser_LinkOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ticket;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_LinkOtherPlatform) == 0x000008, "Wrong alignment on BPUser_LinkOtherPlatform");
static_assert(sizeof(BPUser_LinkOtherPlatform) == 0x000040, "Wrong size on BPUser_LinkOtherPlatform");
static_assert(offsetof(BPUser_LinkOtherPlatform, PlatformType) == 0x000000, "Member 'BPUser_LinkOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(BPUser_LinkOtherPlatform, Ticket) == 0x000008, "Member 'BPUser_LinkOtherPlatform::Ticket' has a wrong offset!");
static_assert(offsetof(BPUser_LinkOtherPlatform, OnSuccess) == 0x000018, "Member 'BPUser_LinkOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_LinkOtherPlatform, OnError) == 0x00002C, "Member 'BPUser_LinkOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.LoginWithDeviceId
// 0x0028 (0x0028 - 0x0000)
struct BPUser_LoginWithDeviceId final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_LoginWithDeviceId) == 0x000004, "Wrong alignment on BPUser_LoginWithDeviceId");
static_assert(sizeof(BPUser_LoginWithDeviceId) == 0x000028, "Wrong size on BPUser_LoginWithDeviceId");
static_assert(offsetof(BPUser_LoginWithDeviceId, OnSuccess) == 0x000000, "Member 'BPUser_LoginWithDeviceId::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithDeviceId, OnError) == 0x000014, "Member 'BPUser_LoginWithDeviceId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.LoginWithOtherPlatform
// 0x0048 (0x0048 - 0x0000)
struct BPUser_LoginWithOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Token;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x002C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCreateHeadless;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPUser_LoginWithOtherPlatform) == 0x000008, "Wrong alignment on BPUser_LoginWithOtherPlatform");
static_assert(sizeof(BPUser_LoginWithOtherPlatform) == 0x000048, "Wrong size on BPUser_LoginWithOtherPlatform");
static_assert(offsetof(BPUser_LoginWithOtherPlatform, PlatformType) == 0x000000, "Member 'BPUser_LoginWithOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithOtherPlatform, Token) == 0x000008, "Member 'BPUser_LoginWithOtherPlatform::Token' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithOtherPlatform, OnSuccess) == 0x000018, "Member 'BPUser_LoginWithOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithOtherPlatform, OnError) == 0x00002C, "Member 'BPUser_LoginWithOtherPlatform::OnError' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithOtherPlatform, bCreateHeadless) == 0x000040, "Member 'BPUser_LoginWithOtherPlatform::bCreateHeadless' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.LoginWithUsername
// 0x0048 (0x0048 - 0x0000)
struct BPUser_LoginWithUsername final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_LoginWithUsername) == 0x000008, "Wrong alignment on BPUser_LoginWithUsername");
static_assert(sizeof(BPUser_LoginWithUsername) == 0x000048, "Wrong size on BPUser_LoginWithUsername");
static_assert(offsetof(BPUser_LoginWithUsername, Username) == 0x000000, "Member 'BPUser_LoginWithUsername::Username' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithUsername, Password) == 0x000010, "Member 'BPUser_LoginWithUsername::Password' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithUsername, OnSuccess) == 0x000020, "Member 'BPUser_LoginWithUsername::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_LoginWithUsername, OnError) == 0x000034, "Member 'BPUser_LoginWithUsername::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.Logout
// 0x0028 (0x0028 - 0x0000)
struct BPUser_Logout final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_Logout) == 0x000004, "Wrong alignment on BPUser_Logout");
static_assert(sizeof(BPUser_Logout) == 0x000028, "Wrong size on BPUser_Logout");
static_assert(offsetof(BPUser_Logout, OnSuccess) == 0x000000, "Member 'BPUser_Logout::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_Logout, OnError) == 0x000014, "Member 'BPUser_Logout::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.Register
// 0x0078 (0x0078 - 0x0000)
struct BPUser_Register final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRegisterResponse& Result)> OnSuccess;                               // 0x0050(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0064(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_Register) == 0x000008, "Wrong alignment on BPUser_Register");
static_assert(sizeof(BPUser_Register) == 0x000078, "Wrong size on BPUser_Register");
static_assert(offsetof(BPUser_Register, Username) == 0x000000, "Member 'BPUser_Register::Username' has a wrong offset!");
static_assert(offsetof(BPUser_Register, Password) == 0x000010, "Member 'BPUser_Register::Password' has a wrong offset!");
static_assert(offsetof(BPUser_Register, DisplayName) == 0x000020, "Member 'BPUser_Register::DisplayName' has a wrong offset!");
static_assert(offsetof(BPUser_Register, Country) == 0x000030, "Member 'BPUser_Register::Country' has a wrong offset!");
static_assert(offsetof(BPUser_Register, DateOfBirth) == 0x000040, "Member 'BPUser_Register::DateOfBirth' has a wrong offset!");
static_assert(offsetof(BPUser_Register, OnSuccess) == 0x000050, "Member 'BPUser_Register::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_Register, OnError) == 0x000064, "Member 'BPUser_Register::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.ResetPassword
// 0x0058 (0x0058 - 0x0000)
struct BPUser_ResetPassword final
{
public:
	class FString                                 VerificationCode;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPassword;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_ResetPassword) == 0x000008, "Wrong alignment on BPUser_ResetPassword");
static_assert(sizeof(BPUser_ResetPassword) == 0x000058, "Wrong size on BPUser_ResetPassword");
static_assert(offsetof(BPUser_ResetPassword, VerificationCode) == 0x000000, "Member 'BPUser_ResetPassword::VerificationCode' has a wrong offset!");
static_assert(offsetof(BPUser_ResetPassword, EmailAddress) == 0x000010, "Member 'BPUser_ResetPassword::EmailAddress' has a wrong offset!");
static_assert(offsetof(BPUser_ResetPassword, NewPassword) == 0x000020, "Member 'BPUser_ResetPassword::NewPassword' has a wrong offset!");
static_assert(offsetof(BPUser_ResetPassword, OnSuccess) == 0x000030, "Member 'BPUser_ResetPassword::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_ResetPassword, OnError) == 0x000044, "Member 'BPUser_ResetPassword::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.SendResetPasswordCode
// 0x0038 (0x0038 - 0x0000)
struct BPUser_SendResetPasswordCode final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_SendResetPasswordCode) == 0x000008, "Wrong alignment on BPUser_SendResetPasswordCode");
static_assert(sizeof(BPUser_SendResetPasswordCode) == 0x000038, "Wrong size on BPUser_SendResetPasswordCode");
static_assert(offsetof(BPUser_SendResetPasswordCode, EmailAddress) == 0x000000, "Member 'BPUser_SendResetPasswordCode::EmailAddress' has a wrong offset!");
static_assert(offsetof(BPUser_SendResetPasswordCode, OnSuccess) == 0x000010, "Member 'BPUser_SendResetPasswordCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_SendResetPasswordCode, OnError) == 0x000024, "Member 'BPUser_SendResetPasswordCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.SendUpgradeVerificationCode
// 0x0038 (0x0038 - 0x0000)
struct BPUser_SendUpgradeVerificationCode final
{
public:
	class FString                                 EmailAddress;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_SendUpgradeVerificationCode) == 0x000008, "Wrong alignment on BPUser_SendUpgradeVerificationCode");
static_assert(sizeof(BPUser_SendUpgradeVerificationCode) == 0x000038, "Wrong size on BPUser_SendUpgradeVerificationCode");
static_assert(offsetof(BPUser_SendUpgradeVerificationCode, EmailAddress) == 0x000000, "Member 'BPUser_SendUpgradeVerificationCode::EmailAddress' has a wrong offset!");
static_assert(offsetof(BPUser_SendUpgradeVerificationCode, OnSuccess) == 0x000010, "Member 'BPUser_SendUpgradeVerificationCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_SendUpgradeVerificationCode, OnError) == 0x000024, "Member 'BPUser_SendUpgradeVerificationCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.SendVerificationCode
// 0x0028 (0x0028 - 0x0000)
struct BPUser_SendVerificationCode final
{
public:
	TDelegate<void()>                             OnSuccess;                                         // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_SendVerificationCode) == 0x000004, "Wrong alignment on BPUser_SendVerificationCode");
static_assert(sizeof(BPUser_SendVerificationCode) == 0x000028, "Wrong size on BPUser_SendVerificationCode");
static_assert(offsetof(BPUser_SendVerificationCode, OnSuccess) == 0x000000, "Member 'BPUser_SendVerificationCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_SendVerificationCode, OnError) == 0x000014, "Member 'BPUser_SendVerificationCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.UnlinkAllOtherPlatform
// 0x002C (0x002C - 0x0000)
struct BPUser_UnlinkAllOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_UnlinkAllOtherPlatform) == 0x000004, "Wrong alignment on BPUser_UnlinkAllOtherPlatform");
static_assert(sizeof(BPUser_UnlinkAllOtherPlatform) == 0x00002C, "Wrong size on BPUser_UnlinkAllOtherPlatform");
static_assert(offsetof(BPUser_UnlinkAllOtherPlatform, PlatformType) == 0x000000, "Member 'BPUser_UnlinkAllOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkAllOtherPlatform, OnSuccess) == 0x000004, "Member 'BPUser_UnlinkAllOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkAllOtherPlatform, OnError) == 0x000018, "Member 'BPUser_UnlinkAllOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.UnlinkAllOtherPlatformId
// 0x0038 (0x0038 - 0x0000)
struct BPUser_UnlinkAllOtherPlatformId final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_UnlinkAllOtherPlatformId) == 0x000008, "Wrong alignment on BPUser_UnlinkAllOtherPlatformId");
static_assert(sizeof(BPUser_UnlinkAllOtherPlatformId) == 0x000038, "Wrong size on BPUser_UnlinkAllOtherPlatformId");
static_assert(offsetof(BPUser_UnlinkAllOtherPlatformId, PlatformId) == 0x000000, "Member 'BPUser_UnlinkAllOtherPlatformId::PlatformId' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkAllOtherPlatformId, OnSuccess) == 0x000010, "Member 'BPUser_UnlinkAllOtherPlatformId::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkAllOtherPlatformId, OnError) == 0x000024, "Member 'BPUser_UnlinkAllOtherPlatformId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.UnlinkOtherPlatform
// 0x002C (0x002C - 0x0000)
struct BPUser_UnlinkOtherPlatform final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_UnlinkOtherPlatform) == 0x000004, "Wrong alignment on BPUser_UnlinkOtherPlatform");
static_assert(sizeof(BPUser_UnlinkOtherPlatform) == 0x00002C, "Wrong size on BPUser_UnlinkOtherPlatform");
static_assert(offsetof(BPUser_UnlinkOtherPlatform, PlatformType) == 0x000000, "Member 'BPUser_UnlinkOtherPlatform::PlatformType' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkOtherPlatform, OnSuccess) == 0x000004, "Member 'BPUser_UnlinkOtherPlatform::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkOtherPlatform, OnError) == 0x000018, "Member 'BPUser_UnlinkOtherPlatform::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.UnlinkOtherPlatformId
// 0x0038 (0x0038 - 0x0000)
struct BPUser_UnlinkOtherPlatformId final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_UnlinkOtherPlatformId) == 0x000008, "Wrong alignment on BPUser_UnlinkOtherPlatformId");
static_assert(sizeof(BPUser_UnlinkOtherPlatformId) == 0x000038, "Wrong size on BPUser_UnlinkOtherPlatformId");
static_assert(offsetof(BPUser_UnlinkOtherPlatformId, PlatformId) == 0x000000, "Member 'BPUser_UnlinkOtherPlatformId::PlatformId' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkOtherPlatformId, OnSuccess) == 0x000010, "Member 'BPUser_UnlinkOtherPlatformId::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkOtherPlatformId, OnError) == 0x000024, "Member 'BPUser_UnlinkOtherPlatformId::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.UnlinkOtherPlatformWithCustomErrorHandler
// 0x002C (0x002C - 0x0000)
struct BPUser_UnlinkOtherPlatformWithCustomErrorHandler final
{
public:
	EAccelBytePlatformType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnSuccess;                                         // 0x0004(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage, const struct FJsonObjectWrapper& ErrorObject)> OnError; // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_UnlinkOtherPlatformWithCustomErrorHandler) == 0x000004, "Wrong alignment on BPUser_UnlinkOtherPlatformWithCustomErrorHandler");
static_assert(sizeof(BPUser_UnlinkOtherPlatformWithCustomErrorHandler) == 0x00002C, "Wrong size on BPUser_UnlinkOtherPlatformWithCustomErrorHandler");
static_assert(offsetof(BPUser_UnlinkOtherPlatformWithCustomErrorHandler, PlatformType) == 0x000000, "Member 'BPUser_UnlinkOtherPlatformWithCustomErrorHandler::PlatformType' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkOtherPlatformWithCustomErrorHandler, OnSuccess) == 0x000004, "Member 'BPUser_UnlinkOtherPlatformWithCustomErrorHandler::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_UnlinkOtherPlatformWithCustomErrorHandler, OnError) == 0x000018, "Member 'BPUser_UnlinkOtherPlatformWithCustomErrorHandler::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.Upgrade
// 0x0048 (0x0048 - 0x0000)
struct BPUser_Upgrade final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Result)> OnSuccess;                                // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_Upgrade) == 0x000008, "Wrong alignment on BPUser_Upgrade");
static_assert(sizeof(BPUser_Upgrade) == 0x000048, "Wrong size on BPUser_Upgrade");
static_assert(offsetof(BPUser_Upgrade, Username) == 0x000000, "Member 'BPUser_Upgrade::Username' has a wrong offset!");
static_assert(offsetof(BPUser_Upgrade, Password) == 0x000010, "Member 'BPUser_Upgrade::Password' has a wrong offset!");
static_assert(offsetof(BPUser_Upgrade, OnSuccess) == 0x000020, "Member 'BPUser_Upgrade::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_Upgrade, OnError) == 0x000034, "Member 'BPUser_Upgrade::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.UpgradeAndVerify
// 0x0058 (0x0058 - 0x0000)
struct BPUser_UpgradeAndVerify final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerificationCode;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccountUserData& Result)> OnSuccess;                                // 0x0030(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0044(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_UpgradeAndVerify) == 0x000008, "Wrong alignment on BPUser_UpgradeAndVerify");
static_assert(sizeof(BPUser_UpgradeAndVerify) == 0x000058, "Wrong size on BPUser_UpgradeAndVerify");
static_assert(offsetof(BPUser_UpgradeAndVerify, Username) == 0x000000, "Member 'BPUser_UpgradeAndVerify::Username' has a wrong offset!");
static_assert(offsetof(BPUser_UpgradeAndVerify, Password) == 0x000010, "Member 'BPUser_UpgradeAndVerify::Password' has a wrong offset!");
static_assert(offsetof(BPUser_UpgradeAndVerify, VerificationCode) == 0x000020, "Member 'BPUser_UpgradeAndVerify::VerificationCode' has a wrong offset!");
static_assert(offsetof(BPUser_UpgradeAndVerify, OnSuccess) == 0x000030, "Member 'BPUser_UpgradeAndVerify::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_UpgradeAndVerify, OnError) == 0x000044, "Member 'BPUser_UpgradeAndVerify::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.BPUser.Verify
// 0x0038 (0x0038 - 0x0000)
struct BPUser_Verify final
{
public:
	class FString                                 VerificationCode;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPUser_Verify) == 0x000008, "Wrong alignment on BPUser_Verify");
static_assert(sizeof(BPUser_Verify) == 0x000038, "Wrong size on BPUser_Verify");
static_assert(offsetof(BPUser_Verify, VerificationCode) == 0x000000, "Member 'BPUser_Verify::VerificationCode' has a wrong offset!");
static_assert(offsetof(BPUser_Verify, OnSuccess) == 0x000010, "Member 'BPUser_Verify::OnSuccess' has a wrong offset!");
static_assert(offsetof(BPUser_Verify, OnError) == 0x000024, "Member 'BPUser_Verify::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.CreateUserProfile
// 0x00E8 (0x00E8 - 0x0000)
struct AccelByteBlueprintsUserProfile_CreateUserProfile final
{
public:
	struct FAccelByteModelsUserProfileCreateRequest ProfileCreateRequest;                            // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)> OnSuccess;                 // 0x00C0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00D4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsUserProfile_CreateUserProfile) == 0x000008, "Wrong alignment on AccelByteBlueprintsUserProfile_CreateUserProfile");
static_assert(sizeof(AccelByteBlueprintsUserProfile_CreateUserProfile) == 0x0000E8, "Wrong size on AccelByteBlueprintsUserProfile_CreateUserProfile");
static_assert(offsetof(AccelByteBlueprintsUserProfile_CreateUserProfile, ProfileCreateRequest) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_CreateUserProfile::ProfileCreateRequest' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_CreateUserProfile, OnSuccess) == 0x0000C0, "Member 'AccelByteBlueprintsUserProfile_CreateUserProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_CreateUserProfile, OnError) == 0x0000D4, "Member 'AccelByteBlueprintsUserProfile_CreateUserProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GenerateUploadURL
// 0x0040 (0x0040 - 0x0000)
struct AccelByteBlueprintsUserProfile_GenerateUploadURL final
{
public:
	class FString                                 Folder;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteFileType                            FileType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)> OnSuccess;      // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsUserProfile_GenerateUploadURL) == 0x000008, "Wrong alignment on AccelByteBlueprintsUserProfile_GenerateUploadURL");
static_assert(sizeof(AccelByteBlueprintsUserProfile_GenerateUploadURL) == 0x000040, "Wrong size on AccelByteBlueprintsUserProfile_GenerateUploadURL");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURL, Folder) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURL::Folder' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURL, FileType) == 0x000010, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURL::FileType' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURL, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURL::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURL, OnError) == 0x000028, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURL::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GenerateUploadURLForUserContent
// 0x0040 (0x0040 - 0x0000)
struct AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteFileType                            FileType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FAccelByteModelsUserProfileUploadURLResult& Result)> OnSuccess;      // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent) == 0x000008, "Wrong alignment on AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent");
static_assert(sizeof(AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent) == 0x000040, "Wrong size on AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent, UserId) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent::UserId' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent, FileType) == 0x000010, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent::FileType' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent, OnSuccess) == 0x000014, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent, OnError) == 0x000028, "Member 'AccelByteBlueprintsUserProfile_GenerateUploadURLForUserContent::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GetPrivateCustomAttributes
// 0x0028 (0x0028 - 0x0000)
struct AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes final
{
public:
	TDelegate<void(const struct FJsonObjectWrapper& Result)> OnSuccess;                              // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes) == 0x000004, "Wrong alignment on AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes");
static_assert(sizeof(AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes) == 0x000028, "Wrong size on AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes, OnSuccess) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes, OnError) == 0x000014, "Member 'AccelByteBlueprintsUserProfile_GetPrivateCustomAttributes::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.GetUserProfile
// 0x0028 (0x0028 - 0x0000)
struct AccelByteBlueprintsUserProfile_GetUserProfile final
{
public:
	TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)> OnSuccess;                 // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsUserProfile_GetUserProfile) == 0x000004, "Wrong alignment on AccelByteBlueprintsUserProfile_GetUserProfile");
static_assert(sizeof(AccelByteBlueprintsUserProfile_GetUserProfile) == 0x000028, "Wrong size on AccelByteBlueprintsUserProfile_GetUserProfile");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GetUserProfile, OnSuccess) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_GetUserProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_GetUserProfile, OnError) == 0x000014, "Member 'AccelByteBlueprintsUserProfile_GetUserProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.UpdatePrivateCustomAttributes
// 0x0048 (0x0048 - 0x0000)
struct AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes final
{
public:
	struct FJsonObjectWrapper                     PrivateCustomAttributesUpdateRequest;              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FJsonObjectWrapper& Result)> OnSuccess;                              // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0034(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes) == 0x000008, "Wrong alignment on AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes");
static_assert(sizeof(AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes) == 0x000048, "Wrong size on AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes");
static_assert(offsetof(AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes, PrivateCustomAttributesUpdateRequest) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes::PrivateCustomAttributesUpdateRequest' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes, OnSuccess) == 0x000020, "Member 'AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes, OnError) == 0x000034, "Member 'AccelByteBlueprintsUserProfile_UpdatePrivateCustomAttributes::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsUserProfile.UpdateUserProfile
// 0x00F8 (0x00F8 - 0x0000)
struct AccelByteBlueprintsUserProfile_UpdateUserProfile final
{
public:
	struct FAccelByteModelsUserProfileUpdateRequest ProfileUpdateRequest;                            // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsUserProfileInfo& Result)> OnSuccess;                 // 0x00D0(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x00E4(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsUserProfile_UpdateUserProfile) == 0x000008, "Wrong alignment on AccelByteBlueprintsUserProfile_UpdateUserProfile");
static_assert(sizeof(AccelByteBlueprintsUserProfile_UpdateUserProfile) == 0x0000F8, "Wrong size on AccelByteBlueprintsUserProfile_UpdateUserProfile");
static_assert(offsetof(AccelByteBlueprintsUserProfile_UpdateUserProfile, ProfileUpdateRequest) == 0x000000, "Member 'AccelByteBlueprintsUserProfile_UpdateUserProfile::ProfileUpdateRequest' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_UpdateUserProfile, OnSuccess) == 0x0000D0, "Member 'AccelByteBlueprintsUserProfile_UpdateUserProfile::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsUserProfile_UpdateUserProfile, OnError) == 0x0000E4, "Member 'AccelByteBlueprintsUserProfile_UpdateUserProfile::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsWallet.GetWalletInfoByCurrencyCode
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsWalletInfo& Result)> OnSuccess;                      // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode) == 0x000008, "Wrong alignment on AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode");
static_assert(sizeof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode) == 0x000038, "Wrong size on AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode");
static_assert(offsetof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode, CurrencyCode) == 0x000000, "Member 'AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode::CurrencyCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode, OnError) == 0x000024, "Member 'AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCode::OnError' has a wrong offset!");

// Function AccelByteUe4Sdk.AccelByteBlueprintsWallet.GetWalletInfoByCurrencyCodeV2
// 0x0038 (0x0038 - 0x0000)
struct AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2 final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAccelByteModelsWalletInfoResponse& Result)> OnSuccess;              // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ErrorCode, const class FString& ErrorMessage)> OnError;                     // 0x0024(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2) == 0x000008, "Wrong alignment on AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2");
static_assert(sizeof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2) == 0x000038, "Wrong size on AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2");
static_assert(offsetof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2, CurrencyCode) == 0x000000, "Member 'AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2::CurrencyCode' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2, OnSuccess) == 0x000010, "Member 'AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2::OnSuccess' has a wrong offset!");
static_assert(offsetof(AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2, OnError) == 0x000024, "Member 'AccelByteBlueprintsWallet_GetWalletInfoByCurrencyCodeV2::OnError' has a wrong offset!");

}

