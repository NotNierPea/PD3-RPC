#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChromaSDKPlugin

#include "Basic.hpp"

#include "ChromaSDKPlugin_classes.hpp"
#include "ChromaSDKPlugin_parameters.hpp"


namespace SDK
{

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroAllKeys");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroAllKeys Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroAllKeysAllFramesOffset");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroAllKeysAllFramesOffsetName");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroAllKeysName");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroTargetAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroTargetAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroTargetAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroTargetAllKeysAllFramesOffset");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AddNonZeroTargetAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AddNonZeroTargetAllKeysAllFramesOffsetName");

	Params::ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AppendAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AppendAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AppendAllFrames");

	Params::ChromaSDKPluginBPLibrary_AppendAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AppendAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::AppendAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "AppendAllFramesName");

	Params::ChromaSDKPluginBPLibrary_AppendAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectCustom1D
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EChromaSDKDevice1DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLinearColor>&      colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FChromaSDKEffectResult           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FChromaSDKEffectResult UChromaSDKPluginBPLibrary::ChromaSDKCreateEffectCustom1D(EChromaSDKDevice1DEnum device, const TArray<struct FLinearColor>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKCreateEffectCustom1D");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D Parms{};

	Parms.device = device;
	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectCustom2D
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EChromaSDKDevice2DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FChromaSDKColors>&  colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FChromaSDKEffectResult           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FChromaSDKEffectResult UChromaSDKPluginBPLibrary::ChromaSDKCreateEffectCustom2D(EChromaSDKDevice2DEnum device, const TArray<struct FChromaSDKColors>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKCreateEffectCustom2D");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D Parms{};

	Parms.device = device;
	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectKeyboardCustom2D
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FChromaSDKColors>&  colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FChromaSDKEffectResult           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FChromaSDKEffectResult UChromaSDKPluginBPLibrary::ChromaSDKCreateEffectKeyboardCustom2D(const TArray<struct FChromaSDKColors>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKCreateEffectKeyboardCustom2D");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D Parms{};

	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectNone
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FChromaSDKEffectResult           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FChromaSDKEffectResult UChromaSDKPluginBPLibrary::ChromaSDKCreateEffectNone(EChromaSDKDeviceEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKCreateEffectNone");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectStatic
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FChromaSDKEffectResult           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FChromaSDKEffectResult UChromaSDKPluginBPLibrary::ChromaSDKCreateEffectStatic(EChromaSDKDeviceEnum device, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKCreateEffectStatic");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic Parms{};

	Parms.device = device;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKDeleteEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FChromaSDKGuid&            effectId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::ChromaSDKDeleteEffect(const struct FChromaSDKGuid& effectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKDeleteEffect");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect Parms{};

	Parms.effectId = std::move(effectId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKInit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::ChromaSDKInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKInit");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKInit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKInitSDK
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FChromaSDKAppInfoType&     appInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::ChromaSDKInitSDK(const struct FChromaSDKAppInfoType& appInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKInitSDK");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKInitSDK Parms{};

	Parms.appInfo = std::move(appInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKSetEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FChromaSDKGuid&            effectId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::ChromaSDKSetEffect(const struct FChromaSDKGuid& effectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKSetEffect");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKSetEffect Parms{};

	Parms.effectId = std::move(effectId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKUnInit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::ChromaSDKUnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ChromaSDKUnInit");

	Params::ChromaSDKPluginBPLibrary_ChromaSDKUnInit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ClearAll
// (Final, Native, Static, Public, BlueprintCallable)

void UChromaSDKPluginBPLibrary::ClearAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ClearAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ClearAnimationType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::ClearAnimationType(EChromaSDKDeviceEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ClearAnimationType");

	Params::ChromaSDKPluginBPLibrary_ClearAnimationType Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAll
// (Final, Native, Static, Public, BlueprintCallable)

void UChromaSDKPluginBPLibrary::CloseAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CloseAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             animationId                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CloseAnimation(const int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CloseAnimation");

	Params::ChromaSDKPluginBPLibrary_CloseAnimation Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CloseAnimationName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CloseAnimationName");

	Params::ChromaSDKPluginBPLibrary_CloseAnimationName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyAllKeys");

	Params::ChromaSDKPluginBPLibrary_CopyAllKeys Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyAllKeysName");

	Params::ChromaSDKPluginBPLibrary_CopyAllKeysName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyAnimation(int32 sourceAnimationId, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyAnimation");

	Params::ChromaSDKPluginBPLibrary_CopyAnimation Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyAnimationName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyAnimationName");

	Params::ChromaSDKPluginBPLibrary_CopyAnimationName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeyColor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyKeyColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyKeyColor");

	Params::ChromaSDKPluginBPLibrary_CopyKeyColor Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameIndex = frameIndex;
	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeyColorName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyKeyColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyKeyColorName");

	Params::ChromaSDKPluginBPLibrary_CopyKeyColorName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameIndex = frameIndex;
	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyKeysColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyKeysColor");

	Params::ChromaSDKPluginBPLibrary_CopyKeysColor Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorAllFrames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyKeysColorAllFrames(int32 sourceAnimationId, int32 targetAnimationId, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyKeysColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyKeysColorAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyKeysColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyKeysColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyKeysColorName");

	Params::ChromaSDKPluginBPLibrary_CopyKeysColorName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeys");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysAllFramesOffset");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysAllFramesOffsetName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysOffset");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameId = frameId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroAllKeysOffsetName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameId = frameId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeyColor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroKeyColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroKeyColor");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameIndex = frameIndex;
	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeyColorName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroKeyColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroKeyColorName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameIndex = frameIndex;
	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroKeysColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroKeysColor");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorAllFrames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroKeysColorAllFrames(int32 sourceAnimationId, int32 targetAnimationId, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroKeysColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroKeysColorAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroKeysColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroKeysColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroKeysColorName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroTargetAllKeys");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroTargetAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroTargetAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroTargetAllKeysAllFramesOffset");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroTargetAllKeysAllFramesOffsetName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyNonZeroTargetAllKeysName");

	Params::ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyZeroTargetAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyZeroTargetAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyZeroTargetAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::CopyZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CopyZeroTargetAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateColors1D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice1DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLinearColor> UChromaSDKPluginBPLibrary::CreateColors1D(EChromaSDKDevice1DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CreateColors1D");

	Params::ChromaSDKPluginBPLibrary_CreateColors1D Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateColors2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice2DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FChromaSDKColors> UChromaSDKPluginBPLibrary::CreateColors2D(EChromaSDKDevice2DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CreateColors2D");

	Params::ChromaSDKPluginBPLibrary_CreateColors2D Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColors1D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice1DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLinearColor> UChromaSDKPluginBPLibrary::CreateRandomColors1D(EChromaSDKDevice1DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CreateRandomColors1D");

	Params::ChromaSDKPluginBPLibrary_CreateRandomColors1D Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColors2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice2DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FChromaSDKColors> UChromaSDKPluginBPLibrary::CreateRandomColors2D(EChromaSDKDevice2DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CreateRandomColors2D");

	Params::ChromaSDKPluginBPLibrary_CreateRandomColors2D Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColorsBlackAndWhite1D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice1DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLinearColor> UChromaSDKPluginBPLibrary::CreateRandomColorsBlackAndWhite1D(EChromaSDKDevice1DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CreateRandomColorsBlackAndWhite1D");

	Params::ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColorsBlackAndWhite2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice2DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FChromaSDKColors> UChromaSDKPluginBPLibrary::CreateRandomColorsBlackAndWhite2D(EChromaSDKDevice2DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "CreateRandomColorsBlackAndWhite2D");

	Params::ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFirstFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::DuplicateFirstFrame(int32 animationId, int32 frameCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "DuplicateFirstFrame");

	Params::ChromaSDKPluginBPLibrary_DuplicateFirstFrame Parms{};

	Parms.animationId = animationId;
	Parms.frameCount = frameCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFirstFrameName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(const class FString& animationName, int32 frameCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "DuplicateFirstFrameName");

	Params::ChromaSDKPluginBPLibrary_DuplicateFirstFrameName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameCount = frameCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::DuplicateFrames(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "DuplicateFrames");

	Params::ChromaSDKPluginBPLibrary_DuplicateFrames Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::DuplicateFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "DuplicateFramesName");

	Params::ChromaSDKPluginBPLibrary_DuplicateFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateMirrorFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::DuplicateMirrorFrames(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "DuplicateMirrorFrames");

	Params::ChromaSDKPluginBPLibrary_DuplicateMirrorFrames Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateMirrorFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "DuplicateMirrorFramesName");

	Params::ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeEndFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   fade                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FadeEndFrames(int32 animationId, int32 fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FadeEndFrames");

	Params::ChromaSDKPluginBPLibrary_FadeEndFrames Parms{};

	Parms.animationId = animationId;
	Parms.fade = fade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeEndFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   fade                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FadeEndFramesName(const class FString& animationName, int32 fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FadeEndFramesName");

	Params::ChromaSDKPluginBPLibrary_FadeEndFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.fade = fade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeStartFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   fade                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FadeStartFrames(int32 animationId, int32 fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FadeStartFrames");

	Params::ChromaSDKPluginBPLibrary_FadeStartFrames Parms{};

	Parms.animationId = animationId;
	Parms.fade = fade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeStartFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   fade                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FadeStartFramesName(const class FString& animationName, int32 fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FadeStartFramesName");

	Params::ChromaSDKPluginBPLibrary_FadeStartFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.fade = fade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColor");

	Params::ChromaSDKPluginBPLibrary_FillColor Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorAllFrames(int32 animationId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_FillColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_FillColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_FillColorAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorName");

	Params::ChromaSDKPluginBPLibrary_FillColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorRGB");

	Params::ChromaSDKPluginBPLibrary_FillColorRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillColorRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillColorRGBName");

	Params::ChromaSDKPluginBPLibrary_FillColorRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColor");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColor Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorAllFrames(int32 animationId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorName");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorRGB");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillNonZeroColorRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillNonZeroColorRGBName");

	Params::ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColors(int32 animationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColors");

	Params::ChromaSDKPluginBPLibrary_FillRandomColors Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsAllFrames(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsAllFrames");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsAllFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsAllFramesName");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhite
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhite(int32 animationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsBlackAndWhite");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFrames(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsBlackAndWhiteAllFrames");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsBlackAndWhiteAllFramesName");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteName(const class FString& animationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsBlackAndWhiteName");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillRandomColorsName(const class FString& animationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillRandomColorsName");

	Params::ChromaSDKPluginBPLibrary_FillRandomColorsName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsAllFrames(int32 animationId, int32 threshold, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsAllFrames");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.threshold = threshold;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(const class FString& animationName, int32 threshold, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsAllFramesName");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.threshold = threshold;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGB(int32 animationId, int32 threshold, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.threshold = threshold;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(const class FString& animationName, int32 threshold, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.threshold = threshold;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsMinMaxAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minThreshold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minRed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minGreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minBlue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxThreshold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxRed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxGreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxBlue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGB(int32 animationId, int32 minThreshold, int32 minRed, int32 minGreen, int32 minBlue, int32 maxThreshold, int32 maxRed, int32 maxGreen, int32 maxBlue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsMinMaxAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.minThreshold = minThreshold;
	Parms.minRed = minRed;
	Parms.minGreen = minGreen;
	Parms.minBlue = minBlue;
	Parms.maxThreshold = maxThreshold;
	Parms.maxRed = maxRed;
	Parms.maxGreen = maxGreen;
	Parms.maxBlue = maxBlue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsMinMaxAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minThreshold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minRed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minGreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   minBlue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxThreshold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxRed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxGreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   maxBlue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(const class FString& animationName, int32 minThreshold, int32 minRed, int32 minGreen, int32 minBlue, int32 maxThreshold, int32 maxRed, int32 maxGreen, int32 maxBlue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsMinMaxAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.minThreshold = minThreshold;
	Parms.minRed = minRed;
	Parms.minGreen = minGreen;
	Parms.minBlue = minBlue;
	Parms.maxThreshold = maxThreshold;
	Parms.maxRed = maxRed;
	Parms.maxGreen = maxGreen;
	Parms.maxBlue = maxBlue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsRGB(int32 animationId, int32 frameId, int32 threshold, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsRGB");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.threshold = threshold;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(const class FString& animationName, int32 frameId, int32 threshold, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdColorsRGBName");

	Params::ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.threshold = threshold;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdRGBColorsAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   redThreshold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   greenThreshold                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blueThreshold                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdRGBColorsAllFramesRGB(int32 animationId, int32 redThreshold, int32 greenThreshold, int32 blueThreshold, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdRGBColorsAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.redThreshold = redThreshold;
	Parms.greenThreshold = greenThreshold;
	Parms.blueThreshold = blueThreshold;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdRGBColorsAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   redThreshold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   greenThreshold                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blueThreshold                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillThresholdRGBColorsAllFramesRGBName(const class FString& animationName, int32 redThreshold, int32 greenThreshold, int32 blueThreshold, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillThresholdRGBColorsAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.redThreshold = redThreshold;
	Parms.greenThreshold = greenThreshold;
	Parms.blueThreshold = blueThreshold;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColor");

	Params::ChromaSDKPluginBPLibrary_FillZeroColor Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorAllFrames(int32 animationId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorName");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorRGB");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::FillZeroColorRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "FillZeroColorRGBName");

	Params::ChromaSDKPluginBPLibrary_FillZeroColorRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetAnimation(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetAnimation");

	Params::ChromaSDKPluginBPLibrary_GetAnimation Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetAnimationCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetAnimationCount");

	Params::ChromaSDKPluginBPLibrary_GetAnimationCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetAnimationId(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetAnimationId");

	Params::ChromaSDKPluginBPLibrary_GetAnimationId Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationIdByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetAnimationIdByIndex(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetAnimationIdByIndex");

	Params::ChromaSDKPluginBPLibrary_GetAnimationIdByIndex Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             animationId                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChromaSDKPluginBPLibrary::GetAnimationName(const int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetAnimationName");

	Params::ChromaSDKPluginBPLibrary_GetAnimationName Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetBGRInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetBGRInt(int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetBGRInt");

	Params::ChromaSDKPluginBPLibrary_GetBGRInt Parms{};

	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetCurrentFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetCurrentFrame(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetCurrentFrame");

	Params::ChromaSDKPluginBPLibrary_GetCurrentFrame Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetCurrentFrameName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetCurrentFrameName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetCurrentFrameName");

	Params::ChromaSDKPluginBPLibrary_GetCurrentFrameName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             animationId                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetFrameCount(const int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetFrameCount");

	Params::ChromaSDKPluginBPLibrary_GetFrameCount Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameCountName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetFrameCountName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetFrameCountName");

	Params::ChromaSDKPluginBPLibrary_GetFrameCountName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UChromaSDKPluginBPLibrary::GetFrameDuration(int32 animationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetFrameDuration");

	Params::ChromaSDKPluginBPLibrary_GetFrameDuration Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameDurationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UChromaSDKPluginBPLibrary::GetFrameDurationName(const class FString& animationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetFrameDurationName");

	Params::ChromaSDKPluginBPLibrary_GetFrameDurationName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardKeyColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>&        colors                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::GetKeyboardKeyColor(EChromaSDKKeyboardKey key, TArray<struct FChromaSDKColors>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetKeyboardKeyColor");

	Params::ChromaSDKPluginBPLibrary_GetKeyboardKeyColor Parms{};

	Parms.key = key;
	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	colors = std::move(Parms.colors);

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardRazerKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChromaSDKKeyboardKey UChromaSDKPluginBPLibrary::GetKeyboardRazerKey(const struct FKey& key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetKeyboardRazerKey");

	Params::ChromaSDKPluginBPLibrary_GetKeyboardRazerKey Parms{};

	Parms.key = std::move(key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardRzKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetKeyboardRzKey(EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetKeyboardRzKey");

	Params::ChromaSDKPluginBPLibrary_GetKeyboardRzKey Parms{};

	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::GetKeyColor(int32 animationId, int32 frameIndex, EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetKeyColor");

	Params::ChromaSDKPluginBPLibrary_GetKeyColor Parms{};

	Parms.animationId = animationId;
	Parms.frameIndex = frameIndex;
	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyColorName
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::GetKeyColorName(const class FString& animationName, const int32 frameIndex, EChromaSDKKeyboardKey key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetKeyColorName");

	Params::ChromaSDKPluginBPLibrary_GetKeyColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxColumn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice2DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetMaxColumn(EChromaSDKDevice2DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetMaxColumn");

	Params::ChromaSDKPluginBPLibrary_GetMaxColumn Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxLeds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice1DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetMaxLeds(EChromaSDKDevice1DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetMaxLeds");

	Params::ChromaSDKPluginBPLibrary_GetMaxLeds Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxRow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDevice2DEnum                  device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetMaxRow(EChromaSDKDevice2DEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetMaxRow");

	Params::ChromaSDKPluginBPLibrary_GetMaxRow Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMouseLedColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EChromaSDKMouseLed                      led                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>&        colors                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::GetMouseLedColor(EChromaSDKMouseLed led, TArray<struct FChromaSDKColors>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetMouseLedColor");

	Params::ChromaSDKPluginBPLibrary_GetMouseLedColor Parms{};

	Parms.led = led;
	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	colors = std::move(Parms.colors);

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetPlayingAnimationCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetPlayingAnimationCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetPlayingAnimationCount");

	Params::ChromaSDKPluginBPLibrary_GetPlayingAnimationCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetPlayingAnimationId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::GetPlayingAnimationId(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetPlayingAnimationId");

	Params::ChromaSDKPluginBPLibrary_GetPlayingAnimationId Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetRGB
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::GetRGB(int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetRGB");

	Params::ChromaSDKPluginBPLibrary_GetRGB Parms{};

	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetTotalDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UChromaSDKPluginBPLibrary::GetTotalDuration(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetTotalDuration");

	Params::ChromaSDKPluginBPLibrary_GetTotalDuration Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetTotalDurationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UChromaSDKPluginBPLibrary::GetTotalDurationName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "GetTotalDurationName");

	Params::ChromaSDKPluginBPLibrary_GetTotalDurationName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::InsertDelay(int32 animationId, int32 frameId, int32 delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "InsertDelay");

	Params::ChromaSDKPluginBPLibrary_InsertDelay Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertDelayName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::InsertDelayName(const class FString& animationName, int32 frameId, int32 delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "InsertDelayName");

	Params::ChromaSDKPluginBPLibrary_InsertDelayName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   sourceFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::InsertFrame(int32 animationId, int32 sourceFrame, int32 targetFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "InsertFrame");

	Params::ChromaSDKPluginBPLibrary_InsertFrame Parms{};

	Parms.animationId = animationId;
	Parms.sourceFrame = sourceFrame;
	Parms.targetFrame = targetFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertFrameName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   sourceFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::InsertFrameName(const class FString& animationName, int32 sourceFrame, int32 targetFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "InsertFrameName");

	Params::ChromaSDKPluginBPLibrary_InsertFrameName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.sourceFrame = sourceFrame;
	Parms.targetFrame = targetFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InvertColorsAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::InvertColorsAllFrames(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "InvertColorsAllFrames");

	Params::ChromaSDKPluginBPLibrary_InvertColorsAllFrames Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InvertColorsAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "InvertColorsAllFramesName");

	Params::ChromaSDKPluginBPLibrary_InvertColorsAllFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsActive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool&                                   active                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::IsActive(bool& active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsActive");

	Params::ChromaSDKPluginBPLibrary_IsActive Parms{};

	Parms.active = active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	active = Parms.active;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationPlaying
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::IsAnimationPlaying(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsAnimationPlaying");

	Params::ChromaSDKPluginBPLibrary_IsAnimationPlaying Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationPlayingName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::IsAnimationPlayingName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsAnimationPlayingName");

	Params::ChromaSDKPluginBPLibrary_IsAnimationPlayingName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationTypePlaying
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::IsAnimationTypePlaying(EChromaSDKDeviceEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsAnimationTypePlaying");

	Params::ChromaSDKPluginBPLibrary_IsAnimationTypePlaying Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsConnected
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChromaSDKDeviceInfoType&        deviceInfoType                                         (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::IsConnected(struct FChromaSDKDeviceInfoType& deviceInfoType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsConnected");

	Params::ChromaSDKPluginBPLibrary_IsConnected Parms{};

	Parms.deviceInfoType = std::move(deviceInfoType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	deviceInfoType = std::move(Parms.deviceInfoType);

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsInitialized
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::IsInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsInitialized");

	Params::ChromaSDKPluginBPLibrary_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsPlatformWindows
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::IsPlatformWindows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "IsPlatformWindows");

	Params::ChromaSDKPluginBPLibrary_IsPlatformWindows Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.Lerp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   end                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   amt                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UChromaSDKPluginBPLibrary::Lerp(float start, float end, float amt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "Lerp");

	Params::ChromaSDKPluginBPLibrary_Lerp Parms{};

	Parms.start = start;
	Parms.end = end;
	Parms.amt = amt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LerpColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              colorParam1                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   t                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::LerpColor(const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2, float t)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "LerpColor");

	Params::ChromaSDKPluginBPLibrary_LerpColor Parms{};

	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);
	Parms.t = t;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LerpColorBGR
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   from                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   to                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   t                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::LerpColorBGR(int32 from, int32 to, float t)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "LerpColorBGR");

	Params::ChromaSDKPluginBPLibrary_LerpColorBGR Parms{};

	Parms.from = from;
	Parms.to = to;
	Parms.t = t;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LoadAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             animationId                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::LoadAnimation(const int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "LoadAnimation");

	Params::ChromaSDKPluginBPLibrary_LoadAnimation Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LoadAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::LoadAnimationName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "LoadAnimationName");

	Params::ChromaSDKPluginBPLibrary_LoadAnimationName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFrames(int32 animationId, int32 frameCount, float duration, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFrames");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFrames Parms{};

	Parms.animationId = animationId;
	Parms.frameCount = frameCount;
	Parms.duration = duration;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesName(const class FString& animationName, int32 frameCount, float duration, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesName");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameCount = frameCount;
	Parms.duration = duration;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesRandom(int32 animationId, int32 frameCount, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesRandom");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesRandom Parms{};

	Parms.animationId = animationId;
	Parms.frameCount = frameCount;
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomBlackAndWhite
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesRandomBlackAndWhite(int32 animationId, int32 frameCount, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesRandomBlackAndWhite");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite Parms{};

	Parms.animationId = animationId;
	Parms.frameCount = frameCount;
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomBlackAndWhiteName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesRandomBlackAndWhiteName(const class FString& animationName, int32 frameCount, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesRandomBlackAndWhiteName");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameCount = frameCount;
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesRandomName(const class FString& animationName, int32 frameCount, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesRandomName");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameCount = frameCount;
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesRGB(int32 animationId, int32 frameCount, float duration, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesRGB");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameCount = frameCount;
	Parms.duration = duration;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(const class FString& animationName, int32 frameCount, float duration, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MakeBlankFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameCount = frameCount;
	Parms.duration = duration;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyColorLerpAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFrames(int32 animationId, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyColorLerpAllFrames");

	Params::ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyColorLerpAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyColorLerpAllFramesName");

	Params::ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensity(int32 animationId, int32 frameId, float intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensity");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensity Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.intensity = intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityAllFrames(int32 animationId, float intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityAllFrames");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.intensity = intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(const class FString& animationName, float intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityAllFramesName");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.intensity = intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityColor");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityColor Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityColorAllFrames(int32 animationId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityColorName");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityName(const class FString& animationName, int32 frameId, float intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityName");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.intensity = intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityRGB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityRGB");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityRGBName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyIntensityRGBName");

	Params::ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyNonZeroTargetColorLerpAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyNonZeroTargetColorLerpAllFrames(int32 animationId, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyNonZeroTargetColorLerpAllFrames");

	Params::ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyNonZeroTargetColorLerpAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyNonZeroTargetColorLerpAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyNonZeroTargetColorLerpAllFramesName");

	Params::ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyTargetColorLerpAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFrames(int32 animationId, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyTargetColorLerpAllFrames");

	Params::ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyTargetColorLerpAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "MultiplyTargetColorLerpAllFramesName");

	Params::ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.colorParam1 = std::move(colorParam1);
	Parms.colorParam2 = std::move(colorParam2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetColors(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetColors");

	Params::ChromaSDKPluginBPLibrary_OffsetColors Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetColorsAllFrames(int32 animationId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetColorsAllFrames");

	Params::ChromaSDKPluginBPLibrary_OffsetColorsAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetColorsAllFramesName(const class FString& animationName, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetColorsAllFramesName");

	Params::ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetColorsName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetColorsName");

	Params::ChromaSDKPluginBPLibrary_OffsetColorsName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetNonZeroColors(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetNonZeroColors");

	Params::ChromaSDKPluginBPLibrary_OffsetNonZeroColors Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetNonZeroColorsAllFrames(int32 animationId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetNonZeroColorsAllFrames");

	Params::ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetNonZeroColorsAllFramesName(const class FString& animationName, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetNonZeroColorsAllFramesName");

	Params::ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OffsetNonZeroColorsName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OffsetNonZeroColorsName");

	Params::ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OpenAnimationFromMemory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::OpenAnimationFromMemory(const TArray<uint8>& data, const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OpenAnimationFromMemory");

	Params::ChromaSDKPluginBPLibrary_OpenAnimationFromMemory Parms{};

	Parms.data = std::move(data);
	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OverrideFrameDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OverrideFrameDuration(int32 animationId, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OverrideFrameDuration");

	Params::ChromaSDKPluginBPLibrary_OverrideFrameDuration Parms{};

	Parms.animationId = animationId;
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OverrideFrameDurationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::OverrideFrameDurationName(const class FString& animationName, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "OverrideFrameDurationName");

	Params::ChromaSDKPluginBPLibrary_OverrideFrameDurationName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::PlayAnimation(int32 animationId, bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "PlayAnimation");

	Params::ChromaSDKPluginBPLibrary_PlayAnimation Parms{};

	Parms.animationId = animationId;
	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimationComposite
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::PlayAnimationComposite(const class FString& animationName, bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "PlayAnimationComposite");

	Params::ChromaSDKPluginBPLibrary_PlayAnimationComposite Parms{};

	Parms.animationName = std::move(animationName);
	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::PlayAnimationName(const class FString& animationName, bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "PlayAnimationName");

	Params::ChromaSDKPluginBPLibrary_PlayAnimationName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            animationNames                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::PlayAnimations(const TArray<class FString>& animationNames, bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "PlayAnimations");

	Params::ChromaSDKPluginBPLibrary_PlayAnimations Parms{};

	Parms.animationNames = std::move(animationNames);
	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PreviewFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::PreviewFrame(int32 animationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "PreviewFrame");

	Params::ChromaSDKPluginBPLibrary_PreviewFrame Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PreviewFrameName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::PreviewFrameName(const class FString& animationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "PreviewFrameName");

	Params::ChromaSDKPluginBPLibrary_PreviewFrameName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReduceFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   n                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::ReduceFrames(int32 animationId, int32 n)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ReduceFrames");

	Params::ChromaSDKPluginBPLibrary_ReduceFrames Parms{};

	Parms.animationId = animationId;
	Parms.n = n;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReduceFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   n                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::ReduceFramesName(const class FString& animationName, int32 n)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ReduceFramesName");

	Params::ChromaSDKPluginBPLibrary_ReduceFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.n = n;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReverseAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::ReverseAllFrames(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ReverseAllFrames");

	Params::ChromaSDKPluginBPLibrary_ReverseAllFrames Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReverseAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::ReverseAllFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ReverseAllFramesName");

	Params::ChromaSDKPluginBPLibrary_ReverseAllFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetChromaCustomColorAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetChromaCustomColorAllFramesName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetChromaCustomColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetChromaCustomFlagName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetChromaCustomFlagName(const class FString& animationName, bool flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetChromaCustomFlagName");

	Params::ChromaSDKPluginBPLibrary_SetChromaCustomFlagName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.flag = flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetCurrentFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetCurrentFrame(int32 animationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetCurrentFrame");

	Params::ChromaSDKPluginBPLibrary_SetCurrentFrame Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetCurrentFrameName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetCurrentFrameName(const class FString& animationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetCurrentFrameName");

	Params::ChromaSDKPluginBPLibrary_SetCurrentFrameName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetEventName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    name                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::SetEventName(const class FString& name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetEventName");

	Params::ChromaSDKPluginBPLibrary_SetEventName Parms{};

	Parms.name = std::move(name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetIdleAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetIdleAnimation(int32 AnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetIdleAnimation");

	Params::ChromaSDKPluginBPLibrary_SetIdleAnimation Parms{};

	Parms.AnimationId = AnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetIdleAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetIdleAnimationName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetIdleAnimationName");

	Params::ChromaSDKPluginBPLibrary_SetIdleAnimationName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyboardKeyColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>&        colors                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyboardKeyColor(EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam, TArray<struct FChromaSDKColors>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyboardKeyColor");

	Params::ChromaSDKPluginBPLibrary_SetKeyboardKeyColor Parms{};

	Parms.key = key;
	Parms.colorParam = std::move(colorParam);
	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	colors = std::move(Parms.colors);
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyColor(int32 animationId, int32 frameIndex, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyColor");

	Params::ChromaSDKPluginBPLibrary_SetKeyColor Parms{};

	Parms.animationId = animationId;
	Parms.frameIndex = frameIndex;
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyColorAllFrames(int32 animationId, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_SetKeyColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyColorAllFramesName(const class FString& animationName, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyColorName(const class FString& animationName, const int32 frameIndex, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyColorName");

	Params::ChromaSDKPluginBPLibrary_SetKeyColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyNonZeroColor(int32 animationId, int32 frameIndex, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyNonZeroColor");

	Params::ChromaSDKPluginBPLibrary_SetKeyNonZeroColor Parms{};

	Parms.animationId = animationId;
	Parms.frameIndex = frameIndex;
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyNonZeroColorAllFrames(int32 animationId, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyNonZeroColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyNonZeroColorAllFramesName(const class FString& animationName, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyNonZeroColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChromaSDKKeyboardKey                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyNonZeroColorName(const class FString& animationName, const int32 frameIndex, EChromaSDKKeyboardKey key, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyNonZeroColorName");

	Params::ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.key = key;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyRowColumnColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             row                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             column                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeyRowColumnColorName(const class FString& animationName, const int32 frameIndex, const int32 row, const int32 column, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeyRowColumnColorName");

	Params::ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.row = row;
	Parms.column = column;
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColor(int32 animationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColor");

	Params::ChromaSDKPluginBPLibrary_SetKeysColor Parms{};

	Parms.animationId = animationId;
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorAllFrames(int32 animationId, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorAllFramesName(const class FString& animationName, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesRGB
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorAllFramesRGB(int32 animationId, const TArray<EChromaSDKKeyboardKey>& keys, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorAllFramesRGB");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB Parms{};

	Parms.animationId = animationId;
	Parms.keys = std::move(keys);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesRGBName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorAllFramesRGBName(const class FString& animationName, const TArray<EChromaSDKKeyboardKey>& keys, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorAllFramesRGBName");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.keys = std::move(keys);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorName(const class FString& animationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorName");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorRGB
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorRGB(int32 animationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorRGB");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorRGB Parms{};

	Parms.animationId = animationId;
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorRGBName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   red                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   green                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   blue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysColorRGBName(const class FString& animationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys, int32 red, int32 green, int32 blue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysColorRGBName");

	Params::ChromaSDKPluginBPLibrary_SetKeysColorRGBName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);
	Parms.red = red;
	Parms.green = green;
	Parms.blue = blue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysNonZeroColor(int32 animationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysNonZeroColor");

	Params::ChromaSDKPluginBPLibrary_SetKeysNonZeroColor Parms{};

	Parms.animationId = animationId;
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorAllFrames
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysNonZeroColorAllFrames(int32 animationId, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysNonZeroColorAllFrames");

	Params::ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames Parms{};

	Parms.animationId = animationId;
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorAllFramesName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysNonZeroColorAllFramesName(const class FString& animationName, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysNonZeroColorAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             frameIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EChromaSDKKeyboardKey>&    keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetKeysNonZeroColorName(const class FString& animationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& keys, const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetKeysNonZeroColorName");

	Params::ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameIndex = frameIndex;
	Parms.keys = std::move(keys);
	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetMouseLedColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EChromaSDKMouseLed                      led                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChromaSDKColors>&        colors                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetMouseLedColor(EChromaSDKMouseLed led, const struct FLinearColor& colorParam, TArray<struct FChromaSDKColors>& colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetMouseLedColor");

	Params::ChromaSDKPluginBPLibrary_SetMouseLedColor Parms{};

	Parms.led = led;
	Parms.colorParam = std::move(colorParam);
	Parms.colors = std::move(colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	colors = std::move(Parms.colors);
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetStaticColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetStaticColor(EChromaSDKDeviceEnum device, const struct FLinearColor& color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetStaticColor");

	Params::ChromaSDKPluginBPLibrary_SetStaticColor Parms{};

	Parms.device = device;
	Parms.color = std::move(color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetStaticColorAll
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SetStaticColorAll(const struct FLinearColor& color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SetStaticColorAll");

	Params::ChromaSDKPluginBPLibrary_SetStaticColorAll Parms{};

	Parms.color = std::move(color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAll
// (Final, Native, Static, Public, BlueprintCallable)

void UChromaSDKPluginBPLibrary::StopAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StopAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StopAnimation(int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StopAnimation");

	Params::ChromaSDKPluginBPLibrary_StopAnimation Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationComposite
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StopAnimationComposite(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StopAnimationComposite");

	Params::ChromaSDKPluginBPLibrary_StopAnimationComposite Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StopAnimationName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StopAnimationName");

	Params::ChromaSDKPluginBPLibrary_StopAnimationName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            animationNames                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StopAnimations(const TArray<class FString>& animationNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StopAnimations");

	Params::ChromaSDKPluginBPLibrary_StopAnimations Parms{};

	Parms.animationNames = std::move(animationNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StopAnimationType(EChromaSDKDeviceEnum device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StopAnimationType");

	Params::ChromaSDKPluginBPLibrary_StopAnimationType Parms{};

	Parms.device = device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamBroadcast
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    streamId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    streamKey                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StreamBroadcast(const class FString& streamId, const class FString& streamKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamBroadcast");

	Params::ChromaSDKPluginBPLibrary_StreamBroadcast Parms{};

	Parms.streamId = std::move(streamId);
	Parms.streamKey = std::move(streamKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamBroadcastEnd
// (Final, Native, Static, Public, BlueprintCallable)

void UChromaSDKPluginBPLibrary::StreamBroadcastEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamBroadcastEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetAuthShortcode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    platform                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChromaSDKPluginBPLibrary::StreamGetAuthShortcode(const class FString& platform, const class FString& title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamGetAuthShortcode");

	Params::ChromaSDKPluginBPLibrary_StreamGetAuthShortcode Parms{};

	Parms.platform = std::move(platform);
	Parms.title = std::move(title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetFocus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChromaSDKPluginBPLibrary::StreamGetFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamGetFocus");

	Params::ChromaSDKPluginBPLibrary_StreamGetFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    shortcode                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChromaSDKPluginBPLibrary::StreamGetId(const class FString& shortcode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamGetId");

	Params::ChromaSDKPluginBPLibrary_StreamGetId Parms{};

	Parms.shortcode = std::move(shortcode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    shortcode                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChromaSDKPluginBPLibrary::StreamGetKey(const class FString& shortcode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamGetKey");

	Params::ChromaSDKPluginBPLibrary_StreamGetKey Parms{};

	Parms.shortcode = std::move(shortcode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const EChromaSDKStreamStatusEnum        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EChromaSDKStreamStatusEnum UChromaSDKPluginBPLibrary::StreamGetStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamGetStatus");

	Params::ChromaSDKPluginBPLibrary_StreamGetStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetStatusString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const EChromaSDKStreamStatusEnum        status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChromaSDKPluginBPLibrary::StreamGetStatusString(const EChromaSDKStreamStatusEnum status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamGetStatusString");

	Params::ChromaSDKPluginBPLibrary_StreamGetStatusString Parms{};

	Parms.status = status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamReleaseShortcode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    shortcode                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::StreamReleaseShortcode(const class FString& shortcode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamReleaseShortcode");

	Params::ChromaSDKPluginBPLibrary_StreamReleaseShortcode Parms{};

	Parms.shortcode = std::move(shortcode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamSetFocus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    streamFocus                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::StreamSetFocus(const class FString& streamFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamSetFocus");

	Params::ChromaSDKPluginBPLibrary_StreamSetFocus Parms{};

	Parms.streamFocus = std::move(streamFocus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamWatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    streamId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::StreamWatch(const class FString& streamId, int32 timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamWatch");

	Params::ChromaSDKPluginBPLibrary_StreamWatch Parms{};

	Parms.streamId = std::move(streamId);
	Parms.timestamp = timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamWatchEnd
// (Final, Native, Static, Public, BlueprintCallable)

void UChromaSDKPluginBPLibrary::StreamWatchEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "StreamWatchEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroAllKeys");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroAllKeysAllFramesOffset");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroAllKeysAllFramesOffsetName");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroAllKeysName");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroTargetAllKeysAllFrames");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroTargetAllKeysAllFramesName");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sourceAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   targetAnimationId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroTargetAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroTargetAllKeysAllFramesOffset");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset Parms{};

	Parms.sourceAnimationId = sourceAnimationId;
	Parms.targetAnimationId = targetAnimationId;
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesOffsetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    sourceAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    targetAnimationName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::SubtractNonZeroTargetAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SubtractNonZeroTargetAllKeysAllFramesOffsetName");

	Params::ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName Parms{};

	Parms.sourceAnimationName = std::move(sourceAnimationName);
	Parms.targetAnimationName = std::move(targetAnimationName);
	Parms.offset = offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SupportsStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChromaSDKPluginBPLibrary::SupportsStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "SupportsStreaming");

	Params::ChromaSDKPluginBPLibrary_SupportsStreaming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ToBGR
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              colorParam                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChromaSDKPluginBPLibrary::ToBGR(const struct FLinearColor& colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ToBGR");

	Params::ChromaSDKPluginBPLibrary_ToBGR Parms{};

	Parms.colorParam = std::move(colorParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   colorParam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UChromaSDKPluginBPLibrary::ToLinearColor(int32 colorParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "ToLinearColor");

	Params::ChromaSDKPluginBPLibrary_ToLinearColor Parms{};

	Parms.colorParam = colorParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimEndFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   lastFrameId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::TrimEndFrames(int32 animationId, int32 lastFrameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "TrimEndFrames");

	Params::ChromaSDKPluginBPLibrary_TrimEndFrames Parms{};

	Parms.animationId = animationId;
	Parms.lastFrameId = lastFrameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimEndFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   lastFrameId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::TrimEndFramesName(const class FString& animationName, int32 lastFrameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "TrimEndFramesName");

	Params::ChromaSDKPluginBPLibrary_TrimEndFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.lastFrameId = lastFrameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::TrimFrame(int32 animationId, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "TrimFrame");

	Params::ChromaSDKPluginBPLibrary_TrimFrame Parms{};

	Parms.animationId = animationId;
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimFrameName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   frameId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::TrimFrameName(const class FString& animationName, int32 frameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "TrimFrameName");

	Params::ChromaSDKPluginBPLibrary_TrimFrameName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.frameId = frameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimStartFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   numberOfFrames                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::TrimStartFrames(int32 animationId, int32 numberOfFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "TrimStartFrames");

	Params::ChromaSDKPluginBPLibrary_TrimStartFrames Parms{};

	Parms.animationId = animationId;
	Parms.numberOfFrames = numberOfFrames;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimStartFramesName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   numberOfFrames                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::TrimStartFramesName(const class FString& animationName, int32 numberOfFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "TrimStartFramesName");

	Params::ChromaSDKPluginBPLibrary_TrimStartFramesName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.numberOfFrames = numberOfFrames;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UnloadAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             animationId                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UnloadAnimation(const int32 animationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UnloadAnimation");

	Params::ChromaSDKPluginBPLibrary_UnloadAnimation Parms{};

	Parms.animationId = animationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UnloadAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UnloadAnimationName(const class FString& animationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UnloadAnimationName");

	Params::ChromaSDKPluginBPLibrary_UnloadAnimationName Parms{};

	Parms.animationName = std::move(animationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UseForwardChromaEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    toggle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UseForwardChromaEvents(bool toggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UseForwardChromaEvents");

	Params::ChromaSDKPluginBPLibrary_UseForwardChromaEvents Parms{};

	Parms.toggle = toggle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UseIdleAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EChromaSDKDeviceEnum                    device                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum device, bool flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UseIdleAnimation");

	Params::ChromaSDKPluginBPLibrary_UseIdleAnimation Parms{};

	Parms.device = device;
	Parms.flag = flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UseIdleAnimations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UseIdleAnimations(bool flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UseIdleAnimations");

	Params::ChromaSDKPluginBPLibrary_UseIdleAnimations Parms{};

	Parms.flag = flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UsePreloading
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   animationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UsePreloading(int32 animationId, bool flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UsePreloading");

	Params::ChromaSDKPluginBPLibrary_UsePreloading Parms{};

	Parms.animationId = animationId;
	Parms.flag = flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UsePreloadingName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChromaSDKPluginBPLibrary::UsePreloadingName(const class FString& animationName, bool flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChromaSDKPluginBPLibrary", "UsePreloadingName");

	Params::ChromaSDKPluginBPLibrary_UsePreloadingName Parms{};

	Parms.animationName = std::move(animationName);
	Parms.flag = flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

