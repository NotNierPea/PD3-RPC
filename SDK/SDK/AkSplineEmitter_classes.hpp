#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkSplineEmitter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AkSplineEmitter.AkSplineEmitter_C
// 0x00C0 (0x0368 - 0x02A8)
class AAkSplineEmitter_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           AkComponent;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hidden_In_Game;                                    // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Follow_Player_Elevation;                           // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CB[0x5];                                      // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Ak_Event_Emitter;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   State_Group;                                       // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   State_Inside;                                      // 0x02E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   State_Outside;                                     // 0x02F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Occ_Refresh_Interval;                              // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Range_Fade_Distance;                           // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Inside_Spline;                                  // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Dot_Value;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ak_Emitter_Location;                               // 0x030C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timer_Lazy;                                        // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Lazy;                                           // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Initialized;                                    // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31E[0x2];                                      // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Spline_Curve_Location_Closest_To_Player;           // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ASBZPlayerController>    Soft_PlayerController;                             // 0x0330(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          AKPE_Player_Spawn;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_AkSplineEmitter(int32 EntryPoint);
	void Player_has_Spawned();
	void Set_AK_State();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Update_Emitter_Slowly();
	void UpdateEmitterLocationProxy();
	void UserConstructionScript();
	void GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation);
	void GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation);
	void GetIsInsideSpline(bool* IsInsideSpline_, bool* IsInsideSplineChanged_);
	void GetDistanceToPlayerFromClosestSplinePoint(float* DistanceToPlayerFromClosestSplinePoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AkSplineEmitter_C">();
	}
	static class AAkSplineEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSplineEmitter_C>();
	}
};
static_assert(alignof(AAkSplineEmitter_C) == 0x000008, "Wrong alignment on AAkSplineEmitter_C");
static_assert(sizeof(AAkSplineEmitter_C) == 0x000368, "Wrong size on AAkSplineEmitter_C");
static_assert(offsetof(AAkSplineEmitter_C, UberGraphFrame) == 0x0002A8, "Member 'AAkSplineEmitter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, AkComponent) == 0x0002B0, "Member 'AAkSplineEmitter_C::AkComponent' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Spline) == 0x0002B8, "Member 'AAkSplineEmitter_C::Spline' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, DefaultSceneRoot) == 0x0002C0, "Member 'AAkSplineEmitter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Debug) == 0x0002C8, "Member 'AAkSplineEmitter_C::Debug' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Hidden_In_Game) == 0x0002C9, "Member 'AAkSplineEmitter_C::Hidden_In_Game' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Follow_Player_Elevation) == 0x0002CA, "Member 'AAkSplineEmitter_C::Follow_Player_Elevation' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Ak_Event_Emitter) == 0x0002D0, "Member 'AAkSplineEmitter_C::Ak_Event_Emitter' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, State_Group) == 0x0002D8, "Member 'AAkSplineEmitter_C::State_Group' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, State_Inside) == 0x0002E4, "Member 'AAkSplineEmitter_C::State_Inside' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, State_Outside) == 0x0002F0, "Member 'AAkSplineEmitter_C::State_Outside' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Occ_Refresh_Interval) == 0x0002FC, "Member 'AAkSplineEmitter_C::Occ_Refresh_Interval' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Max_Range_Fade_Distance) == 0x000300, "Member 'AAkSplineEmitter_C::Max_Range_Fade_Distance' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Is_Inside_Spline) == 0x000304, "Member 'AAkSplineEmitter_C::Is_Inside_Spline' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Dot_Value) == 0x000308, "Member 'AAkSplineEmitter_C::Dot_Value' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Ak_Emitter_Location) == 0x00030C, "Member 'AAkSplineEmitter_C::Ak_Emitter_Location' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Timer_Lazy) == 0x000318, "Member 'AAkSplineEmitter_C::Timer_Lazy' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Is_Lazy) == 0x00031C, "Member 'AAkSplineEmitter_C::Is_Lazy' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Is_Initialized) == 0x00031D, "Member 'AAkSplineEmitter_C::Is_Initialized' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Spline_Curve_Location_Closest_To_Player) == 0x000320, "Member 'AAkSplineEmitter_C::Spline_Curve_Location_Closest_To_Player' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, Soft_PlayerController) == 0x000330, "Member 'AAkSplineEmitter_C::Soft_PlayerController' has a wrong offset!");
static_assert(offsetof(AAkSplineEmitter_C, AKPE_Player_Spawn) == 0x000360, "Member 'AAkSplineEmitter_C::AKPE_Player_Spawn' has a wrong offset!");

}

