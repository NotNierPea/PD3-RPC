#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_screen

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass bp_screen.bp_screen_C
// 0x0088 (0x0330 - 0x02A8)
class Abp_screen_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USBZCosmeticDestructionComponent*       SBZCosmeticDestruction;                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   meshes;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Screens_plays_movie;                               // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          swap_offest_by_position;                           // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Swap_period;                                       // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         sub_texture_part_used_start_range;                 // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         sub_texture_part_used_end_range;                   // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         resolution;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         intensity_screen;                                  // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         banding_visibility;                                // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         banding_refresh_rate;                              // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of__vertical_slides_in_the_texture;         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of__horizontal_slides_in_the_texture;       // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Pixel_type;                                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         H_;                                                // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mode_RGB;                                          // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DAmage_taken;                                      // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Fully_destructable;                             // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_OFF;                                            // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roughness_Multiplier;                              // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specularity;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diffuse_color;                                     // 0x0304(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Side_Attenuation;                                  // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBinkMediaPlayer*                       source_bink_media_player;                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Intensity;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Reach;                                       // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Spread;                                      // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Angle;                                       // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void BndEvt__bp_screen_SBZCosmeticDestruction_K2Node_ComponentBoundEvent_0_SBZCosmeticDestructionComponenteSignature__DelegateSignature(ESBZCosmeticDestructionType Type, const struct FSBZCosmeticDestructionContext& HitContext);
	void ExecuteUbergraph_bp_screen(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bp_screen_C">();
	}
	static class Abp_screen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abp_screen_C>();
	}
};
static_assert(alignof(Abp_screen_C) == 0x000008, "Wrong alignment on Abp_screen_C");
static_assert(sizeof(Abp_screen_C) == 0x000330, "Wrong size on Abp_screen_C");
static_assert(offsetof(Abp_screen_C, UberGraphFrame) == 0x0002A8, "Member 'Abp_screen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, SBZCosmeticDestruction) == 0x0002B0, "Member 'Abp_screen_C::SBZCosmeticDestruction' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, meshes) == 0x0002B8, "Member 'Abp_screen_C::meshes' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Screens_plays_movie) == 0x0002C0, "Member 'Abp_screen_C::Screens_plays_movie' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, swap_offest_by_position) == 0x0002C1, "Member 'Abp_screen_C::swap_offest_by_position' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Swap_period) == 0x0002C4, "Member 'Abp_screen_C::Swap_period' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, sub_texture_part_used_start_range) == 0x0002C8, "Member 'Abp_screen_C::sub_texture_part_used_start_range' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, sub_texture_part_used_end_range) == 0x0002CC, "Member 'Abp_screen_C::sub_texture_part_used_end_range' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, resolution) == 0x0002D0, "Member 'Abp_screen_C::resolution' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, intensity_screen) == 0x0002D4, "Member 'Abp_screen_C::intensity_screen' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, banding_visibility) == 0x0002D8, "Member 'Abp_screen_C::banding_visibility' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, banding_refresh_rate) == 0x0002DC, "Member 'Abp_screen_C::banding_refresh_rate' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Number_of__vertical_slides_in_the_texture) == 0x0002E0, "Member 'Abp_screen_C::Number_of__vertical_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Number_of__horizontal_slides_in_the_texture) == 0x0002E4, "Member 'Abp_screen_C::Number_of__horizontal_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Pixel_type) == 0x0002E8, "Member 'Abp_screen_C::Pixel_type' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, H_) == 0x0002EC, "Member 'Abp_screen_C::H_' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Mode_RGB) == 0x0002F0, "Member 'Abp_screen_C::Mode_RGB' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, DAmage_taken) == 0x0002F4, "Member 'Abp_screen_C::DAmage_taken' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Is_Fully_destructable) == 0x0002F8, "Member 'Abp_screen_C::Is_Fully_destructable' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Is_OFF) == 0x0002F9, "Member 'Abp_screen_C::Is_OFF' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Roughness_Multiplier) == 0x0002FC, "Member 'Abp_screen_C::Roughness_Multiplier' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Specularity) == 0x000300, "Member 'Abp_screen_C::Specularity' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Diffuse_color) == 0x000304, "Member 'Abp_screen_C::Diffuse_color' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Side_Attenuation) == 0x000314, "Member 'Abp_screen_C::Side_Attenuation' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, source_bink_media_player) == 0x000318, "Member 'Abp_screen_C::source_bink_media_player' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Light_Intensity) == 0x000320, "Member 'Abp_screen_C::Light_Intensity' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Light_Reach) == 0x000324, "Member 'Abp_screen_C::Light_Reach' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Light_Spread) == 0x000328, "Member 'Abp_screen_C::Light_Spread' has a wrong offset!");
static_assert(offsetof(Abp_screen_C, Light_Angle) == 0x00032C, "Member 'Abp_screen_C::Light_Angle' has a wrong offset!");

}

