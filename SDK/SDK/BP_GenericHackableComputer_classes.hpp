#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GenericHackableComputer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GenericHackableComputer.BP_GenericHackableComputer_C
// 0x0080 (0x0568 - 0x04E8)
class ABP_GenericHackableComputer_C : public ASBZHackableActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USBZAIObjectiveComponent*               SBZAIObjective;                                    // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGainedAccess;                                    // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESBZHackableActorState                        state;                                             // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_502[0x6];                                      // 0x0502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   promptInitial;                                     // 0x0508(0x0018)(Edit, BlueprintVisible)
	class FText                                   promptResume;                                      // 0x0520(0x0018)(Edit, BlueprintVisible)
	class FText                                   promptAccess;                                      // 0x0538(0x0018)(Edit, BlueprintVisible)
	class FText                                   promptNextSlide;                                   // 0x0550(0x0018)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_GenericHackableComputer(int32 EntryPoint);
	void BndEvt__BP_GenericHackableComputer_InteractableComponent_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_GenericHackableComputer_InteractableComponent_K2Node_ComponentBoundEvent_1_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_GenericHackableComputer_InteractableComponent_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BP_UpdateCustomSuccessText(const class FText& SucessText);
	void BP_DisplayTextIndexChanged(const int32 NewIndex);
	void BP_GainedAccess();
	void ReceiveBeginPlay();
	void BP_OnStateChanged(ESBZHackableActorState OldState, ESBZHackableActorState NewState);
	void BP_OnHackingStarted(const class FText& ProcessText);
	void BP_UpdateProgressBar(int32 ProgressDone);

	bool VisionPredicate(const class AActor* Viewer) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GenericHackableComputer_C">();
	}
	static class ABP_GenericHackableComputer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GenericHackableComputer_C>();
	}
};
static_assert(alignof(ABP_GenericHackableComputer_C) == 0x000008, "Wrong alignment on ABP_GenericHackableComputer_C");
static_assert(sizeof(ABP_GenericHackableComputer_C) == 0x000568, "Wrong size on ABP_GenericHackableComputer_C");
static_assert(offsetof(ABP_GenericHackableComputer_C, UberGraphFrame) == 0x0004E8, "Member 'ABP_GenericHackableComputer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, SBZAIObjective) == 0x0004F0, "Member 'ABP_GenericHackableComputer_C::SBZAIObjective' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, Widget) == 0x0004F8, "Member 'ABP_GenericHackableComputer_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, IsGainedAccess) == 0x000500, "Member 'ABP_GenericHackableComputer_C::IsGainedAccess' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, state) == 0x000501, "Member 'ABP_GenericHackableComputer_C::state' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, promptInitial) == 0x000508, "Member 'ABP_GenericHackableComputer_C::promptInitial' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, promptResume) == 0x000520, "Member 'ABP_GenericHackableComputer_C::promptResume' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, promptAccess) == 0x000538, "Member 'ABP_GenericHackableComputer_C::promptAccess' has a wrong offset!");
static_assert(offsetof(ABP_GenericHackableComputer_C, promptNextSlide) == 0x000550, "Member 'ABP_GenericHackableComputer_C::promptNextSlide' has a wrong offset!");

}

