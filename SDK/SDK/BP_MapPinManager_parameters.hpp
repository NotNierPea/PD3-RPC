#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapPinManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_MapPinManager.BP_MapPinManager_C.ExecuteUbergraph_BP_MapPinManager
// 0x0078 (0x0078 - 0x0000)
struct BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_MapPinHelper_C*>             CallFunc_GetAllActorsOfClass_OutActors;            // 0x0010(0x0010)(ReferenceParm)
	class ABP_MapPinHelper_C*                     CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager) == 0x000008, "Wrong alignment on BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager");
static_assert(sizeof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager) == 0x000078, "Wrong size on BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, EntryPoint) == 0x000000, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_Conv_TextToString_ReturnValue) == 0x000030, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000044, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_BreakVector_Y) == 0x000054, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_MakeVector_ReturnValue) == 0x00005C, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000068, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager, CallFunc_Array_Add_ReturnValue) == 0x000074, "Member 'BP_MapPinManager_C_ExecuteUbergraph_BP_MapPinManager::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

