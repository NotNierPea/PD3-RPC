#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkSplineEmitter

#include "Basic.hpp"

#include "AkSplineEmitter_classes.hpp"
#include "AkSplineEmitter_parameters.hpp"


namespace SDK
{

// Function AkSplineEmitter.AkSplineEmitter_C.ExecuteUbergraph_AkSplineEmitter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAkSplineEmitter_C::ExecuteUbergraph_AkSplineEmitter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "ExecuteUbergraph_AkSplineEmitter");

	Params::AkSplineEmitter_C_ExecuteUbergraph_AkSplineEmitter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AkSplineEmitter.AkSplineEmitter_C.Player has Spawned
// (BlueprintCallable, BlueprintEvent)

void AAkSplineEmitter_C::Player_has_Spawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "Player has Spawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AkSplineEmitter.AkSplineEmitter_C.Set AK State
// (BlueprintCallable, BlueprintEvent)

void AAkSplineEmitter_C::Set_AK_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "Set AK State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AkSplineEmitter.AkSplineEmitter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAkSplineEmitter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AkSplineEmitter.AkSplineEmitter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAkSplineEmitter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "ReceiveTick");

	Params::AkSplineEmitter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AkSplineEmitter.AkSplineEmitter_C.Update Emitter Slowly
// (BlueprintCallable, BlueprintEvent)

void AAkSplineEmitter_C::Update_Emitter_Slowly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "Update Emitter Slowly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AkSplineEmitter.AkSplineEmitter_C.UpdateEmitterLocationProxy
// (BlueprintCallable, BlueprintEvent)

void AAkSplineEmitter_C::UpdateEmitterLocationProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "UpdateEmitterLocationProxy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AkSplineEmitter.AkSplineEmitter_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAkSplineEmitter_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AkSplineEmitter.AkSplineEmitter_C.GetControlledPawnLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn**                           ControlledPawnReference                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ControlledPawnLocation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAkSplineEmitter_C::GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "GetControlledPawnLocation");

	Params::AkSplineEmitter_C_GetControlledPawnLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControlledPawnReference != nullptr)
		*ControlledPawnReference = Parms.ControlledPawnReference;

	if (ControlledPawnLocation != nullptr)
		*ControlledPawnLocation = std::move(Parms.ControlledPawnLocation);
}


// Function AkSplineEmitter.AkSplineEmitter_C.GetPlayerControllerCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator*                        PlayerControllerCameraRotation                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AAkSplineEmitter_C::GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "GetPlayerControllerCameraRotation");

	Params::AkSplineEmitter_C_GetPlayerControllerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerControllerCameraRotation != nullptr)
		*PlayerControllerCameraRotation = std::move(Parms.PlayerControllerCameraRotation);
}


// Function AkSplineEmitter.AkSplineEmitter_C.GetIsInsideSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsInsideSpline_                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   IsInsideSplineChanged_                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AAkSplineEmitter_C::GetIsInsideSpline(bool* IsInsideSpline_, bool* IsInsideSplineChanged_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "GetIsInsideSpline");

	Params::AkSplineEmitter_C_GetIsInsideSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInsideSpline_ != nullptr)
		*IsInsideSpline_ = Parms.IsInsideSpline_;

	if (IsInsideSplineChanged_ != nullptr)
		*IsInsideSplineChanged_ = Parms.IsInsideSplineChanged_;
}


// Function AkSplineEmitter.AkSplineEmitter_C.GetDistanceToPlayerFromClosestSplinePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  DistanceToPlayerFromClosestSplinePoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAkSplineEmitter_C::GetDistanceToPlayerFromClosestSplinePoint(float* DistanceToPlayerFromClosestSplinePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AkSplineEmitter_C", "GetDistanceToPlayerFromClosestSplinePoint");

	Params::AkSplineEmitter_C_GetDistanceToPlayerFromClosestSplinePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DistanceToPlayerFromClosestSplinePoint != nullptr)
		*DistanceToPlayerFromClosestSplinePoint = Parms.DistanceToPlayerFromClosestSplinePoint;
}

}

