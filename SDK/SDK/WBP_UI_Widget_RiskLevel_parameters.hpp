#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Widget_RiskLevel

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_Widget_RiskLevel.WBP_UI_Widget_RiskLevel_C.ExecuteUbergraph_WBP_UI_Widget_RiskLevel
// 0x0004 (0x0004 - 0x0000)
struct WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel) == 0x000004, "Wrong alignment on WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel");
static_assert(sizeof(WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel) == 0x000004, "Wrong size on WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel, EntryPoint) == 0x000000, "Member 'WBP_UI_Widget_RiskLevel_C_ExecuteUbergraph_WBP_UI_Widget_RiskLevel::EntryPoint' has a wrong offset!");

// Function WBP_UI_Widget_RiskLevel.WBP_UI_Widget_RiskLevel_C.GetDifficultyName
// 0x00E8 (0x00E8 - 0x0000)
struct WBP_UI_Widget_RiskLevel_C_GetDifficultyName final
{
public:
	int32                                         GetDifficultyString;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DifficultyString;                                  // 0x0008(0x0018)(Parm, OutParm)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00B8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00D0(0x0018)()
};
static_assert(alignof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName) == 0x000008, "Wrong alignment on WBP_UI_Widget_RiskLevel_C_GetDifficultyName");
static_assert(sizeof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName) == 0x0000E8, "Wrong size on WBP_UI_Widget_RiskLevel_C_GetDifficultyName");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, GetDifficultyString) == 0x000000, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::GetDifficultyString' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, DifficultyString) == 0x000008, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::DifficultyString' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_int_Variable) == 0x000020, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable) == 0x000028, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable_1) == 0x000040, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable_2) == 0x000058, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable_3) == 0x000070, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable_4) == 0x000088, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable_5) == 0x0000A0, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, Temp_text_Variable_6) == 0x0000B8, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_GetDifficultyName, K2Node_Select_Default) == 0x0000D0, "Member 'WBP_UI_Widget_RiskLevel_C_GetDifficultyName::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UI_Widget_RiskLevel.WBP_UI_Widget_RiskLevel_C.HideWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_Widget_RiskLevel_C_HideWidget final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_RiskLevel_C_HideWidget) == 0x000008, "Wrong alignment on WBP_UI_Widget_RiskLevel_C_HideWidget");
static_assert(sizeof(WBP_UI_Widget_RiskLevel_C_HideWidget) == 0x000008, "Wrong size on WBP_UI_Widget_RiskLevel_C_HideWidget");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_HideWidget, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'WBP_UI_Widget_RiskLevel_C_HideWidget::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_UI_Widget_RiskLevel.WBP_UI_Widget_RiskLevel_C.PlayFadeInAnimation
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation final
{
public:
	class USBZUIManager*                          CallFunc_GetUIManager_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class USBZUIData*                       CallFunc_GetUIData_ReturnValue;                    // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASBZMissionState*                       CallFunc_GetSBZMissionState_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESBZSecurityCompany>                   CallFunc_GetSecurityCompanies_ReturnValue;         // 0x0020(0x0010)(ConstParm, ReferenceParm)
	ESBZSecurityCompany                           CallFunc_Array_Get_Item;                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZDifficulty                                Temp_byte_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASBZMissionState*                       CallFunc_GetSBZMissionState_ReturnValue_1;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetDifficultyIdx_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_SM_APT_SecurityCompanyDisplay_C*   CallFunc_Create_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDifficultyText_OutDifficultyText;      // 0x0070(0x0018)()
	bool                                          CallFunc_GetDifficultyText_bHasText;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation) == 0x000008, "Wrong alignment on WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation");
static_assert(sizeof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation) == 0x0000B0, "Wrong size on WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetUIManager_ReturnValue) == 0x000000, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetUIManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetUIData_ReturnValue) == 0x000008, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetUIData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetSBZMissionState_ReturnValue) == 0x000010, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetSBZMissionState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, Temp_int_Array_Index_Variable) == 0x000018, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetSecurityCompanies_ReturnValue) == 0x000020, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetSecurityCompanies_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000038, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, Temp_byte_Variable) == 0x000039, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetSBZMissionState_ReturnValue_1) == 0x000040, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetSBZMissionState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetDifficultyIdx_ReturnValue) == 0x000048, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetDifficultyIdx_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, K2Node_MakeStruct_Margin) == 0x00004C, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetValidValue_ReturnValue) == 0x00005C, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_Create_ReturnValue) == 0x000060, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000068, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetDifficultyText_OutDifficultyText) == 0x000070, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetDifficultyText_OutDifficultyText' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_GetDifficultyText_bHasText) == 0x000088, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_GetDifficultyText_bHasText' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, K2Node_Select_Default) == 0x000090, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000A0, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'WBP_UI_Widget_RiskLevel_C_PlayFadeInAnimation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

