#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ServerBrowser_HeistMapWidget

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget
// 0x00D0 (0x00D0 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistType                                 Temp_byte_Variable_4;                              // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineTacticType                          Temp_byte_Variable_5;                              // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_6;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_7;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_8;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistType                                 Temp_byte_Variable_9;                              // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZDifficulty                                Temp_byte_Variable_10;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistType                                 Temp_byte_Variable_11;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsSelected;                        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInIsHovered;                         // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0078(0x0028)()
	ESBZHeistPlaystyle                            Temp_byte_Variable_12;                             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00A8(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            K2Node_Select_Default_3;                           // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZDifficulty                                K2Node_Select_Default_4;                           // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            K2Node_Select_Default_5;                           // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_6;                           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget) == 0x000008, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget) == 0x0000D0, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, EntryPoint) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_text_Variable) == 0x000008, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_text_Variable_1) == 0x000020, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_text_Variable_2) == 0x000038, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_bool_Variable) == 0x000050, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable) == 0x000051, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_1) == 0x000052, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_bool_Variable_1) == 0x000053, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_2) == 0x000054, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_3) == 0x000055, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_4) == 0x000056, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_5) == 0x000057, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_6) == 0x000058, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_7) == 0x000059, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_8) == 0x00005A, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_9) == 0x00005B, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_10) == 0x00005C, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_11) == 0x00005D, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_int_Variable) == 0x000060, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Event_bInIsSelected) == 0x000064, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Event_bInIsSelected' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Event_bInIsHovered) == 0x000065, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Event_bInIsHovered' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, CallFunc_SelectColor_ReturnValue) == 0x000068, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_MakeStruct_SlateColor) == 0x000078, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, Temp_byte_Variable_12) == 0x0000A0, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A1, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default) == 0x0000A8, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default_1) == 0x0000C0, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000C1, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default_2) == 0x0000C2, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default_3) == 0x0000C3, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Event_IsDesignTime) == 0x0000C4, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default_4) == 0x0000C5, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default_5) == 0x0000C6, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget, K2Node_Select_Default_6) == 0x0000C8, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ExecuteUbergraph_WBP_ServerBrowser_HeistMapWidget::K2Node_Select_Default_6' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_PreConstruct");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_PreConstruct) == 0x000001, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_PreConstruct");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.ButtonHoveredChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged final
{
public:
	bool                                          bInIsHovered;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged) == 0x000001, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged) == 0x000001, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged, bInIsHovered) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ButtonHoveredChanged::bInIsHovered' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_SetSelected final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_SetSelected) == 0x000001, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_SetSelected");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_SetSelected) == 0x000001, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_SetSelected");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetSelected, bInIsSelected) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetSelected::bInIsSelected' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.SetActive
// 0x0018 (0x0018 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_SetActive final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZOnlineTacticType                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistType                                 Temp_byte_Variable_4;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            K2Node_Select_Default_1;                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_SetActive) == 0x000008, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_SetActive");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_SetActive) == 0x000018, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_SetActive");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, bIsActive) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::bIsActive' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, Temp_byte_Variable) == 0x000001, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, K2Node_Select_Default) == 0x000010, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, Temp_byte_Variable_4) == 0x000011, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetActive, K2Node_Select_Default_1) == 0x000012, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetActive::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.UpdatePinVisual
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual final
{
public:
	int32                                         InPlayerCount;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHovered;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZHeistPlaystyle                            InHeistPlaystyle;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               TargetMaterialInstance;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZHeistPlaystyle                            Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistPlaystyle                            Temp_byte_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZHeistType                                 Temp_byte_Variable_2;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x0028(0x001C)(NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_1;               // 0x0050(0x001C)(NoDestructor)
	struct FWidgetTransform                       K2Node_Select_Default_1;                           // 0x006C(0x001C)(NoDestructor)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual) == 0x000008, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual) == 0x0000C8, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, InPlayerCount) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::InPlayerCount' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, InHovered) == 0x000004, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::InHovered' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, InHeistPlaystyle) == 0x000005, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::InHeistPlaystyle' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, TargetMaterialInstance) == 0x000008, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::TargetMaterialInstance' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, Temp_bool_Variable) == 0x000010, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, Temp_byte_Variable) == 0x000011, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, Temp_bool_Variable_1) == 0x000012, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, Temp_struct_Variable) == 0x000014, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, Temp_byte_Variable_1) == 0x000024, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, Temp_byte_Variable_2) == 0x000025, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_MakeStruct_WidgetTransform) == 0x000028, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_Select_Default) == 0x000048, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_MakeStruct_WidgetTransform_1) == 0x000050, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_MakeStruct_WidgetTransform_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_Select_Default_1) == 0x00006C, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_Select_Default_2) == 0x000088, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, CallFunc_SelectFloat_ReturnValue) == 0x000098, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00009C, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000A0, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_Select_Default_3) == 0x0000A4, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, K2Node_Select_Default_4) == 0x0000B4, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0000C4, "Member 'WBP_ServerBrowser_HeistMapWidget_C_UpdatePinVisual::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.ShowDifficultyVisual
// 0x0060 (0x0060 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual final
{
public:
	ESBZDifficulty                                InDifficulty;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColor_ReturnValue;               // 0x0018(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 K2Node_DynamicCast_AsImage;                        // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual) == 0x000008, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual) == 0x000060, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, InDifficulty) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::InDifficulty' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_GetGlobalColor_ReturnValue) == 0x000018, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_GetGlobalColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_GetAllChildren_ReturnValue) == 0x000028, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_Array_Get_Item) == 0x000040, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, K2Node_DynamicCast_AsImage) == 0x000050, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::K2Node_DynamicCast_AsImage' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'WBP_ServerBrowser_HeistMapWidget_C_ShowDifficultyVisual::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_ServerBrowser_HeistMapWidget.WBP_ServerBrowser_HeistMapWidget_C.SetupPinMaterial
// 0x0020 (0x0020 - 0x0000)
struct WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial) == 0x000008, "Wrong alignment on WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial");
static_assert(sizeof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial) == 0x000020, "Wrong size on WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'WBP_ServerBrowser_HeistMapWidget_C_SetupPinMaterial::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

