#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Plankspile

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Plankspile.BP_Plankspile_C.ExecuteUbergraph_BP_Plankspile
// 0x0020 (0x0020 - 0x0000)
struct BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          K2Node_ComponentBoundEvent_Interactable;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                K2Node_ComponentBoundEvent_Interactor;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile) == 0x000008, "Wrong alignment on BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile");
static_assert(sizeof(BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile) == 0x000020, "Wrong size on BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile");
static_assert(offsetof(BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile, EntryPoint) == 0x000000, "Member 'BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile, K2Node_ComponentBoundEvent_Interactable) == 0x000008, "Member 'BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile::K2Node_ComponentBoundEvent_Interactable' has a wrong offset!");
static_assert(offsetof(BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile, K2Node_ComponentBoundEvent_Interactor) == 0x000010, "Member 'BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile::K2Node_ComponentBoundEvent_Interactor' has a wrong offset!");
static_assert(offsetof(BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile, K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor) == 0x000018, "Member 'BP_Plankspile_C_ExecuteUbergraph_BP_Plankspile::K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor' has a wrong offset!");

// Function BP_Plankspile.BP_Plankspile_C.BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature final
{
public:
	class USBZBaseInteractableComponent*          Interactable_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocallyControlledInteractor;                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature) == 0x000008, "Wrong alignment on BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature");
static_assert(sizeof(BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature) == 0x000018, "Wrong size on BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature");
static_assert(offsetof(BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature, Interactable_0) == 0x000000, "Member 'BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature::Interactable_0' has a wrong offset!");
static_assert(offsetof(BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature, Interactor) == 0x000008, "Member 'BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature::Interactor' has a wrong offset!");
static_assert(offsetof(BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature, bIsLocallyControlledInteractor) == 0x000010, "Member 'BP_Plankspile_C_BndEvt__BP_Plankspile_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature::bIsLocallyControlledInteractor' has a wrong offset!");

}

