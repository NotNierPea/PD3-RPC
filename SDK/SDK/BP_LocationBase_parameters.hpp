#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LocationBase

#include "Basic.hpp"

#include "Enum_LocationBase_DefaultState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_LocationBase.BP_LocationBase_C.ExecuteUbergraph_BP_LocationBase
// 0x0040 (0x0040 - 0x0000)
struct BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          K2Node_ComponentBoundEvent_Interactable;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                K2Node_ComponentBoundEvent_Interactor;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_OldState;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewState;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bDoCosmetics;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          K2Node_ComponentBoundEvent_Interactable_1;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                K2Node_ComponentBoundEvent_Interactor_1;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor_1; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase) == 0x000008, "Wrong alignment on BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase");
static_assert(sizeof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase) == 0x000040, "Wrong size on BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, EntryPoint) == 0x000000, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_ComponentBoundEvent_Interactable) == 0x000008, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_ComponentBoundEvent_Interactable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_ComponentBoundEvent_Interactor) == 0x000010, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_ComponentBoundEvent_Interactor' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor) == 0x000018, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_Event_OldState) == 0x00001C, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_Event_OldState' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_Event_NewState) == 0x000020, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_Event_bDoCosmetics) == 0x000024, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_Event_bDoCosmetics' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_SwitchInteger_CmpSuccess) == 0x000025, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_ComponentBoundEvent_Interactable_1) == 0x000028, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_ComponentBoundEvent_Interactable_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_ComponentBoundEvent_Interactor_1) == 0x000030, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_ComponentBoundEvent_Interactor_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase, K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor_1) == 0x000038, "Member 'BP_LocationBase_C_ExecuteUbergraph_BP_LocationBase::K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor_1' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature final
{
public:
	class USBZBaseInteractableComponent*          Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocallyControlledInteractor;                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature) == 0x000008, "Wrong alignment on BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature");
static_assert(sizeof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature) == 0x000018, "Wrong size on BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature");
static_assert(offsetof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature, Interactable) == 0x000000, "Member 'BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature::Interactable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature, Interactor) == 0x000008, "Member 'BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature::Interactor' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature, bIsLocallyControlledInteractor) == 0x000010, "Member 'BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableGhost_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature::bIsLocallyControlledInteractor' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature final
{
public:
	class USBZBaseInteractableComponent*          Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocallyControlledInteractor;                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature) == 0x000008, "Wrong alignment on BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature");
static_assert(sizeof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature) == 0x000018, "Wrong size on BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature");
static_assert(offsetof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature, Interactable) == 0x000000, "Member 'BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature::Interactable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature, Interactor) == 0x000008, "Member 'BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature::Interactor' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature, bIsLocallyControlledInteractor) == 0x000010, "Member 'BP_LocationBase_C_BndEvt__BP_LocationBase_SBZInteractableObject_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature::bIsLocallyControlledInteractor' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.OnStateChanged
// 0x000C (0x000C - 0x0000)
struct BP_LocationBase_C_OnStateChanged final
{
public:
	int32                                         OldState;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewState;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDoCosmetics;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationBase_C_OnStateChanged) == 0x000004, "Wrong alignment on BP_LocationBase_C_OnStateChanged");
static_assert(sizeof(BP_LocationBase_C_OnStateChanged) == 0x00000C, "Wrong size on BP_LocationBase_C_OnStateChanged");
static_assert(offsetof(BP_LocationBase_C_OnStateChanged, OldState) == 0x000000, "Member 'BP_LocationBase_C_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_OnStateChanged, NewState) == 0x000004, "Member 'BP_LocationBase_C_OnStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_OnStateChanged, bDoCosmetics) == 0x000008, "Member 'BP_LocationBase_C_OnStateChanged::bDoCosmetics' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.UserConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct BP_LocationBase_C_UserConstructionScript final
{
public:
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationBase_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_LocationBase_C_UserConstructionScript");
static_assert(sizeof(BP_LocationBase_C_UserConstructionScript) == 0x000008, "Wrong size on BP_LocationBase_C_UserConstructionScript");
static_assert(offsetof(BP_LocationBase_C_UserConstructionScript, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000000, "Member 'BP_LocationBase_C_UserConstructionScript::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue) == 0x000004, "Member 'BP_LocationBase_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000005, "Member 'BP_LocationBase_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.setGhostVisible
// 0x0010 (0x0010 - 0x0000)
struct BP_LocationBase_C_setGhostVisible final
{
public:
	bool                                          addMarker_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationBase_C_setGhostVisible) == 0x000004, "Wrong alignment on BP_LocationBase_C_setGhostVisible");
static_assert(sizeof(BP_LocationBase_C_setGhostVisible) == 0x000010, "Wrong size on BP_LocationBase_C_setGhostVisible");
static_assert(offsetof(BP_LocationBase_C_setGhostVisible, addMarker_0) == 0x000000, "Member 'BP_LocationBase_C_setGhostVisible::addMarker_0' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setGhostVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_LocationBase_C_setGhostVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setGhostVisible, Temp_int_Variable) == 0x000004, "Member 'BP_LocationBase_C_setGhostVisible::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setGhostVisible, Temp_int_Variable_1) == 0x000008, "Member 'BP_LocationBase_C_setGhostVisible::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setGhostVisible, K2Node_Select_Default) == 0x00000C, "Member 'BP_LocationBase_C_setGhostVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.setObjectRemovable
// 0x0010 (0x0010 - 0x0000)
struct BP_LocationBase_C_setObjectRemovable final
{
public:
	bool                                          addMarker_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationBase_C_setObjectRemovable) == 0x000004, "Wrong alignment on BP_LocationBase_C_setObjectRemovable");
static_assert(sizeof(BP_LocationBase_C_setObjectRemovable) == 0x000010, "Wrong size on BP_LocationBase_C_setObjectRemovable");
static_assert(offsetof(BP_LocationBase_C_setObjectRemovable, addMarker_0) == 0x000000, "Member 'BP_LocationBase_C_setObjectRemovable::addMarker_0' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setObjectRemovable, Temp_bool_Variable) == 0x000001, "Member 'BP_LocationBase_C_setObjectRemovable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setObjectRemovable, Temp_int_Variable) == 0x000004, "Member 'BP_LocationBase_C_setObjectRemovable::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setObjectRemovable, Temp_int_Variable_1) == 0x000008, "Member 'BP_LocationBase_C_setObjectRemovable::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setObjectRemovable, K2Node_Select_Default) == 0x00000C, "Member 'BP_LocationBase_C_setObjectRemovable::K2Node_Select_Default' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.setMeshVisibility
// 0x000B (0x000B - 0x0000)
struct BP_LocationBase_C_setMeshVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ghost;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default_1;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationBase_C_setMeshVisibility) == 0x000001, "Wrong alignment on BP_LocationBase_C_setMeshVisibility");
static_assert(sizeof(BP_LocationBase_C_setMeshVisibility) == 0x00000B, "Wrong size on BP_LocationBase_C_setMeshVisibility");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, visible) == 0x000000, "Member 'BP_LocationBase_C_setMeshVisibility::visible' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, ghost) == 0x000001, "Member 'BP_LocationBase_C_setMeshVisibility::ghost' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, Temp_bool_Variable) == 0x000002, "Member 'BP_LocationBase_C_setMeshVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, Temp_byte_Variable) == 0x000003, "Member 'BP_LocationBase_C_setMeshVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, Temp_byte_Variable_1) == 0x000004, "Member 'BP_LocationBase_C_setMeshVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, Temp_bool_Variable_1) == 0x000005, "Member 'BP_LocationBase_C_setMeshVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, Temp_byte_Variable_2) == 0x000006, "Member 'BP_LocationBase_C_setMeshVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, Temp_byte_Variable_3) == 0x000007, "Member 'BP_LocationBase_C_setMeshVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_LocationBase_C_setMeshVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, K2Node_Select_Default) == 0x000009, "Member 'BP_LocationBase_C_setMeshVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setMeshVisibility, K2Node_Select_Default_1) == 0x00000A, "Member 'BP_LocationBase_C_setMeshVisibility::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.addMarker
// 0x0048 (0x0048 - 0x0000)
struct BP_LocationBase_C_addMarker final
{
public:
	const class USBZMarkerDataAsset*              MarkerDataAsset;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddLocalMarker_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationBase_C_addMarker) == 0x000008, "Wrong alignment on BP_LocationBase_C_addMarker");
static_assert(sizeof(BP_LocationBase_C_addMarker) == 0x000048, "Wrong size on BP_LocationBase_C_addMarker");
static_assert(offsetof(BP_LocationBase_C_addMarker, MarkerDataAsset) == 0x000000, "Member 'BP_LocationBase_C_addMarker::MarkerDataAsset' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_LocationBase_C_addMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_MakeVector_ReturnValue) == 0x00000C, "Member 'BP_LocationBase_C_addMarker::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_GetComponentBounds_Origin) == 0x000018, "Member 'BP_LocationBase_C_addMarker::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_GetComponentBounds_BoxExtent) == 0x000024, "Member 'BP_LocationBase_C_addMarker::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_GetComponentBounds_SphereRadius) == 0x000030, "Member 'BP_LocationBase_C_addMarker::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_LocationBase_C_addMarker::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_LocationBase_C_addMarker::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_addMarker, CallFunc_AddLocalMarker_ReturnValue) == 0x000044, "Member 'BP_LocationBase_C_addMarker::CallFunc_AddLocalMarker_ReturnValue' has a wrong offset!");

// Function BP_LocationBase.BP_LocationBase_C.setStateInteractable
// 0x0020 (0x0020 - 0x0000)
struct BP_LocationBase_C_setStateInteractable final
{
public:
	Enum_LocationBase_DefaultState                state;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_LocationBase_DefaultState                Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationBase_C_setStateInteractable) == 0x000004, "Wrong alignment on BP_LocationBase_C_setStateInteractable");
static_assert(sizeof(BP_LocationBase_C_setStateInteractable) == 0x000020, "Wrong size on BP_LocationBase_C_setStateInteractable");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, state) == 0x000000, "Member 'BP_LocationBase_C_setStateInteractable::state' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_byte_Variable) == 0x000001, "Member 'BP_LocationBase_C_setStateInteractable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_int_Variable) == 0x000004, "Member 'BP_LocationBase_C_setStateInteractable::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_int_Variable_1) == 0x000008, "Member 'BP_LocationBase_C_setStateInteractable::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_int_Variable_2) == 0x00000C, "Member 'BP_LocationBase_C_setStateInteractable::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_int_Variable_3) == 0x000010, "Member 'BP_LocationBase_C_setStateInteractable::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_int_Variable_4) == 0x000014, "Member 'BP_LocationBase_C_setStateInteractable::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, Temp_int_Variable_5) == 0x000018, "Member 'BP_LocationBase_C_setStateInteractable::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_LocationBase_C_setStateInteractable, K2Node_Select_Default) == 0x00001C, "Member 'BP_LocationBase_C_setStateInteractable::K2Node_Select_Default' has a wrong offset!");

}

