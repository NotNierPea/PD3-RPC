#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiaDistHeistObject

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MoreHeistAtmoVarObjectHeist_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DiaDistHeistObject.DiaDistHeistObject_C
// 0x0018 (0x0320 - 0x0308)
class ADiaDistHeistObject_C final : public AMoreHeistAtmoVarObjectHeist_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_DiaDistHeistObject_C;               // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ADirectionalLight*                      DirectionalLight;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirLightTargetValue;                               // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_DiaDistHeistObject(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Time(const struct FTimeSettings& TimeSettings);
	void TickExec_1F58A76B44B48DA75304DCB8F0E1FC23(const class UDelegateTimer* Timer, float ElapsedTime, float TimeSinceLast);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DiaDistHeistObject_C">();
	}
	static class ADiaDistHeistObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADiaDistHeistObject_C>();
	}
};
static_assert(alignof(ADiaDistHeistObject_C) == 0x000008, "Wrong alignment on ADiaDistHeistObject_C");
static_assert(sizeof(ADiaDistHeistObject_C) == 0x000320, "Wrong size on ADiaDistHeistObject_C");
static_assert(offsetof(ADiaDistHeistObject_C, UberGraphFrame_DiaDistHeistObject_C) == 0x000308, "Member 'ADiaDistHeistObject_C::UberGraphFrame_DiaDistHeistObject_C' has a wrong offset!");
static_assert(offsetof(ADiaDistHeistObject_C, DirectionalLight) == 0x000310, "Member 'ADiaDistHeistObject_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ADiaDistHeistObject_C, DirLightTargetValue) == 0x000318, "Member 'ADiaDistHeistObject_C::DirLightTargetValue' has a wrong offset!");

}

