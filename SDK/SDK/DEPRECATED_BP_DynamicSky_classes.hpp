#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEPRECATED_BP_DynamicSky

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DEPRECATED_BP_DynamicSky.DEPRECATED_BP_DynamicSky_C
// 0x0080 (0x0328 - 0x02A8)
class ADEPRECATED_BP_DynamicSky_C final : public AActor
{
public:
	class UStaticMeshComponent*                   Sky_Dome_Radial;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSun;                                         // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableCustomColor;                                 // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunColor;                                          // 0x02B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunRadius;                                         // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunBrightness;                                     // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Cloud01;                                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud01Speed;                                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud01MoveX;                                      // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud01MoveY;                                      // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud01Spacing;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Cloud02;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud02Speed;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud02MoveX;                                      // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud02MoveY;                                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud02Spacing;                                    // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        Sun_LightComponent;                                // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatSky;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColorAtlas*                 CurveAtlas;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZenithColor;                                       // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkyColor;                                          // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StarBrightness;                                    // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DEPRECATED_BP_DynamicSky_C">();
	}
	static class ADEPRECATED_BP_DynamicSky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADEPRECATED_BP_DynamicSky_C>();
	}
};
static_assert(alignof(ADEPRECATED_BP_DynamicSky_C) == 0x000008, "Wrong alignment on ADEPRECATED_BP_DynamicSky_C");
static_assert(sizeof(ADEPRECATED_BP_DynamicSky_C) == 0x000328, "Wrong size on ADEPRECATED_BP_DynamicSky_C");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Sky_Dome_Radial) == 0x0002A8, "Member 'ADEPRECATED_BP_DynamicSky_C::Sky_Dome_Radial' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, EnableSun) == 0x0002B0, "Member 'ADEPRECATED_BP_DynamicSky_C::EnableSun' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, EnableCustomColor) == 0x0002B1, "Member 'ADEPRECATED_BP_DynamicSky_C::EnableCustomColor' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, SunColor) == 0x0002B4, "Member 'ADEPRECATED_BP_DynamicSky_C::SunColor' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, SunRadius) == 0x0002C4, "Member 'ADEPRECATED_BP_DynamicSky_C::SunRadius' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, SunBrightness) == 0x0002C8, "Member 'ADEPRECATED_BP_DynamicSky_C::SunBrightness' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud01) == 0x0002D0, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud01' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud01Speed) == 0x0002D8, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud01Speed' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud01MoveX) == 0x0002DC, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud01MoveX' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud01MoveY) == 0x0002E0, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud01MoveY' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud01Spacing) == 0x0002E4, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud01Spacing' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud02) == 0x0002E8, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud02' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud02Speed) == 0x0002F0, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud02Speed' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud02MoveX) == 0x0002F4, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud02MoveX' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud02MoveY) == 0x0002F8, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud02MoveY' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Cloud02Spacing) == 0x0002FC, "Member 'ADEPRECATED_BP_DynamicSky_C::Cloud02Spacing' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, Sun_LightComponent) == 0x000300, "Member 'ADEPRECATED_BP_DynamicSky_C::Sun_LightComponent' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, MatSky) == 0x000308, "Member 'ADEPRECATED_BP_DynamicSky_C::MatSky' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, CurveAtlas) == 0x000310, "Member 'ADEPRECATED_BP_DynamicSky_C::CurveAtlas' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, ZenithColor) == 0x000318, "Member 'ADEPRECATED_BP_DynamicSky_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, SkyColor) == 0x00031C, "Member 'ADEPRECATED_BP_DynamicSky_C::SkyColor' has a wrong offset!");
static_assert(offsetof(ADEPRECATED_BP_DynamicSky_C, StarBrightness) == 0x000320, "Member 'ADEPRECATED_BP_DynamicSky_C::StarBrightness' has a wrong offset!");

}

