#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ServerBrowser_SecurityCompanyDisplay

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_ServerBrowser_SecurityCompanyDisplay.WBP_ServerBrowser_SecurityCompanyDisplay_C.ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay
// 0x00C0 (0x00C0 - 0x0000)
struct WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	const class UPD3SecurityCompanyDataAsset*     CallFunc_GetSecurityCompany_ReturnValue;           // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0050(0x0028)()
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_1; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0088(0x0028)()
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_2; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay) == 0x000008, "Wrong alignment on WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay");
static_assert(sizeof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay) == 0x0000C0, "Wrong size on WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, EntryPoint) == 0x000000, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, CallFunc_GetSecurityCompany_ReturnValue) == 0x000030, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::CallFunc_GetSecurityCompany_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput) == 0x000040, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, K2Node_MakeStruct_SlateColor_1) == 0x000050, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_1) == 0x000078, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, K2Node_MakeStruct_SlateColor_2) == 0x000088, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_2) == 0x0000B0, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_ExecuteUbergraph_WBP_ServerBrowser_SecurityCompanyDisplay::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_2' has a wrong offset!");

// Function WBP_ServerBrowser_SecurityCompanyDisplay.WBP_ServerBrowser_SecurityCompanyDisplay_C.SetCompanyNameAndDescription
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription final
{
public:
	class FText                                   InSecurityCompanyName;                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0070(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0088(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00B8(0x0028)()
};
static_assert(alignof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription) == 0x000008, "Wrong alignment on WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription");
static_assert(sizeof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription) == 0x0000E0, "Wrong size on WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, InSecurityCompanyName) == 0x000000, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::InSecurityCompanyName' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, Temp_struct_Variable) == 0x000018, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, CallFunc_Conv_TextToString_ReturnValue) == 0x000028, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, CallFunc_Split_LeftS) == 0x000038, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, CallFunc_Split_RightS) == 0x000048, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, CallFunc_Split_ReturnValue) == 0x000058, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, Temp_struct_Variable_1) == 0x00005C, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, CallFunc_Conv_StringToText_ReturnValue) == 0x000070, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000088, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, Temp_bool_Variable) == 0x0000A0, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, Temp_byte_Variable) == 0x0000A1, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, Temp_byte_Variable_1) == 0x0000A2, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, K2Node_Select_Default) == 0x0000A3, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, Temp_bool_Variable_1) == 0x0000A4, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, K2Node_Select_Default_1) == 0x0000A8, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription, K2Node_MakeStruct_SlateColor) == 0x0000B8, "Member 'WBP_ServerBrowser_SecurityCompanyDisplay_C_SetCompanyNameAndDescription::K2Node_MakeStruct_SlateColor' has a wrong offset!");

}

