#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_DifficultySelectorWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.ExecuteUbergraph_WBP_UI_DifficultySelectorWidget
// 0x0070 (0x0070 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZGameUserSettings*                   CallFunc_GetSBZGameUserSettings_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZDifficulty                                CallFunc_GetMatchmakingDifficulty_ReturnValue;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              Temp_struct_Variable;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InCurrentIndex;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOverrideReadOnly;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZGameStateMachine*                   CallFunc_GetGameStateMachine_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetMaxDifficultyCount_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInHasFocus;                          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInIsHovered;                         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetGlobalColor_ReturnValue;               // 0x0044(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget) == 0x000008, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget) == 0x000070, "Wrong size on WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, EntryPoint) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_GetSBZGameUserSettings_ReturnValue) == 0x000008, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_GetSBZGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_GetMatchmakingDifficulty_ReturnValue) == 0x000010, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_GetMatchmakingDifficulty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, Temp_byte_Variable) == 0x000011, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, Temp_byte_Variable_1) == 0x000012, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, Temp_bool_Variable) == 0x000013, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, Temp_struct_Variable) == 0x000014, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, Temp_struct_Variable_1) == 0x00001C, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Event_InCurrentIndex) == 0x000024, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Event_InCurrentIndex' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Event_bOverrideReadOnly) == 0x000028, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Event_bOverrideReadOnly' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_Conv_IntToByte_ReturnValue) == 0x000029, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_GetValidValue_ReturnValue) == 0x00002A, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, Temp_bool_Variable_1) == 0x00002B, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_GetGameStateMachine_ReturnValue) == 0x000030, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_GetGameStateMachine_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_GetMaxDifficultyCount_ReturnValue) == 0x000038, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_GetMaxDifficultyCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Event_bInHasFocus) == 0x000040, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Event_bInHasFocus' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Event_bInIsHovered) == 0x000041, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Event_bInIsHovered' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, CallFunc_GetGlobalColor_ReturnValue) == 0x000044, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::CallFunc_GetGlobalColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Event_IsDesignTime) == 0x000054, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Select_Default) == 0x000055, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_Select_Default_1) == 0x000058, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000060, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'WBP_UI_DifficultySelectorWidget_C_ExecuteUbergraph_WBP_UI_DifficultySelectorWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_PreConstruct");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_PreConstruct) == 0x000001, "Wrong size on WBP_UI_DifficultySelectorWidget_C_PreConstruct");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.ButtonHoveredChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged final
{
public:
	bool                                          bInIsHovered;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged) == 0x000001, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged) == 0x000001, "Wrong size on WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged, bInIsHovered) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_ButtonHoveredChanged::bInIsHovered' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.ButtonFocusedChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged final
{
public:
	bool                                          bInHasFocus;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged) == 0x000001, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged) == 0x000001, "Wrong size on WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged, bInHasFocus) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_ButtonFocusedChanged::bInHasFocus' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.OnSelectionOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged final
{
public:
	int32                                         InCurrentIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideReadOnly;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged) == 0x000004, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged) == 0x000008, "Wrong size on WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged, InCurrentIndex) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged::InCurrentIndex' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged, bOverrideReadOnly) == 0x000004, "Member 'WBP_UI_DifficultySelectorWidget_C_OnSelectionOptionChanged::bOverrideReadOnly' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.UpdateDifficultyVisuals
// 0x0048 (0x0048 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals final
{
public:
	ESBZDifficulty                                InDifficulty;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZUIManager*                          CallFunc_GetUIManager_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USBZUIData*                       CallFunc_GetUIData_ReturnValue;                    // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDifficultyText_OutDifficultyText;      // 0x0028(0x0018)()
	bool                                          CallFunc_GetDifficultyText_bHasText;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals) == 0x000008, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals) == 0x000048, "Wrong size on WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, InDifficulty) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::InDifficulty' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, CallFunc_GetUIManager_ReturnValue) == 0x000008, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::CallFunc_GetUIManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, CallFunc_GetUIData_ReturnValue) == 0x000018, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::CallFunc_GetUIData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, CallFunc_GetDifficultyText_OutDifficultyText) == 0x000028, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::CallFunc_GetDifficultyText_OutDifficultyText' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals, CallFunc_GetDifficultyText_bHasText) == 0x000040, "Member 'WBP_UI_DifficultySelectorWidget_C_UpdateDifficultyVisuals::CallFunc_GetDifficultyText_bHasText' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.GetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_GetDifficulty final
{
public:
	ESBZDifficulty                                NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_GetDifficulty) == 0x000001, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_GetDifficulty");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_GetDifficulty) == 0x000001, "Wrong size on WBP_UI_DifficultySelectorWidget_C_GetDifficulty");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_GetDifficulty, NewParam) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_GetDifficulty::NewParam' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.SetFocusVisuals
// 0x0060 (0x0060 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals final
{
public:
	bool                                          InIsFocused;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0028(0x0028)()
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_2;                // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals) == 0x000008, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals) == 0x000060, "Wrong size on WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals, InIsFocused) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals::InIsFocused' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals, CallFunc_SelectColor_ReturnValue) == 0x000004, "Member 'WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals, CallFunc_SelectColor_ReturnValue_1) == 0x000014, "Member 'WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals, K2Node_MakeStruct_SlateColor) == 0x000028, "Member 'WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals, CallFunc_SelectColor_ReturnValue_2) == 0x000050, "Member 'WBP_UI_DifficultySelectorWidget_C_SetFocusVisuals::CallFunc_SelectColor_ReturnValue_2' has a wrong offset!");

// Function WBP_UI_DifficultySelectorWidget.WBP_UI_DifficultySelectorWidget_C.SetHoveredVisuals
// 0x0005 (0x0005 - 0x0000)
struct WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals final
{
public:
	bool                                          InIsHovered;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals) == 0x000001, "Wrong alignment on WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals");
static_assert(sizeof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals) == 0x000005, "Wrong size on WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals, InIsHovered) == 0x000000, "Member 'WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals::InIsHovered' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals, Temp_bool_Variable) == 0x000001, "Member 'WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals, Temp_byte_Variable) == 0x000002, "Member 'WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals, K2Node_Select_Default) == 0x000004, "Member 'WBP_UI_DifficultySelectorWidget_C_SetHoveredVisuals::K2Node_Select_Default' has a wrong offset!");

}

