#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: component_screen

#include "Basic.hpp"

#include "component_screen_classes.hpp"
#include "component_screen_parameters.hpp"


namespace SDK
{

// Function component_screen.component_screen_C.ExecuteUbergraph_component_screen
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::ExecuteUbergraph_component_screen(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "ExecuteUbergraph_component_screen");

	Params::component_screen_C_ExecuteUbergraph_component_screen Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSide_Attenuation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Side_Attenuation_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setSide_Attenuation(float Side_Attenuation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSide_Attenuation");

	Params::component_screen_C_setSide_Attenuation Parms{};

	Parms.Side_Attenuation_0 = Side_Attenuation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSpecularity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Specularity_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setSpecularity(float Specularity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSpecularity");

	Params::component_screen_C_setSpecularity Parms{};

	Parms.Specularity_0 = Specularity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setRoughness_Multiplier
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Roughness_Multiplier_0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setRoughness_Multiplier(float Roughness_Multiplier_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setRoughness_Multiplier");

	Params::component_screen_C_setRoughness_Multiplier Parms{};

	Parms.Roughness_Multiplier_0 = Roughness_Multiplier_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.H)
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_H__0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::H__0(float Param_H__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "H)");

	Params::component_screen_C_H__0 Parms{};

	Parms.Param_H__0 = Param_H__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setNumber of  horizontal slides in the texture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Number_of__horizontal_slides_in_the_texture_0          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setNumber_of__horizontal_slides_in_the_texture(float Number_of__horizontal_slides_in_the_texture_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setNumber of  horizontal slides in the texture");

	Params::component_screen_C_setNumber_of__horizontal_slides_in_the_texture Parms{};

	Parms.Number_of__horizontal_slides_in_the_texture_0 = Number_of__horizontal_slides_in_the_texture_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setNumber of  vertical slides in the texture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Number_of__vertical_slides_in_the_texture_0            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setNumber_of__vertical_slides_in_the_texture(float Number_of__vertical_slides_in_the_texture_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setNumber of  vertical slides in the texture");

	Params::component_screen_C_setNumber_of__vertical_slides_in_the_texture Parms{};

	Parms.Number_of__vertical_slides_in_the_texture_0 = Number_of__vertical_slides_in_the_texture_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setBanding_refresh_rate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   banding_refresh_rate_0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setBanding_refresh_rate(float banding_refresh_rate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setBanding_refresh_rate");

	Params::component_screen_C_setBanding_refresh_rate Parms{};

	Parms.banding_refresh_rate_0 = banding_refresh_rate_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setBanding_visibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   banding_visibility_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setBanding_visibility(float banding_visibility_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setBanding_visibility");

	Params::component_screen_C_setBanding_visibility Parms{};

	Parms.banding_visibility_0 = banding_visibility_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setIntensity_screen
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   intensity_screen_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setIntensity_screen(float intensity_screen_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setIntensity_screen");

	Params::component_screen_C_setIntensity_screen Parms{};

	Parms.intensity_screen_0 = intensity_screen_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSwap_period
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Swap_period_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setSwap_period(float Swap_period_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSwap_period");

	Params::component_screen_C_setSwap_period Parms{};

	Parms.Swap_period_0 = Swap_period_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setLight_Angle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Light_Angle_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setLight_Angle(float Light_Angle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setLight_Angle");

	Params::component_screen_C_setLight_Angle Parms{};

	Parms.Light_Angle_0 = Light_Angle_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setLight_Spread
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Light_Spread_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setLight_Spread(float Light_Spread_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setLight_Spread");

	Params::component_screen_C_setLight_Spread Parms{};

	Parms.Light_Spread_0 = Light_Spread_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setLight_Reach
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Light_Reach_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setLight_Reach(float Light_Reach_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setLight_Reach");

	Params::component_screen_C_setLight_Reach Parms{};

	Parms.Light_Reach_0 = Light_Reach_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setLight_Intensity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Light_Intensity_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setLight_Intensity(float Light_Intensity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setLight_Intensity");

	Params::component_screen_C_setLight_Intensity Parms{};

	Parms.Light_Intensity_0 = Light_Intensity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setPixel_type
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Pixel_type_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setPixel_type(int32 Pixel_type_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setPixel_type");

	Params::component_screen_C_setPixel_type Parms{};

	Parms.Pixel_type_0 = Pixel_type_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setResolution
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   resolution_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setResolution(int32 resolution_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setResolution");

	Params::component_screen_C_setResolution Parms{};

	Parms.resolution_0 = resolution_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSub_texture_part_used_end_range
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   sub_texture_part_used_end_range_0                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setSub_texture_part_used_end_range(int32 sub_texture_part_used_end_range_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSub_texture_part_used_end_range");

	Params::component_screen_C_setSub_texture_part_used_end_range Parms{};

	Parms.sub_texture_part_used_end_range_0 = sub_texture_part_used_end_range_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSub_texture_part_used_start_range
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   sub_texture_part_used_start_range_0                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setSub_texture_part_used_start_range(int32 sub_texture_part_used_start_range_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSub_texture_part_used_start_range");

	Params::component_screen_C_setSub_texture_part_used_start_range Parms{};

	Parms.sub_texture_part_used_start_range_0 = sub_texture_part_used_start_range_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setIs_OFF
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_OFF_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ucomponent_screen_C::setIs_OFF(bool Is_OFF_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setIs_OFF");

	Params::component_screen_C_setIs_OFF Parms{};

	Parms.Is_OFF_0 = Is_OFF_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setIs_Fully_destructable
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Fully_destructable_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ucomponent_screen_C::setIs_Fully_destructable(bool Is_Fully_destructable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setIs_Fully_destructable");

	Params::component_screen_C_setIs_Fully_destructable Parms{};

	Parms.Is_Fully_destructable_0 = Is_Fully_destructable_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setMode_RGB
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Mode_RGB_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ucomponent_screen_C::setMode_RGB(bool Mode_RGB_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setMode_RGB");

	Params::component_screen_C_setMode_RGB Parms{};

	Parms.Mode_RGB_0 = Mode_RGB_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSwap_offest_by_position
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    swap_offest_by_position_0                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ucomponent_screen_C::setSwap_offest_by_position(bool swap_offest_by_position_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSwap_offest_by_position");

	Params::component_screen_C_setSwap_offest_by_position Parms{};

	Parms.swap_offest_by_position_0 = swap_offest_by_position_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setScreenPlaysMovie
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Screens_plays_movie_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ucomponent_screen_C::setScreenPlaysMovie(bool Screens_plays_movie_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setScreenPlaysMovie");

	Params::component_screen_C_setScreenPlaysMovie Parms{};

	Parms.Screens_plays_movie_0 = Screens_plays_movie_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setSource_bink_media_player
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBinkMediaPlayer*                 source_bink_media_player_0                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setSource_bink_media_player(class UBinkMediaPlayer* source_bink_media_player_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setSource_bink_media_player");

	Params::component_screen_C_setSource_bink_media_player Parms{};

	Parms.source_bink_media_player_0 = source_bink_media_player_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setDiffuse_color
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Diffuse_color_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setDiffuse_color(const struct FLinearColor& Diffuse_color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setDiffuse_color");

	Params::component_screen_C_setDiffuse_color Parms{};

	Parms.Diffuse_color_0 = std::move(Diffuse_color_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void Ucomponent_screen_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function component_screen.component_screen_C.setup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             meshes_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USBZCosmeticDestructionComponent* SBZCosmeticDestruction_0                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setup(class UStaticMeshComponent* meshes_0, class USBZCosmeticDestructionComponent* SBZCosmeticDestruction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setup");

	Params::component_screen_C_setup Parms{};

	Parms.meshes_0 = meshes_0;
	Parms.SBZCosmeticDestruction_0 = SBZCosmeticDestruction_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.onDestructionHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESBZCosmeticDestructionType             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSBZCosmeticDestructionContext&HitContext                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void Ucomponent_screen_C::onDestructionHit(ESBZCosmeticDestructionType Type, const struct FSBZCosmeticDestructionContext& HitContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "onDestructionHit");

	Params::component_screen_C_onDestructionHit Parms{};

	Parms.Type = Type;
	Parms.HitContext = std::move(HitContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function component_screen.component_screen_C.setDamageState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ucomponent_screen_C::setDamageState(int32 damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("component_screen_C", "setDamageState");

	Params::component_screen_C_setDamageState Parms{};

	Parms.damage = damage;

	UObject::ProcessEvent(Func, &Parms);
}

}

