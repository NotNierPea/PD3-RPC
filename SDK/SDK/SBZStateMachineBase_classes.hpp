#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SBZStateMachineBase

#include "Basic.hpp"

#include "SBZStateMachineBase_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class SBZStateMachineBase.SBZStateMachine
// 0x0090 (0x00C0 - 0x0030)
class USBZStateMachine : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZStateMachineState*                  CurrentState;                                      // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSBZSetStateRequest>            SetStateQueue;                                     // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class USBZStateMachineState*> States;                                          // 0x0070(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SBZStateMachine">();
	}
	static class USBZStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<USBZStateMachine>();
	}
};
static_assert(alignof(USBZStateMachine) == 0x000008, "Wrong alignment on USBZStateMachine");
static_assert(sizeof(USBZStateMachine) == 0x0000C0, "Wrong size on USBZStateMachine");
static_assert(offsetof(USBZStateMachine, CurrentState) == 0x000050, "Member 'USBZStateMachine::CurrentState' has a wrong offset!");
static_assert(offsetof(USBZStateMachine, SetStateQueue) == 0x000058, "Member 'USBZStateMachine::SetStateQueue' has a wrong offset!");
static_assert(offsetof(USBZStateMachine, States) == 0x000070, "Member 'USBZStateMachine::States' has a wrong offset!");

// Class SBZStateMachineBase.SBZStateMachineData
// 0x0008 (0x0038 - 0x0030)
class USBZStateMachineData : public UObject
{
public:
	class USBZStateMachineState*                  PreviousState;                                     // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SBZStateMachineData">();
	}
	static class USBZStateMachineData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USBZStateMachineData>();
	}
};
static_assert(alignof(USBZStateMachineData) == 0x000008, "Wrong alignment on USBZStateMachineData");
static_assert(sizeof(USBZStateMachineData) == 0x000038, "Wrong size on USBZStateMachineData");
static_assert(offsetof(USBZStateMachineData, PreviousState) == 0x000030, "Member 'USBZStateMachineData::PreviousState' has a wrong offset!");

// Class SBZStateMachineBase.SBZStateMachineState
// 0x0010 (0x0040 - 0x0030)
class USBZStateMachineState : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SBZStateMachineState">();
	}
	static class USBZStateMachineState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USBZStateMachineState>();
	}
};
static_assert(alignof(USBZStateMachineState) == 0x000008, "Wrong alignment on USBZStateMachineState");
static_assert(sizeof(USBZStateMachineState) == 0x000040, "Wrong size on USBZStateMachineState");

}

