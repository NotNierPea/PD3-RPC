#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoreHeistAtmoVarObjectHeist

#include "Basic.hpp"

#include "MoreHeistAtmoVarObjectHeist_classes.hpp"
#include "MoreHeistAtmoVarObjectHeist_parameters.hpp"


namespace SDK
{

// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.ExecuteUbergraph_MoreHeistAtmoVarObjectHeist
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::ExecuteUbergraph_MoreHeistAtmoVarObjectHeist(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "ExecuteUbergraph_MoreHeistAtmoVarObjectHeist");

	Params::MoreHeistAtmoVarObjectHeist_C_ExecuteUbergraph_MoreHeistAtmoVarObjectHeist Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMoreHeistAtmoVarObjectHeist_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.ProcessWeather
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FWeatherSettings&          Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::ProcessWeather(const struct FWeatherSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "ProcessWeather");

	Params::MoreHeistAtmoVarObjectHeist_C_ProcessWeather Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.Process Time
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTimeSettings&             TimeSettings                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::Process_Time(const struct FTimeSettings& TimeSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "Process Time");

	Params::MoreHeistAtmoVarObjectHeist_C_Process_Time Parms{};

	Parms.TimeSettings = std::move(TimeSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.DeleteDirLight
// (Protected, BlueprintCallable, BlueprintEvent)

void AMoreHeistAtmoVarObjectHeist_C::DeleteDirLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "DeleteDirLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.SetHeightFog
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ZLocation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Density                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Falloff                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FColor&                    FogColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::SetHeightFog(float ZLocation, float Density, float Falloff, const struct FColor& FogColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "SetHeightFog");

	Params::MoreHeistAtmoVarObjectHeist_C_SetHeightFog Parms{};

	Parms.ZLocation = ZLocation;
	Parms.Density = Density;
	Parms.Falloff = Falloff;
	Parms.FogColor = std::move(FogColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.OverrideSky
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OverrideIntensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SkylightIntensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkyMaterials                           SkyboxType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OverrideColors                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FColor&                    DirLightColor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DirLightIntensityAdd                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FColor&                    SkylightColor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::OverrideSky(bool OverrideIntensity, float SkylightIntensity, ESkyMaterials SkyboxType, bool OverrideColors, const struct FColor& DirLightColor, float DirLightIntensityAdd, const struct FColor& SkylightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "OverrideSky");

	Params::MoreHeistAtmoVarObjectHeist_C_OverrideSky Parms{};

	Parms.OverrideIntensity = OverrideIntensity;
	Parms.SkylightIntensity = SkylightIntensity;
	Parms.SkyboxType = SkyboxType;
	Parms.OverrideColors = OverrideColors;
	Parms.DirLightColor = std::move(DirLightColor);
	Parms.DirLightIntensityAdd = DirLightIntensityAdd;
	Parms.SkylightColor = std::move(SkylightColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.DeleteSunMoon
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMoreHeistAtmoVarObjectHeist_C::DeleteSunMoon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "DeleteSunMoon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.SpawnRain
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MinIntensity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxIntensity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FColor&                    RainColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FColor&                    SplashColor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>&                  HideRainRoomNames                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AMoreHeistAtmoVarObjectHeist_C::SpawnRain(int32 MinIntensity, int32 MaxIntensity, float ZOffset, const struct FColor& RainColor, const struct FColor& SplashColor, TArray<class FString>& HideRainRoomNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "SpawnRain");

	Params::MoreHeistAtmoVarObjectHeist_C_SpawnRain Parms{};

	Parms.MinIntensity = MinIntensity;
	Parms.MaxIntensity = MaxIntensity;
	Parms.ZOffset = ZOffset;
	Parms.RainColor = std::move(RainColor);
	Parms.SplashColor = std::move(SplashColor);
	Parms.HideRainRoomNames = std::move(HideRainRoomNames);

	UObject::ProcessEvent(Func, &Parms);

	HideRainRoomNames = std::move(Parms.HideRainRoomNames);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.AreCompatible
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeatherType                            WeatherType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETimeType                               TimeType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   AreCompatible_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMoreHeistAtmoVarObjectHeist_C::AreCompatible(EWeatherType WeatherType, ETimeType TimeType, bool* AreCompatible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "AreCompatible");

	Params::MoreHeistAtmoVarObjectHeist_C_AreCompatible Parms{};

	Parms.WeatherType = WeatherType;
	Parms.TimeType = TimeType;

	UObject::ProcessEvent(Func, &Parms);

	if (AreCompatible_0 != nullptr)
		*AreCompatible_0 = Parms.AreCompatible_0;
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.OverrideAtmosphericFog
// (Protected, BlueprintCallable, BlueprintEvent)

void AMoreHeistAtmoVarObjectHeist_C::OverrideAtmosphericFog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "OverrideAtmosphericFog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.GetRowOfTimeType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETimeType                               TimeType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTimeSettings*                   Settings                                               (Parm, OutParm, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::GetRowOfTimeType(ETimeType TimeType, struct FTimeSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "GetRowOfTimeType");

	Params::MoreHeistAtmoVarObjectHeist_C_GetRowOfTimeType Parms{};

	Parms.TimeType = TimeType;

	UObject::ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = std::move(Parms.Settings);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.GetRowOfWeatherType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeatherType                            WeatherType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FWeatherSettings*                Settings                                               (Parm, OutParm, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::GetRowOfWeatherType(EWeatherType WeatherType, struct FWeatherSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "GetRowOfWeatherType");

	Params::MoreHeistAtmoVarObjectHeist_C_GetRowOfWeatherType Parms{};

	Parms.WeatherType = WeatherType;

	UObject::ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = std::move(Parms.Settings);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.OverrideProcessingVolume
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPostProcessSettings&      Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void AMoreHeistAtmoVarObjectHeist_C::OverrideProcessingVolume(const struct FPostProcessSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "OverrideProcessingVolume");

	Params::MoreHeistAtmoVarObjectHeist_C_OverrideProcessingVolume Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.GetSkybox
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor**                          SkyboxActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::GetSkybox(class AActor** SkyboxActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "GetSkybox");

	Params::MoreHeistAtmoVarObjectHeist_C_GetSkybox Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkyboxActor != nullptr)
		*SkyboxActor = Parms.SkyboxActor;
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.OverrideVolumetricClouds
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Altitude                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkyboxSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMoreHeistAtmoVarObjectHeist_C::OverrideVolumetricClouds(float Altitude, float SkyboxSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "OverrideVolumetricClouds");

	Params::MoreHeistAtmoVarObjectHeist_C_OverrideVolumetricClouds Parms{};

	Parms.Altitude = Altitude;
	Parms.SkyboxSize = SkyboxSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.GetSkyboxMaterials
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Newer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TMap<ESkyMaterials, class UMaterialInstance*>*AllMaterials                                           (Parm, OutParm)

void AMoreHeistAtmoVarObjectHeist_C::GetSkyboxMaterials(bool Newer, TMap<ESkyMaterials, class UMaterialInstance*>* AllMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "GetSkyboxMaterials");

	Params::MoreHeistAtmoVarObjectHeist_C_GetSkyboxMaterials Parms{};

	Parms.Newer = Newer;

	UObject::ProcessEvent(Func, &Parms);

	if (AllMaterials != nullptr)
		*AllMaterials = std::move(Parms.AllMaterials);
}


// Function MoreHeistAtmoVarObjectHeist.MoreHeistAtmoVarObjectHeist_C.GetHeistSkyboxMat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DirectoryPath                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    AssetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// ESkyMaterials                           SkyMatEnum                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<ESkyMaterials, class UMaterialInstance*>&Dictionary                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AMoreHeistAtmoVarObjectHeist_C::GetHeistSkyboxMat(class FName DirectoryPath, const class FString& AssetName, ESkyMaterials SkyMatEnum, TMap<ESkyMaterials, class UMaterialInstance*>& Dictionary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoreHeistAtmoVarObjectHeist_C", "GetHeistSkyboxMat");

	Params::MoreHeistAtmoVarObjectHeist_C_GetHeistSkyboxMat Parms{};

	Parms.DirectoryPath = DirectoryPath;
	Parms.AssetName = std::move(AssetName);
	Parms.SkyMatEnum = SkyMatEnum;
	Parms.Dictionary = std::move(Dictionary);

	UObject::ProcessEvent(Func, &Parms);

	Dictionary = std::move(Parms.Dictionary);
}

}

