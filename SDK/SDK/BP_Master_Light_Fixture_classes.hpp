#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Master_Light_Fixture

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Master_Light_Fixture.BP_Master_Light_Fixture_C
// 0x0098 (0x0340 - 0x02A8)
class ABP_Master_Light_Fixture_C : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Active;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Emissive_Strength;                                 // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Light_Source_Transform;                            // 0x02C0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Light_Intensity;                                   // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Light_Mobility;                                    // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Attenuation_Radius;                                // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Width;                                      // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Height;                                     // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Barn_Door_Angle;                                   // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Barn_Door_Length;                                  // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Indirect_Lighting_Intensity;                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volumetric_Scattering_Intensity;                   // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use__Temperature;                                  // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Mesh_Shadow;                                       // 0x0315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316[0x2];                                      // 0x0316(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Specular_Scale;                                    // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Affect_Translucent_Lighting;                       // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Affect_Reflections;                                // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use_Emissive_for_Static_Lighting;                  // 0x031F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temperature__Kelvin_;                              // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0324(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_outer_Angle;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Inner_Angle;                                  // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flickering_Time;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Master_Light_Fixture_C">();
	}
	static class ABP_Master_Light_Fixture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Master_Light_Fixture_C>();
	}
};
static_assert(alignof(ABP_Master_Light_Fixture_C) == 0x000010, "Wrong alignment on ABP_Master_Light_Fixture_C");
static_assert(sizeof(ABP_Master_Light_Fixture_C) == 0x000340, "Wrong size on ABP_Master_Light_Fixture_C");
static_assert(offsetof(ABP_Master_Light_Fixture_C, StaticMesh) == 0x0002A8, "Member 'ABP_Master_Light_Fixture_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_Master_Light_Fixture_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Is_Active) == 0x0002B8, "Member 'ABP_Master_Light_Fixture_C::Is_Active' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Emissive_Strength) == 0x0002BC, "Member 'ABP_Master_Light_Fixture_C::Emissive_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Light_Source_Transform) == 0x0002C0, "Member 'ABP_Master_Light_Fixture_C::Light_Source_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Light_Intensity) == 0x0002F0, "Member 'ABP_Master_Light_Fixture_C::Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Light_Mobility) == 0x0002F4, "Member 'ABP_Master_Light_Fixture_C::Light_Mobility' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Attenuation_Radius) == 0x0002F8, "Member 'ABP_Master_Light_Fixture_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Source_Width) == 0x0002FC, "Member 'ABP_Master_Light_Fixture_C::Source_Width' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Source_Height) == 0x000300, "Member 'ABP_Master_Light_Fixture_C::Source_Height' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Barn_Door_Angle) == 0x000304, "Member 'ABP_Master_Light_Fixture_C::Barn_Door_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Barn_Door_Length) == 0x000308, "Member 'ABP_Master_Light_Fixture_C::Barn_Door_Length' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Indirect_Lighting_Intensity) == 0x00030C, "Member 'ABP_Master_Light_Fixture_C::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Volumetric_Scattering_Intensity) == 0x000310, "Member 'ABP_Master_Light_Fixture_C::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Use__Temperature) == 0x000314, "Member 'ABP_Master_Light_Fixture_C::Use__Temperature' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Mesh_Shadow) == 0x000315, "Member 'ABP_Master_Light_Fixture_C::Mesh_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Specular_Scale) == 0x000318, "Member 'ABP_Master_Light_Fixture_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Cast_Shadows) == 0x00031C, "Member 'ABP_Master_Light_Fixture_C::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Affect_Translucent_Lighting) == 0x00031D, "Member 'ABP_Master_Light_Fixture_C::Affect_Translucent_Lighting' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Affect_Reflections) == 0x00031E, "Member 'ABP_Master_Light_Fixture_C::Affect_Reflections' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Use_Emissive_for_Static_Lighting) == 0x00031F, "Member 'ABP_Master_Light_Fixture_C::Use_Emissive_for_Static_Lighting' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Temperature__Kelvin_) == 0x000320, "Member 'ABP_Master_Light_Fixture_C::Temperature__Kelvin_' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Color) == 0x000324, "Member 'ABP_Master_Light_Fixture_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Spot_outer_Angle) == 0x000334, "Member 'ABP_Master_Light_Fixture_C::Spot_outer_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Spot_Inner_Angle) == 0x000338, "Member 'ABP_Master_Light_Fixture_C::Spot_Inner_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Master_Light_Fixture_C, Flickering_Time) == 0x00033C, "Member 'ABP_Master_Light_Fixture_C::Flickering_Time' has a wrong offset!");

}

