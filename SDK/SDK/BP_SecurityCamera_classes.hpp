#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SecurityCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SecurityCamera.BP_SecurityCamera_C
// 0x0050 (0x0948 - 0x08F8)
class ABP_SecurityCamera_C final : public ASBZSecurityCamera
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   CameraRoot;                                        // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_Flare;                                          // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HelpCollision;                                     // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_SecCam_Exp;                                     // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CameraTraceSceneComponentCameraMesh;               // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ShoutoutCollision;                                 // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CameraBase;                                        // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG_PingTime;                                    // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MarkerID;                                          // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SecurityCamera(int32 EntryPoint);
	void BP_OnStateChanged(ESBZCameraState OldState, ESBZCameraState NewState, bool bDoCosmetics);
	void OnRuntimeStateApplied(ESBZRuntimeState AppliedState);
	void OnRuntimeStateRemoved(ESBZRuntimeState AppliedState);
	void BP_OnIndestructibleCamera();
	void HighlightHackable_1(bool bInHighlight);
	void BP_OnCameraColorStateChanged(ESBZCameraColorState NewCameraColorState);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SecurityCamera_C">();
	}
	static class ABP_SecurityCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SecurityCamera_C>();
	}
};
static_assert(alignof(ABP_SecurityCamera_C) == 0x000008, "Wrong alignment on ABP_SecurityCamera_C");
static_assert(sizeof(ABP_SecurityCamera_C) == 0x000948, "Wrong size on ABP_SecurityCamera_C");
static_assert(offsetof(ABP_SecurityCamera_C, UberGraphFrame) == 0x0008F8, "Member 'ABP_SecurityCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, CameraRoot) == 0x000900, "Member 'ABP_SecurityCamera_C::CameraRoot' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, FX_Flare) == 0x000908, "Member 'ABP_SecurityCamera_C::FX_Flare' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, HelpCollision) == 0x000910, "Member 'ABP_SecurityCamera_C::HelpCollision' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, FX_SecCam_Exp) == 0x000918, "Member 'ABP_SecurityCamera_C::FX_SecCam_Exp' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, CameraTraceSceneComponentCameraMesh) == 0x000920, "Member 'ABP_SecurityCamera_C::CameraTraceSceneComponentCameraMesh' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, ShoutoutCollision) == 0x000928, "Member 'ABP_SecurityCamera_C::ShoutoutCollision' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, Scene) == 0x000930, "Member 'ABP_SecurityCamera_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, CameraBase) == 0x000938, "Member 'ABP_SecurityCamera_C::CameraBase' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, DEBUG_PingTime) == 0x000940, "Member 'ABP_SecurityCamera_C::DEBUG_PingTime' has a wrong offset!");
static_assert(offsetof(ABP_SecurityCamera_C, MarkerID) == 0x000944, "Member 'ABP_SecurityCamera_C::MarkerID' has a wrong offset!");

}

