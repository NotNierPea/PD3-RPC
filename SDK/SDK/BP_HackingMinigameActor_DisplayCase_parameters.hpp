#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HackingMinigameActor_DisplayCase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_HackingMinigameActor_DisplayCase.BP_HackingMinigameActor_DisplayCase_C.ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase
// 0x000C (0x000C - 0x0000)
struct BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnabled;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDoCosmetics;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase) == 0x000004, "Wrong alignment on BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase");
static_assert(sizeof(BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase) == 0x00000C, "Wrong size on BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase, EntryPoint) == 0x000000, "Member 'BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase, K2Node_Event_bEnabled) == 0x000004, "Member 'BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase, K2Node_Event_bDoCosmetics) == 0x000005, "Member 'BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase::K2Node_Event_bDoCosmetics' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000008, "Member 'BP_HackingMinigameActor_DisplayCase_C_ExecuteUbergraph_BP_HackingMinigameActor_DisplayCase::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");

// Function BP_HackingMinigameActor_DisplayCase.BP_HackingMinigameActor_DisplayCase_C.BP_OnEnabledStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDoCosmetics;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged) == 0x000001, "Wrong alignment on BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged");
static_assert(sizeof(BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged) == 0x000002, "Wrong size on BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged, bEnabled) == 0x000000, "Member 'BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged::bEnabled' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged, bDoCosmetics) == 0x000001, "Member 'BP_HackingMinigameActor_DisplayCase_C_BP_OnEnabledStateChanged::bDoCosmetics' has a wrong offset!");

// Function BP_HackingMinigameActor_DisplayCase.BP_HackingMinigameActor_DisplayCase_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript final
{
public:
	float                                         CallFunc_BreakColor_R;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               CallFunc_MakeVector4_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript");
static_assert(sizeof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript) == 0x000020, "Wrong size on BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript, CallFunc_BreakColor_R) == 0x000000, "Member 'BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript, CallFunc_BreakColor_G) == 0x000004, "Member 'BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript, CallFunc_BreakColor_B) == 0x000008, "Member 'BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript, CallFunc_BreakColor_A) == 0x00000C, "Member 'BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript, CallFunc_MakeVector4_ReturnValue) == 0x000010, "Member 'BP_HackingMinigameActor_DisplayCase_C_UserConstructionScript::CallFunc_MakeVector4_ReturnValue' has a wrong offset!");

}

