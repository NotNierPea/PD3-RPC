#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LobbyTypeSelector

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.ExecuteUbergraph_WBP_LobbyTypeSelector
// 0x0028 (0x0028 - 0x0000)
struct WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InCurrentIndex;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOverrideReadOnly;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInHasFocus;                          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZPartyManager*                       CallFunc_GetPartyManager_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector) == 0x000008, "Wrong alignment on WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector");
static_assert(sizeof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector) == 0x000028, "Wrong size on WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, EntryPoint) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, Temp_byte_Variable) == 0x000004, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, Temp_byte_Variable_2) == 0x000006, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, K2Node_Event_InCurrentIndex) == 0x000008, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::K2Node_Event_InCurrentIndex' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, K2Node_Event_bOverrideReadOnly) == 0x00000C, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::K2Node_Event_bOverrideReadOnly' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, K2Node_Event_bInHasFocus) == 0x00000D, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::K2Node_Event_bInHasFocus' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, Temp_int_Variable) == 0x000010, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, CallFunc_GetPartyManager_ReturnValue) == 0x000018, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::CallFunc_GetPartyManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector, K2Node_Select_Default) == 0x000020, "Member 'WBP_LobbyTypeSelector_C_ExecuteUbergraph_WBP_LobbyTypeSelector::K2Node_Select_Default' has a wrong offset!");

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.ButtonFocusedChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_LobbyTypeSelector_C_ButtonFocusedChanged final
{
public:
	bool                                          bInHasFocus;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_LobbyTypeSelector_C_ButtonFocusedChanged) == 0x000001, "Wrong alignment on WBP_LobbyTypeSelector_C_ButtonFocusedChanged");
static_assert(sizeof(WBP_LobbyTypeSelector_C_ButtonFocusedChanged) == 0x000001, "Wrong size on WBP_LobbyTypeSelector_C_ButtonFocusedChanged");
static_assert(offsetof(WBP_LobbyTypeSelector_C_ButtonFocusedChanged, bInHasFocus) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_ButtonFocusedChanged::bInHasFocus' has a wrong offset!");

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.OnSelectionOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_LobbyTypeSelector_C_OnSelectionOptionChanged final
{
public:
	int32                                         InCurrentIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideReadOnly;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_LobbyTypeSelector_C_OnSelectionOptionChanged) == 0x000004, "Wrong alignment on WBP_LobbyTypeSelector_C_OnSelectionOptionChanged");
static_assert(sizeof(WBP_LobbyTypeSelector_C_OnSelectionOptionChanged) == 0x000008, "Wrong size on WBP_LobbyTypeSelector_C_OnSelectionOptionChanged");
static_assert(offsetof(WBP_LobbyTypeSelector_C_OnSelectionOptionChanged, InCurrentIndex) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_OnSelectionOptionChanged::InCurrentIndex' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_OnSelectionOptionChanged, bOverrideReadOnly) == 0x000004, "Member 'WBP_LobbyTypeSelector_C_OnSelectionOptionChanged::bOverrideReadOnly' has a wrong offset!");

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.UpdateVisuals
// 0x0010 (0x0010 - 0x0000)
struct WBP_LobbyTypeSelector_C_UpdateVisuals final
{
public:
	class USBZGameUserSettings*                   CallFunc_GetSBZGameUserSettings_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            CallFunc_GetLobbyType_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LobbyTypeSelector_C_UpdateVisuals) == 0x000008, "Wrong alignment on WBP_LobbyTypeSelector_C_UpdateVisuals");
static_assert(sizeof(WBP_LobbyTypeSelector_C_UpdateVisuals) == 0x000010, "Wrong size on WBP_LobbyTypeSelector_C_UpdateVisuals");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateVisuals, CallFunc_GetSBZGameUserSettings_ReturnValue) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_UpdateVisuals::CallFunc_GetSBZGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateVisuals, CallFunc_GetLobbyType_ReturnValue) == 0x000008, "Member 'WBP_LobbyTypeSelector_C_UpdateVisuals::CallFunc_GetLobbyType_ReturnValue' has a wrong offset!");

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.UpdateType
// 0x0080 (0x0080 - 0x0000)
struct WBP_LobbyTypeSelector_C_UpdateType final
{
public:
	ESBZOnlineJoinType                            InLobbyType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZOnlineJoinType                            Temp_byte_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0048(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0018)()
	int32                                         K2Node_Select_Default_1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LobbyTypeSelector_C_UpdateType) == 0x000008, "Wrong alignment on WBP_LobbyTypeSelector_C_UpdateType");
static_assert(sizeof(WBP_LobbyTypeSelector_C_UpdateType) == 0x000080, "Wrong size on WBP_LobbyTypeSelector_C_UpdateType");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, InLobbyType) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_UpdateType::InLobbyType' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_byte_Variable) == 0x000001, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_int_Variable) == 0x000004, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_int_Variable_1) == 0x000008, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_int_Variable_2) == 0x00000C, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_byte_Variable_1) == 0x000010, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_text_Variable) == 0x000018, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_text_Variable_1) == 0x000030, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, Temp_text_Variable_2) == 0x000048, "Member 'WBP_LobbyTypeSelector_C_UpdateType::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, K2Node_Select_Default) == 0x000060, "Member 'WBP_LobbyTypeSelector_C_UpdateType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_UpdateType, K2Node_Select_Default_1) == 0x000078, "Member 'WBP_LobbyTypeSelector_C_UpdateType::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.SetFocusVisuals
// 0x0050 (0x0050 - 0x0000)
struct WBP_LobbyTypeSelector_C_SetFocusVisuals final
{
public:
	bool                                          InIsFocused;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0028(0x0028)()
};
static_assert(alignof(WBP_LobbyTypeSelector_C_SetFocusVisuals) == 0x000008, "Wrong alignment on WBP_LobbyTypeSelector_C_SetFocusVisuals");
static_assert(sizeof(WBP_LobbyTypeSelector_C_SetFocusVisuals) == 0x000050, "Wrong size on WBP_LobbyTypeSelector_C_SetFocusVisuals");
static_assert(offsetof(WBP_LobbyTypeSelector_C_SetFocusVisuals, InIsFocused) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_SetFocusVisuals::InIsFocused' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_SetFocusVisuals, CallFunc_SelectColor_ReturnValue) == 0x000004, "Member 'WBP_LobbyTypeSelector_C_SetFocusVisuals::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_SetFocusVisuals, CallFunc_SelectColor_ReturnValue_1) == 0x000014, "Member 'WBP_LobbyTypeSelector_C_SetFocusVisuals::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_SetFocusVisuals, K2Node_MakeStruct_SlateColor) == 0x000028, "Member 'WBP_LobbyTypeSelector_C_SetFocusVisuals::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_LobbyTypeSelector.WBP_LobbyTypeSelector_C.Set Compact
// 0x0068 (0x0068 - 0x0000)
struct WBP_LobbyTypeSelector_C_Set_Compact final
{
public:
	bool                                          InIsCompact;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LobbyTypeSelector_C_Set_Compact) == 0x000008, "Wrong alignment on WBP_LobbyTypeSelector_C_Set_Compact");
static_assert(sizeof(WBP_LobbyTypeSelector_C_Set_Compact) == 0x000068, "Wrong size on WBP_LobbyTypeSelector_C_Set_Compact");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, InIsCompact) == 0x000000, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::InIsCompact' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, Temp_bool_Variable) == 0x000001, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, Temp_bool_Variable_1) == 0x000002, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, Temp_byte_Variable) == 0x000003, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, Temp_byte_Variable_1) == 0x000004, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000008, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, K2Node_Select_Default) == 0x00000C, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, Temp_bool_Variable_2) == 0x000018, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x00001C, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, K2Node_Select_Default_1) == 0x000020, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_IsVisible_ReturnValue) == 0x000030, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000038, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000040, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_GetSize_ReturnValue) == 0x000044, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000054, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000058, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, K2Node_Select_Default_2) == 0x00005C, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_LobbyTypeSelector_C_Set_Compact, CallFunc_MakeVector2D_ReturnValue) == 0x000060, "Member 'WBP_LobbyTypeSelector_C_Set_Compact::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

}

