#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReplicatedBinaryActor_Ventilation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ReplicatedBinaryActor_Ventilation.BP_ReplicatedBinaryActor_Ventilation_C
// 0x0068 (0x0340 - 0x02D8)
class ABP_ReplicatedBinaryActor_Ventilation_C final : public ASBZReplicatedBinaryStateActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak_1;                                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          DoorCollision_01;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZOutlineComponent*                   SBZOutline;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZPropDamageComponent*                SBZPropDamage;                                     // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable;                                   // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          onGround_;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          isOpen;                                            // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              VentOpened;                                        // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         overrideOpenAngle;                                 // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ReplicatedBinaryActor_Ventilation(int32 EntryPoint);
	void BndEvt__BP_ReplicatedBinaryActor_Ventilation_SBZPropDamage_K2Node_ComponentBoundEvent_4_SBZPropDamageHitsRejectSignature__DelegateSignature(class UActorComponent* PoolComponent, int32 Hits, int32 ChangedHits);
	void BndEvt__BP_ReplicatedBinaryActor_Ventilation_SBZInteractable_K2Node_ComponentBoundEvent_7_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_ReplicatedBinaryActor_Ventilation_SBZInteractable_K2Node_ComponentBoundEvent_6_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_ReplicatedBinaryActor_Ventilation_SBZInteractable_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_ReplicatedBinaryActor_Ventilation_SBZInteractable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_ReplicatedBinaryActor_Ventilation_SBZPropDamage_K2Node_ComponentBoundEvent_1_SBZPropDamageHitsSignature__DelegateSignature(class UActorComponent* PoolComponent, int32 Hits, bool bDoCosmetics, const struct FSBZPropDamageContext& DamageContext);
	void BndEvt__BP_ReplicatedBinaryActorVent_SBZInteractable_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void OnStateChanged(bool bStateToChangeTo, bool bDoCosmetics);
	void rotateAroundAxis(const struct FVector2D& pivot, const struct FVector2D& point, float angle, struct FVector2D* rotatedPoint);
	void rotateDoorCollisionAroundBase(float InputPin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ReplicatedBinaryActor_Ventilation_C">();
	}
	static class ABP_ReplicatedBinaryActor_Ventilation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ReplicatedBinaryActor_Ventilation_C>();
	}
};
static_assert(alignof(ABP_ReplicatedBinaryActor_Ventilation_C) == 0x000008, "Wrong alignment on ABP_ReplicatedBinaryActor_Ventilation_C");
static_assert(sizeof(ABP_ReplicatedBinaryActor_Ventilation_C) == 0x000340, "Wrong size on ABP_ReplicatedBinaryActor_Ventilation_C");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, UberGraphFrame) == 0x0002D8, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, Ak_1) == 0x0002E0, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::Ak_1' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, DoorCollision_01) == 0x0002E8, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::DoorCollision_01' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, Niagara) == 0x0002F0, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, SBZOutline) == 0x0002F8, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::SBZOutline' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, SBZPropDamage) == 0x000300, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::SBZPropDamage' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, SBZInteractable) == 0x000308, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::SBZInteractable' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, Mesh) == 0x000310, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, DefaultSceneRoot) == 0x000318, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, onGround_) == 0x000320, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::onGround_' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, isOpen) == 0x000321, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::isOpen' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, VentOpened) == 0x000328, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::VentOpened' has a wrong offset!");
static_assert(offsetof(ABP_ReplicatedBinaryActor_Ventilation_C, overrideOpenAngle) == 0x000338, "Member 'ABP_ReplicatedBinaryActor_Ventilation_C::overrideOpenAngle' has a wrong offset!");

}

