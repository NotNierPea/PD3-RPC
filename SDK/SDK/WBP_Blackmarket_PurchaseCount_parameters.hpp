#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Blackmarket_PurchaseCount

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Blackmarket_PurchaseCount.WBP_Blackmarket_PurchaseCount_C.ExecuteUbergraph_WBP_Blackmarket_PurchaseCount
// 0x0008 (0x0008 - 0x0000)
struct WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount) == 0x000004, "Wrong alignment on WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount");
static_assert(sizeof(WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount) == 0x000008, "Wrong size on WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount, EntryPoint) == 0x000000, "Member 'WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_Blackmarket_PurchaseCount_C_ExecuteUbergraph_WBP_Blackmarket_PurchaseCount::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_Blackmarket_PurchaseCount.WBP_Blackmarket_PurchaseCount_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Blackmarket_PurchaseCount_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Blackmarket_PurchaseCount_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Blackmarket_PurchaseCount_C_PreConstruct");
static_assert(sizeof(WBP_Blackmarket_PurchaseCount_C_PreConstruct) == 0x000001, "Wrong size on WBP_Blackmarket_PurchaseCount_C_PreConstruct");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Blackmarket_PurchaseCount_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Blackmarket_PurchaseCount.WBP_Blackmarket_PurchaseCount_C.SetMaxCount
// 0x0004 (0x0004 - 0x0000)
struct WBP_Blackmarket_PurchaseCount_C_SetMaxCount final
{
public:
	int32                                         InMaxCount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Blackmarket_PurchaseCount_C_SetMaxCount) == 0x000004, "Wrong alignment on WBP_Blackmarket_PurchaseCount_C_SetMaxCount");
static_assert(sizeof(WBP_Blackmarket_PurchaseCount_C_SetMaxCount) == 0x000004, "Wrong size on WBP_Blackmarket_PurchaseCount_C_SetMaxCount");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetMaxCount, InMaxCount) == 0x000000, "Member 'WBP_Blackmarket_PurchaseCount_C_SetMaxCount::InMaxCount' has a wrong offset!");

// Function WBP_Blackmarket_PurchaseCount.WBP_Blackmarket_PurchaseCount_C.RebuildButtons
// 0x0048 (0x0048 - 0x0000)
struct WBP_Blackmarket_PurchaseCount_C_RebuildButtons final
{
public:
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x0010(0x0008)(NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_CheckmarkWidget_C*                 CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     K2Node_DynamicCast_AsHorizontal_Box_Slot;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons) == 0x000008, "Wrong alignment on WBP_Blackmarket_PurchaseCount_C_RebuildButtons");
static_assert(sizeof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons) == 0x000048, "Wrong size on WBP_Blackmarket_PurchaseCount_C_RebuildButtons");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, K2Node_MakeStruct_Margin) == 0x000000, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, K2Node_MakeStruct_SlateChildSize) == 0x000010, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, Temp_int_Variable) == 0x000018, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, CallFunc_Create_ReturnValue) == 0x000020, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, CallFunc_AddChild_ReturnValue) == 0x000028, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, K2Node_DynamicCast_AsHorizontal_Box_Slot) == 0x000038, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::K2Node_DynamicCast_AsHorizontal_Box_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_RebuildButtons, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'WBP_Blackmarket_PurchaseCount_C_RebuildButtons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Blackmarket_PurchaseCount.WBP_Blackmarket_PurchaseCount_C.SetCount
// 0x0050 (0x0050 - 0x0000)
struct WBP_Blackmarket_PurchaseCount_C_SetCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_CheckmarkWidget_C*                 K2Node_DynamicCast_AsWBP_Checkmark_Widget;         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Blackmarket_PurchaseCount_C_SetCount) == 0x000008, "Wrong alignment on WBP_Blackmarket_PurchaseCount_C_SetCount");
static_assert(sizeof(WBP_Blackmarket_PurchaseCount_C_SetCount) == 0x000050, "Wrong size on WBP_Blackmarket_PurchaseCount_C_SetCount");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, InCount) == 0x000000, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::InCount' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_GetAllChildren_ReturnValue) == 0x000018, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000028, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, K2Node_DynamicCast_AsWBP_Checkmark_Widget) == 0x000040, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::K2Node_DynamicCast_AsWBP_Checkmark_Widget' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Blackmarket_PurchaseCount_C_SetCount, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00004A, "Member 'WBP_Blackmarket_PurchaseCount_C_SetCount::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");

}

