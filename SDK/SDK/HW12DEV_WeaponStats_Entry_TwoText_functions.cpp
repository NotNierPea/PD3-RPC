#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HW12DEV_WeaponStats_Entry_TwoText

#include "Basic.hpp"

#include "HW12DEV_WeaponStats_Entry_TwoText_classes.hpp"
#include "HW12DEV_WeaponStats_Entry_TwoText_parameters.hpp"


namespace SDK
{

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHW12DEV_WeaponStats_Entry_TwoText_C::ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UHW12DEV_WeaponStats_Entry_TwoText_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UHW12DEV_WeaponStats_Entry_TwoText_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "PreConstruct");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.SetBaseCompare
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Base                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Compare                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasCompare                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FlipCompare                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UHW12DEV_WeaponStats_Entry_TwoText_C::SetBaseCompare(float Base, float Compare, bool HasCompare, bool FlipCompare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "SetBaseCompare");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare Parms{};

	Parms.Base = Base;
	Parms.Compare = Compare;
	Parms.HasCompare = HasCompare;
	Parms.FlipCompare = FlipCompare;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.SetBaseCompareArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>&                          Base                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<float>&                          Compare                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    HasCompare                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FlipCompare                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UHW12DEV_WeaponStats_Entry_TwoText_C::SetBaseCompareArray(TArray<float>& Base, TArray<float>& Compare, bool HasCompare, bool FlipCompare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "SetBaseCompareArray");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray Parms{};

	Parms.Base = std::move(Base);
	Parms.Compare = std::move(Compare);
	Parms.HasCompare = HasCompare;
	Parms.FlipCompare = FlipCompare;

	UObject::ProcessEvent(Func, &Parms);

	Base = std::move(Parms.Base);
	Compare = std::move(Parms.Compare);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.GetMinMaxOfFloatArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<float>&                          Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float*                                  Min                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Max                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHW12DEV_WeaponStats_Entry_TwoText_C::GetMinMaxOfFloatArray(TArray<float>& Array, float* Min, float* Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "GetMinMaxOfFloatArray");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Min != nullptr)
		*Min = Parms.Min;

	if (Max != nullptr)
		*Max = Parms.Max;
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.FormatMinMaxOfFloatArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<float>&                          Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText*                            Text                                                   (Parm, OutParm)

void UHW12DEV_WeaponStats_Entry_TwoText_C::FormatMinMaxOfFloatArray(TArray<float>& Array, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "FormatMinMaxOfFloatArray");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.DetermineDowngradeUpgradeColour
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   BaseVal                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CompareVal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    Colour                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHW12DEV_WeaponStats_Entry_TwoText_C::DetermineDowngradeUpgradeColour(float BaseVal, float CompareVal, struct FLinearColor* Colour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "DetermineDowngradeUpgradeColour");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour Parms{};

	Parms.BaseVal = BaseVal;
	Parms.CompareVal = CompareVal;

	UObject::ProcessEvent(Func, &Parms);

	if (Colour != nullptr)
		*Colour = std::move(Parms.Colour);
}


// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.SetText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTextBlock*                       TextObject                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IncludeSuffix                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UHW12DEV_WeaponStats_Entry_TwoText_C::SetText(const class FText& Text, class UTextBlock* TextObject, bool IncludeSuffix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HW12DEV_WeaponStats_Entry_TwoText_C", "SetText");

	Params::HW12DEV_WeaponStats_Entry_TwoText_C_SetText Parms{};

	Parms.Text = std::move(Text);
	Parms.TextObject = TextObject;
	Parms.IncludeSuffix = IncludeSuffix;

	UObject::ProcessEvent(Func, &Parms);
}

}

