#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_DailyChallengeItem

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.ExecuteUbergraph_WBP_DailyChallengeItem
// 0x0050 (0x0050 - 0x0000)
struct WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZMenuButton*                         K2Node_ComponentBoundEvent_Button_1;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsEnabled;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZMenuButton*                         K2Node_ComponentBoundEvent_Button;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bIsGameInstallPending)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0014)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZUIManager*                          CallFunc_GetUIManager_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsGameInstallPending;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem");
static_assert(sizeof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem) == 0x000050, "Wrong size on WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, EntryPoint) == 0x000000, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, K2Node_ComponentBoundEvent_Button_1) == 0x000008, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, K2Node_ComponentBoundEvent_bIsEnabled) == 0x000010, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::K2Node_ComponentBoundEvent_bIsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000018, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, K2Node_ComponentBoundEvent_Button) == 0x000020, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, CallFunc_GetUIManager_ReturnValue) == 0x000040, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::CallFunc_GetUIManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem, K2Node_CustomEvent_bIsGameInstallPending) == 0x000048, "Member 'WBP_DailyChallengeItem_C_ExecuteUbergraph_WBP_DailyChallengeItem::K2Node_CustomEvent_bIsGameInstallPending' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.OnInstallGame
// 0x0001 (0x0001 - 0x0000)
struct WBP_DailyChallengeItem_C_OnInstallGame final
{
public:
	bool                                          bIsGameInstallPending;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_OnInstallGame) == 0x000001, "Wrong alignment on WBP_DailyChallengeItem_C_OnInstallGame");
static_assert(sizeof(WBP_DailyChallengeItem_C_OnInstallGame) == 0x000001, "Wrong size on WBP_DailyChallengeItem_C_OnInstallGame");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnInstallGame, bIsGameInstallPending) == 0x000000, "Member 'WBP_DailyChallengeItem_C_OnInstallGame::bIsGameInstallPending' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature final
{
public:
	class USBZMenuButton*                         Button_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature");
static_assert(sizeof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature) == 0x000008, "Wrong size on WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature");
static_assert(offsetof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature, Button_0) == 0x000000, "Member 'WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallengeItem_Button_K2Node_ComponentBoundEvent_0_OnMenuButtonSelected__DelegateSignature::Button_0' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_DailyChallengeItem_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_DailyChallengeItem_C_PreConstruct");
static_assert(sizeof(WBP_DailyChallengeItem_C_PreConstruct) == 0x000001, "Wrong size on WBP_DailyChallengeItem_C_PreConstruct");
static_assert(offsetof(WBP_DailyChallengeItem_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_DailyChallengeItem_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature final
{
public:
	class USBZMenuButton*                         Button_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEnabled_0;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature");
static_assert(sizeof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature) == 0x000010, "Wrong size on WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature");
static_assert(offsetof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature, Button_0) == 0x000000, "Member 'WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature::Button_0' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature, bIsEnabled_0) == 0x000008, "Member 'WBP_DailyChallengeItem_C_BndEvt__WBP_DailyChallenges_ChallengeButton_K2Node_ComponentBoundEvent_1_OnMenuButtonStateChanged__DelegateSignature::bIsEnabled_0' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.InitializeChallenge
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_DailyChallengeItem_C_InitializeChallenge final
{
public:
	struct FSBZChallengeData                      InChallengeData;                                   // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm)
	class USBZUIManager*                          CallFunc_GetUIManager_ReturnValue;                 // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameInstallPending_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_InitializeChallenge) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_InitializeChallenge");
static_assert(sizeof(WBP_DailyChallengeItem_C_InitializeChallenge) == 0x0000B8, "Wrong size on WBP_DailyChallengeItem_C_InitializeChallenge");
static_assert(offsetof(WBP_DailyChallengeItem_C_InitializeChallenge, InChallengeData) == 0x000000, "Member 'WBP_DailyChallengeItem_C_InitializeChallenge::InChallengeData' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_InitializeChallenge, CallFunc_GetUIManager_ReturnValue) == 0x0000A8, "Member 'WBP_DailyChallengeItem_C_InitializeChallenge::CallFunc_GetUIManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_InitializeChallenge, CallFunc_IsGameInstallPending_ReturnValue) == 0x0000B0, "Member 'WBP_DailyChallengeItem_C_InitializeChallenge::CallFunc_IsGameInstallPending_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetChallengeText
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_DailyChallengeItem_C_SetChallengeText final
{
public:
	struct FSBZChallengeData                      ChallengeData;                                     // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm)
	class USBZChallengeManager*                   CallFunc_GetChallengeManager_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetChallengeNameText_ReturnValue;         // 0x00B0(0x0018)()
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetChallengeText) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_SetChallengeText");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetChallengeText) == 0x0000C8, "Wrong size on WBP_DailyChallengeItem_C_SetChallengeText");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetChallengeText, ChallengeData) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetChallengeText::ChallengeData' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetChallengeText, CallFunc_GetChallengeManager_ReturnValue) == 0x0000A8, "Member 'WBP_DailyChallengeItem_C_SetChallengeText::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetChallengeText, CallFunc_GetChallengeNameText_ReturnValue) == 0x0000B0, "Member 'WBP_DailyChallengeItem_C_SetChallengeText::CallFunc_GetChallengeNameText_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetProgressText
// 0x00A8 (0x00A8 - 0x0000)
struct WBP_DailyChallengeItem_C_SetProgressText final
{
public:
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0000(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0040(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetProgressText) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_SetProgressText");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetProgressText) == 0x0000A8, "Wrong size on WBP_DailyChallengeItem_C_SetProgressText");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressText, K2Node_MakeStruct_FormatArgumentData) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetProgressText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressText, K2Node_MakeStruct_FormatArgumentData_1) == 0x000040, "Member 'WBP_DailyChallengeItem_C_SetProgressText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressText, K2Node_MakeArray_Array) == 0x000080, "Member 'WBP_DailyChallengeItem_C_SetProgressText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressText, CallFunc_Format_ReturnValue) == 0x000090, "Member 'WBP_DailyChallengeItem_C_SetProgressText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetProgressMinMax
// 0x0008 (0x0008 - 0x0000)
struct WBP_DailyChallengeItem_C_SetProgressMinMax final
{
public:
	int32                                         InMaxValueToUse;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMinValueToUse;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetProgressMinMax) == 0x000004, "Wrong alignment on WBP_DailyChallengeItem_C_SetProgressMinMax");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetProgressMinMax) == 0x000008, "Wrong size on WBP_DailyChallengeItem_C_SetProgressMinMax");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressMinMax, InMaxValueToUse) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetProgressMinMax::InMaxValueToUse' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressMinMax, InMinValueToUse) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetProgressMinMax::InMinValueToUse' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.ConvertProgressMinMaxToMeters
// 0x0008 (0x0008 - 0x0000)
struct WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters final
{
public:
	int32                                         InMaxValueToUse;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMinValueToUse;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters) == 0x000004, "Wrong alignment on WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters");
static_assert(sizeof(WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters) == 0x000008, "Wrong size on WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters");
static_assert(offsetof(WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters, InMaxValueToUse) == 0x000000, "Member 'WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters::InMaxValueToUse' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters, InMinValueToUse) == 0x000004, "Member 'WBP_DailyChallengeItem_C_ConvertProgressMinMaxToMeters::InMinValueToUse' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetProgressBarPercentage
// 0x0014 (0x0014 - 0x0000)
struct WBP_DailyChallengeItem_C_SetProgressBarPercentage final
{
public:
	int32                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalProgress;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetProgressBarPercentage) == 0x000004, "Wrong alignment on WBP_DailyChallengeItem_C_SetProgressBarPercentage");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetProgressBarPercentage) == 0x000014, "Wrong size on WBP_DailyChallengeItem_C_SetProgressBarPercentage");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressBarPercentage, Progress) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetProgressBarPercentage::Progress' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressBarPercentage, TotalProgress) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetProgressBarPercentage::TotalProgress' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressBarPercentage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'WBP_DailyChallengeItem_C_SetProgressBarPercentage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressBarPercentage, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00000C, "Member 'WBP_DailyChallengeItem_C_SetProgressBarPercentage::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetProgressBarPercentage, CallFunc_SafeDivide_ReturnValue) == 0x000010, "Member 'WBP_DailyChallengeItem_C_SetProgressBarPercentage::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetupInfamyReward
// 0x0028 (0x0028 - 0x0000)
struct WBP_DailyChallengeItem_C_SetupInfamyReward final
{
public:
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetupInfamyReward) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_SetupInfamyReward");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetupInfamyReward) == 0x000028, "Wrong size on WBP_DailyChallengeItem_C_SetupInfamyReward");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupInfamyReward, CallFunc_Greater_IntInt_ReturnValue) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetupInfamyReward::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupInfamyReward, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'WBP_DailyChallengeItem_C_SetupInfamyReward::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupInfamyReward, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'WBP_DailyChallengeItem_C_SetupInfamyReward::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetupCurrencyReward
// 0x0150 (0x0150 - 0x0000)
struct WBP_DailyChallengeItem_C_SetupCurrencyReward final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSBZChallengeRewardItem                CallFunc_Array_Get_Item;                           // 0x0038(0x0030)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDisplayName_OutDisplayName;            // 0x0070(0x0018)()
	bool                                          CallFunc_GetDisplayName_OutHasText;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_GuidToString_ReturnValue;            // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetupCurrencyReward) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_SetupCurrencyReward");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetupCurrencyReward) == 0x000150, "Wrong size on WBP_DailyChallengeItem_C_SetupCurrencyReward");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue) == 0x000010, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000020, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Array_Get_Item) == 0x000038, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_GetDisplayName_OutDisplayName) == 0x000070, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_GetDisplayName_OutDisplayName' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_GetDisplayName_OutHasText) == 0x000088, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_GetDisplayName_OutHasText' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Conv_NameToString_ReturnValue) == 0x000090, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Conv_TextToString_ReturnValue) == 0x0000A0, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Conv_IntToString_ReturnValue) == 0x0000B0, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Conv_GuidToString_ReturnValue) == 0x0000C0, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Conv_GuidToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000D0, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000E0, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Array_Length_ReturnValue_1) == 0x0000F0, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000F8, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000110, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000120, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000130, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupCurrencyReward, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000140, "Member 'WBP_DailyChallengeItem_C_SetupCurrencyReward::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetupProgress
// 0x0010 (0x0010 - 0x0000)
struct WBP_DailyChallengeItem_C_SetupProgress final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetupProgress) == 0x000004, "Wrong alignment on WBP_DailyChallengeItem_C_SetupProgress");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetupProgress) == 0x000010, "Wrong size on WBP_DailyChallengeItem_C_SetupProgress");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupProgress, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetupProgress::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupProgress, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000001, "Member 'WBP_DailyChallengeItem_C_SetupProgress::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupProgress, CallFunc_Divide_IntInt_ReturnValue) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetupProgress::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupProgress, CallFunc_Min_ReturnValue) == 0x000008, "Member 'WBP_DailyChallengeItem_C_SetupProgress::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetupProgress, CallFunc_Divide_IntInt_ReturnValue_1) == 0x00000C, "Member 'WBP_DailyChallengeItem_C_SetupProgress::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetFocused
// 0x0038 (0x0038 - 0x0000)
struct WBP_DailyChallengeItem_C_SetFocused final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0014)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZChallengeManager*                   CallFunc_GetChallengeManager_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRerollAvailable_ReturnValue;           // 0x0031(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetFocused) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_SetFocused");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetFocused) == 0x000038, "Wrong size on WBP_DailyChallengeItem_C_SetFocused");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, IsFocused) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetFocused::IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetFocused::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000018, "Member 'WBP_DailyChallengeItem_C_SetFocused::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, CallFunc_PlayAnimationForward_ReturnValue) == 0x000020, "Member 'WBP_DailyChallengeItem_C_SetFocused::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, CallFunc_GetChallengeManager_ReturnValue) == 0x000028, "Member 'WBP_DailyChallengeItem_C_SetFocused::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'WBP_DailyChallengeItem_C_SetFocused::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, CallFunc_GetRerollAvailable_ReturnValue) == 0x000031, "Member 'WBP_DailyChallengeItem_C_SetFocused::CallFunc_GetRerollAvailable_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetFocused, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'WBP_DailyChallengeItem_C_SetFocused::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.OnChallengeRerollPressed
// 0x0002 (0x0002 - 0x0000)
struct WBP_DailyChallengeItem_C_OnChallengeRerollPressed final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_DailyChallengeItem_C_OnChallengeRerollPressed) == 0x000001, "Wrong alignment on WBP_DailyChallengeItem_C_OnChallengeRerollPressed");
static_assert(sizeof(WBP_DailyChallengeItem_C_OnChallengeRerollPressed) == 0x000002, "Wrong size on WBP_DailyChallengeItem_C_OnChallengeRerollPressed");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnChallengeRerollPressed, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'WBP_DailyChallengeItem_C_OnChallengeRerollPressed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnChallengeRerollPressed, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'WBP_DailyChallengeItem_C_OnChallengeRerollPressed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.OnChallengeItemReset
// 0x0020 (0x0020 - 0x0000)
struct WBP_DailyChallengeItem_C_OnChallengeItemReset final
{
public:
	class USBZChallengeManager*                   CallFunc_GetChallengeManager_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRerollAvailable_ReturnValue;           // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_OnChallengeItemReset) == 0x000008, "Wrong alignment on WBP_DailyChallengeItem_C_OnChallengeItemReset");
static_assert(sizeof(WBP_DailyChallengeItem_C_OnChallengeItemReset) == 0x000020, "Wrong size on WBP_DailyChallengeItem_C_OnChallengeItemReset");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnChallengeItemReset, CallFunc_GetChallengeManager_ReturnValue) == 0x000000, "Member 'WBP_DailyChallengeItem_C_OnChallengeItemReset::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnChallengeItemReset, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WBP_DailyChallengeItem_C_OnChallengeItemReset::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnChallengeItemReset, CallFunc_GetRerollAvailable_ReturnValue) == 0x000010, "Member 'WBP_DailyChallengeItem_C_OnChallengeItemReset::CallFunc_GetRerollAvailable_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_OnChallengeItemReset, CallFunc_PlayAnimationForward_ReturnValue) == 0x000018, "Member 'WBP_DailyChallengeItem_C_OnChallengeItemReset::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetResetAvailable
// 0x0018 (0x0018 - 0x0000)
struct WBP_DailyChallengeItem_C_SetResetAvailable final
{
public:
	bool                                          InResetAvailable;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetResetAvailable) == 0x000004, "Wrong alignment on WBP_DailyChallengeItem_C_SetResetAvailable");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetResetAvailable) == 0x000018, "Wrong size on WBP_DailyChallengeItem_C_SetResetAvailable");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, InResetAvailable) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::InResetAvailable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, Temp_bool_Variable) == 0x000001, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, Temp_byte_Variable) == 0x000002, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, Temp_bool_Variable_1) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, Temp_float_Variable) == 0x000008, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, Temp_float_Variable_1) == 0x00000C, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, K2Node_Select_Default) == 0x000010, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetResetAvailable, K2Node_Select_Default_1) == 0x000014, "Member 'WBP_DailyChallengeItem_C_SetResetAvailable::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_DailyChallengeItem.WBP_DailyChallengeItem_C.SetIsCompleted
// 0x0018 (0x0018 - 0x0000)
struct WBP_DailyChallengeItem_C_SetIsCompleted final
{
public:
	bool                                          InCompleted;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_DailyChallengeItem_C_SetIsCompleted) == 0x000004, "Wrong alignment on WBP_DailyChallengeItem_C_SetIsCompleted");
static_assert(sizeof(WBP_DailyChallengeItem_C_SetIsCompleted) == 0x000018, "Wrong size on WBP_DailyChallengeItem_C_SetIsCompleted");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, InCompleted) == 0x000000, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::InCompleted' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_bool_Variable) == 0x000001, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_byte_Variable) == 0x000002, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_bool_Variable_1) == 0x000004, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_byte_Variable_2) == 0x000005, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_byte_Variable_3) == 0x000006, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_bool_Variable_2) == 0x000007, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_float_Variable) == 0x000008, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, Temp_float_Variable_1) == 0x00000C, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, K2Node_Select_Default) == 0x000010, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, K2Node_Select_Default_1) == 0x000014, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_DailyChallengeItem_C_SetIsCompleted, K2Node_Select_Default_2) == 0x000015, "Member 'WBP_DailyChallengeItem_C_SetIsCompleted::K2Node_Select_Default_2' has a wrong offset!");

}

