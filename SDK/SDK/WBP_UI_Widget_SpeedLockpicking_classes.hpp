#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Widget_SpeedLockpicking

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_UI_Widget_SpeedLockpicking.WBP_UI_Widget_SpeedLockpicking_C
// 0x00A0 (0x0370 - 0x02D0)
class UWBP_UI_Widget_SpeedLockpicking_C final : public UPD3MiniGameWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       StartAnim;                                         // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CorrectAnim;                                       // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FailAnim;                                          // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BG;                                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Lockpicking;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CorrectFillCirle;                                  // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GuideCircle;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IncreaseCircle;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Needle_Lockpick;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RotatingPin;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockZone;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PinWidth_0;                                        // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PinSpeed;                                          // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SuccessAreaWidth;                                  // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RingProgress;                                      // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RingSpeed;                                         // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GUIDEPROGRESS;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Delay;                                             // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Target;                                            // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedFillBonus;                                    // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Increase;                                          // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Condition;                                         // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartDelay;                                        // 0x035D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHeld;                                            // 0x035E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35F[0x1];                                      // 0x035F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZMiniGameComponent*                  minigameAK;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPress;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WBP_UI_Widget_SpeedLockpicking(int32 EntryPoint);
	void OnMiniGameDifficulty(ESBZDifficulty HeistDifficulty, uint8 MiniGameDifficulty);
	void OnOwningMiniGameComponent(class USBZMiniGameComponent* MiniGameComponet);
	void MiniGameStateChanged(EPD3MiniGameState NewState);
	void OnInitialized();
	void CustomEvent_0();
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Finished_3FB5A0874C08917CE134F293DFF3047A();
	void Finished_F4D5F5584BD701400053088D4049418B();
	struct FSlateBrush Get_Image_InteractionGauge_1_Brush_0();
	struct FSlateBrush Get_Image_InteractionGauge_Brush_0();
	void NewFunction_0();
	void NewFunction_1();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_UI_Widget_SpeedLockpicking_C">();
	}
	static class UWBP_UI_Widget_SpeedLockpicking_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_UI_Widget_SpeedLockpicking_C>();
	}
};
static_assert(alignof(UWBP_UI_Widget_SpeedLockpicking_C) == 0x000008, "Wrong alignment on UWBP_UI_Widget_SpeedLockpicking_C");
static_assert(sizeof(UWBP_UI_Widget_SpeedLockpicking_C) == 0x000370, "Wrong size on UWBP_UI_Widget_SpeedLockpicking_C");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, UberGraphFrame) == 0x0002D0, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, StartAnim) == 0x0002D8, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::StartAnim' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, CorrectAnim) == 0x0002E0, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::CorrectAnim' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, FailAnim) == 0x0002E8, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::FailAnim' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, BG) == 0x0002F0, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::BG' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, BG_Lockpicking) == 0x0002F8, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::BG_Lockpicking' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, CorrectFillCirle) == 0x000300, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::CorrectFillCirle' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, GuideCircle) == 0x000308, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::GuideCircle' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, IncreaseCircle) == 0x000310, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::IncreaseCircle' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, Needle_Lockpick) == 0x000318, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::Needle_Lockpick' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, RotatingPin) == 0x000320, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::RotatingPin' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, UnlockZone) == 0x000328, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::UnlockZone' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, CurrentProgress) == 0x000330, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::CurrentProgress' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, PinWidth_0) == 0x000334, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::PinWidth_0' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, PinSpeed) == 0x000338, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::PinSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, SuccessAreaWidth) == 0x00033C, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::SuccessAreaWidth' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, RingProgress) == 0x000340, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::RingProgress' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, RingSpeed) == 0x000344, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::RingSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, GUIDEPROGRESS) == 0x000348, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::GUIDEPROGRESS' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, Delay) == 0x00034C, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::Delay' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, Target) == 0x000350, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::Target' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, SpeedFillBonus) == 0x000354, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::SpeedFillBonus' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, Increase) == 0x000358, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::Increase' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, Condition) == 0x00035C, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::Condition' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, StartDelay) == 0x00035D, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::StartDelay' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, IsHeld) == 0x00035E, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::IsHeld' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, minigameAK) == 0x000360, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::minigameAK' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SpeedLockpicking_C, CanPress) == 0x000368, "Member 'UWBP_UI_Widget_SpeedLockpicking_C::CanPress' has a wrong offset!");

}

