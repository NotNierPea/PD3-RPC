#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_InputKey

#include "Basic.hpp"

#include "WBP_UI_InputKey_classes.hpp"
#include "WBP_UI_InputKey_parameters.hpp"


namespace SDK
{

// Function WBP_UI_InputKey.WBP_UI_InputKey_C.ExecuteUbergraph_WBP_UI_InputKey
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_UI_InputKey_C::ExecuteUbergraph_WBP_UI_InputKey(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_InputKey_C", "ExecuteUbergraph_WBP_UI_InputKey");

	Params::WBP_UI_InputKey_C_ExecuteUbergraph_WBP_UI_InputKey Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_InputKey.WBP_UI_InputKey_C.SetInverted
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInInverted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_UI_InputKey_C::SetInverted(bool bInInverted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_InputKey_C", "SetInverted");

	Params::WBP_UI_InputKey_C_SetInverted Parms{};

	Parms.bInInverted = bInInverted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_InputKey.WBP_UI_InputKey_C.OnKeyNameChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    NewActionKeyName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_UI_InputKey_C::OnKeyNameChanged(const class FString& NewActionKeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_InputKey_C", "OnKeyNameChanged");

	Params::WBP_UI_InputKey_C_OnKeyNameChanged Parms{};

	Parms.NewActionKeyName = std::move(NewActionKeyName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_InputKey.WBP_UI_InputKey_C.OnKeyIconChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UPaperSprite*                     NewActionKeyIcon                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_UI_InputKey_C::OnKeyIconChanged(class UPaperSprite* NewActionKeyIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_InputKey_C", "OnKeyIconChanged");

	Params::WBP_UI_InputKey_C_OnKeyIconChanged Parms{};

	Parms.NewActionKeyIcon = NewActionKeyIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_InputKey.WBP_UI_InputKey_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_UI_InputKey_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_InputKey_C", "PreConstruct");

	Params::WBP_UI_InputKey_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_UI_InputKey.WBP_UI_InputKey_C.SetInvertedVisuals
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InInverted                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_UI_InputKey_C::SetInvertedVisuals(bool InInverted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_UI_InputKey_C", "SetInvertedVisuals");

	Params::WBP_UI_InputKey_C_SetInvertedVisuals Parms{};

	Parms.InInverted = InInverted;

	UObject::ProcessEvent(Func, &Parms);
}

}

