#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DigitPassword_Decal

#include "Basic.hpp"

#include "BP_DigitPassword_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DigitPassword_Decal.BP_DigitPassword_Decal_C
// 0x0028 (0x0300 - 0x02D8)
class ABP_DigitPassword_Decal_C final : public ABP_DigitPassword_Parent_C
{
public:
	class UTexture*                               Number_Atlas;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Color_Tweak;                                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roughness;                                         // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Metallic;                                          // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Random_Offset;                                 // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Onest_Digit_Offset;                                // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Twond_Digit_Offset;                                // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threerd_Digit_Offset;                              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fourth_Digit_Offset;                               // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DigitPassword_Decal_C">();
	}
	static class ABP_DigitPassword_Decal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DigitPassword_Decal_C>();
	}
};
static_assert(alignof(ABP_DigitPassword_Decal_C) == 0x000008, "Wrong alignment on ABP_DigitPassword_Decal_C");
static_assert(sizeof(ABP_DigitPassword_Decal_C) == 0x000300, "Wrong size on ABP_DigitPassword_Decal_C");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Number_Atlas) == 0x0002D8, "Member 'ABP_DigitPassword_Decal_C::Number_Atlas' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Color_Tweak) == 0x0002E0, "Member 'ABP_DigitPassword_Decal_C::Color_Tweak' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Roughness) == 0x0002E4, "Member 'ABP_DigitPassword_Decal_C::Roughness' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Metallic) == 0x0002E8, "Member 'ABP_DigitPassword_Decal_C::Metallic' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Use_Random_Offset) == 0x0002EC, "Member 'ABP_DigitPassword_Decal_C::Use_Random_Offset' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Onest_Digit_Offset) == 0x0002F0, "Member 'ABP_DigitPassword_Decal_C::Onest_Digit_Offset' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Twond_Digit_Offset) == 0x0002F4, "Member 'ABP_DigitPassword_Decal_C::Twond_Digit_Offset' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Threerd_Digit_Offset) == 0x0002F8, "Member 'ABP_DigitPassword_Decal_C::Threerd_Digit_Offset' has a wrong offset!");
static_assert(offsetof(ABP_DigitPassword_Decal_C, Fourth_Digit_Offset) == 0x0002FC, "Member 'ABP_DigitPassword_Decal_C::Fourth_Digit_Offset' has a wrong offset!");

}

