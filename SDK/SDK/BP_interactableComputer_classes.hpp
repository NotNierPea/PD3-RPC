#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_interactableComputer

#include "Basic.hpp"

#include "Starbreeze_classes.hpp"
#include "CompState_structs.hpp"
#include "Engine_structs.hpp"
#include "S_EmailStructure_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_interactableComputer.BP_InteractableComputer_C
// 0x02A0 (0x0548 - 0x02A8)
class ABP_InteractableComputer_C final : public ASBZStaticReplicatedActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box_Two;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_One;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Down;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Up;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Activate;                                      // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Back;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Start;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Three;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Down;                              // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Up;                                // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Acti;                              // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_Back;                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_3;                                 // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_2;                                 // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_1;                                 // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable_0;                                 // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DesktopComputer_01_Monitor;                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ECompState                                    CompState;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_3D_Widget_C*                       As_WBP_3D_Widget;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         New_Param;                                         // 0x0358(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          Interactable;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          New_Param_2;                                       // 0x0368(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time_Count_Secs;                                   // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToHack;                                        // 0x0370(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCountSecs;                                     // 0x0374(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReduceVar;                                         // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrentProcess;                                    // 0x0380(0x0018)(Edit, BlueprintVisible)
	class FString                                 NumbersForDisplayCase;                             // 0x0398(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnComputerInteract;                                // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<bool>                                  Has_InteractionButton;                             // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  Has_Been_Pressed;                                  // 0x03D0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          Pressed_State;                                     // 0x03E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnButtonPress;                                     // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<bool>                                  HasScroll;                                         // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Menu_1;                                            // 0x0408(0x0018)(Edit, BlueprintVisible)
	class FText                                   Menu_1_row_2;                                      // 0x0420(0x0018)(Edit, BlueprintVisible)
	class FText                                   Menu_2;                                            // 0x0438(0x0018)(Edit, BlueprintVisible)
	class FText                                   Menu_2_row_2;                                      // 0x0450(0x0018)(Edit, BlueprintVisible)
	class FText                                   Menu_3;                                            // 0x0468(0x0018)(Edit, BlueprintVisible)
	class FText                                   Menu_3_row_2;                                      // 0x0480(0x0018)(Edit, BlueprintVisible)
	int32                                         Generated_Code;                                    // 0x0498(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         ScrollOffset;                                      // 0x049C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FString                                 Button_Text;                                       // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Button_Info_Text;                                  // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FS_EmailStructure>              Email_Array;                                       // 0x04C0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FS_EmailStructure                      HiddenCodeEmail;                                   // 0x04D0(0x0048)(Edit, BlueprintVisible, Net, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnMenuOnePressed;                                  // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnMenuThreePressed;                                // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnMenuTwoPressed;                                  // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_InteractableComputer(int32 EntryPoint);
	void SetEmails(const TArray<struct FS_EmailStructure>& EmailArray);
	void UpdateCodeViewer(const TArray<int32>& GeneratedCodes, const int32 TrueCodeIndex);
	void BndEvt__BP_InteractableComputer_SBZInteractable_Up_K2Node_ComponentBoundEvent_11_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_InteractableComputer_SBZInteractable_Down_K2Node_ComponentBoundEvent_10_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_Down_K2Node_ComponentBoundEvent_9_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_Up_K2Node_ComponentBoundEvent_8_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void Click();
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_Acti_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_Acti_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_0_K2Node_ComponentBoundEvent_17_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_00_K2Node_ComponentBoundEvent_16_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_00_K2Node_ComponentBoundEvent_15_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void RepNotifyEventListner(ECompState CompState_0);
	void SetLoadingValuesAtStart();
	void Timer();
	void Start_Timer();
	void SetNumbers(const class FString& NewParam);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_3_K2Node_ComponentBoundEvent_6_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_2_K2Node_ComponentBoundEvent_5_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_1_K2Node_ComponentBoundEvent_4_SBZOnInteractableStateChangedDelegate__DelegateSignature(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable__2_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_1_K2Node_ComponentBoundEvent_1_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_IncteractionComponentComp_SBZInteractable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void ReceiveBeginPlay();
	void UpdateIdentifier(const class FText& InIdentifier);
	void InitializeWidget(class UWidgetComponent* Widget_0);
	void BP_SetCode(class UWidgetComponent* Widget_0, int32 CodeToShow);
	void OnRep_CompState();
	void SetTings();
	void SetAllWidgetTimers();
	void Done();
	void NewFunction_0(int32 New_Param_0, bool New_Param_2_0);
	void SetCollisionBoxes();
	void SetLoadingValues();
	void StateChangeFunction(ECompState Selection);
	void OnRep_Has_Been_Pressed();
	void OnRep_Pressed_State();
	void OnRep_Pressed_State_0();
	void OnRep_Pressed_State_1();
	class FText NewFunction_1(const class FText& InText, int32 B, const class FText& InText1);
	void OnRep_ScrollOffset();
	void OnRep_NewVar_0();
	void OnRep_UpDownInt();

	int32 GetNumberOfCodeWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractableComputer_C">();
	}
	static class ABP_InteractableComputer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InteractableComputer_C>();
	}
};
static_assert(alignof(ABP_InteractableComputer_C) == 0x000008, "Wrong alignment on ABP_InteractableComputer_C");
static_assert(sizeof(ABP_InteractableComputer_C) == 0x000548, "Wrong size on ABP_InteractableComputer_C");
static_assert(offsetof(ABP_InteractableComputer_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_InteractableComputer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Two) == 0x0002B0, "Member 'ABP_InteractableComputer_C::Box_Two' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_One) == 0x0002B8, "Member 'ABP_InteractableComputer_C::Box_One' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Down) == 0x0002C0, "Member 'ABP_InteractableComputer_C::Box_Down' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Up) == 0x0002C8, "Member 'ABP_InteractableComputer_C::Box_Up' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Activate) == 0x0002D0, "Member 'ABP_InteractableComputer_C::Box_Activate' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Back) == 0x0002D8, "Member 'ABP_InteractableComputer_C::Box_Back' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Start) == 0x0002E0, "Member 'ABP_InteractableComputer_C::Box_Start' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Box_Three) == 0x0002E8, "Member 'ABP_InteractableComputer_C::Box_Three' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_Down) == 0x0002F0, "Member 'ABP_InteractableComputer_C::SBZInteractable_Down' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_Up) == 0x0002F8, "Member 'ABP_InteractableComputer_C::SBZInteractable_Up' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_Acti) == 0x000300, "Member 'ABP_InteractableComputer_C::SBZInteractable_Acti' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_Back) == 0x000308, "Member 'ABP_InteractableComputer_C::SBZInteractable_Back' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_3) == 0x000310, "Member 'ABP_InteractableComputer_C::SBZInteractable_3' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_2) == 0x000318, "Member 'ABP_InteractableComputer_C::SBZInteractable_2' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_1) == 0x000320, "Member 'ABP_InteractableComputer_C::SBZInteractable_1' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, SBZInteractable_0) == 0x000328, "Member 'ABP_InteractableComputer_C::SBZInteractable_0' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Widget) == 0x000330, "Member 'ABP_InteractableComputer_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, DesktopComputer_01_Monitor) == 0x000338, "Member 'ABP_InteractableComputer_C::DesktopComputer_01_Monitor' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_InteractableComputer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, CompState) == 0x000348, "Member 'ABP_InteractableComputer_C::CompState' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, As_WBP_3D_Widget) == 0x000350, "Member 'ABP_InteractableComputer_C::As_WBP_3D_Widget' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, New_Param) == 0x000358, "Member 'ABP_InteractableComputer_C::New_Param' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Interactable) == 0x000360, "Member 'ABP_InteractableComputer_C::Interactable' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, New_Param_2) == 0x000368, "Member 'ABP_InteractableComputer_C::New_Param_2' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Time_Count_Secs) == 0x00036C, "Member 'ABP_InteractableComputer_C::Time_Count_Secs' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, TimeToHack) == 0x000370, "Member 'ABP_InteractableComputer_C::TimeToHack' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, TimeCountSecs) == 0x000374, "Member 'ABP_InteractableComputer_C::TimeCountSecs' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, ReduceVar) == 0x000378, "Member 'ABP_InteractableComputer_C::ReduceVar' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, CurrentProcess) == 0x000380, "Member 'ABP_InteractableComputer_C::CurrentProcess' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, NumbersForDisplayCase) == 0x000398, "Member 'ABP_InteractableComputer_C::NumbersForDisplayCase' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, TimerHandle) == 0x0003A8, "Member 'ABP_InteractableComputer_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, OnComputerInteract) == 0x0003B0, "Member 'ABP_InteractableComputer_C::OnComputerInteract' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Has_InteractionButton) == 0x0003C0, "Member 'ABP_InteractableComputer_C::Has_InteractionButton' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Has_Been_Pressed) == 0x0003D0, "Member 'ABP_InteractableComputer_C::Has_Been_Pressed' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Pressed_State) == 0x0003E0, "Member 'ABP_InteractableComputer_C::Pressed_State' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, OnButtonPress) == 0x0003E8, "Member 'ABP_InteractableComputer_C::OnButtonPress' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, HasScroll) == 0x0003F8, "Member 'ABP_InteractableComputer_C::HasScroll' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Menu_1) == 0x000408, "Member 'ABP_InteractableComputer_C::Menu_1' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Menu_1_row_2) == 0x000420, "Member 'ABP_InteractableComputer_C::Menu_1_row_2' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Menu_2) == 0x000438, "Member 'ABP_InteractableComputer_C::Menu_2' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Menu_2_row_2) == 0x000450, "Member 'ABP_InteractableComputer_C::Menu_2_row_2' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Menu_3) == 0x000468, "Member 'ABP_InteractableComputer_C::Menu_3' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Menu_3_row_2) == 0x000480, "Member 'ABP_InteractableComputer_C::Menu_3_row_2' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Generated_Code) == 0x000498, "Member 'ABP_InteractableComputer_C::Generated_Code' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, ScrollOffset) == 0x00049C, "Member 'ABP_InteractableComputer_C::ScrollOffset' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Button_Text) == 0x0004A0, "Member 'ABP_InteractableComputer_C::Button_Text' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Button_Info_Text) == 0x0004B0, "Member 'ABP_InteractableComputer_C::Button_Info_Text' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, Email_Array) == 0x0004C0, "Member 'ABP_InteractableComputer_C::Email_Array' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, HiddenCodeEmail) == 0x0004D0, "Member 'ABP_InteractableComputer_C::HiddenCodeEmail' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, OnMenuOnePressed) == 0x000518, "Member 'ABP_InteractableComputer_C::OnMenuOnePressed' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, OnMenuThreePressed) == 0x000528, "Member 'ABP_InteractableComputer_C::OnMenuThreePressed' has a wrong offset!");
static_assert(offsetof(ABP_InteractableComputer_C, OnMenuTwoPressed) == 0x000538, "Member 'ABP_InteractableComputer_C::OnMenuTwoPressed' has a wrong offset!");

}

