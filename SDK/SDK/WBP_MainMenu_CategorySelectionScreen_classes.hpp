#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MainMenu_CategorySelectionScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Starbreeze_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MainMenu_CategorySelectionScreen.WBP_MainMenu_CategorySelectionScreen_C
// 0x0060 (0x0340 - 0x02E0)
class UWBP_MainMenu_CategorySelectionScreen_C final : public USBZMainMenuChallengeCategorySelectionScreen
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Intro;                                             // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         Reroll_Hb;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USBZUITextBlock*                        Reroll_T;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ScreenTitle_C*                     ScreenTitle;                                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_DailyChallengesContainer_C*        WBP_DailyChallengesContainer;                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UI_Challenge_InfamyProgress_C*     WBP_UI_Challenge_InfamyProgress;                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UI_ContentBackground_C*            WBP_UI_ContentBackground;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USBZMenuButton*                         RT_ActiveButton;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USBZChallengeCategoryData*>      Category_Data;                                     // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsDailyFocused;                                    // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WBP_MainMenu_CategorySelectionScreen(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__WBP_MainMenu_CategorySelectionScreen_WBP_DailyChallengesContainer_K2Node_ComponentBoundEvent_2_RerollUsed__DelegateSignature();
	void OnLostStackFocused();
	void OnGainedStackFocused(const class FName& PreviousValue);
	void OnControlsReferencePressed(class FName ActionName);
	void OnAddedToStack();
	void SetControlReference();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MainMenu_CategorySelectionScreen_C">();
	}
	static class UWBP_MainMenu_CategorySelectionScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MainMenu_CategorySelectionScreen_C>();
	}
};
static_assert(alignof(UWBP_MainMenu_CategorySelectionScreen_C) == 0x000008, "Wrong alignment on UWBP_MainMenu_CategorySelectionScreen_C");
static_assert(sizeof(UWBP_MainMenu_CategorySelectionScreen_C) == 0x000340, "Wrong size on UWBP_MainMenu_CategorySelectionScreen_C");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, Intro) == 0x0002E8, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::Intro' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, Reroll_Hb) == 0x0002F0, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::Reroll_Hb' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, Reroll_T) == 0x0002F8, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::Reroll_T' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, ScreenTitle) == 0x000300, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::ScreenTitle' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, WBP_DailyChallengesContainer) == 0x000308, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::WBP_DailyChallengesContainer' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, WBP_UI_Challenge_InfamyProgress) == 0x000310, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::WBP_UI_Challenge_InfamyProgress' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, WBP_UI_ContentBackground) == 0x000318, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::WBP_UI_ContentBackground' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, RT_ActiveButton) == 0x000320, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::RT_ActiveButton' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, Category_Data) == 0x000328, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::Category_Data' has a wrong offset!");
static_assert(offsetof(UWBP_MainMenu_CategorySelectionScreen_C, IsDailyFocused) == 0x000338, "Member 'UWBP_MainMenu_CategorySelectionScreen_C::IsDailyFocused' has a wrong offset!");

}

