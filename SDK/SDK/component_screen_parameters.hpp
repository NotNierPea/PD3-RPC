#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: component_screen

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function component_screen.component_screen_C.ExecuteUbergraph_component_screen
// 0x00A0 (0x00A0 - 0x0000)
struct component_screen_C_ExecuteUbergraph_component_screen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_2;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_3;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_CustomEvent_Diffuse_color;                  // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBinkMediaPlayer*                       K2Node_CustomEvent_source_bink_media_player;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Screens_plays_movie;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_swap_offest_by_position;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Mode_RGB;                       // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Is_Fully_destructable;          // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Is_OFF;                         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_sub_texture_part_used_start_range; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_sub_texture_part_used_end_range; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_resolution;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Pixel_type;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Light_Intensity;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Light_Reach;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Light_Spread;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Light_Angle;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Swap_period;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_intensity_screen;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_banding_visibility;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_banding_refresh_rate;           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Number_of__vertical_slides_in_the_texture; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Number_of__horizontal_slides_in_the_texture; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Screen_aspect_ratio__L_H_;      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Roughness_Multiplier;           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Specularity;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Side_Attenuation;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_ExecuteUbergraph_component_screen) == 0x000008, "Wrong alignment on component_screen_C_ExecuteUbergraph_component_screen");
static_assert(sizeof(component_screen_C_ExecuteUbergraph_component_screen) == 0x0000A0, "Wrong size on component_screen_C_ExecuteUbergraph_component_screen");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, EntryPoint) == 0x000000, "Member 'component_screen_C_ExecuteUbergraph_component_screen::EntryPoint' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000004, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000010, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x000014, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_BoolToFloat_ReturnValue_2) == 0x000018, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_BoolToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_BoolToFloat_ReturnValue_3) == 0x00001C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_BoolToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000024, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000028, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x00002C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, CallFunc_Play_ReturnValue) == 0x000030, "Member 'component_screen_C_ExecuteUbergraph_component_screen::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Diffuse_color) == 0x000034, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Diffuse_color' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_source_bink_media_player) == 0x000048, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_source_bink_media_player' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Screens_plays_movie) == 0x000050, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Screens_plays_movie' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_swap_offest_by_position) == 0x000051, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_swap_offest_by_position' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Mode_RGB) == 0x000052, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Mode_RGB' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Is_Fully_destructable) == 0x000053, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Is_Fully_destructable' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Is_OFF) == 0x000054, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Is_OFF' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_sub_texture_part_used_start_range) == 0x000058, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_sub_texture_part_used_start_range' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_sub_texture_part_used_end_range) == 0x00005C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_sub_texture_part_used_end_range' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_resolution) == 0x000060, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_resolution' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Pixel_type) == 0x000064, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Pixel_type' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Light_Intensity) == 0x000068, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Light_Intensity' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Light_Reach) == 0x00006C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Light_Reach' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Light_Spread) == 0x000070, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Light_Spread' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Light_Angle) == 0x000074, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Light_Angle' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Swap_period) == 0x000078, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Swap_period' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_intensity_screen) == 0x00007C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_intensity_screen' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_banding_visibility) == 0x000080, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_banding_visibility' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_banding_refresh_rate) == 0x000084, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_banding_refresh_rate' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Number_of__vertical_slides_in_the_texture) == 0x000088, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Number_of__vertical_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Number_of__horizontal_slides_in_the_texture) == 0x00008C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Number_of__horizontal_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Screen_aspect_ratio__L_H_) == 0x000090, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Screen_aspect_ratio__L_H_' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Roughness_Multiplier) == 0x000094, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Roughness_Multiplier' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Specularity) == 0x000098, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Specularity' has a wrong offset!");
static_assert(offsetof(component_screen_C_ExecuteUbergraph_component_screen, K2Node_CustomEvent_Side_Attenuation) == 0x00009C, "Member 'component_screen_C_ExecuteUbergraph_component_screen::K2Node_CustomEvent_Side_Attenuation' has a wrong offset!");

// Function component_screen.component_screen_C.setSide_Attenuation
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setSide_Attenuation final
{
public:
	float                                         Side_Attenuation_0;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setSide_Attenuation) == 0x000004, "Wrong alignment on component_screen_C_setSide_Attenuation");
static_assert(sizeof(component_screen_C_setSide_Attenuation) == 0x000004, "Wrong size on component_screen_C_setSide_Attenuation");
static_assert(offsetof(component_screen_C_setSide_Attenuation, Side_Attenuation_0) == 0x000000, "Member 'component_screen_C_setSide_Attenuation::Side_Attenuation_0' has a wrong offset!");

// Function component_screen.component_screen_C.setSpecularity
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setSpecularity final
{
public:
	float                                         Specularity_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setSpecularity) == 0x000004, "Wrong alignment on component_screen_C_setSpecularity");
static_assert(sizeof(component_screen_C_setSpecularity) == 0x000004, "Wrong size on component_screen_C_setSpecularity");
static_assert(offsetof(component_screen_C_setSpecularity, Specularity_0) == 0x000000, "Member 'component_screen_C_setSpecularity::Specularity_0' has a wrong offset!");

// Function component_screen.component_screen_C.setRoughness_Multiplier
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setRoughness_Multiplier final
{
public:
	float                                         Roughness_Multiplier_0;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setRoughness_Multiplier) == 0x000004, "Wrong alignment on component_screen_C_setRoughness_Multiplier");
static_assert(sizeof(component_screen_C_setRoughness_Multiplier) == 0x000004, "Wrong size on component_screen_C_setRoughness_Multiplier");
static_assert(offsetof(component_screen_C_setRoughness_Multiplier, Roughness_Multiplier_0) == 0x000000, "Member 'component_screen_C_setRoughness_Multiplier::Roughness_Multiplier_0' has a wrong offset!");

// Function component_screen.component_screen_C.H)
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_H__0 final
{
public:
	float                                         Param_H__0;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_H__0) == 0x000004, "Wrong alignment on component_screen_C_H__0");
static_assert(sizeof(component_screen_C_H__0) == 0x000004, "Wrong size on component_screen_C_H__0");
static_assert(offsetof(component_screen_C_H__0, Param_H__0) == 0x000000, "Member 'component_screen_C_H__0::Param_H__0' has a wrong offset!");

// Function component_screen.component_screen_C.setNumber of  horizontal slides in the texture
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setNumber_of__horizontal_slides_in_the_texture final
{
public:
	float                                         Number_of__horizontal_slides_in_the_texture_0;     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setNumber_of__horizontal_slides_in_the_texture) == 0x000004, "Wrong alignment on component_screen_C_setNumber_of__horizontal_slides_in_the_texture");
static_assert(sizeof(component_screen_C_setNumber_of__horizontal_slides_in_the_texture) == 0x000004, "Wrong size on component_screen_C_setNumber_of__horizontal_slides_in_the_texture");
static_assert(offsetof(component_screen_C_setNumber_of__horizontal_slides_in_the_texture, Number_of__horizontal_slides_in_the_texture_0) == 0x000000, "Member 'component_screen_C_setNumber_of__horizontal_slides_in_the_texture::Number_of__horizontal_slides_in_the_texture_0' has a wrong offset!");

// Function component_screen.component_screen_C.setNumber of  vertical slides in the texture
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setNumber_of__vertical_slides_in_the_texture final
{
public:
	float                                         Number_of__vertical_slides_in_the_texture_0;       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setNumber_of__vertical_slides_in_the_texture) == 0x000004, "Wrong alignment on component_screen_C_setNumber_of__vertical_slides_in_the_texture");
static_assert(sizeof(component_screen_C_setNumber_of__vertical_slides_in_the_texture) == 0x000004, "Wrong size on component_screen_C_setNumber_of__vertical_slides_in_the_texture");
static_assert(offsetof(component_screen_C_setNumber_of__vertical_slides_in_the_texture, Number_of__vertical_slides_in_the_texture_0) == 0x000000, "Member 'component_screen_C_setNumber_of__vertical_slides_in_the_texture::Number_of__vertical_slides_in_the_texture_0' has a wrong offset!");

// Function component_screen.component_screen_C.setBanding_refresh_rate
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setBanding_refresh_rate final
{
public:
	float                                         banding_refresh_rate_0;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setBanding_refresh_rate) == 0x000004, "Wrong alignment on component_screen_C_setBanding_refresh_rate");
static_assert(sizeof(component_screen_C_setBanding_refresh_rate) == 0x000004, "Wrong size on component_screen_C_setBanding_refresh_rate");
static_assert(offsetof(component_screen_C_setBanding_refresh_rate, banding_refresh_rate_0) == 0x000000, "Member 'component_screen_C_setBanding_refresh_rate::banding_refresh_rate_0' has a wrong offset!");

// Function component_screen.component_screen_C.setBanding_visibility
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setBanding_visibility final
{
public:
	float                                         banding_visibility_0;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setBanding_visibility) == 0x000004, "Wrong alignment on component_screen_C_setBanding_visibility");
static_assert(sizeof(component_screen_C_setBanding_visibility) == 0x000004, "Wrong size on component_screen_C_setBanding_visibility");
static_assert(offsetof(component_screen_C_setBanding_visibility, banding_visibility_0) == 0x000000, "Member 'component_screen_C_setBanding_visibility::banding_visibility_0' has a wrong offset!");

// Function component_screen.component_screen_C.setIntensity_screen
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setIntensity_screen final
{
public:
	float                                         intensity_screen_0;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setIntensity_screen) == 0x000004, "Wrong alignment on component_screen_C_setIntensity_screen");
static_assert(sizeof(component_screen_C_setIntensity_screen) == 0x000004, "Wrong size on component_screen_C_setIntensity_screen");
static_assert(offsetof(component_screen_C_setIntensity_screen, intensity_screen_0) == 0x000000, "Member 'component_screen_C_setIntensity_screen::intensity_screen_0' has a wrong offset!");

// Function component_screen.component_screen_C.setSwap_period
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setSwap_period final
{
public:
	float                                         Swap_period_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setSwap_period) == 0x000004, "Wrong alignment on component_screen_C_setSwap_period");
static_assert(sizeof(component_screen_C_setSwap_period) == 0x000004, "Wrong size on component_screen_C_setSwap_period");
static_assert(offsetof(component_screen_C_setSwap_period, Swap_period_0) == 0x000000, "Member 'component_screen_C_setSwap_period::Swap_period_0' has a wrong offset!");

// Function component_screen.component_screen_C.setLight_Angle
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setLight_Angle final
{
public:
	float                                         Light_Angle_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setLight_Angle) == 0x000004, "Wrong alignment on component_screen_C_setLight_Angle");
static_assert(sizeof(component_screen_C_setLight_Angle) == 0x000004, "Wrong size on component_screen_C_setLight_Angle");
static_assert(offsetof(component_screen_C_setLight_Angle, Light_Angle_0) == 0x000000, "Member 'component_screen_C_setLight_Angle::Light_Angle_0' has a wrong offset!");

// Function component_screen.component_screen_C.setLight_Spread
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setLight_Spread final
{
public:
	float                                         Light_Spread_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setLight_Spread) == 0x000004, "Wrong alignment on component_screen_C_setLight_Spread");
static_assert(sizeof(component_screen_C_setLight_Spread) == 0x000004, "Wrong size on component_screen_C_setLight_Spread");
static_assert(offsetof(component_screen_C_setLight_Spread, Light_Spread_0) == 0x000000, "Member 'component_screen_C_setLight_Spread::Light_Spread_0' has a wrong offset!");

// Function component_screen.component_screen_C.setLight_Reach
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setLight_Reach final
{
public:
	float                                         Light_Reach_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setLight_Reach) == 0x000004, "Wrong alignment on component_screen_C_setLight_Reach");
static_assert(sizeof(component_screen_C_setLight_Reach) == 0x000004, "Wrong size on component_screen_C_setLight_Reach");
static_assert(offsetof(component_screen_C_setLight_Reach, Light_Reach_0) == 0x000000, "Member 'component_screen_C_setLight_Reach::Light_Reach_0' has a wrong offset!");

// Function component_screen.component_screen_C.setLight_Intensity
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setLight_Intensity final
{
public:
	float                                         Light_Intensity_0;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setLight_Intensity) == 0x000004, "Wrong alignment on component_screen_C_setLight_Intensity");
static_assert(sizeof(component_screen_C_setLight_Intensity) == 0x000004, "Wrong size on component_screen_C_setLight_Intensity");
static_assert(offsetof(component_screen_C_setLight_Intensity, Light_Intensity_0) == 0x000000, "Member 'component_screen_C_setLight_Intensity::Light_Intensity_0' has a wrong offset!");

// Function component_screen.component_screen_C.setPixel_type
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setPixel_type final
{
public:
	int32                                         Pixel_type_0;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setPixel_type) == 0x000004, "Wrong alignment on component_screen_C_setPixel_type");
static_assert(sizeof(component_screen_C_setPixel_type) == 0x000004, "Wrong size on component_screen_C_setPixel_type");
static_assert(offsetof(component_screen_C_setPixel_type, Pixel_type_0) == 0x000000, "Member 'component_screen_C_setPixel_type::Pixel_type_0' has a wrong offset!");

// Function component_screen.component_screen_C.setResolution
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setResolution final
{
public:
	int32                                         resolution_0;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setResolution) == 0x000004, "Wrong alignment on component_screen_C_setResolution");
static_assert(sizeof(component_screen_C_setResolution) == 0x000004, "Wrong size on component_screen_C_setResolution");
static_assert(offsetof(component_screen_C_setResolution, resolution_0) == 0x000000, "Member 'component_screen_C_setResolution::resolution_0' has a wrong offset!");

// Function component_screen.component_screen_C.setSub_texture_part_used_end_range
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setSub_texture_part_used_end_range final
{
public:
	int32                                         sub_texture_part_used_end_range_0;                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setSub_texture_part_used_end_range) == 0x000004, "Wrong alignment on component_screen_C_setSub_texture_part_used_end_range");
static_assert(sizeof(component_screen_C_setSub_texture_part_used_end_range) == 0x000004, "Wrong size on component_screen_C_setSub_texture_part_used_end_range");
static_assert(offsetof(component_screen_C_setSub_texture_part_used_end_range, sub_texture_part_used_end_range_0) == 0x000000, "Member 'component_screen_C_setSub_texture_part_used_end_range::sub_texture_part_used_end_range_0' has a wrong offset!");

// Function component_screen.component_screen_C.setSub_texture_part_used_start_range
// 0x0004 (0x0004 - 0x0000)
struct component_screen_C_setSub_texture_part_used_start_range final
{
public:
	int32                                         sub_texture_part_used_start_range_0;               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setSub_texture_part_used_start_range) == 0x000004, "Wrong alignment on component_screen_C_setSub_texture_part_used_start_range");
static_assert(sizeof(component_screen_C_setSub_texture_part_used_start_range) == 0x000004, "Wrong size on component_screen_C_setSub_texture_part_used_start_range");
static_assert(offsetof(component_screen_C_setSub_texture_part_used_start_range, sub_texture_part_used_start_range_0) == 0x000000, "Member 'component_screen_C_setSub_texture_part_used_start_range::sub_texture_part_used_start_range_0' has a wrong offset!");

// Function component_screen.component_screen_C.setIs_OFF
// 0x0001 (0x0001 - 0x0000)
struct component_screen_C_setIs_OFF final
{
public:
	bool                                          Is_OFF_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(component_screen_C_setIs_OFF) == 0x000001, "Wrong alignment on component_screen_C_setIs_OFF");
static_assert(sizeof(component_screen_C_setIs_OFF) == 0x000001, "Wrong size on component_screen_C_setIs_OFF");
static_assert(offsetof(component_screen_C_setIs_OFF, Is_OFF_0) == 0x000000, "Member 'component_screen_C_setIs_OFF::Is_OFF_0' has a wrong offset!");

// Function component_screen.component_screen_C.setIs_Fully_destructable
// 0x0001 (0x0001 - 0x0000)
struct component_screen_C_setIs_Fully_destructable final
{
public:
	bool                                          Is_Fully_destructable_0;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(component_screen_C_setIs_Fully_destructable) == 0x000001, "Wrong alignment on component_screen_C_setIs_Fully_destructable");
static_assert(sizeof(component_screen_C_setIs_Fully_destructable) == 0x000001, "Wrong size on component_screen_C_setIs_Fully_destructable");
static_assert(offsetof(component_screen_C_setIs_Fully_destructable, Is_Fully_destructable_0) == 0x000000, "Member 'component_screen_C_setIs_Fully_destructable::Is_Fully_destructable_0' has a wrong offset!");

// Function component_screen.component_screen_C.setMode_RGB
// 0x0001 (0x0001 - 0x0000)
struct component_screen_C_setMode_RGB final
{
public:
	bool                                          Mode_RGB_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(component_screen_C_setMode_RGB) == 0x000001, "Wrong alignment on component_screen_C_setMode_RGB");
static_assert(sizeof(component_screen_C_setMode_RGB) == 0x000001, "Wrong size on component_screen_C_setMode_RGB");
static_assert(offsetof(component_screen_C_setMode_RGB, Mode_RGB_0) == 0x000000, "Member 'component_screen_C_setMode_RGB::Mode_RGB_0' has a wrong offset!");

// Function component_screen.component_screen_C.setSwap_offest_by_position
// 0x0001 (0x0001 - 0x0000)
struct component_screen_C_setSwap_offest_by_position final
{
public:
	bool                                          swap_offest_by_position_0;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(component_screen_C_setSwap_offest_by_position) == 0x000001, "Wrong alignment on component_screen_C_setSwap_offest_by_position");
static_assert(sizeof(component_screen_C_setSwap_offest_by_position) == 0x000001, "Wrong size on component_screen_C_setSwap_offest_by_position");
static_assert(offsetof(component_screen_C_setSwap_offest_by_position, swap_offest_by_position_0) == 0x000000, "Member 'component_screen_C_setSwap_offest_by_position::swap_offest_by_position_0' has a wrong offset!");

// Function component_screen.component_screen_C.setScreenPlaysMovie
// 0x0001 (0x0001 - 0x0000)
struct component_screen_C_setScreenPlaysMovie final
{
public:
	bool                                          Screens_plays_movie_0;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(component_screen_C_setScreenPlaysMovie) == 0x000001, "Wrong alignment on component_screen_C_setScreenPlaysMovie");
static_assert(sizeof(component_screen_C_setScreenPlaysMovie) == 0x000001, "Wrong size on component_screen_C_setScreenPlaysMovie");
static_assert(offsetof(component_screen_C_setScreenPlaysMovie, Screens_plays_movie_0) == 0x000000, "Member 'component_screen_C_setScreenPlaysMovie::Screens_plays_movie_0' has a wrong offset!");

// Function component_screen.component_screen_C.setSource_bink_media_player
// 0x0008 (0x0008 - 0x0000)
struct component_screen_C_setSource_bink_media_player final
{
public:
	class UBinkMediaPlayer*                       source_bink_media_player_0;                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setSource_bink_media_player) == 0x000008, "Wrong alignment on component_screen_C_setSource_bink_media_player");
static_assert(sizeof(component_screen_C_setSource_bink_media_player) == 0x000008, "Wrong size on component_screen_C_setSource_bink_media_player");
static_assert(offsetof(component_screen_C_setSource_bink_media_player, source_bink_media_player_0) == 0x000000, "Member 'component_screen_C_setSource_bink_media_player::source_bink_media_player_0' has a wrong offset!");

// Function component_screen.component_screen_C.setDiffuse_color
// 0x0010 (0x0010 - 0x0000)
struct component_screen_C_setDiffuse_color final
{
public:
	struct FLinearColor                           Diffuse_color_0;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setDiffuse_color) == 0x000004, "Wrong alignment on component_screen_C_setDiffuse_color");
static_assert(sizeof(component_screen_C_setDiffuse_color) == 0x000010, "Wrong size on component_screen_C_setDiffuse_color");
static_assert(offsetof(component_screen_C_setDiffuse_color, Diffuse_color_0) == 0x000000, "Member 'component_screen_C_setDiffuse_color::Diffuse_color_0' has a wrong offset!");

// Function component_screen.component_screen_C.setup
// 0x0058 (0x0058 - 0x0000)
struct component_screen_C_setup final
{
public:
	class UStaticMeshComponent*                   meshes_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZCosmeticDestructionComponent*       SBZCosmeticDestruction_0;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ESBZCosmeticDestructionType Type, const struct FSBZCosmeticDestructionContext& HitContext)> K2Node_CreateDelegate_OutputDelegate; // 0x001C(0x0014)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_2;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_3;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setup) == 0x000008, "Wrong alignment on component_screen_C_setup");
static_assert(sizeof(component_screen_C_setup) == 0x000058, "Wrong size on component_screen_C_setup");
static_assert(offsetof(component_screen_C_setup, meshes_0) == 0x000000, "Member 'component_screen_C_setup::meshes_0' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, SBZCosmeticDestruction_0) == 0x000008, "Member 'component_screen_C_setup::SBZCosmeticDestruction_0' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000010, "Member 'component_screen_C_setup::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'component_screen_C_setup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'component_screen_C_setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000034, "Member 'component_screen_C_setup::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x000038, "Member 'component_screen_C_setup::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_BoolToFloat_ReturnValue_2) == 0x00003C, "Member 'component_screen_C_setup::CallFunc_Conv_BoolToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000040, "Member 'component_screen_C_setup::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000044, "Member 'component_screen_C_setup::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000048, "Member 'component_screen_C_setup::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_BoolToFloat_ReturnValue_3) == 0x00004C, "Member 'component_screen_C_setup::CallFunc_Conv_BoolToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(component_screen_C_setup, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000050, "Member 'component_screen_C_setup::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");

// Function component_screen.component_screen_C.onDestructionHit
// 0x003C (0x003C - 0x0000)
struct component_screen_C_onDestructionHit final
{
public:
	ESBZCosmeticDestructionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSBZCosmeticDestructionContext         HitContext;                                        // 0x0004(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_onDestructionHit) == 0x000004, "Wrong alignment on component_screen_C_onDestructionHit");
static_assert(sizeof(component_screen_C_onDestructionHit) == 0x00003C, "Wrong size on component_screen_C_onDestructionHit");
static_assert(offsetof(component_screen_C_onDestructionHit, Type) == 0x000000, "Member 'component_screen_C_onDestructionHit::Type' has a wrong offset!");
static_assert(offsetof(component_screen_C_onDestructionHit, HitContext) == 0x000004, "Member 'component_screen_C_onDestructionHit::HitContext' has a wrong offset!");
static_assert(offsetof(component_screen_C_onDestructionHit, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'component_screen_C_onDestructionHit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(component_screen_C_onDestructionHit, CallFunc_Min_ReturnValue) == 0x000038, "Member 'component_screen_C_onDestructionHit::CallFunc_Min_ReturnValue' has a wrong offset!");

// Function component_screen.component_screen_C.setDamageState
// 0x000C (0x000C - 0x0000)
struct component_screen_C_setDamageState final
{
public:
	int32                                         damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(component_screen_C_setDamageState) == 0x000004, "Wrong alignment on component_screen_C_setDamageState");
static_assert(sizeof(component_screen_C_setDamageState) == 0x00000C, "Wrong size on component_screen_C_setDamageState");
static_assert(offsetof(component_screen_C_setDamageState, damage) == 0x000000, "Member 'component_screen_C_setDamageState::damage' has a wrong offset!");
static_assert(offsetof(component_screen_C_setDamageState, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'component_screen_C_setDamageState::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(component_screen_C_setDamageState, CallFunc_GetRealTimeSeconds_ReturnValue) == 0x000008, "Member 'component_screen_C_setDamageState::CallFunc_GetRealTimeSeconds_ReturnValue' has a wrong offset!");

}

