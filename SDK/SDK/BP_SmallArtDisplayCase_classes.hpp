#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmallArtDisplayCase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_BaseShutterDisplayCase_classes.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SmallArtDisplayCase.BP_SmallArtDisplayCase_C
// 0x0060 (0x04D8 - 0x0478)
class ABP_SmallArtDisplayCase_C final : public ABP_BaseShutterDisplayCase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SmallArtDisplayCase_C;           // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Cuttable_Interaction_Collision;                    // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DisplayCase_01_Wall_light_S;                       // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DisplayCase_01_Wall_S;                             // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Timeline_0_Position_EC67E68E4061AB1129A5C38F881959BA; // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_EC67E68E4061AB1129A5C38F881959BA; // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tint;                                              // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lockdown;                                          // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SmallArtDisplayCase(int32 EntryPoint);
	void BP_OnStateChanged(ESBZDisplayCaseState OldState, ESBZDisplayCaseState NewState, bool bDoCosmetics);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SmallArtDisplayCase_C">();
	}
	static class ABP_SmallArtDisplayCase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SmallArtDisplayCase_C>();
	}
};
static_assert(alignof(ABP_SmallArtDisplayCase_C) == 0x000008, "Wrong alignment on ABP_SmallArtDisplayCase_C");
static_assert(sizeof(ABP_SmallArtDisplayCase_C) == 0x0004D8, "Wrong size on ABP_SmallArtDisplayCase_C");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, UberGraphFrame_BP_SmallArtDisplayCase_C) == 0x000478, "Member 'ABP_SmallArtDisplayCase_C::UberGraphFrame_BP_SmallArtDisplayCase_C' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Ak) == 0x000480, "Member 'ABP_SmallArtDisplayCase_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Cuttable_Interaction_Collision) == 0x000488, "Member 'ABP_SmallArtDisplayCase_C::Cuttable_Interaction_Collision' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, RectLight) == 0x000490, "Member 'ABP_SmallArtDisplayCase_C::RectLight' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, DisplayCase_01_Wall_light_S) == 0x000498, "Member 'ABP_SmallArtDisplayCase_C::DisplayCase_01_Wall_light_S' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, DisplayCase_01_Wall_S) == 0x0004A0, "Member 'ABP_SmallArtDisplayCase_C::DisplayCase_01_Wall_S' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Timeline_0_Position_EC67E68E4061AB1129A5C38F881959BA) == 0x0004A8, "Member 'ABP_SmallArtDisplayCase_C::Timeline_0_Position_EC67E68E4061AB1129A5C38F881959BA' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Timeline_0__Direction_EC67E68E4061AB1129A5C38F881959BA) == 0x0004B4, "Member 'ABP_SmallArtDisplayCase_C::Timeline_0__Direction_EC67E68E4061AB1129A5C38F881959BA' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Timeline_0) == 0x0004B8, "Member 'ABP_SmallArtDisplayCase_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Tint) == 0x0004C0, "Member 'ABP_SmallArtDisplayCase_C::Tint' has a wrong offset!");
static_assert(offsetof(ABP_SmallArtDisplayCase_C, Lockdown) == 0x0004D0, "Member 'ABP_SmallArtDisplayCase_C::Lockdown' has a wrong offset!");

}

