#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HW12DEV_WeaponStats_Entry_TwoText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText
// 0x0008 (0x0008 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText) == 0x000004, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText) == 0x000008, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText, EntryPoint) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText::EntryPoint' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText, K2Node_Event_IsDesignTime) == 0x000004, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_ExecuteUbergraph_HW12DEV_WeaponStats_Entry_TwoText::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct) == 0x000001, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct) == 0x000001, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.SetBaseCompare
// 0x0030 (0x0030 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Compare;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCompare;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlipCompare;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	TArray<float>                                 K2Node_MakeArray_Array_1;                          // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare) == 0x000008, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare) == 0x000030, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare, Base) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare::Base' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare, Compare) == 0x000004, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare::Compare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare, HasCompare) == 0x000008, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare::HasCompare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare, FlipCompare) == 0x000009, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare::FlipCompare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare, K2Node_MakeArray_Array) == 0x000010, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare, K2Node_MakeArray_Array_1) == 0x000020, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompare::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.SetBaseCompareArray
// 0x0130 (0x0130 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray final
{
public:
	TArray<float>                                 Base;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<float>                                 Compare;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          HasCompare;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlipCompare;                                       // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMinMaxOfFloatArray_Min;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMinMaxOfFloatArray_Max;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FormatMinMaxOfFloatArray_Text;            // 0x0030(0x0018)()
	float                                         CallFunc_GetMinMaxOfFloatArray_Min_1;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMinMaxOfFloatArray_Max_1;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FormatMinMaxOfFloatArray_Text_1;          // 0x0050(0x0018)()
	struct FLinearColor                           CallFunc_DetermineDowngradeUpgradeColour_Colour;   // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_DetermineDowngradeUpgradeColour_Colour_1; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0088(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00B0(0x0028)()
	class FText                                   CallFunc_FormatMinMaxOfFloatArray_Text_2;          // 0x00D8(0x0018)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x00F0(0x0028)()
	bool                                          Temp_bool_Variable;                                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             K2Node_Select_Default;                             // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             K2Node_Select_Default_1;                           // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray) == 0x000008, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray) == 0x000130, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, Base) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::Base' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, Compare) == 0x000010, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::Compare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, HasCompare) == 0x000020, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::HasCompare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, FlipCompare) == 0x000021, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::FlipCompare' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_GetMinMaxOfFloatArray_Min) == 0x000024, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_GetMinMaxOfFloatArray_Min' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_GetMinMaxOfFloatArray_Max) == 0x000028, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_GetMinMaxOfFloatArray_Max' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_FormatMinMaxOfFloatArray_Text) == 0x000030, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_FormatMinMaxOfFloatArray_Text' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_GetMinMaxOfFloatArray_Min_1) == 0x000048, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_GetMinMaxOfFloatArray_Min_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_GetMinMaxOfFloatArray_Max_1) == 0x00004C, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_GetMinMaxOfFloatArray_Max_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_FormatMinMaxOfFloatArray_Text_1) == 0x000050, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_FormatMinMaxOfFloatArray_Text_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_DetermineDowngradeUpgradeColour_Colour) == 0x000068, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_DetermineDowngradeUpgradeColour_Colour' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_DetermineDowngradeUpgradeColour_Colour_1) == 0x000078, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_DetermineDowngradeUpgradeColour_Colour_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, K2Node_MakeStruct_SlateColor) == 0x000088, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, K2Node_MakeStruct_SlateColor_1) == 0x0000B0, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, CallFunc_FormatMinMaxOfFloatArray_Text_2) == 0x0000D8, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::CallFunc_FormatMinMaxOfFloatArray_Text_2' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, K2Node_MakeStruct_SlateColor_2) == 0x0000F0, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, Temp_bool_Variable) == 0x000118, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, Temp_bool_Variable_1) == 0x000119, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, K2Node_Select_Default) == 0x000120, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray, K2Node_Select_Default_1) == 0x000128, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetBaseCompareArray::K2Node_Select_Default_1' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.GetMinMaxOfFloatArray
// 0x0028 (0x0028 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray final
{
public:
	TArray<float>                                 Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Min;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MinOfFloatArray_IndexOfMinValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MinOfFloatArray_MinValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray) == 0x000008, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray) == 0x000028, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, Array) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::Array' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, Min) == 0x000010, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::Min' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, Max) == 0x000014, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::Max' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, CallFunc_MinOfFloatArray_IndexOfMinValue) == 0x000018, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::CallFunc_MinOfFloatArray_IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, CallFunc_MinOfFloatArray_MinValue) == 0x00001C, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::CallFunc_MinOfFloatArray_MinValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000020, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray, CallFunc_MaxOfFloatArray_MaxValue) == 0x000024, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_GetMinMaxOfFloatArray::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.FormatMinMaxOfFloatArray
// 0x0130 (0x0130 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray final
{
public:
	TArray<float>                                 Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Text;                                              // 0x0010(0x0018)(Parm, OutParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0038(0x0018)()
	float                                         CallFunc_GetMinMaxOfFloatArray_Min;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMinMaxOfFloatArray_Max;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x0058(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_2;           // 0x0070(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0088(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0118(0x0018)()
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray) == 0x000008, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray) == 0x000130, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, Array) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::Array' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, Text) == 0x000010, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::Text' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_Array_Get_Item) == 0x00002C, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_Conv_FloatToText_ReturnValue) == 0x000038, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_GetMinMaxOfFloatArray_Min) == 0x000050, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_GetMinMaxOfFloatArray_Min' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_GetMinMaxOfFloatArray_Max) == 0x000054, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_GetMinMaxOfFloatArray_Max' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x000058, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_Conv_FloatToText_ReturnValue_2) == 0x000070, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_Conv_FloatToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, K2Node_MakeStruct_FormatArgumentData) == 0x000088, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C8, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, K2Node_MakeArray_Array) == 0x000108, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray, CallFunc_Format_ReturnValue) == 0x000118, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_FormatMinMaxOfFloatArray::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.DetermineDowngradeUpgradeColour
// 0x001C (0x001C - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour final
{
public:
	float                                         BaseVal;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CompareVal;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Colour;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour) == 0x000004, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour) == 0x00001C, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour, BaseVal) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour::BaseVal' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour, CompareVal) == 0x000004, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour::CompareVal' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour, Colour) == 0x000008, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour::Colour' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_DetermineDowngradeUpgradeColour::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function HW12DEV_WeaponStats_Entry_TwoText.HW12DEV_WeaponStats_Entry_TwoText_C.SetText
// 0x00D0 (0x00D0 - 0x0000)
struct HW12DEV_WeaponStats_Entry_TwoText_C_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTextBlock*                             TextObject;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IncludeSuffix;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0068(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
};
static_assert(alignof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText) == 0x000008, "Wrong alignment on HW12DEV_WeaponStats_Entry_TwoText_C_SetText");
static_assert(sizeof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText) == 0x0000D0, "Wrong size on HW12DEV_WeaponStats_Entry_TwoText_C_SetText");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, Text) == 0x000000, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::Text' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, TextObject) == 0x000018, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::TextObject' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, IncludeSuffix) == 0x000020, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::IncludeSuffix' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, K2Node_MakeStruct_FormatArgumentData_1) == 0x000068, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, K2Node_MakeArray_Array) == 0x0000A8, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HW12DEV_WeaponStats_Entry_TwoText_C_SetText, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'HW12DEV_WeaponStats_Entry_TwoText_C_SetText::CallFunc_Format_ReturnValue' has a wrong offset!");

}

