#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HappyCursor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass HappyCursor.HappyCursor_C
// 0x0028 (0x02B8 - 0x0290)
class UHappyCursor_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FadeRing;                                          // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rotate;                                            // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Ring;                                              // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Spinning;                                          // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpinningAnimationTime;                             // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_HappyCursor(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HappyCursor_C">();
	}
	static class UHappyCursor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHappyCursor_C>();
	}
};
static_assert(alignof(UHappyCursor_C) == 0x000008, "Wrong alignment on UHappyCursor_C");
static_assert(sizeof(UHappyCursor_C) == 0x0002B8, "Wrong size on UHappyCursor_C");
static_assert(offsetof(UHappyCursor_C, UberGraphFrame) == 0x000290, "Member 'UHappyCursor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHappyCursor_C, FadeRing) == 0x000298, "Member 'UHappyCursor_C::FadeRing' has a wrong offset!");
static_assert(offsetof(UHappyCursor_C, Rotate) == 0x0002A0, "Member 'UHappyCursor_C::Rotate' has a wrong offset!");
static_assert(offsetof(UHappyCursor_C, Ring) == 0x0002A8, "Member 'UHappyCursor_C::Ring' has a wrong offset!");
static_assert(offsetof(UHappyCursor_C, Spinning) == 0x0002B0, "Member 'UHappyCursor_C::Spinning' has a wrong offset!");
static_assert(offsetof(UHappyCursor_C, SpinningAnimationTime) == 0x0002B4, "Member 'UHappyCursor_C::SpinningAnimationTime' has a wrong offset!");

}

