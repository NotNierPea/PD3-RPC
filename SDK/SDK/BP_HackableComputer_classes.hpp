#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HackableComputer

#include "Basic.hpp"

#include "Enum_HackingResultOnDone_structs.hpp"
#include "Enum_HackingComputerStates_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_NameLocationAndSpawn_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HackableComputer.BP_HackableComputer_C
// 0x0160 (0x0430 - 0x02D0)
class ABP_HackableComputer_C final : public ASBZStaticInteractionActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USBZOutlineComponent*                   SBZMarkedOutline;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZShoutTargetComponent*               SBZShoutTarget;                                    // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZOutlineComponent*                   SBZOutline;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Computer;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToHack;                                        // 0x0300(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CountdownTimer;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCountSecs;                                     // 0x0310(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           ProcessBar;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             Digits;                                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_HackingComputerStates                    States;                                            // 0x0328(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnHackComplete;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnInterupted;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnResumeHack;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnStartInteraction;                                // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsActiveOnStart;                                   // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentMarkerID;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_HackingResultOnDone                      ResultOnDone;                                      // 0x0378(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_WixiaComputer_C*                   CurrentWidgetRef;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             CurrentErrorProgress;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 KeyCodes;                                          // 0x0390(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class ASBZBinaryStateNode*                    GameStateBinaryNode;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressOnInterupted;                              // 0x03A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasInterupted;                                     // 0x03AC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASBZBinaryStateNode*                    SetStateBinaryNode;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnHackFailed;                                      // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CustomGenericMessage;                              // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomMessage;                                     // 0x03D0(0x0018)(Edit, BlueprintVisible)
	int32                                         RandomHRName;                                      // 0x03E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_NameLocationAndSpawn>   PaperLocationAndNames;                             // 0x03F0(0x0010)(Edit, BlueprintVisible, Net)
	class FText                                   CurrentProcess;                                    // 0x0400(0x0018)(Edit, BlueprintVisible, Net)
	float                                         ReduceVar;                                         // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 LocationArrayInt)> OnSelectedLocation;                       // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_HackableComputer(int32 EntryPoint);
	void Reset(float TimeToHack_0, const class FText& CurrentProcess_0, Enum_HackingResultOnDone ResultOnDone_0);
	void Custom();
	void BndEvt__SBZShoutTarget_K2Node_ComponentBoundEvent_2_SBZShoutedAtDelegate__DelegateSignature(class USBZShoutTargetComponent* ShoutTarget, class APawn* Shouter);
	void ReceiveTick(float DeltaSeconds);
	void EnableInteractionAfterInterrupt();
	void Fail();
	void NotActive();
	void BndEvt__NewVar_2_K2Node_ComponentBoundEvent_1_SBZOnBinaryStateChanged__DelegateSignature(class ASBZBinaryStateNode* BinaryStateNode, bool bState);
	void ReceiveBeginPlay();
	void Active();
	void Interrupt();
	void Progressing();
	void Done();
	void Timer();
	void BndEvt__Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void SetTings();
	void SetAllWidgetTimers();
	void OnRep_CountdownTimer();
	void OnRep_TimeCountSecs();
	void OnRep_RandomHRName();
	void NameInfoFunction();
	void KeyCodesFunction();
	void GenericDoneFunction();
	void OnRep_States();
	void NameInfoShoutTarget();
	void KeyCodesShoutTarget();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HackableComputer_C">();
	}
	static class ABP_HackableComputer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HackableComputer_C>();
	}
};
static_assert(alignof(ABP_HackableComputer_C) == 0x000008, "Wrong alignment on ABP_HackableComputer_C");
static_assert(sizeof(ABP_HackableComputer_C) == 0x000430, "Wrong size on ABP_HackableComputer_C");
static_assert(offsetof(ABP_HackableComputer_C, UberGraphFrame) == 0x0002D0, "Member 'ABP_HackableComputer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, SBZMarkedOutline) == 0x0002D8, "Member 'ABP_HackableComputer_C::SBZMarkedOutline' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, SBZShoutTarget) == 0x0002E0, "Member 'ABP_HackableComputer_C::SBZShoutTarget' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, SBZOutline) == 0x0002E8, "Member 'ABP_HackableComputer_C::SBZOutline' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, Widget) == 0x0002F0, "Member 'ABP_HackableComputer_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, Computer) == 0x0002F8, "Member 'ABP_HackableComputer_C::Computer' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, TimeToHack) == 0x000300, "Member 'ABP_HackableComputer_C::TimeToHack' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CountdownTimer) == 0x000308, "Member 'ABP_HackableComputer_C::CountdownTimer' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, TimeCountSecs) == 0x000310, "Member 'ABP_HackableComputer_C::TimeCountSecs' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, ProcessBar) == 0x000318, "Member 'ABP_HackableComputer_C::ProcessBar' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, Digits) == 0x000320, "Member 'ABP_HackableComputer_C::Digits' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, States) == 0x000328, "Member 'ABP_HackableComputer_C::States' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, OnHackComplete) == 0x000330, "Member 'ABP_HackableComputer_C::OnHackComplete' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, OnInterupted) == 0x000340, "Member 'ABP_HackableComputer_C::OnInterupted' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, OnResumeHack) == 0x000350, "Member 'ABP_HackableComputer_C::OnResumeHack' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, OnStartInteraction) == 0x000360, "Member 'ABP_HackableComputer_C::OnStartInteraction' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, IsActiveOnStart) == 0x000370, "Member 'ABP_HackableComputer_C::IsActiveOnStart' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CurrentMarkerID) == 0x000374, "Member 'ABP_HackableComputer_C::CurrentMarkerID' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, ResultOnDone) == 0x000378, "Member 'ABP_HackableComputer_C::ResultOnDone' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CurrentWidgetRef) == 0x000380, "Member 'ABP_HackableComputer_C::CurrentWidgetRef' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CurrentErrorProgress) == 0x000388, "Member 'ABP_HackableComputer_C::CurrentErrorProgress' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, KeyCodes) == 0x000390, "Member 'ABP_HackableComputer_C::KeyCodes' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, GameStateBinaryNode) == 0x0003A0, "Member 'ABP_HackableComputer_C::GameStateBinaryNode' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, ProgressOnInterupted) == 0x0003A8, "Member 'ABP_HackableComputer_C::ProgressOnInterupted' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, WasInterupted) == 0x0003AC, "Member 'ABP_HackableComputer_C::WasInterupted' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, SetStateBinaryNode) == 0x0003B0, "Member 'ABP_HackableComputer_C::SetStateBinaryNode' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, OnHackFailed) == 0x0003B8, "Member 'ABP_HackableComputer_C::OnHackFailed' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CustomGenericMessage) == 0x0003C8, "Member 'ABP_HackableComputer_C::CustomGenericMessage' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CustomMessage) == 0x0003D0, "Member 'ABP_HackableComputer_C::CustomMessage' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, RandomHRName) == 0x0003E8, "Member 'ABP_HackableComputer_C::RandomHRName' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, PaperLocationAndNames) == 0x0003F0, "Member 'ABP_HackableComputer_C::PaperLocationAndNames' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, CurrentProcess) == 0x000400, "Member 'ABP_HackableComputer_C::CurrentProcess' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, ReduceVar) == 0x000418, "Member 'ABP_HackableComputer_C::ReduceVar' has a wrong offset!");
static_assert(offsetof(ABP_HackableComputer_C, OnSelectedLocation) == 0x000420, "Member 'ABP_HackableComputer_C::OnSelectedLocation' has a wrong offset!");

}

