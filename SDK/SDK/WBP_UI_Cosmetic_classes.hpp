#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Cosmetic

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_UI_Cosmetic.WBP_UI_Cosmetic_C
// 0x05E0 (0x0968 - 0x0388)
class UWBP_UI_Cosmetic_C final : public USBZMainMenuCosmetic
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       change_Tab;                                        // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Intro;                                             // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NewAnimation;                                      // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HideTooltip;                                       // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Loading;                                           // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UVerticalBox*                           ChangeListBox;                                     // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ChangeOverlay;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Local_Navbar_C*                    EquippableNavBar;                                  // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_85;                                          // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_149;                                         // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               ItemBox;                                           // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ItemScrollBox;                                     // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LoadingText;                                       // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        MainNavBarSwitcher;                                // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Local_Navbar_C*                    MaskNavBar;                                        // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Local_Navbar_C*                    PatternNavBar;                                     // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ScreenTitle_C*                     ScreenTitle;                                       // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Local_Navbar_C*                    StickerNavBar;                                     // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               StoreItemBox;                                      // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        SubNavBarSwitcher;                                 // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USBZUITextBlock*                        TooltipDescription;                                // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TooltipName;                                       // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               TooltipOverlay;                                    // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UI_ContentBackground_C*            WBP_UI_ContentBackground;                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USBZUITextBlock*                        WeaponHeader_T;                                    // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSBZButtonControlsReference            DefaultButtonControlsReference;                    // 0x0468(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            DefaultSelectButtonControlsReference;              // 0x0490(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ApplyButtonControlsReference;                      // 0x04B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ApplysSelectButtonControlsReference;               // 0x04E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ControllerDefaultButtonControlsReference;          // 0x0508(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ControllerDefaultSelectButtonControlsReference;    // 0x0530(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ControllerApplysSelectButtonControlsReference;     // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ControllerApplyButtonControlsReference;            // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZButtonControlsReference            ConfirmButtonControlsReference;                    // 0x05A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USBZCosmeticsPartSlot*                  SlotData;                                          // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_UI_Cosmetic_Item_C*                EquippedItem;                                      // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class USBZCosmeticsPartSlot*, class USBZModularPartDataAsset*> CurrentDataMap;              // 0x05E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class USBZCosmeticsPartSlot*, class USBZModularPartDataAsset*> PreviewDataMap;              // 0x0630(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class USBZCosmeticsPartSlot*, class USBZModularPartConfig*> PreviewPartConfigMap;           // 0x0680(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class USBZCosmeticsPartSlot*, class USBZModularPartDataAsset*> BuyDataMap;                  // 0x06D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class USBZCosmeticsPartSlot*, struct FSBZStoreBaseItem> BuyStoreDataMap;                    // 0x0720(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USBZModularPartDataAsset*               CurrentData;                                       // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZModularPartDataAsset*               PreviewData;                                       // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASBZStandaloneWeaponDisplay*            PreviewEquippable;                                 // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USBZCosmeticsPartSlot*>          MaskPatternColorSlotDataArray;                     // 0x0788(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USBZCosmeticsPartSlot*>          EquippablePatternColorSlotDataArray;               // 0x0798(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSBZEquippableConfig                   CurrentEquippableConfig;                           // 0x07A8(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USBZCosmeticsPartSlot*                  MaskPatternSlot;                                   // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZCosmeticsPartSlot*                  EquippablePatternSlot;                             // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPopup;                                           // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82A[0x6];                                      // 0x082A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSBZStoreBaseItem                      NoStoreData;                                       // 0x0830(0x00D8)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USBZCosmeticsPartSlot*>          EquippableStickerSlotDataArray;                    // 0x0908(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsEnoughResources;                                 // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnoughLevel;                                     // 0x0919(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91A[0x2];                                      // 0x091A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPatternCount;                                   // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxStickerCount;                                   // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_924[0x4];                                      // 0x0924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CashCost;                                          // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         GoldCost;                                          // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CreditCost;                                        // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinLevel;                                          // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_944[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RequirementText;                                   // 0x0948(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_UI_Cosmetic_Item_C*                FocusedButton;                                     // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_UI_Cosmetic(int32 EntryPoint);
	void OnAddedToStack();
	void OnRemovedFromStack();
	void RefreshOwnedItems();
	void OnConfirmNotEnoughLevel(class FName ClosingActionName);
	void OnConfirmNotEnoughResources(class FName ClosingActionName);
	void OnConfirmBuyError(class FName ClosingActionName);
	void BP_OnBuyDone(bool bIsSuccess, ESBZMetaRequestResult Result);
	void OnAddStoreItem(const class USBZCosmeticsDataAsset* AssetData, const struct FSBZStoreBaseItem& StoreData);
	void OnConfirmApplyError(class FName ClosingActionName);
	void OnConfirmBack(class FName ClosingActionName);
	void OnConfirmApply(class FName ClosingActionName);
	void BP_OnApplyPreviewDone(bool bIsSuccess, ESBZMetaRequestResult Result);
	void BndEvt__WBP_UI_Cosmetic_StickerNavBar_K2Node_ComponentBoundEvent_3_OnIndexChanged__DelegateSignature(int32 NewIndex);
	void BndEvt__WBP_UI_Cosmetic_PatternNavBar_K2Node_ComponentBoundEvent_0_OnIndexChanged__DelegateSignature(int32 NewIndex);
	void BndEvt__WBP_UI_Cosmetic_WeaponNavBar_K2Node_ComponentBoundEvent_2_OnIndexChanged__DelegateSignature(int32 NewIndex);
	void BndEvt__WBP_UI_Cosmetic_MaskNavBar_K2Node_ComponentBoundEvent_1_OnIndexChanged__DelegateSignature(int32 NewIndex);
	void OnInitialized();
	void Event_On_Control_Reference_Action(class FName ActionName);
	void OnLostStackFocused();
	void OnGainedStackFocused(const class FName& PreviousValue);
	void OnFocusGained();
	void ClearCache();
	void FetchCurrent();
	void FetchCurrentMask();
	void FetchCurrentEquippable();
	void AddConfig(const class USBZCosmeticsPartSlot*& InSlotData, const class USBZModularPartConfig*& InConfig, bool IsPreviewConfig, class USBZModularPartConfig** OutConfig);
	void UpdateMaskItems();
	void UpdateEquippableItems();
	void PrePopulateItems();
	void PopulateItems();
	void PostPopulateItems();
	void AddFilteredItem(class USBZInventoryBaseData* Asset, int32 AssetCount, bool IsStore, struct FSBZStoreBaseItem& StoreData);
	void AddItem(class USBZInventoryBaseData* Asset, int32 AssetCount, bool IsStore, struct FSBZStoreBaseItem& StoreData);
	void OnItemTriggered(class USBZMenuButton* Button);
	void OnItemFocusChanged(class USBZMenuButton* Button, bool bIsEnabled_0);
	void UnequipItem();
	void EquipItem();
	void GetEquippableConfig(const class USBZCosmeticsPartSlot* InSlotData, class USBZEquippablePartConfig** AsSBZEquippable_Part_Config);
	void SetEquippableSlot(const class USBZModularPartDataAsset* PartData);
	void OnPreviewChanged();
	bool IsSameData(class USBZInventoryBaseData* Data1, class USBZInventoryBaseData* Data2);
	void SortChangeList(class UObject* ObjectA, class UObject* ObjectB, bool* Result);
	void GetFilteredEquippableDataMap(TMap<class USBZCosmeticsPartSlot*, class USBZModularPartDataAsset*>* OutFilteredDataMap);
	void UpdateSubNavBarCounts();
	void OnLoadingDone(bool IsReset, bool InIsEnabled);
	void CleanUnusedSlots();
	void RemoveUnusedSlots(const TArray<class USBZCosmeticsPartSlot*>& SlotArray, int32 Count);
	class UWidget* OnNavigation(EUINavigation Navigation_0, class UWrapBox* WrapBox);
	class UWidget* OnItemBoxNavigation(EUINavigation Navigation_0);
	class UWidget* OnStoreItemBoxNavigation(EUINavigation Navigation_0);
	void CreateSummedCost(class UWBP_UI_Cosmetic_SummedCost_C** SummedCost);
	void TrySetFocusToLastButton();
	void UpdateControlReference();
	void SetEnabledState(bool InIsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_UI_Cosmetic_C">();
	}
	static class UWBP_UI_Cosmetic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_UI_Cosmetic_C>();
	}
};
static_assert(alignof(UWBP_UI_Cosmetic_C) == 0x000008, "Wrong alignment on UWBP_UI_Cosmetic_C");
static_assert(sizeof(UWBP_UI_Cosmetic_C) == 0x000968, "Wrong size on UWBP_UI_Cosmetic_C");
static_assert(offsetof(UWBP_UI_Cosmetic_C, UberGraphFrame) == 0x000388, "Member 'UWBP_UI_Cosmetic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, change_Tab) == 0x000390, "Member 'UWBP_UI_Cosmetic_C::change_Tab' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, Intro) == 0x000398, "Member 'UWBP_UI_Cosmetic_C::Intro' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, NewAnimation) == 0x0003A0, "Member 'UWBP_UI_Cosmetic_C::NewAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, HideTooltip) == 0x0003A8, "Member 'UWBP_UI_Cosmetic_C::HideTooltip' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, Loading) == 0x0003B0, "Member 'UWBP_UI_Cosmetic_C::Loading' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ChangeListBox) == 0x0003B8, "Member 'UWBP_UI_Cosmetic_C::ChangeListBox' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ChangeOverlay) == 0x0003C0, "Member 'UWBP_UI_Cosmetic_C::ChangeOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, EquippableNavBar) == 0x0003C8, "Member 'UWBP_UI_Cosmetic_C::EquippableNavBar' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, Image) == 0x0003D0, "Member 'UWBP_UI_Cosmetic_C::Image' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, Image_1) == 0x0003D8, "Member 'UWBP_UI_Cosmetic_C::Image_1' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, Image_85) == 0x0003E0, "Member 'UWBP_UI_Cosmetic_C::Image_85' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, Image_149) == 0x0003E8, "Member 'UWBP_UI_Cosmetic_C::Image_149' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ItemBox) == 0x0003F0, "Member 'UWBP_UI_Cosmetic_C::ItemBox' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ItemScrollBox) == 0x0003F8, "Member 'UWBP_UI_Cosmetic_C::ItemScrollBox' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, LoadingText) == 0x000400, "Member 'UWBP_UI_Cosmetic_C::LoadingText' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MainNavBarSwitcher) == 0x000408, "Member 'UWBP_UI_Cosmetic_C::MainNavBarSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MaskNavBar) == 0x000410, "Member 'UWBP_UI_Cosmetic_C::MaskNavBar' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, PatternNavBar) == 0x000418, "Member 'UWBP_UI_Cosmetic_C::PatternNavBar' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ScreenTitle) == 0x000420, "Member 'UWBP_UI_Cosmetic_C::ScreenTitle' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, StickerNavBar) == 0x000428, "Member 'UWBP_UI_Cosmetic_C::StickerNavBar' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, StoreItemBox) == 0x000430, "Member 'UWBP_UI_Cosmetic_C::StoreItemBox' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, SubNavBarSwitcher) == 0x000438, "Member 'UWBP_UI_Cosmetic_C::SubNavBarSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, TooltipDescription) == 0x000440, "Member 'UWBP_UI_Cosmetic_C::TooltipDescription' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, TooltipName) == 0x000448, "Member 'UWBP_UI_Cosmetic_C::TooltipName' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, TooltipOverlay) == 0x000450, "Member 'UWBP_UI_Cosmetic_C::TooltipOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, WBP_UI_ContentBackground) == 0x000458, "Member 'UWBP_UI_Cosmetic_C::WBP_UI_ContentBackground' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, WeaponHeader_T) == 0x000460, "Member 'UWBP_UI_Cosmetic_C::WeaponHeader_T' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, DefaultButtonControlsReference) == 0x000468, "Member 'UWBP_UI_Cosmetic_C::DefaultButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, DefaultSelectButtonControlsReference) == 0x000490, "Member 'UWBP_UI_Cosmetic_C::DefaultSelectButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ApplyButtonControlsReference) == 0x0004B8, "Member 'UWBP_UI_Cosmetic_C::ApplyButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ApplysSelectButtonControlsReference) == 0x0004E0, "Member 'UWBP_UI_Cosmetic_C::ApplysSelectButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ControllerDefaultButtonControlsReference) == 0x000508, "Member 'UWBP_UI_Cosmetic_C::ControllerDefaultButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ControllerDefaultSelectButtonControlsReference) == 0x000530, "Member 'UWBP_UI_Cosmetic_C::ControllerDefaultSelectButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ControllerApplysSelectButtonControlsReference) == 0x000558, "Member 'UWBP_UI_Cosmetic_C::ControllerApplysSelectButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ControllerApplyButtonControlsReference) == 0x000580, "Member 'UWBP_UI_Cosmetic_C::ControllerApplyButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, ConfirmButtonControlsReference) == 0x0005A8, "Member 'UWBP_UI_Cosmetic_C::ConfirmButtonControlsReference' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, SlotData) == 0x0005D0, "Member 'UWBP_UI_Cosmetic_C::SlotData' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, EquippedItem) == 0x0005D8, "Member 'UWBP_UI_Cosmetic_C::EquippedItem' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, CurrentDataMap) == 0x0005E0, "Member 'UWBP_UI_Cosmetic_C::CurrentDataMap' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, PreviewDataMap) == 0x000630, "Member 'UWBP_UI_Cosmetic_C::PreviewDataMap' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, PreviewPartConfigMap) == 0x000680, "Member 'UWBP_UI_Cosmetic_C::PreviewPartConfigMap' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, BuyDataMap) == 0x0006D0, "Member 'UWBP_UI_Cosmetic_C::BuyDataMap' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, BuyStoreDataMap) == 0x000720, "Member 'UWBP_UI_Cosmetic_C::BuyStoreDataMap' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, CurrentData) == 0x000770, "Member 'UWBP_UI_Cosmetic_C::CurrentData' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, PreviewData) == 0x000778, "Member 'UWBP_UI_Cosmetic_C::PreviewData' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, PreviewEquippable) == 0x000780, "Member 'UWBP_UI_Cosmetic_C::PreviewEquippable' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MaskPatternColorSlotDataArray) == 0x000788, "Member 'UWBP_UI_Cosmetic_C::MaskPatternColorSlotDataArray' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, EquippablePatternColorSlotDataArray) == 0x000798, "Member 'UWBP_UI_Cosmetic_C::EquippablePatternColorSlotDataArray' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, CurrentEquippableConfig) == 0x0007A8, "Member 'UWBP_UI_Cosmetic_C::CurrentEquippableConfig' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MaskPatternSlot) == 0x000818, "Member 'UWBP_UI_Cosmetic_C::MaskPatternSlot' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, EquippablePatternSlot) == 0x000820, "Member 'UWBP_UI_Cosmetic_C::EquippablePatternSlot' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, IsChanged) == 0x000828, "Member 'UWBP_UI_Cosmetic_C::IsChanged' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, IsPopup) == 0x000829, "Member 'UWBP_UI_Cosmetic_C::IsPopup' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, NoStoreData) == 0x000830, "Member 'UWBP_UI_Cosmetic_C::NoStoreData' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, EquippableStickerSlotDataArray) == 0x000908, "Member 'UWBP_UI_Cosmetic_C::EquippableStickerSlotDataArray' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, IsEnoughResources) == 0x000918, "Member 'UWBP_UI_Cosmetic_C::IsEnoughResources' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, IsEnoughLevel) == 0x000919, "Member 'UWBP_UI_Cosmetic_C::IsEnoughLevel' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MaxPatternCount) == 0x00091C, "Member 'UWBP_UI_Cosmetic_C::MaxPatternCount' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MaxStickerCount) == 0x000920, "Member 'UWBP_UI_Cosmetic_C::MaxStickerCount' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, CashCost) == 0x000928, "Member 'UWBP_UI_Cosmetic_C::CashCost' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, GoldCost) == 0x000930, "Member 'UWBP_UI_Cosmetic_C::GoldCost' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, CreditCost) == 0x000938, "Member 'UWBP_UI_Cosmetic_C::CreditCost' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, MinLevel) == 0x000940, "Member 'UWBP_UI_Cosmetic_C::MinLevel' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, RequirementText) == 0x000948, "Member 'UWBP_UI_Cosmetic_C::RequirementText' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Cosmetic_C, FocusedButton) == 0x000960, "Member 'UWBP_UI_Cosmetic_C::FocusedButton' has a wrong offset!");

}

