#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KeyPad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_KeyPad.BP_KeyPad_C.ExecuteUbergraph_BP_KeyPad
// 0x0520 (0x0520 - 0x0000)
struct BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable;                              // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Temp_struct_Variable_1;                            // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class USBZBaseInteractableComponent* InteractableComponent, bool bInNewState)> K2Node_CreateDelegate_OutputDelegate; // 0x0060(0x0014)(ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x0074(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0088(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1; // 0x0098(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_3;                            // 0x00B0(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2; // 0x00C4(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_4;                            // 0x00F0(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0104(0x0014)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_HackableComputer_C*                 CallFunc_Array_Get_Item;                           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZBaseInteractableComponent*          K2Node_CustomEvent_Interactable;                   // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                K2Node_CustomEvent_Interactor;                     // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsLocallyControlledInteractor; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloatDelegateTimer*               CallFunc_CreateCurveFloatDelegateTimer_ReturnValue; // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USBZBaseInteractableComponent*>  CallFunc_Map_Keys_Keys;                            // 0x0158(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USBZBaseInteractableComponent*          CallFunc_Array_Get_Item_1;                         // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZInteractableComponent*              K2Node_DynamicCast_AsSBZInteractable_Component;    // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_183[0x5];                                      // 0x0183(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloatDelegateTimer*               Temp_object_Variable;                              // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_CustomEvent_MeshComp;                       // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x01B4(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCurveFloatDelegateTimer*         K2Node_CustomEvent_CurveFloatTimer;                // 0x0248(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveElapsedTime;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveTimeSinceLast;             // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveValue;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveTime;                      // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USBZBaseInteractableComponent*>  CallFunc_Map_Keys_Keys_1;                          // 0x0260(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USBZBaseInteractableComponent*          CallFunc_Array_Get_Item_2;                         // 0x0270(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27F[0x1];                                      // 0x027F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Map_Find_Value;                           // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0290(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_KeypadUVLightInteraction_C*        K2Node_DynamicCast_AsWBP_Keypad_UVLight_Interaction; // 0x0298(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class UCurveFloatDelegateTimer* CurveFloatTimer, float CurveElapsedTime, float CurveTimeSinceLast, float CurveValue, float CurveTime)> K2Node_CreateDelegate_OutputDelegate_2; // 0x02A4(0x0014)(ZeroConstructor, NoDestructor)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x02C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x02D8(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0368(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0378(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASBZPlayerCharacter*                    K2Node_DynamicCast_AsSBZPlayer_Character;          // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0398(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_FilterArray_FilteredArray;                // 0x03B0(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item_3;                         // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default_1;                           // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x03F0(0x0030)(IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 K2Node_Select_Default_2;                           // 0x0420(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors_1;            // 0x0430(0x0010)(ReferenceParm)
	class ABP_UVLightPlayer_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_FilterArray_FilteredArray_1;              // 0x0448(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          K2Node_ComponentBoundEvent_Interactable_1;         // 0x0468(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                K2Node_ComponentBoundEvent_Interactor_1;           // 0x0470(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor_1; // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          K2Node_ComponentBoundEvent_Interactable;           // 0x0480(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                K2Node_ComponentBoundEvent_Interactor;             // 0x0488(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor; // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_492[0x2];                                      // 0x0492(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x049C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCurveFloatDelegateTimer*         K2Node_CustomEvent_CurveFloatTimer_1;              // 0x04A0(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveElapsedTime_1;             // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveTimeSinceLast_1;           // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveValue_1;                   // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CurveTime_1;                    // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_2;                  // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class USBZBaseInteractableComponent*    K2Node_CustomEvent_InteractableComponent;          // 0x04C0(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bInNewState;                    // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USBZBaseInteractableComponent*    K2Node_ComponentBoundEvent_InteractableComponent_1; // 0x04D0(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bInNewState_1;          // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Map_Find_Value_1;                         // 0x04E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USBZBaseInteractableComponent*    K2Node_ComponentBoundEvent_InteractableComponent;  // 0x04F0(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bInNewState;            // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F9[0x3];                                      // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class UCurveFloatDelegateTimer* CurveFloatTimer, float CurveElapsedTime, float CurveTimeSinceLast, float CurveValue, float CurveTime)> K2Node_CreateDelegate_OutputDelegate_3; // 0x04FC(0x0014)(ZeroConstructor, NoDestructor)
	class ABP_HackableComputer_C*                 K2Node_CustomEvent_NewParam;                       // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad) == 0x000010, "Wrong alignment on BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad");
static_assert(sizeof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad) == 0x000520, "Wrong size on BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, EntryPoint) == 0x000000, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_name_Variable) == 0x000008, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_bool_Variable) == 0x000014, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_struct_Variable) == 0x000018, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_struct_Variable_1) == 0x000024, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Loop_Counter_Variable_1) == 0x00003C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_name_Variable_1) == 0x000044, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Multiply_IntInt_ReturnValue) == 0x000050, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_bool_Variable_1) == 0x000054, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Add_IntInt_ReturnValue_2) == 0x000058, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_bool_Variable_2) == 0x00005C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CreateDelegate_OutputDelegate) == 0x000060, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_delegate_Variable) == 0x000074, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_struct_Variable_2) == 0x000088, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_delegate_Variable_1) == 0x000098, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_struct_Variable_3) == 0x0000B0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_delegate_Variable_2) == 0x0000C4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Array_Index_Variable_1) == 0x0000D8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Loop_Counter_Variable_2) == 0x0000DC, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000E0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000E4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Array_Index_Variable_2) == 0x0000E8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_struct_Variable_4) == 0x0000F0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_HasAuthority_ReturnValue) == 0x000100, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CreateDelegate_OutputDelegate_1) == 0x000104, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_bool_True_if_break_was_hit_Variable) == 0x000118, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Not_PreBool_ReturnValue) == 0x000119, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Loop_Counter_Variable_3) == 0x00011C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Less_IntInt_ReturnValue_1) == 0x000120, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Add_IntInt_ReturnValue_5) == 0x000124, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Array_Index_Variable_3) == 0x000128, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Get_Item) == 0x000130, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_Interactable) == 0x000138, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_Interactable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_Interactor) == 0x000140, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_Interactor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_bIsLocallyControlledInteractor) == 0x000148, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_bIsLocallyControlledInteractor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_CreateCurveFloatDelegateTimer_ReturnValue) == 0x000150, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_CreateCurveFloatDelegateTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Map_Keys_Keys) == 0x000158, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Get_Item_1) == 0x000168, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Length_ReturnValue_1) == 0x000170, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_DynamicCast_AsSBZInteractable_Component) == 0x000178, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_DynamicCast_AsSBZInteractable_Component' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_DynamicCast_bSuccess) == 0x000180, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Less_IntInt_ReturnValue_2) == 0x000181, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_IsValid_ReturnValue) == 0x000182, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_object_Variable) == 0x000188, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_MeshComp) == 0x000190, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_MeshComp' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_float_Variable) == 0x000198, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_float_Variable_1) == 0x00019C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_float_Variable_2) == 0x0001A0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_float_Variable_3) == 0x0001A4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_MakeVector_ReturnValue) == 0x0001A8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0001B4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveFloatTimer) == 0x000248, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveFloatTimer' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveElapsedTime) == 0x000250, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveTimeSinceLast) == 0x000254, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveTimeSinceLast' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveValue) == 0x000258, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveTime) == 0x00025C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveTime' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Map_Keys_Keys_1) == 0x000260, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Get_Item_2) == 0x000270, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Length_ReturnValue_2) == 0x000278, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00027C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Less_IntInt_ReturnValue_3) == 0x00027D, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_BooleanAND_ReturnValue) == 0x00027E, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Map_Find_Value) == 0x000280, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Map_Find_ReturnValue) == 0x000288, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000290, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_DynamicCast_AsWBP_Keypad_UVLight_Interaction) == 0x000298, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_DynamicCast_AsWBP_Keypad_UVLight_Interaction' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_DynamicCast_bSuccess_1) == 0x0002A0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CreateDelegate_OutputDelegate_2) == 0x0002A4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0002B8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0002C0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0002C8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0002D0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_bFromSweep) == 0x0002D4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_SweepResult) == 0x0002D8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000368, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OtherActor) == 0x000370, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OtherComp) == 0x000378, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000380, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_DynamicCast_AsSBZPlayer_Character) == 0x000388, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_DynamicCast_AsSBZPlayer_Character' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_DynamicCast_bSuccess_2) == 0x000390, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_GetAttachedActors_OutActors) == 0x000398, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_IsLocallyControlled_ReturnValue) == 0x0003A8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_FilterArray_FilteredArray) == 0x0003B0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_FilterArray_FilteredArray' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Get_Item_3) == 0x0003C0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Length_ReturnValue_3) == 0x0003C8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Less_IntInt_ReturnValue_4) == 0x0003CC, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_Select_Default) == 0x0003D0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_Select_Default_1) == 0x0003DC, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_MakeTransform_ReturnValue) == 0x0003F0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_Select_Default_2) == 0x000420, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000428, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_GetAttachedActors_OutActors_1) == 0x000430, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_GetAttachedActors_OutActors_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_FinishSpawningActor_ReturnValue) == 0x000440, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_FilterArray_FilteredArray_1) == 0x000448, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_FilterArray_FilteredArray_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Length_ReturnValue_4) == 0x000458, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, Temp_int_Variable) == 0x00045C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000460, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000461, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_Interactable_1) == 0x000468, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_Interactable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_Interactor_1) == 0x000470, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_Interactor_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor_1) == 0x000478, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_Interactable) == 0x000480, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_Interactable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_Interactor) == 0x000488, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_Interactor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor) == 0x000490, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_bIsLocallyControlledInteractor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000491, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Array_Get_Item_4) == 0x000494, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_PostEvent_ReturnValue) == 0x000498, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x00049C, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveFloatTimer_1) == 0x0004A0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveFloatTimer_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveElapsedTime_1) == 0x0004A8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveElapsedTime_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveTimeSinceLast_1) == 0x0004AC, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveTimeSinceLast_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveValue_1) == 0x0004B0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_CurveTime_1) == 0x0004B4, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_CurveTime_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_PostEvent_ReturnValue_1) == 0x0004B8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_PostEvent_ReturnValue_2) == 0x0004BC, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_PostEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_InteractableComponent) == 0x0004C0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_InteractableComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_bInNewState) == 0x0004C8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_bInNewState' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_InteractableComponent_1) == 0x0004D0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_InteractableComponent_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_bInNewState_1) == 0x0004D8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_bInNewState_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Map_Find_Value_1) == 0x0004E0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_Map_Find_ReturnValue_1) == 0x0004E8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_InteractableComponent) == 0x0004F0, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_InteractableComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_ComponentBoundEvent_bInNewState) == 0x0004F8, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_ComponentBoundEvent_bInNewState' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CreateDelegate_OutputDelegate_3) == 0x0004FC, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, K2Node_CustomEvent_NewParam) == 0x000510, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::K2Node_CustomEvent_NewParam' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad, CallFunc_IsValid_ReturnValue_1) == 0x000518, "Member 'BP_KeyPad_C_ExecuteUbergraph_BP_KeyPad::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.UpdateNotes
// 0x0008 (0x0008 - 0x0000)
struct BP_KeyPad_C_UpdateNotes final
{
public:
	class ABP_HackableComputer_C*                 NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_UpdateNotes) == 0x000008, "Wrong alignment on BP_KeyPad_C_UpdateNotes");
static_assert(sizeof(BP_KeyPad_C_UpdateNotes) == 0x000008, "Wrong size on BP_KeyPad_C_UpdateNotes");
static_assert(offsetof(BP_KeyPad_C_UpdateNotes, NewParam) == 0x000000, "Member 'BP_KeyPad_C_UpdateNotes::NewParam' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature final
{
public:
	const class USBZBaseInteractableComponent*    InteractableComponent;                             // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInNewState;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature");
static_assert(sizeof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature) == 0x000010, "Wrong size on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature, InteractableComponent) == 0x000000, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature::InteractableComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature, bInNewState) == 0x000008, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_7_SBZOnInteractableStateChangedDelegate__DelegateSignature::bInNewState' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature final
{
public:
	const class USBZBaseInteractableComponent*    InteractableComponent;                             // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInNewState;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature");
static_assert(sizeof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature) == 0x000010, "Wrong size on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature, InteractableComponent) == 0x000000, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature::InteractableComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature, bInNewState) == 0x000008, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_6_SBZOnInteractableStateChangedDelegate__DelegateSignature::bInNewState' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.FocusChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_KeyPad_C_FocusChanged final
{
public:
	const class USBZBaseInteractableComponent*    InteractableComponent;                             // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInNewState;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_FocusChanged) == 0x000008, "Wrong alignment on BP_KeyPad_C_FocusChanged");
static_assert(sizeof(BP_KeyPad_C_FocusChanged) == 0x000010, "Wrong size on BP_KeyPad_C_FocusChanged");
static_assert(offsetof(BP_KeyPad_C_FocusChanged, InteractableComponent) == 0x000000, "Member 'BP_KeyPad_C_FocusChanged::InteractableComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_FocusChanged, bInNewState) == 0x000008, "Member 'BP_KeyPad_C_FocusChanged::bInNewState' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature final
{
public:
	class USBZBaseInteractableComponent*          Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocallyControlledInteractor;                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature) == 0x000008, "Wrong alignment on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature");
static_assert(sizeof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature) == 0x000018, "Wrong size on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature, Interactable) == 0x000000, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature::Interactable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature, Interactor) == 0x000008, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature::Interactor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature, bIsLocallyControlledInteractor) == 0x000010, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_E_K2Node_ComponentBoundEvent_3_SBZOnInteraction__DelegateSignature::bIsLocallyControlledInteractor' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature final
{
public:
	class USBZBaseInteractableComponent*          Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocallyControlledInteractor;                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature) == 0x000008, "Wrong alignment on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature");
static_assert(sizeof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature) == 0x000018, "Wrong size on BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature, Interactable) == 0x000000, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature::Interactable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature, Interactor) == 0x000008, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature::Interactor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature, bIsLocallyControlledInteractor) == 0x000010, "Member 'BP_KeyPad_C_BndEvt__SBZInteractable_Keypad_C_K2Node_ComponentBoundEvent_2_SBZOnInteraction__DelegateSignature::bIsLocallyControlledInteractor' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_KeyPad_C_BndEvt__LanternCapsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.Swish
// 0x0008 (0x0008 - 0x0000)
struct BP_KeyPad_C_Swish final
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_Swish) == 0x000008, "Wrong alignment on BP_KeyPad_C_Swish");
static_assert(sizeof(BP_KeyPad_C_Swish) == 0x000008, "Wrong size on BP_KeyPad_C_Swish");
static_assert(offsetof(BP_KeyPad_C_Swish, MeshComp) == 0x000000, "Member 'BP_KeyPad_C_Swish::MeshComp' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.KeypadPressed
// 0x0018 (0x0018 - 0x0000)
struct BP_KeyPad_C_KeypadPressed final
{
public:
	class USBZBaseInteractableComponent*          Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractorComponent*                Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocallyControlledInteractor;                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_KeypadPressed) == 0x000008, "Wrong alignment on BP_KeyPad_C_KeypadPressed");
static_assert(sizeof(BP_KeyPad_C_KeypadPressed) == 0x000018, "Wrong size on BP_KeyPad_C_KeypadPressed");
static_assert(offsetof(BP_KeyPad_C_KeypadPressed, Interactable) == 0x000000, "Member 'BP_KeyPad_C_KeypadPressed::Interactable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_KeypadPressed, Interactor) == 0x000008, "Member 'BP_KeyPad_C_KeypadPressed::Interactor' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_KeypadPressed, bIsLocallyControlledInteractor) == 0x000010, "Member 'BP_KeyPad_C_KeypadPressed::bIsLocallyControlledInteractor' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94
// 0x0018 (0x0018 - 0x0000)
struct BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94 final
{
public:
	const class UCurveFloatDelegateTimer*         CurveFloatTimer;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveElapsedTime;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveTimeSinceLast;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveValue;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveTime;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94) == 0x000008, "Wrong alignment on BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94");
static_assert(sizeof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94) == 0x000018, "Wrong size on BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94");
static_assert(offsetof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94, CurveFloatTimer) == 0x000000, "Member 'BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94::CurveFloatTimer' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94, CurveElapsedTime) == 0x000008, "Member 'BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94::CurveElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94, CurveTimeSinceLast) == 0x00000C, "Member 'BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94::CurveTimeSinceLast' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94, CurveValue) == 0x000010, "Member 'BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94::CurveValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94, CurveTime) == 0x000014, "Member 'BP_KeyPad_C_CurveEvalTick_DC2B4F6345224029FFE2ADA8E9E15E94::CurveTime' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94
// 0x0018 (0x0018 - 0x0000)
struct BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94 final
{
public:
	const class UCurveFloatDelegateTimer*         CurveFloatTimer;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveElapsedTime;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveTimeSinceLast;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveValue;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveTime;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94) == 0x000008, "Wrong alignment on BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94");
static_assert(sizeof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94) == 0x000018, "Wrong size on BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94");
static_assert(offsetof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94, CurveFloatTimer) == 0x000000, "Member 'BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94::CurveFloatTimer' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94, CurveElapsedTime) == 0x000008, "Member 'BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94::CurveElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94, CurveTimeSinceLast) == 0x00000C, "Member 'BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94::CurveTimeSinceLast' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94, CurveValue) == 0x000010, "Member 'BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94::CurveValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94, CurveTime) == 0x000014, "Member 'BP_KeyPad_C_CurveFinished_DC2B4F6345224029FFE2ADA8E9E15E94::CurveTime' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.UserConstructionScript
// 0x0050 (0x0050 - 0x0000)
struct BP_KeyPad_C_UserConstructionScript final
{
public:
	TMap<class USBZBaseInteractableComponent*, class UStaticMeshComponent*> K2Node_MakeMap_Map;      // 0x0000(0x0050)(ContainsInstancedReference)
};
static_assert(alignof(BP_KeyPad_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_KeyPad_C_UserConstructionScript");
static_assert(sizeof(BP_KeyPad_C_UserConstructionScript) == 0x000050, "Wrong size on BP_KeyPad_C_UserConstructionScript");
static_assert(offsetof(BP_KeyPad_C_UserConstructionScript, K2Node_MakeMap_Map) == 0x000000, "Member 'BP_KeyPad_C_UserConstructionScript::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.SetInteractionEnabled
// 0x0048 (0x0048 - 0x0000)
struct BP_KeyPad_C_SetInteractionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USBZBaseInteractableComponent*>  CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZBaseInteractableComponent*          CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZInteractableComponent*              K2Node_DynamicCast_AsSBZInteractable_Component;    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KeyPad_C_SetInteractionEnabled) == 0x000008, "Wrong alignment on BP_KeyPad_C_SetInteractionEnabled");
static_assert(sizeof(BP_KeyPad_C_SetInteractionEnabled) == 0x000048, "Wrong size on BP_KeyPad_C_SetInteractionEnabled");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, bEnabled) == 0x000000, "Member 'BP_KeyPad_C_SetInteractionEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_KeyPad_C_SetInteractionEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_KeyPad_C_SetInteractionEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_KeyPad_C_SetInteractionEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BP_KeyPad_C_SetInteractionEnabled::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_KeyPad_C_SetInteractionEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_KeyPad_C_SetInteractionEnabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_KeyPad_C_SetInteractionEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, K2Node_DynamicCast_AsSBZInteractable_Component) == 0x000038, "Member 'BP_KeyPad_C_SetInteractionEnabled::K2Node_DynamicCast_AsSBZInteractable_Component' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractionEnabled, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_KeyPad_C_SetInteractionEnabled::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.UpdateMaterials
// 0x00D0 (0x00D0 - 0x0000)
struct BP_KeyPad_C_UpdateMaterials final
{
public:
	int32                                         AllDigitsCounter;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DigitCounter;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 Weights;                                           // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_1;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           CallFunc_Map_Values_Values;                        // 0x0088(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_GetChildComponent_ReturnValue;            // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         K2Node_DynamicCast_AsMesh_Component;               // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_3;                         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_UpdateMaterials) == 0x000008, "Wrong alignment on BP_KeyPad_C_UpdateMaterials");
static_assert(sizeof(BP_KeyPad_C_UpdateMaterials) == 0x0000D0, "Wrong size on BP_KeyPad_C_UpdateMaterials");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, AllDigitsCounter) == 0x000000, "Member 'BP_KeyPad_C_UpdateMaterials::AllDigitsCounter' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, DigitCounter) == 0x000004, "Member 'BP_KeyPad_C_UpdateMaterials::DigitCounter' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Weights) == 0x000008, "Member 'BP_KeyPad_C_UpdateMaterials::Weights' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_int_Array_Index_Variable_1) == 0x000030, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_float_Variable) == 0x000034, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Add_IntInt_ReturnValue_2) == 0x000038, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00003C, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_bool_Variable) == 0x000049, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004A, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00004C, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_float_Variable_1) == 0x000050, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Map_Length_ReturnValue) == 0x000054, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Get_Item_1) == 0x000064, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000068, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_MaxOfFloatArray_MaxValue) == 0x00006C, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_int_Variable) == 0x000070, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000074, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, K2Node_Select_Default) == 0x000078, "Member 'BP_KeyPad_C_UpdateMaterials::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00007C, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Add_IntInt_ReturnValue_3) == 0x000080, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Map_Values_Values) == 0x000088, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Divide_IntInt_ReturnValue) == 0x000098, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_GetChildComponent_ReturnValue) == 0x0000A8, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_GetChildComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Length_ReturnValue_2) == 0x0000B0, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, K2Node_DynamicCast_AsMesh_Component) == 0x0000B8, "Member 'BP_KeyPad_C_UpdateMaterials::K2Node_DynamicCast_AsMesh_Component' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_KeyPad_C_UpdateMaterials::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C1, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, Temp_bool_Variable_1) == 0x0000C2, "Member 'BP_KeyPad_C_UpdateMaterials::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Array_Get_Item_3) == 0x0000C4, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_KeyPad_C_UpdateMaterials::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateMaterials, K2Node_Select_Default_1) == 0x0000CC, "Member 'BP_KeyPad_C_UpdateMaterials::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.RandomizeCodes
// 0x0014 (0x0014 - 0x0000)
struct BP_KeyPad_C_RandomizeCodes final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_RandomizeCodes) == 0x000004, "Wrong alignment on BP_KeyPad_C_RandomizeCodes");
static_assert(sizeof(BP_KeyPad_C_RandomizeCodes) == 0x000014, "Wrong size on BP_KeyPad_C_RandomizeCodes");
static_assert(offsetof(BP_KeyPad_C_RandomizeCodes, Temp_int_Variable) == 0x000000, "Member 'BP_KeyPad_C_RandomizeCodes::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_RandomizeCodes, CallFunc_RandomInteger_ReturnValue) == 0x000004, "Member 'BP_KeyPad_C_RandomizeCodes::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_RandomizeCodes, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_KeyPad_C_RandomizeCodes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_RandomizeCodes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_KeyPad_C_RandomizeCodes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_RandomizeCodes, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_KeyPad_C_RandomizeCodes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.NextDigit
// 0x0020 (0x0020 - 0x0000)
struct BP_KeyPad_C_NextDigit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_NextDigit) == 0x000004, "Wrong alignment on BP_KeyPad_C_NextDigit");
static_assert(sizeof(BP_KeyPad_C_NextDigit) == 0x000020, "Wrong size on BP_KeyPad_C_NextDigit");
static_assert(offsetof(BP_KeyPad_C_NextDigit, ReturnValue) == 0x000000, "Member 'BP_KeyPad_C_NextDigit::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_KeyPad_C_NextDigit::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_Array_Get_Item) == 0x000008, "Member 'BP_KeyPad_C_NextDigit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'BP_KeyPad_C_NextDigit::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_KeyPad_C_NextDigit::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_FTrunc_ReturnValue) == 0x000014, "Member 'BP_KeyPad_C_NextDigit::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_Divide_IntInt_ReturnValue) == 0x000018, "Member 'BP_KeyPad_C_NextDigit::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_NextDigit, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'BP_KeyPad_C_NextDigit::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.UpdateCodeNotes
// 0x0080 (0x0080 - 0x0000)
struct BP_KeyPad_C_UpdateCodeNotes final
{
public:
	int32                                         TrueCodeIndex;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomCode;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PossibleCode_C*                     CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_2;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PossibleCode_C*                     CallFunc_Array_Get_Item_3;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_3;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Select_Default;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_UpdateCodeNotes) == 0x000008, "Wrong alignment on BP_KeyPad_C_UpdateCodeNotes");
static_assert(sizeof(BP_KeyPad_C_UpdateCodeNotes) == 0x000080, "Wrong size on BP_KeyPad_C_UpdateCodeNotes");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, TrueCodeIndex) == 0x000000, "Member 'BP_KeyPad_C_UpdateCodeNotes::TrueCodeIndex' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, RandomCode) == 0x000004, "Member 'BP_KeyPad_C_UpdateCodeNotes::RandomCode' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Length_ReturnValue_1) == 0x00000C, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_RandomInteger_ReturnValue) == 0x000010, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Get_Item_1) == 0x000024, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_RandomInteger_ReturnValue_1) == 0x00002C, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_KeyPad_C_UpdateCodeNotes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Get_Item_2) == 0x000038, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_RandomInteger_ReturnValue_2) == 0x000040, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_RandomInteger_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000044, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_KeyPad_C_UpdateCodeNotes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Length_ReturnValue_2) == 0x00004C, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Get_Item_3) == 0x000050, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000058, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Array_Length_ReturnValue_3) == 0x00005C, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_RandomInteger_ReturnValue_3) == 0x000060, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_RandomInteger_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'BP_KeyPad_C_UpdateCodeNotes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Less_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, Temp_int_Array_Index_Variable_1) == 0x000070, "Member 'BP_KeyPad_C_UpdateCodeNotes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_HasAuthority_ReturnValue) == 0x000074, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000075, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, Temp_bool_Variable) == 0x000076, "Member 'BP_KeyPad_C_UpdateCodeNotes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, CallFunc_HasAuthority_ReturnValue_1) == 0x000077, "Member 'BP_KeyPad_C_UpdateCodeNotes::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_UpdateCodeNotes, K2Node_Select_Default) == 0x000078, "Member 'BP_KeyPad_C_UpdateCodeNotes::K2Node_Select_Default' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.SetInteractableFeedback
// 0x0068 (0x0068 - 0x0000)
struct BP_KeyPad_C_SetInteractableFeedback final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USBZBaseInteractableComponent*>  CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           CallFunc_Map_Values_Values;                        // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USBZBaseInteractableComponent*          CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              K2Node_DynamicCast_AsSBZInteractable_Component;    // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_SetInteractableFeedback) == 0x000008, "Wrong alignment on BP_KeyPad_C_SetInteractableFeedback");
static_assert(sizeof(BP_KeyPad_C_SetInteractableFeedback) == 0x000068, "Wrong size on BP_KeyPad_C_SetInteractableFeedback");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_KeyPad_C_SetInteractableFeedback::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_KeyPad_C_SetInteractableFeedback::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_KeyPad_C_SetInteractableFeedback::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Map_Values_Values) == 0x000020, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, K2Node_DynamicCast_AsSBZInteractable_Component) == 0x000040, "Member 'BP_KeyPad_C_SetInteractableFeedback::K2Node_DynamicCast_AsSBZInteractable_Component' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_KeyPad_C_SetInteractableFeedback::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'BP_KeyPad_C_SetInteractableFeedback::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetInteractableFeedback, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'BP_KeyPad_C_SetInteractableFeedback::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_KeyPad.BP_KeyPad_C.SetComponentFocusedState
// 0x0018 (0x0018 - 0x0000)
struct BP_KeyPad_C_SetComponentFocusedState final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Focused;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KeyPad_C_SetComponentFocusedState) == 0x000008, "Wrong alignment on BP_KeyPad_C_SetComponentFocusedState");
static_assert(sizeof(BP_KeyPad_C_SetComponentFocusedState) == 0x000018, "Wrong size on BP_KeyPad_C_SetComponentFocusedState");
static_assert(offsetof(BP_KeyPad_C_SetComponentFocusedState, Mesh) == 0x000000, "Member 'BP_KeyPad_C_SetComponentFocusedState::Mesh' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetComponentFocusedState, Focused) == 0x000008, "Member 'BP_KeyPad_C_SetComponentFocusedState::Focused' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetComponentFocusedState, Temp_bool_Variable) == 0x000009, "Member 'BP_KeyPad_C_SetComponentFocusedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetComponentFocusedState, Temp_int_Variable) == 0x00000C, "Member 'BP_KeyPad_C_SetComponentFocusedState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetComponentFocusedState, Temp_int_Variable_1) == 0x000010, "Member 'BP_KeyPad_C_SetComponentFocusedState::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_KeyPad_C_SetComponentFocusedState, K2Node_Select_Default) == 0x000014, "Member 'BP_KeyPad_C_SetComponentFocusedState::K2Node_Select_Default' has a wrong offset!");

}

