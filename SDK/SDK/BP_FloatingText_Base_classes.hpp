#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloatingText_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FloatingText_Base.BP_FloatingText_Base_C
// 0x0050 (0x02F8 - 0x02A8)
class ABP_FloatingText_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       TextWidget;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MovementSpeedController;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpdateIteration;                                   // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinWidgetScale;                                    // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxWidgetScale;                                    // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WidgetScaleIncrementPerCycle;                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WidgetScaleDecrementPerCycle;                      // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WidgetScaleFallOffPerUnit;                         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WidgetScale;                                       // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateTimerInterval;                               // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageText_Base_C*                  ScalableText;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FloatingText_Base(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RunUpdateCycle();
	void UpdateWidgetScale();
	void UpdateWidgetLocation();
	void ReachedPointOfMaxWidgetScale_(bool* Yes_);
	void CalculateDistanceBasedWidgetScaleModifier(float* WidgetScaleModifier);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FloatingText_Base_C">();
	}
	static class ABP_FloatingText_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FloatingText_Base_C>();
	}
};
static_assert(alignof(ABP_FloatingText_Base_C) == 0x000008, "Wrong alignment on ABP_FloatingText_Base_C");
static_assert(sizeof(ABP_FloatingText_Base_C) == 0x0002F8, "Wrong size on ABP_FloatingText_Base_C");
static_assert(offsetof(ABP_FloatingText_Base_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_FloatingText_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, TextWidget) == 0x0002B0, "Member 'ABP_FloatingText_Base_C::TextWidget' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, TextColor) == 0x0002B8, "Member 'ABP_FloatingText_Base_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, MovementSpeedController) == 0x0002C8, "Member 'ABP_FloatingText_Base_C::MovementSpeedController' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, UpdateIteration) == 0x0002CC, "Member 'ABP_FloatingText_Base_C::UpdateIteration' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, MinWidgetScale) == 0x0002D0, "Member 'ABP_FloatingText_Base_C::MinWidgetScale' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, MaxWidgetScale) == 0x0002D4, "Member 'ABP_FloatingText_Base_C::MaxWidgetScale' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, WidgetScaleIncrementPerCycle) == 0x0002D8, "Member 'ABP_FloatingText_Base_C::WidgetScaleIncrementPerCycle' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, WidgetScaleDecrementPerCycle) == 0x0002DC, "Member 'ABP_FloatingText_Base_C::WidgetScaleDecrementPerCycle' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, WidgetScaleFallOffPerUnit) == 0x0002E0, "Member 'ABP_FloatingText_Base_C::WidgetScaleFallOffPerUnit' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, WidgetScale) == 0x0002E4, "Member 'ABP_FloatingText_Base_C::WidgetScale' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, UpdateTimerInterval) == 0x0002E8, "Member 'ABP_FloatingText_Base_C::UpdateTimerInterval' has a wrong offset!");
static_assert(offsetof(ABP_FloatingText_Base_C, ScalableText) == 0x0002F0, "Member 'ABP_FloatingText_Base_C::ScalableText' has a wrong offset!");

}

