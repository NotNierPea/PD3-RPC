#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Results_Reward_ChallengeProgress

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_Results_Reward_ChallengeProgress.WBP_UI_Results_Reward_ChallengeProgress_C.ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress
// 0x0040 (0x0040 - 0x0000)
struct WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress) == 0x000008, "Wrong alignment on WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress");
static_assert(sizeof(WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress) == 0x000040, "Wrong size on WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress, EntryPoint) == 0x000000, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000030, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress, K2Node_Event_IsDesignTime) == 0x000038, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_ExecuteUbergraph_WBP_UI_Results_Reward_ChallengeProgress::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_UI_Results_Reward_ChallengeProgress.WBP_UI_Results_Reward_ChallengeProgress_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct");
static_assert(sizeof(WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct) == 0x000001, "Wrong size on WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UI_Results_Reward_ChallengeProgress.WBP_UI_Results_Reward_ChallengeProgress_C.SetData
// 0x01C0 (0x01C0 - 0x0000)
struct WBP_UI_Results_Reward_ChallengeProgress_C_SetData final
{
public:
	struct FSBZChallengeData                      InChallengeData;                                   // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsHackUntilAccelbyteFix;                           // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Tooltip_C*                         CallFunc_Create_ReturnValue;                       // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZChallengeManager*                   CallFunc_GetChallengeManager_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetChallengeDescriptionText_ReturnValue;  // 0x00D0(0x0018)()
	class FText                                   CallFunc_GetChallengeNameText_ReturnValue;         // 0x00E8(0x0018)()
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0118(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0158(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01A8(0x0018)()
};
static_assert(alignof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData) == 0x000008, "Wrong alignment on WBP_UI_Results_Reward_ChallengeProgress_C_SetData");
static_assert(sizeof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData) == 0x0001C0, "Wrong size on WBP_UI_Results_Reward_ChallengeProgress_C_SetData");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, InChallengeData) == 0x000000, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::InChallengeData' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, IsHackUntilAccelbyteFix) == 0x0000A8, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::IsHackUntilAccelbyteFix' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_Create_ReturnValue) == 0x0000B0, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_SelectInt_ReturnValue) == 0x0000B8, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_GetChallengeManager_ReturnValue) == 0x0000C0, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C8, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_GetChallengeDescriptionText_ReturnValue) == 0x0000D0, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_GetChallengeDescriptionText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_GetChallengeNameText_ReturnValue) == 0x0000E8, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_GetChallengeNameText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_Max_ReturnValue) == 0x000100, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_Divide_IntInt_ReturnValue) == 0x000104, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000108, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, Temp_bool_Variable) == 0x00010C, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, K2Node_Select_Default) == 0x000110, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, K2Node_MakeStruct_FormatArgumentData) == 0x000118, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, K2Node_MakeStruct_FormatArgumentData_1) == 0x000158, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, K2Node_MakeArray_Array) == 0x000198, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_SetData, CallFunc_Format_ReturnValue) == 0x0001A8, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_SetData::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_UI_Results_Reward_ChallengeProgress.WBP_UI_Results_Reward_ChallengeProgress_C.AnimationRewardProgression
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression) == 0x000008, "Wrong alignment on WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression");
static_assert(sizeof(WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression) == 0x000008, "Wrong size on WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_AnimationRewardProgression::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_UI_Results_Reward_ChallengeProgress.WBP_UI_Results_Reward_ChallengeProgress_C.PlayAppearAnim
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim) == 0x000008, "Wrong alignment on WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim");
static_assert(sizeof(WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim) == 0x000008, "Wrong size on WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim");
static_assert(offsetof(WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'WBP_UI_Results_Reward_ChallengeProgress_C_PlayAppearAnim::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

}

