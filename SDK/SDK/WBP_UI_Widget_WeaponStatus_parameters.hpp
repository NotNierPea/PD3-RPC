#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Widget_WeaponStatus

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.ExecuteUbergraph_WBP_UI_Widget_WeaponStatus
// 0x00D8 (0x00D8 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AmmoLoadedChanged;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsEquippedNewValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPD3AmmoState                                 K2Node_Event_NewState_1;                           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_AmmoAddedCount;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Play2DSound_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AmmoInventoryChanged;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPD3AmmoState                                 K2Node_Event_NewState;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0068(0x0018)()
	int32                                         Temp_int_Variable_2;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x00B0(0x0028)()
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus) == 0x000008, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus) == 0x0000D8, "Wrong size on WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, EntryPoint) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_text_Variable) == 0x000008, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_int_Variable) == 0x000020, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_byte_Variable) == 0x000024, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_byte_Variable_1) == 0x000025, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_byte_Variable_2) == 0x000026, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_int_Variable_1) == 0x000028, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_AmmoLoadedChanged) == 0x00002C, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_AmmoLoadedChanged' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_bIsEquippedNewValue) == 0x000030, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_bIsEquippedNewValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_NewState_1) == 0x000031, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_NewState_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_AmmoAddedCount) == 0x000034, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_AmmoAddedCount' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, CallFunc_Play2DSound_ReturnValue) == 0x000038, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::CallFunc_Play2DSound_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, CallFunc_PlayAnimationForward_ReturnValue) == 0x000040, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_AmmoInventoryChanged) == 0x000048, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_AmmoInventoryChanged' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_NewState) == 0x00004C, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Event_IsDesignTime) == 0x00004D, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_text_Variable_1) == 0x000050, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_text_Variable_2) == 0x000068, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, Temp_int_Variable_2) == 0x000080, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000088, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Select_Default) == 0x000090, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Select_Default_1) == 0x0000A8, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus, K2Node_Select_Default_2) == 0x0000B0, "Member 'WBP_UI_Widget_WeaponStatus_C_ExecuteUbergraph_WBP_UI_Widget_WeaponStatus::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_PreConstruct");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_PreConstruct) == 0x000001, "Wrong size on WBP_UI_Widget_WeaponStatus_C_PreConstruct");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.OnAmmoInventoryStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged final
{
public:
	EPD3AmmoState                                 NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged) == 0x000001, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged) == 0x000001, "Wrong size on WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged, NewState) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryStateChanged::NewState' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.OnAmmoInventoryChanged
// 0x0004 (0x0004 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged final
{
public:
	int32                                         AmmoInventoryChanged;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged) == 0x000004, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged) == 0x000004, "Wrong size on WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged, AmmoInventoryChanged) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_OnAmmoInventoryChanged::AmmoInventoryChanged' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.OnAmmoAdded
// 0x0004 (0x0004 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded final
{
public:
	int32                                         AmmoAddedCount;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded) == 0x000004, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded) == 0x000004, "Wrong size on WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded, AmmoAddedCount) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_OnAmmoAdded::AmmoAddedCount' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.OnAmmoLoadedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged final
{
public:
	EPD3AmmoState                                 NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged) == 0x000001, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged) == 0x000001, "Wrong size on WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged, NewState) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedStateChanged::NewState' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.OnEquippedChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged final
{
public:
	bool                                          bIsEquippedNewValue;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged) == 0x000001, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged) == 0x000001, "Wrong size on WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged, bIsEquippedNewValue) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_OnEquippedChanged::bIsEquippedNewValue' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.OnAmmoLoadedChanged
// 0x0004 (0x0004 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged final
{
public:
	int32                                         AmmoLoadedChanged;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged) == 0x000004, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged) == 0x000004, "Wrong size on WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged, AmmoLoadedChanged) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_OnAmmoLoadedChanged::AmmoLoadedChanged' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.SetEquipped
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_SetEquipped final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_SetEquipped) == 0x000004, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_SetEquipped");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_SetEquipped) == 0x000008, "Wrong size on WBP_UI_Widget_WeaponStatus_C_SetEquipped");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetEquipped, IsEquipped) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_SetEquipped::IsEquipped' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetEquipped, Temp_bool_Variable) == 0x000001, "Member 'WBP_UI_Widget_WeaponStatus_C_SetEquipped::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetEquipped, K2Node_Select_Default) == 0x000004, "Member 'WBP_UI_Widget_WeaponStatus_C_SetEquipped::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.SetAmmoState
// 0x0040 (0x0040 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_SetAmmoState final
{
public:
	EPD3AmmoState                                 Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAmmoClip;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPD3AmmoState                                 Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             K2Node_Select_Default_1;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x0018(0x0028)()
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState) == 0x000008, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_SetAmmoState");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState) == 0x000040, "Wrong size on WBP_UI_Widget_WeaponStatus_C_SetAmmoState");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, Index_0) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::Index_0' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, bIsAmmoClip) == 0x000001, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::bIsAmmoClip' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, Temp_byte_Variable) == 0x000002, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, Temp_bool_Variable) == 0x000003, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, Temp_bool_Variable_1) == 0x000004, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, K2Node_Select_Default) == 0x000008, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, K2Node_Select_Default_1) == 0x000010, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoState, K2Node_Select_Default_2) == 0x000018, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoState::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_UI_Widget_WeaponStatus.WBP_UI_Widget_WeaponStatus_C.SetAmmoText
// 0x00A8 (0x00A8 - 0x0000)
struct WBP_UI_Widget_WeaponStatus_C_SetAmmoText final
{
public:
	int32                                         AmmoValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAmmoClip;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FormatIntToText_ReturnValue;              // 0x0008(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FormatIntToText_ReturnValue_1;            // 0x0028(0x0018)()
	class FText                                   CallFunc_FormatIntToText_ReturnValue_2;            // 0x0040(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0070(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x0090(0x0018)()
};
static_assert(alignof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText) == 0x000008, "Wrong alignment on WBP_UI_Widget_WeaponStatus_C_SetAmmoText");
static_assert(sizeof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText) == 0x0000A8, "Wrong size on WBP_UI_Widget_WeaponStatus_C_SetAmmoText");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, AmmoValue) == 0x000000, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::AmmoValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, bIsAmmoClip) == 0x000004, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::bIsAmmoClip' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, CallFunc_FormatIntToText_ReturnValue) == 0x000008, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::CallFunc_FormatIntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, CallFunc_FormatIntToText_ReturnValue_1) == 0x000028, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::CallFunc_FormatIntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, CallFunc_FormatIntToText_ReturnValue_2) == 0x000040, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::CallFunc_FormatIntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000058, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, Temp_bool_Variable) == 0x000059, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, Temp_bool_Variable_1) == 0x00005A, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, K2Node_Select_Default) == 0x000060, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, K2Node_Select_Default_1) == 0x000068, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, Temp_text_Variable) == 0x000070, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, Temp_bool_Variable_2) == 0x000088, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_Widget_WeaponStatus_C_SetAmmoText, K2Node_Select_Default_2) == 0x000090, "Member 'WBP_UI_Widget_WeaponStatus_C_SetAmmoText::K2Node_Select_Default_2' has a wrong offset!");

}

