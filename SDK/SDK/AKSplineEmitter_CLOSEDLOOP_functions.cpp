#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AKSplineEmitter_CLOSEDLOOP

#include "Basic.hpp"

#include "AKSplineEmitter_CLOSEDLOOP_classes.hpp"
#include "AKSplineEmitter_CLOSEDLOOP_parameters.hpp"


namespace SDK
{

// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.ExecuteUbergraph_AKSplineEmitter_CLOSEDLOOP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAKSplineEmitter_CLOSEDLOOP_C::ExecuteUbergraph_AKSplineEmitter_CLOSEDLOOP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "ExecuteUbergraph_AKSplineEmitter_CLOSEDLOOP");

	Params::AKSplineEmitter_CLOSEDLOOP_C_ExecuteUbergraph_AKSplineEmitter_CLOSEDLOOP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.AKSE_Player_Spawned
// (BlueprintCallable, BlueprintEvent)

void AAKSplineEmitter_CLOSEDLOOP_C::AKSE_Player_Spawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "AKSE_Player_Spawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.Set AK State
// (BlueprintCallable, BlueprintEvent)

void AAKSplineEmitter_CLOSEDLOOP_C::Set_AK_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "Set AK State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAKSplineEmitter_CLOSEDLOOP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAKSplineEmitter_CLOSEDLOOP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "ReceiveTick");

	Params::AKSplineEmitter_CLOSEDLOOP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.Update Emitter Slowly
// (BlueprintCallable, BlueprintEvent)

void AAKSplineEmitter_CLOSEDLOOP_C::Update_Emitter_Slowly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "Update Emitter Slowly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.UpdateEmitterLocationProxy
// (BlueprintCallable, BlueprintEvent)

void AAKSplineEmitter_CLOSEDLOOP_C::UpdateEmitterLocationProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "UpdateEmitterLocationProxy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAKSplineEmitter_CLOSEDLOOP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.GetControlledPawnLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn**                           ControlledPawnReference                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ControlledPawnLocation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAKSplineEmitter_CLOSEDLOOP_C::GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "GetControlledPawnLocation");

	Params::AKSplineEmitter_CLOSEDLOOP_C_GetControlledPawnLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControlledPawnReference != nullptr)
		*ControlledPawnReference = Parms.ControlledPawnReference;

	if (ControlledPawnLocation != nullptr)
		*ControlledPawnLocation = std::move(Parms.ControlledPawnLocation);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.GetPlayerControllerCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator*                        PlayerControllerCameraRotation                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AAKSplineEmitter_CLOSEDLOOP_C::GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "GetPlayerControllerCameraRotation");

	Params::AKSplineEmitter_CLOSEDLOOP_C_GetPlayerControllerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerControllerCameraRotation != nullptr)
		*PlayerControllerCameraRotation = std::move(Parms.PlayerControllerCameraRotation);
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.GetIsInsideSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsInsideSpline_                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   IsInsideSplineChanged_                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AAKSplineEmitter_CLOSEDLOOP_C::GetIsInsideSpline(bool* IsInsideSpline_, bool* IsInsideSplineChanged_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "GetIsInsideSpline");

	Params::AKSplineEmitter_CLOSEDLOOP_C_GetIsInsideSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInsideSpline_ != nullptr)
		*IsInsideSpline_ = Parms.IsInsideSpline_;

	if (IsInsideSplineChanged_ != nullptr)
		*IsInsideSplineChanged_ = Parms.IsInsideSplineChanged_;
}


// Function AKSplineEmitter_CLOSEDLOOP.AKSplineEmitter_CLOSEDLOOP_C.GetDistanceToPlayerFromClosestSplinePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  DistanceToPlayerFromClosestSplinePoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAKSplineEmitter_CLOSEDLOOP_C::GetDistanceToPlayerFromClosestSplinePoint(float* DistanceToPlayerFromClosestSplinePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AKSplineEmitter_CLOSEDLOOP_C", "GetDistanceToPlayerFromClosestSplinePoint");

	Params::AKSplineEmitter_CLOSEDLOOP_C_GetDistanceToPlayerFromClosestSplinePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DistanceToPlayerFromClosestSplinePoint != nullptr)
		*DistanceToPlayerFromClosestSplinePoint = Parms.DistanceToPlayerFromClosestSplinePoint;
}

}

