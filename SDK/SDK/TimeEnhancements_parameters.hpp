#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimeEnhancements

#include "Basic.hpp"


namespace SDK::Params
{

// Function TimeEnhancements.CurveFloatDelegateTimer.CreateCurveFloatDelegateTimer
// 0x0028 (0x0028 - 0x0000)
struct CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToFirstExecution;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UCurveFloat*                      Curve;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoops;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurveDuration;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloatDelegateTimer*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer) == 0x000008, "Wrong alignment on CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer");
static_assert(sizeof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer) == 0x000028, "Wrong size on CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, WorldContextObject) == 0x000000, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, Period) == 0x000008, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::Period' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, DelayToFirstExecution) == 0x00000C, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::DelayToFirstExecution' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, Curve) == 0x000010, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::Curve' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, bLoops) == 0x000018, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::bLoops' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, CurveDuration) == 0x00001C, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::CurveDuration' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer, ReturnValue) == 0x000020, "Member 'CurveFloatDelegateTimer_CreateCurveFloatDelegateTimer::ReturnValue' has a wrong offset!");

// Function TimeEnhancements.CurveFloatDelegateTimer.DestroyCurveFloatDelegateTimer
// 0x0008 (0x0008 - 0x0000)
struct CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer final
{
public:
	class UCurveFloatDelegateTimer*               Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer) == 0x000008, "Wrong alignment on CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer");
static_assert(sizeof(CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer) == 0x000008, "Wrong size on CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer");
static_assert(offsetof(CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer, Object) == 0x000000, "Member 'CurveFloatDelegateTimer_DestroyCurveFloatDelegateTimer::Object' has a wrong offset!");

// Function TimeEnhancements.CurveFloatDelegateTimer.FireCurveEvalTick
// 0x0010 (0x0010 - 0x0000)
struct CurveFloatDelegateTimer_FireCurveEvalTick final
{
public:
	const class UDelegateTimer*                   Timer;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLast;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveFloatDelegateTimer_FireCurveEvalTick) == 0x000008, "Wrong alignment on CurveFloatDelegateTimer_FireCurveEvalTick");
static_assert(sizeof(CurveFloatDelegateTimer_FireCurveEvalTick) == 0x000010, "Wrong size on CurveFloatDelegateTimer_FireCurveEvalTick");
static_assert(offsetof(CurveFloatDelegateTimer_FireCurveEvalTick, Timer) == 0x000000, "Member 'CurveFloatDelegateTimer_FireCurveEvalTick::Timer' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_FireCurveEvalTick, ElapsedTime) == 0x000008, "Member 'CurveFloatDelegateTimer_FireCurveEvalTick::ElapsedTime' has a wrong offset!");
static_assert(offsetof(CurveFloatDelegateTimer_FireCurveEvalTick, TimeSinceLast) == 0x00000C, "Member 'CurveFloatDelegateTimer_FireCurveEvalTick::TimeSinceLast' has a wrong offset!");

// Function TimeEnhancements.DelegateTimer.CreateDelegateTimer
// 0x0018 (0x0018 - 0x0000)
struct DelegateTimer_CreateDelegateTimer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToFirstExecution;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDelegateTimer*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelegateTimer_CreateDelegateTimer) == 0x000008, "Wrong alignment on DelegateTimer_CreateDelegateTimer");
static_assert(sizeof(DelegateTimer_CreateDelegateTimer) == 0x000018, "Wrong size on DelegateTimer_CreateDelegateTimer");
static_assert(offsetof(DelegateTimer_CreateDelegateTimer, WorldContextObject) == 0x000000, "Member 'DelegateTimer_CreateDelegateTimer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelegateTimer_CreateDelegateTimer, Period) == 0x000008, "Member 'DelegateTimer_CreateDelegateTimer::Period' has a wrong offset!");
static_assert(offsetof(DelegateTimer_CreateDelegateTimer, DelayToFirstExecution) == 0x00000C, "Member 'DelegateTimer_CreateDelegateTimer::DelayToFirstExecution' has a wrong offset!");
static_assert(offsetof(DelegateTimer_CreateDelegateTimer, ReturnValue) == 0x000010, "Member 'DelegateTimer_CreateDelegateTimer::ReturnValue' has a wrong offset!");

// Function TimeEnhancements.DelegateTimer.DestroyDelegateTimer
// 0x0008 (0x0008 - 0x0000)
struct DelegateTimer_DestroyDelegateTimer final
{
public:
	class UDelegateTimer*                         Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelegateTimer_DestroyDelegateTimer) == 0x000008, "Wrong alignment on DelegateTimer_DestroyDelegateTimer");
static_assert(sizeof(DelegateTimer_DestroyDelegateTimer) == 0x000008, "Wrong size on DelegateTimer_DestroyDelegateTimer");
static_assert(offsetof(DelegateTimer_DestroyDelegateTimer, Object) == 0x000000, "Member 'DelegateTimer_DestroyDelegateTimer::Object' has a wrong offset!");

// Function TimeEnhancements.FiniteStateMachineComponent.SetLocalState
// 0x000C (0x000C - 0x0000)
struct FiniteStateMachineComponent_SetLocalState final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FiniteStateMachineComponent_SetLocalState) == 0x000004, "Wrong alignment on FiniteStateMachineComponent_SetLocalState");
static_assert(sizeof(FiniteStateMachineComponent_SetLocalState) == 0x00000C, "Wrong size on FiniteStateMachineComponent_SetLocalState");
static_assert(offsetof(FiniteStateMachineComponent_SetLocalState, NewState) == 0x000000, "Member 'FiniteStateMachineComponent_SetLocalState::NewState' has a wrong offset!");

// Function TimeEnhancements.FiniteStateMachineComponent.SetState
// 0x000C (0x000C - 0x0000)
struct FiniteStateMachineComponent_SetState final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FiniteStateMachineComponent_SetState) == 0x000004, "Wrong alignment on FiniteStateMachineComponent_SetState");
static_assert(sizeof(FiniteStateMachineComponent_SetState) == 0x00000C, "Wrong size on FiniteStateMachineComponent_SetState");
static_assert(offsetof(FiniteStateMachineComponent_SetState, NewState) == 0x000000, "Member 'FiniteStateMachineComponent_SetState::NewState' has a wrong offset!");

// Function TimeEnhancements.TimeEnhancementsBPLibrary.SixtyFramesPerSecondFrameDuration
// 0x0004 (0x0004 - 0x0000)
struct TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration) == 0x000004, "Wrong alignment on TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration");
static_assert(sizeof(TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration) == 0x000004, "Wrong size on TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration");
static_assert(offsetof(TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration, ReturnValue) == 0x000000, "Member 'TimeEnhancementsBPLibrary_SixtyFramesPerSecondFrameDuration::ReturnValue' has a wrong offset!");

}

