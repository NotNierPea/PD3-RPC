#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ElevatorDoor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.ExecuteUbergraph_BP_ElevatorDoor
// 0x00B8 (0x00B8 - 0x0000)
struct BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x0018(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1; // 0x0040(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bOpen_1;                        // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2; // 0x0058(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_bOpen;                          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0080(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bStateToChangeTo;                     // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDoCosmetics_1;                       // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavArea>                   K2Node_Select_Default_1;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bActorsInCloset;                      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDoCosmetics;                         // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavArea>                   K2Node_Select_Default_2;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor) == 0x000008, "Wrong alignment on BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor");
static_assert(sizeof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor) == 0x0000B8, "Wrong size on BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, EntryPoint) == 0x000000, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_byte_Variable) == 0x000004, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_byte_Variable_1) == 0x000005, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_struct_Variable) == 0x000008, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_delegate_Variable) == 0x000018, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_bool_Variable) == 0x00002C, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_struct_Variable_1) == 0x000030, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_delegate_Variable_1) == 0x000040, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_bool_Variable_1) == 0x000054, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_CustomEvent_bOpen_1) == 0x000055, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_CustomEvent_bOpen_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_bool_Variable_2) == 0x000056, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_delegate_Variable_2) == 0x000058, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_CustomEvent_bOpen) == 0x00006C, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_CustomEvent_bOpen' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_GetPlaybackPosition_ReturnValue) == 0x000070, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Select_Default) == 0x000075, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000078, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, Temp_struct_Variable_2) == 0x000080, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_PostAkEvent_ReturnValue) == 0x000090, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Event_bStateToChangeTo) == 0x000094, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Event_bStateToChangeTo' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Event_bDoCosmetics_1) == 0x000095, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Event_bDoCosmetics_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Select_Default_1) == 0x000098, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_PostAkEvent_ReturnValue_1) == 0x0000A0, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Event_bActorsInCloset) == 0x0000A4, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Event_bActorsInCloset' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Event_bDoCosmetics) == 0x0000A5, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Event_bDoCosmetics' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000A6, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0000A7, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, CallFunc_PostAkEvent_ReturnValue_2) == 0x0000A8, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor, K2Node_Select_Default_2) == 0x0000B0, "Member 'BP_ElevatorDoor_C_ExecuteUbergraph_BP_ElevatorDoor::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.ReactToCloset
// 0x0002 (0x0002 - 0x0000)
struct BP_ElevatorDoor_C_ReactToCloset final
{
public:
	bool                                          bActorsInCloset;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDoCosmetics;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ElevatorDoor_C_ReactToCloset) == 0x000001, "Wrong alignment on BP_ElevatorDoor_C_ReactToCloset");
static_assert(sizeof(BP_ElevatorDoor_C_ReactToCloset) == 0x000002, "Wrong size on BP_ElevatorDoor_C_ReactToCloset");
static_assert(offsetof(BP_ElevatorDoor_C_ReactToCloset, bActorsInCloset) == 0x000000, "Member 'BP_ElevatorDoor_C_ReactToCloset::bActorsInCloset' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_ReactToCloset, bDoCosmetics) == 0x000001, "Member 'BP_ElevatorDoor_C_ReactToCloset::bDoCosmetics' has a wrong offset!");

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_ElevatorDoor_C_OnStateChanged final
{
public:
	bool                                          bStateToChangeTo;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDoCosmetics;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ElevatorDoor_C_OnStateChanged) == 0x000001, "Wrong alignment on BP_ElevatorDoor_C_OnStateChanged");
static_assert(sizeof(BP_ElevatorDoor_C_OnStateChanged) == 0x000002, "Wrong size on BP_ElevatorDoor_C_OnStateChanged");
static_assert(offsetof(BP_ElevatorDoor_C_OnStateChanged, bStateToChangeTo) == 0x000000, "Member 'BP_ElevatorDoor_C_OnStateChanged::bStateToChangeTo' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_OnStateChanged, bDoCosmetics) == 0x000001, "Member 'BP_ElevatorDoor_C_OnStateChanged::bDoCosmetics' has a wrong offset!");

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.Open Doors No Cosmetics
// 0x0001 (0x0001 - 0x0000)
struct BP_ElevatorDoor_C_Open_Doors_No_Cosmetics final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ElevatorDoor_C_Open_Doors_No_Cosmetics) == 0x000001, "Wrong alignment on BP_ElevatorDoor_C_Open_Doors_No_Cosmetics");
static_assert(sizeof(BP_ElevatorDoor_C_Open_Doors_No_Cosmetics) == 0x000001, "Wrong size on BP_ElevatorDoor_C_Open_Doors_No_Cosmetics");
static_assert(offsetof(BP_ElevatorDoor_C_Open_Doors_No_Cosmetics, bOpen) == 0x000000, "Member 'BP_ElevatorDoor_C_Open_Doors_No_Cosmetics::bOpen' has a wrong offset!");

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.OpenDoors_Internal
// 0x0001 (0x0001 - 0x0000)
struct BP_ElevatorDoor_C_OpenDoors_Internal final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ElevatorDoor_C_OpenDoors_Internal) == 0x000001, "Wrong alignment on BP_ElevatorDoor_C_OpenDoors_Internal");
static_assert(sizeof(BP_ElevatorDoor_C_OpenDoors_Internal) == 0x000001, "Wrong size on BP_ElevatorDoor_C_OpenDoors_Internal");
static_assert(offsetof(BP_ElevatorDoor_C_OpenDoors_Internal, bOpen) == 0x000000, "Member 'BP_ElevatorDoor_C_OpenDoors_Internal::bOpen' has a wrong offset!");

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.DoorPositionInterp
// 0x0040 (0x0040 - 0x0000)
struct BP_ElevatorDoor_C_DoorPositionInterp final
{
public:
	struct FVector                                Original;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ElevatorDoor_C_DoorPositionInterp) == 0x000004, "Wrong alignment on BP_ElevatorDoor_C_DoorPositionInterp");
static_assert(sizeof(BP_ElevatorDoor_C_DoorPositionInterp) == 0x000040, "Wrong size on BP_ElevatorDoor_C_DoorPositionInterp");
static_assert(offsetof(BP_ElevatorDoor_C_DoorPositionInterp, Original) == 0x000000, "Member 'BP_ElevatorDoor_C_DoorPositionInterp::Original' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_DoorPositionInterp, Offset) == 0x00000C, "Member 'BP_ElevatorDoor_C_DoorPositionInterp::Offset' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_DoorPositionInterp, Alpha) == 0x000018, "Member 'BP_ElevatorDoor_C_DoorPositionInterp::Alpha' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_DoorPositionInterp, ReturnValue) == 0x00001C, "Member 'BP_ElevatorDoor_C_DoorPositionInterp::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_DoorPositionInterp, CallFunc_Add_VectorVector_ReturnValue) == 0x000028, "Member 'BP_ElevatorDoor_C_DoorPositionInterp::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_DoorPositionInterp, CallFunc_VLerp_ReturnValue) == 0x000034, "Member 'BP_ElevatorDoor_C_DoorPositionInterp::CallFunc_VLerp_ReturnValue' has a wrong offset!");

// Function BP_ElevatorDoor.BP_ElevatorDoor_C.SetRelativePositionInterp
// 0x00C0 (0x00C0 - 0x0000)
struct BP_ElevatorDoor_C_SetRelativePositionInterp final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Original;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DoorPositionInterp_ReturnValue;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0030(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_ElevatorDoor_C_SetRelativePositionInterp) == 0x000008, "Wrong alignment on BP_ElevatorDoor_C_SetRelativePositionInterp");
static_assert(sizeof(BP_ElevatorDoor_C_SetRelativePositionInterp) == 0x0000C0, "Wrong size on BP_ElevatorDoor_C_SetRelativePositionInterp");
static_assert(offsetof(BP_ElevatorDoor_C_SetRelativePositionInterp, Component) == 0x000000, "Member 'BP_ElevatorDoor_C_SetRelativePositionInterp::Component' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_SetRelativePositionInterp, Original) == 0x000008, "Member 'BP_ElevatorDoor_C_SetRelativePositionInterp::Original' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_SetRelativePositionInterp, Offset) == 0x000014, "Member 'BP_ElevatorDoor_C_SetRelativePositionInterp::Offset' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_SetRelativePositionInterp, Alpha) == 0x000020, "Member 'BP_ElevatorDoor_C_SetRelativePositionInterp::Alpha' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_SetRelativePositionInterp, CallFunc_DoorPositionInterp_ReturnValue) == 0x000024, "Member 'BP_ElevatorDoor_C_SetRelativePositionInterp::CallFunc_DoorPositionInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElevatorDoor_C_SetRelativePositionInterp, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000030, "Member 'BP_ElevatorDoor_C_SetRelativePositionInterp::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

}

