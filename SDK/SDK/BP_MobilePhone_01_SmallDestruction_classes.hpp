#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MobilePhone_01_SmallDestruction

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MobilePhone_01_SmallDestruction.BP_MobilePhone_01_SmallDestruction_C
// 0x0058 (0x0330 - 0x02D8)
class ABP_MobilePhone_01_SmallDestruction_C final : public ASBZSmallCosmeticDestruction
{
public:
	float                                         intensity_screen;                                  // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Swap_period;                                       // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         resolution;                                        // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         banding_refresh_rate;                              // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of__vertical_slides_in_the_texture;         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of__horizontal_slides_in_the_texture;       // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          swap_offest_by_position;                           // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         H_;                                                // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mode_RGB;                                          // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Pixel_type;                                        // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         banding_visibility;                                // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         sub_texture_part_used_start_range;                 // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         sub_texture_part_used_end_range;                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_OFF;                                            // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roughness_Multiplier;                              // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specularity;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diffuse_color;                                     // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Side_Attenuation;                                  // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MobilePhone_01_SmallDestruction_C">();
	}
	static class ABP_MobilePhone_01_SmallDestruction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MobilePhone_01_SmallDestruction_C>();
	}
};
static_assert(alignof(ABP_MobilePhone_01_SmallDestruction_C) == 0x000008, "Wrong alignment on ABP_MobilePhone_01_SmallDestruction_C");
static_assert(sizeof(ABP_MobilePhone_01_SmallDestruction_C) == 0x000330, "Wrong size on ABP_MobilePhone_01_SmallDestruction_C");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, intensity_screen) == 0x0002D8, "Member 'ABP_MobilePhone_01_SmallDestruction_C::intensity_screen' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Swap_period) == 0x0002DC, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Swap_period' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, resolution) == 0x0002E0, "Member 'ABP_MobilePhone_01_SmallDestruction_C::resolution' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, banding_refresh_rate) == 0x0002E4, "Member 'ABP_MobilePhone_01_SmallDestruction_C::banding_refresh_rate' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Number_of__vertical_slides_in_the_texture) == 0x0002E8, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Number_of__vertical_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Number_of__horizontal_slides_in_the_texture) == 0x0002EC, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Number_of__horizontal_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, swap_offest_by_position) == 0x0002F0, "Member 'ABP_MobilePhone_01_SmallDestruction_C::swap_offest_by_position' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, H_) == 0x0002F4, "Member 'ABP_MobilePhone_01_SmallDestruction_C::H_' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Mode_RGB) == 0x0002F8, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Mode_RGB' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Pixel_type) == 0x0002FC, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Pixel_type' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, banding_visibility) == 0x000300, "Member 'ABP_MobilePhone_01_SmallDestruction_C::banding_visibility' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, sub_texture_part_used_start_range) == 0x000304, "Member 'ABP_MobilePhone_01_SmallDestruction_C::sub_texture_part_used_start_range' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, sub_texture_part_used_end_range) == 0x000308, "Member 'ABP_MobilePhone_01_SmallDestruction_C::sub_texture_part_used_end_range' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Is_OFF) == 0x00030C, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Is_OFF' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Roughness_Multiplier) == 0x000310, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Roughness_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Specularity) == 0x000314, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Specularity' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Diffuse_color) == 0x000318, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Diffuse_color' has a wrong offset!");
static_assert(offsetof(ABP_MobilePhone_01_SmallDestruction_C, Side_Attenuation) == 0x000328, "Member 'ABP_MobilePhone_01_SmallDestruction_C::Side_Attenuation' has a wrong offset!");

}

