#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccelByteUe4Sdk

#include "Basic.hpp"

#include "JsonUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AccelByteUe4Sdk.ConvertAchievementStatus
// NumValues: 0x0004
enum class EConvertAchievementStatus : uint8
{
	NONE                                     = 0,
	IN_PROGRESS                              = 1,
	UNLOCKED                                 = 2,
	ConvertAchievementStatus_MAX             = 3,
};

// Enum AccelByteUe4Sdk.ESetByMetadataRecord
// NumValues: 0x0004
enum class ESetByMetadataRecord : uint8
{
	NONE                                     = 0,
	SERVER                                   = 1,
	CLIENT                                   = 2,
	ESetByMetadataRecord_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteLootBoxRewardType
// NumValues: 0x0004
enum class EAccelByteLootBoxRewardType : uint8
{
	PROBABILITY_GROUP                        = 0,
	REWARD_GROUP                             = 1,
	REWARD                                   = 2,
	EAccelByteLootBoxRewardType_MAX          = 3,
};

// Enum AccelByteUe4Sdk.EAccelBytePredicateType
// NumValues: 0x0004
enum class EAccelBytePredicateType : uint8
{
	EntitlementPredicate                     = 0,
	SeasonPassPredicate                      = 1,
	SeasonTierPredicate                      = 2,
	EAccelBytePredicateType_MAX              = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteCycle
// NumValues: 0x0007
enum class EAccelByteCycle : uint8
{
	DAILY                                    = 0,
	WEEKLY                                   = 1,
	MONTHLY                                  = 2,
	QUARTERLY                                = 3,
	YEARLY                                   = 4,
	ANNUALLY                                 = 5,
	EAccelByteCycle_MAX                      = 6,
};

// Enum AccelByteUe4Sdk.EAccelByteItemCurrencyType
// NumValues: 0x0004
enum class EAccelByteItemCurrencyType : uint8
{
	NONE                                     = 0,
	REAL                                     = 1,
	VIRTUAL                                  = 2,
	EAccelByteItemCurrencyType_MAX           = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteItemType
// NumValues: 0x000D
enum class EAccelByteItemType : uint8
{
	NONE                                     = 0,
	APP                                      = 1,
	COINS                                    = 2,
	INGAMEITEM                               = 3,
	BUNDLE                                   = 4,
	CODE                                     = 5,
	SUBSCRIPTION                             = 6,
	SEASON                                   = 7,
	MEDIA                                    = 8,
	OPTIONBOX                                = 9,
	EXTENSION                                = 10,
	LOOTBOX                                  = 11,
	EAccelByteItemType_MAX                   = 12,
};

// Enum AccelByteUe4Sdk.EAccelByteItemStatus
// NumValues: 0x0004
enum class EAccelByteItemStatus : uint8
{
	NONE                                     = 0,
	ACTIVE                                   = 1,
	INACTIVE                                 = 2,
	EAccelByteItemStatus_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementType
// NumValues: 0x0004
enum class EAccelByteEntitlementType : uint8
{
	NONE                                     = 0,
	DURABLE                                  = 1,
	CONSUMABLE                               = 2,
	EAccelByteEntitlementType_MAX            = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonType
// NumValues: 0x0003
enum class EAccelByteSeasonType : uint8
{
	PASS                                     = 0,
	TIER                                     = 1,
	EAccelByteSeasonType_MAX                 = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteCurrencyType
// NumValues: 0x0004
enum class EAccelByteCurrencyType : uint8
{
	NONE                                     = 0,
	REAL                                     = 1,
	VIRTUAL                                  = 2,
	EAccelByteCurrencyType_MAX               = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteAppType
// NumValues: 0x0006
enum class EAccelByteAppType : uint8
{
	NONE                                     = 0,
	GAME                                     = 1,
	SOFTWARE                                 = 2,
	DLC                                      = 3,
	DEMO                                     = 4,
	EAccelByteAppType_MAX                    = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementSource
// NumValues: 0x000B
enum class EAccelByteEntitlementSource : uint8
{
	NONE                                     = 0,
	PURCHASE                                 = 1,
	IAP                                      = 2,
	PROMOTION                                = 3,
	ACHIEVEMENT                              = 4,
	REFERRAL_BONUS                           = 5,
	REDEEM_CODE                              = 6,
	REWARD                                   = 7,
	GIFT                                     = 8,
	OTHER                                    = 9,
	EAccelByteEntitlementSource_MAX          = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementStatus
// NumValues: 0x0006
enum class EAccelByteEntitlementStatus : uint8
{
	NONE                                     = 0,
	ACTIVE                                   = 1,
	INACTIVE                                 = 2,
	CONSUMED                                 = 3,
	REVOKED                                  = 4,
	EAccelByteEntitlementStatus_MAX          = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementClass
// NumValues: 0x0009
enum class EAccelByteEntitlementClass : uint8
{
	NONE                                     = 0,
	APP                                      = 1,
	ENTITLEMENT                              = 2,
	CODE                                     = 3,
	SUBSCRIPTION                             = 4,
	MEDIA                                    = 5,
	OPTIONBOX                                = 6,
	LOOTBOX                                  = 7,
	EAccelByteEntitlementClass_MAX           = 8,
};

// Enum AccelByteUe4Sdk.ERelationshipStatusCode
// NumValues: 0x0005
enum class ERelationshipStatusCode : uint8
{
	Friend                                   = 3,
	Incoming                                 = 2,
	Outgoing                                 = 1,
	NotFriend                                = 0,
	ERelationshipStatusCode_MAX              = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteSubscriptionSummarySubscribedBy
// NumValues: 0x0004
enum class EAccelByteSubscriptionSummarySubscribedBy : uint8
{
	NONE                                     = 0,
	USER                                     = 1,
	PLATFORM                                 = 2,
	EAccelByteSubscriptionSummarySubscribedBy_MAX = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteSubscriptionSummaryStatus
// NumValues: 0x0006
enum class EAccelByteSubscriptionSummaryStatus : uint8
{
	NONE                                     = 0,
	INIT                                     = 1,
	ACTIVE                                   = 2,
	CANCELLED                                = 3,
	EXPIRED                                  = 4,
	EAccelByteSubscriptionSummaryStatus_MAX  = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteGroupType
// NumValues: 0x0005
enum class EAccelByteGroupType : uint8
{
	NONE                                     = 0,
	OPEN                                     = 1,
	PUBLIC                                   = 2,
	PRIVATE                                  = 3,
	EAccelByteGroupType_MAX                  = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteRuleCriteria
// NumValues: 0x0004
enum class EAccelByteRuleCriteria : uint8
{
	MINIMUM                                  = 0,
	MAXIMUM                                  = 1,
	EQUAL                                    = 2,
	EAccelByteRuleCriteria_MAX               = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteAllowedAction
// NumValues: 0x0008
enum class EAccelByteAllowedAction : uint8
{
	None                                     = 0,
	createGroup                              = 1,
	joinGroup                                = 2,
	inviteUser                               = 3,
	kickUser                                 = 4,
	leaveGroup                               = 5,
	responseJoinRequest                      = 6,
	EAccelByteAllowedAction_MAX              = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteGroupRequestType
// NumValues: 0x0005
enum class EAccelByteGroupRequestType : uint8
{
	NONE                                     = 0,
	INVITE                                   = 1,
	JOIN                                     = 2,
	JOINED                                   = 3,
	EAccelByteGroupRequestType_MAX           = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteMatchmakingStatus
// NumValues: 0x0008
enum class EAccelByteMatchmakingStatus : uint8
{
	Unknown                                  = 0,
	Start                                    = 1,
	Timeout                                  = 2,
	Cancel                                   = 3,
	Done                                     = 4,
	Unavailable                              = 5,
	Rejected                                 = 6,
	EAccelByteMatchmakingStatus_MAX          = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteOrderStatus
// NumValues: 0x000D
enum class EAccelByteOrderStatus : uint8
{
	NONE                                     = 0,
	INIT                                     = 1,
	CHARGED                                  = 2,
	CHARGEBACK                               = 3,
	CHARGEBACK_REVERSED                      = 4,
	FULFILLED                                = 5,
	FULFILL_FAILED                           = 6,
	REFUNDING                                = 7,
	REFUNDED                                 = 8,
	REFUND_FAILED                            = 9,
	CLOSED                                   = 10,
	DELETED                                  = 11,
	EAccelByteOrderStatus_MAX                = 12,
};

// Enum AccelByteUe4Sdk.EAccelBytePaymentProvider
// NumValues: 0x000A
enum class EAccelBytePaymentProvider : uint8
{
	NONE                                     = 0,
	WALLET                                   = 1,
	XSOLLA                                   = 2,
	ADYEN                                    = 3,
	STRIPE                                   = 4,
	CHECKOUT                                 = 5,
	ALIPAY                                   = 6,
	WXPAY                                    = 7,
	PAYPAL                                   = 8,
	EAccelBytePaymentProvider_MAX            = 9,
};

// Enum AccelByteUe4Sdk.EAvailability
// NumValues: 0x0006
enum class EAvailability : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	Busy                                     = 2,
	Invisible                                = 3,
	Away                                     = 4,
	EAvailability_MAX                        = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassRewardType
// NumValues: 0x0002
enum class EAccelByteSeasonPassRewardType : uint8
{
	ITEM                                     = 0,
	EAccelByteSeasonPassRewardType_MAX       = 1,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassStatus
// NumValues: 0x0004
enum class EAccelByteSeasonPassStatus : uint8
{
	DRAFT                                    = 0,
	PUBLISHED                                = 1,
	RETIRED                                  = 2,
	EAccelByteSeasonPassStatus_MAX           = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteMatchmakingSessionStatus
// NumValues: 0x0009
enum class EAccelByteMatchmakingSessionStatus : uint8
{
	None                                     = 0,
	Matched                                  = 1,
	Done                                     = 2,
	Cancel                                   = 3,
	Timeout                                  = 4,
	SessionInQueue                           = 5,
	SessionFull                              = 6,
	SessionTimeout                           = 7,
	EAccelByteMatchmakingSessionStatus_MAX   = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteAchievementListSortBy
// NumValues: 0x000B
enum class EAccelByteAchievementListSortBy : uint8
{
	NONE                                     = 0,
	LISTORDER                                = 1,
	LISTORDER_ASC                            = 2,
	LISTORDER_DESC                           = 3,
	CREATED_AT                               = 4,
	CREATED_AT_ASC                           = 5,
	CREATED_AT_DESC                          = 6,
	UPDATED_AT                               = 7,
	UPDATED_AT_ASC                           = 8,
	UPDATED_AT_DESC                          = 9,
	EAccelByteAchievementListSortBy_MAX      = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteGlobalAchievementContributorsSortBy
// NumValues: 0x0005
enum class EAccelByteGlobalAchievementContributorsSortBy : uint8
{
	NONE                                     = 0,
	CONTRIBUTED_VALUE                        = 1,
	CONTRIBUTED_VALUE_ASC                    = 2,
	CONTRIBUTED_VALUE_DESC                   = 3,
	EAccelByteGlobalAchievementContributorsSortBy_MAX = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteGlobalAchievementListSortBy
// NumValues: 0x0008
enum class EAccelByteGlobalAchievementListSortBy : uint8
{
	NONE                                     = 0,
	ACHIEVED_AT                              = 1,
	ACHIEVED_AT_ASC                          = 2,
	ACHIEVED_AT_DESC                         = 3,
	CREATED_AT                               = 4,
	CREATED_AT_ASC                           = 5,
	CREATED_AT_DESC                          = 6,
	EAccelByteGlobalAchievementListSortBy_MAX = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteGlobalAchievementStatus
// NumValues: 0x0004
enum class EAccelByteGlobalAchievementStatus : uint8
{
	NONE                                     = 0,
	IN_PROGRESS                              = 1,
	UNLOCKED                                 = 2,
	EAccelByteGlobalAchievementStatus_MAX    = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteItemListSortBy
// NumValues: 0x000D
enum class EAccelByteItemListSortBy : uint8
{
	NONE                                     = 0,
	NAME                                     = 1,
	NAME_DESC                                = 2,
	CREATEDAT                                = 3,
	CREATEDAT_ASC                            = 4,
	CREATEDAT_DESC                           = 5,
	UPDATEDAT                                = 6,
	UPDATEDAT_ASC                            = 7,
	UPDATEDAT_DESC                           = 8,
	DISPLAYORDER                             = 9,
	DISPLAYORDER_ASC                         = 10,
	DISPLAYORDER_DESC                        = 11,
	EAccelByteItemListSortBy_MAX             = 12,
};

// Enum AccelByteUe4Sdk.EAccelByteRewardListSortBy
// NumValues: 0x0008
enum class EAccelByteRewardListSortBy : uint8
{
	NONE                                     = 0,
	NAMESPACE                                = 1,
	NAMESPACE_ASC                            = 2,
	NAMESPACE_DESC                           = 3,
	REWARDCODE                               = 4,
	REWARDCODE_ASC                           = 5,
	REWARDCODE_DESC                          = 6,
	EAccelByteRewardListSortBy_MAX           = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteFileType
// NumValues: 0x0009
enum class EAccelByteFileType : uint8
{
	JPEG                                     = 0,
	JPG                                      = 1,
	PNG                                      = 2,
	BMP                                      = 3,
	GIF                                      = 4,
	MP3                                      = 5,
	BIN                                      = 6,
	WEBP                                     = 7,
	EAccelByteFileType_MAX                   = 8,
};

// Enum AccelByteUe4Sdk.UEnumServerType
// NumValues: 0x0004
enum class EUEnumServerType : uint8
{
	NONE                                     = 0,
	CLOUDSERVER                              = 1,
	LOCALSERVER                              = 2,
	UEnumServerType_MAX                      = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteAgreementPolicyType
// NumValues: 0x0004
enum class EAccelByteAgreementPolicyType : uint8
{
	EMPTY                                    = 0,
	LEGAL_DOCUMENT_TYPE                      = 1,
	MARKETING_PREFERENCE_TYPE                = 2,
	EAccelByteAgreementPolicyType_MAX        = 3,
};

// Enum AccelByteUe4Sdk.EHttpCacheType
// NumValues: 0x0004
enum class EHttpCacheType : uint8
{
	UNKNOWN                                  = 0,
	STORAGE                                  = 1,
	MEMORY                                   = 2,
	EHttpCacheType_MAX                       = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteOptionalBool
// NumValues: 0x0004
enum class EAccelByteOptionalBool : uint8
{
	NONE                                     = 0,
	OPT_YES                                  = 1,
	OPT_NO                                   = 2,
	EAccelByteOptionalBool_MAX               = 3,
};

// Enum AccelByteUe4Sdk.ETopicType
// NumValues: 0x0004
enum class ETopicType : uint8
{
	Unknown                                  = 0,
	PERSONAL                                 = 1,
	GROUP                                    = 2,
	ETopicType_MAX                           = 3,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformRewardOrigin
// NumValues: 0x000D
enum class EAccelBytePlatformRewardOrigin : uint8
{
	NONE                                     = 0,
	Playstation                              = 1,
	Xbox                                     = 2,
	Steam                                    = 3,
	Epic                                     = 4,
	IOS                                      = 5,
	GooglePlay                               = 6,
	Twitch                                   = 7,
	Nintendo                                 = 8,
	Oculus                                   = 9,
	System                                   = 10,
	Other                                    = 11,
	EAccelBytePlatformRewardOrigin_MAX       = 12,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformRewardSource
// NumValues: 0x0012
enum class EAccelBytePlatformRewardSource : uint8
{
	NONE                                     = 0,
	PURCHASE                                 = 1,
	IAP                                      = 2,
	PROMOTION                                = 3,
	ACHIEVEMENT                              = 4,
	REFERRAL_BONUS                           = 5,
	REDEEM_CODE                              = 6,
	REWARD                                   = 7,
	GIFT                                     = 8,
	DLC                                      = 9,
	OTHER                                    = 10,
	SELL_BACK                                = 11,
	CONSUME_ENTITLEMENT                      = 12,
	ORDER_REVOCATION                         = 13,
	DLC_REVOCATION                           = 14,
	PAYMENT                                  = 15,
	EXPIRATION                               = 16,
	EAccelBytePlatformRewardSource_MAX       = 17,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformRewardType
// NumValues: 0x0004
enum class EAccelBytePlatformRewardType : uint8
{
	NONE                                     = 0,
	ITEM                                     = 1,
	CURRENCY                                 = 2,
	EAccelBytePlatformRewardType_MAX         = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementIAPOrderStatus
// NumValues: 0x0005
enum class EAccelByteEntitlementIAPOrderStatus : uint8
{
	NONE                                     = 0,
	VERIFIED                                 = 1,
	FULFILLED                                = 2,
	FAILED                                   = 3,
	EAccelByteEntitlementIAPOrderStatus_MAX  = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementItemIdentityType
// NumValues: 0x0004
enum class EAccelByteEntitlementItemIdentityType : uint8
{
	NONE                                     = 0,
	ITEM_ID                                  = 1,
	ITEM_SKU                                 = 2,
	EAccelByteEntitlementItemIdentityType_MAX = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteWalletTable
// NumValues: 0x000B
enum class EAccelByteWalletTable : uint8
{
	Playstation                              = 0,
	Xbox                                     = 1,
	Steam                                    = 2,
	Epic                                     = 3,
	IOS                                      = 4,
	GooglePlay                               = 5,
	Twitch                                   = 6,
	System                                   = 7,
	Nintendo                                 = 8,
	Other                                    = 9,
	EAccelByteWalletTable_MAX                = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteWalletAction
// NumValues: 0x0005
enum class EAccelByteWalletAction : uint8
{
	NONE                                     = 0,
	CREDIT                                   = 1,
	PAYMENT                                  = 2,
	DEBIT                                    = 3,
	EAccelByteWalletAction_MAX               = 4,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformSync
// NumValues: 0x0006
enum class EAccelBytePlatformSync : uint8
{
	STEAM                                    = 0,
	XBOX_LIVE                                = 1,
	PLAYSTATION                              = 2,
	EPIC_GAMES                               = 3,
	OTHER                                    = 4,
	EAccelBytePlatformSync_MAX               = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteSubscriptionCycle
// NumValues: 0x0005
enum class EAccelByteSubscriptionCycle : uint8
{
	WEEKLY                                   = 0,
	MONTHLY                                  = 1,
	QUARTERLY                                = 2,
	YEARLY                                   = 3,
	EAccelByteSubscriptionCycle_MAX          = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteCreditUserWalletSource
// NumValues: 0x0009
enum class EAccelByteCreditUserWalletSource : uint8
{
	PURCHASE                                 = 0,
	IAP                                      = 1,
	PROMOTION                                = 2,
	ACHIEVEMENT                              = 3,
	REFERRAL_BONUS                           = 4,
	REDEEM_CODE                              = 5,
	REFUND                                   = 6,
	OTHER                                    = 7,
	EAccelByteCreditUserWalletSource_MAX     = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteItemSource
// NumValues: 0x0012
enum class EAccelByteItemSource : uint8
{
	NONE                                     = 0,
	PURCHASE                                 = 1,
	IAP                                      = 2,
	PROMOTION                                = 3,
	ACHIEVEMENT                              = 4,
	REFERRAL_BONUS                           = 5,
	REDEEM_CODE                              = 6,
	REWARD                                   = 7,
	GIFT                                     = 8,
	DLC                                      = 9,
	SELL_BACK                                = 10,
	CONSUME_ENTITLEMENT                      = 11,
	ORDER_REVOCATION                         = 12,
	PAYMENT                                  = 13,
	EXPIRATION                               = 14,
	IAP_CHARGEBACK_REVERSED                  = 15,
	OTHER                                    = 16,
	EAccelByteItemSource_MAX                 = 17,
};

// Enum AccelByteUe4Sdk.ESettingsEnvironment
// NumValues: 0x0008
enum class ESettingsEnvironment : uint8
{
	Development                              = 0,
	Certification                            = 1,
	Production                               = 2,
	Sandbox                                  = 3,
	Integration                              = 4,
	QA                                       = 5,
	Default                                  = 6,
	ESettingsEnvironment_MAX                 = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteGameStandardEventName
// NumValues: 0x000A
enum class EAccelByteGameStandardEventName : uint8
{
	resource_Sourced                         = 0,
	resource_Sinked                          = 1,
	resource_Upgraded                        = 2,
	resource_Actioned                        = 3,
	quest_Started                            = 4,
	quest_Ended                              = 5,
	player_Leveled                           = 6,
	player_Dead                              = 7,
	reward_Collected                         = 8,
	EAccelByteGameStandardEventName_MAX      = 9,
};

// Enum AccelByteUe4Sdk.EBanReason
// NumValues: 0x000E
enum class EBanReason : uint8
{
	EMPTY                                    = 0,
	VIOLENCE                                 = 1,
	HARASSMENT                               = 2,
	HATEFUL_CONDUCT                          = 3,
	OFFENSIVE_USERNAME                       = 4,
	IMPERSONATION                            = 5,
	MALICIOUS_CONTENT                        = 6,
	SEXUALLY_SUGGESTIVE                      = 7,
	SEXUAL_VIOLENCE                          = 8,
	EXTREME_VIOLENCE                         = 9,
	UNDERAGE_USER                            = 10,
	CHEATING                                 = 11,
	TOS_VIOLATION                            = 12,
	EBanReason_MAX                           = 13,
};

// Enum AccelByteUe4Sdk.EAccelBytePaginationType
// NumValues: 0x0004
enum class EAccelBytePaginationType : uint8
{
	FIRST                                    = 0,
	NEXT                                     = 1,
	PREVIOUS                                 = 2,
	EAccelBytePaginationType_MAX             = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteGroupListSortBy
// NumValues: 0x0003
enum class EAccelByteGroupListSortBy : uint8
{
	ASCENDING                                = 0,
	DESCENDING                               = 1,
	EAccelByteGroupListSortBy_MAX            = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteLeaderboardTimeFrame
// NumValues: 0x0006
enum class EAccelByteLeaderboardTimeFrame : uint8
{
	ALL_TIME                                 = 0,
	CURRENT_SEASON                           = 1,
	CURRENT_MONTH                            = 2,
	CURRENT_WEEK                             = 3,
	TODAY                                    = 4,
	EAccelByteLeaderboardTimeFrame_MAX       = 5,
};

// Enum AccelByteUe4Sdk.EV2SessionNotifTopic
// NumValues: 0x0012
enum class EV2SessionNotifTopic : uint8
{
	Invalid                                  = 0,
	OnPartyInvited                           = 1,
	OnPartyMembersChanged                    = 2,
	OnPartyJoined                            = 3,
	OnPartyRejected                          = 4,
	OnPartyKicked                            = 5,
	OnSessionInvited                         = 6,
	OnSessionJoined                          = 7,
	OnSessionMembersChanged                  = 8,
	OnSessionKicked                          = 9,
	OnSessionRejected                        = 10,
	OnDSStatusChanged                        = 11,
	OnPartyUpdated                           = 12,
	OnGameSessionUpdated                     = 13,
	OnSessionStorageChanged                  = 14,
	OnSessionEnded                           = 15,
	OnSessionNativePlatformSynced            = 16,
	EV2SessionNotifTopic_MAX                 = 17,
};

// Enum AccelByteUe4Sdk.EV2MatchmakingNotifTopic
// NumValues: 0x0006
enum class EV2MatchmakingNotifTopic : uint8
{
	Invalid                                  = 0,
	OnMatchFound                             = 1,
	OnMatchmakingStarted                     = 2,
	OnMatchmakingTicketExpired               = 3,
	OnMatchmakingTicketCanceled              = 4,
	EV2MatchmakingNotifTopic_MAX             = 5,
};

// Enum AccelByteUe4Sdk.EAccelBytePredefinedEventName
// NumValues: 0x00B4
enum class EAccelBytePredefinedEventName : uint8
{
	SDK_Initialized                          = 0,
	Login_Succeeded                          = 1,
	Login_Failed                             = 2,
	UserAgreement_Accepted                   = 3,
	UserAgreement_NotAccepted                = 4,
	UserProfile_Created                      = 5,
	UserProfile_Updated                      = 6,
	UserProfile_Deleted                      = 7,
	GameProfile_Created                      = 8,
	GameProfile_Updated                      = 9,
	GameProfile_Deleted                      = 10,
	UserStatItem_Created                     = 11,
	UserStatItem_Updated                     = 12,
	UserStatItem_Deleted                     = 13,
	UserStatItem_Reset                       = 14,
	UserStatItem_GetItemsByCodes             = 15,
	UserStatItem_GetSameItemsFromUsers       = 16,
	UserStatItem_GetItems                    = 17,
	GlobalStatItem_GetItemByCode             = 18,
	StatCycleItem_GetItemList                = 19,
	StatCycleItem_GetConfigByCycleId         = 20,
	StatCycleItem_GetListCycle               = 21,
	StatCycleItem_GetCycleItems              = 22,
	PlayerRecord_Created                     = 23,
	PlayerRecord_Updated                     = 24,
	PlayerRecord_Deleted                     = 25,
	PlayerRecord_GetRecords                  = 26,
	PublicPlayerRecord_GetSameRecordsFromUsers = 27,
	PublicPlayerRecord_GetRecord             = 28,
	PublicPlayerRecord_Updated               = 29,
	PublicPlayerRecord_GetOtherUserKeys      = 30,
	PublicPlayerRecord_GetOtherUserRecords   = 31,
	GameRecord_Created                       = 32,
	GameRecord_GetRecord                     = 33,
	GameRecord_Updated                       = 34,
	GameRecord_Deleted                       = 35,
	GameRecord_GetRecords                    = 36,
	PlayerBinaryRecord_Created               = 37,
	PlayerBinaryRecord_GetRecord             = 38,
	PlayerBinaryRecord_GetRecords            = 39,
	PlayerBinaryRecord_GetSameRecordsFromUsers = 40,
	PlayerBinaryRecord_GetRecordsByQuery     = 41,
	PlayerBinaryRecord_GetAll                = 42,
	PlayerBinaryRecord_Updated               = 43,
	PlayerBinaryRecord_Deleted               = 44,
	GameBinaryRecord_GetRecord               = 45,
	GameBinaryRecord_GetRecords              = 46,
	GameBinaryRecord_GetRecordsByQuery       = 47,
	Store_Opened                             = 48,
	Store_Closed                             = 49,
	ItemInspect_Opened                       = 50,
	ItemInspect_Closed                       = 51,
	Currency_Updated                         = 52,
	Entitlement_Granted                      = 53,
	Entitlement_Revoked                      = 54,
	CampaignCode_Redeemed                    = 55,
	Item_Fulfilled                           = 56,
	Item_Rewarded                            = 57,
	PaymentConfig_Updated                    = 58,
	Payment_Succeeded                        = 59,
	Payment_Failed                           = 60,
	Subscription_Started                     = 61,
	Subscription_Cancelled                   = 62,
	Wallet_Credited                          = 63,
	Wallet_Debited                           = 64,
	Lobby_Connected                          = 65,
	Lobby_Disconnected                       = 66,
	MPV1_Matchmaking_Started                 = 67,
	MPV1_Matchmaking_MatchNotif_Received     = 68,
	MPV1_Matchmaking_ReadyConsent            = 69,
	MPV1_Matchmaking_RejectMatch             = 70,
	MPV1_Matchmaking_Canceled                = 71,
	MPV1_Party_Joined                        = 72,
	MPV1_Party_Leave                         = 73,
	MPV1_Party_Invite                        = 74,
	MPV1_Party_Kick                          = 75,
	MPV2_GameSession_Created                 = 76,
	MPV2_GameSession_Invited                 = 77,
	MPV2_GameSession_Joined                  = 78,
	MPV2_GameSession_Left                    = 79,
	MPV2_GameSession_LeaderPromoted          = 80,
	MPV2_PartySession_Created                = 81,
	MPV2_PartySession_Invited                = 82,
	MPV2_PartySession_Joined                 = 83,
	MPV2_PartySession_Left                   = 84,
	MPV2_PartySession_Kicked                 = 85,
	MPV2_PartySession_LeaderPromoted         = 86,
	MPV2_Matchmaking_Requested               = 87,
	MPV2_Matchmaking_Started                 = 88,
	MPV2_Matchmaking_Canceled                = 89,
	DS_DSHub_Connected                       = 90,
	DS_DSHub_Disconnected                    = 91,
	DS_Registered                            = 92,
	DS_Unregistered                          = 93,
	DS_Claimed                               = 94,
	DS_MemberChangedNotif_Received           = 95,
	DS_GameClient_Joined                     = 96,
	DS_GameClient_Left                       = 97,
	DS_BackfillProposal_Received             = 98,
	DS_BackfillProposal_Accepted             = 99,
	DS_BackfillProposal_Rejected             = 100,
	FriendRequest_Sent                       = 101,
	FriendRequest_Cancelled                  = 102,
	FriendRequest_Accepted                   = 103,
	FriendRequest_Rejected                   = 104,
	Friend_Unfriended                        = 105,
	User_Blocked                             = 106,
	User_Unblocked                           = 107,
	UserPresence_StatusUpdated               = 108,
	User_Banned                              = 109,
	User_Unbanned                            = 110,
	ChatV2_Connected                         = 111,
	ChatV2_Disconnected                      = 112,
	ChatV2_PersonalTopic_Created             = 113,
	ChatV2_GroupTopic_Created                = 114,
	ChatV2_Topic_Joined                      = 115,
	ChatV2_Topic_Quit                        = 116,
	ChatV2_Topic_UserAdded                   = 117,
	ChatV2_Topic_UserRemoved                 = 118,
	ChatV2_Topic_Updated                     = 119,
	ChatV2_Topic_Deleted                     = 120,
	ChatV2_UserBlocked                       = 121,
	ChatV2_UserUnblocked                     = 122,
	ChatV2_GroupChat_ModeratorMutedUser      = 123,
	ChatV2_GroupChat_ModeratorUnmutedUser    = 124,
	ChatV2_GroupChat_ModeratorBannedUser     = 125,
	ChatV2_GroupChat_ModeratorUnbannedUser   = 126,
	ChatV2_GroupChat_ModeratorDeletedGroupChat = 127,
	Group_Created                            = 128,
	Group_Updated                            = 129,
	Group_CustomAttributesUpdated            = 130,
	Group_CustomRuleUpdated                  = 131,
	Group_PredefinedRuleUpdated              = 132,
	Group_PredefinedRuleDeleted              = 133,
	Group_GetInformation                     = 134,
	Group_Find                               = 135,
	Group_FindByIds                          = 136,
	Group_Joined                             = 137,
	Group_Deleted                            = 138,
	Group_Left                               = 139,
	Group_UserInvited                        = 140,
	Group_InvitationAccepted                 = 141,
	Group_InvitationRejected                 = 142,
	Group_InvitationCanceled                 = 143,
	Group_GetInvitationList                  = 144,
	Group_JoinRequestAccepted                = 145,
	Group_JoinRequestRejected                = 146,
	Group_JoinRequestCanceled                = 147,
	Group_GetJoinRequest                     = 148,
	Group_MemberKicked                       = 149,
	Group_MemberRoleUpdated                  = 150,
	Group_MemberRoleDeleted                  = 151,
	Group_GetGroupMember                     = 152,
	Achievement_Unlocked                     = 153,
	Achievement_GetAll                       = 154,
	Achievement_GetSpecific                  = 155,
	Achievement_GetUserAchievements          = 156,
	GlobalAchievement_Get                    = 157,
	GlobalAchievement_GetContributors        = 158,
	GlobalAchievement_GetContributed         = 159,
	GlobalAchievement_Claimed                = 160,
	Achievement_GetTags                      = 161,
	Leaderboard_GetRankings                  = 162,
	Leaderboard_GetUserRanking               = 163,
	Leaderboard_GetLeaderboards              = 164,
	Leaderboard_GetRankingByCycleId          = 165,
	Leaderboard_GetUsersRankings             = 166,
	SeasonPass_RewardClaimed                 = 167,
	SeasonPass_BulkRewardClaimed             = 168,
	SeasonPass_GetCurrentSeason              = 169,
	SeasonPass_GetUserSpecificSeasonData     = 170,
	SeasonPass_GetUserCurrentSeasonData      = 171,
	Reward_GetRewardByCode                   = 172,
	Reward_GetRewardById                     = 173,
	Reward_GetAllReward                      = 174,
	UGCChannel_Created                       = 175,
	UGCChannel_Updated                       = 176,
	UGCContent_Added                         = 177,
	UGCContent_Deleted                       = 178,
	EAccelBytePredefinedEventName_MAX        = 179,
};

// Enum AccelByteUe4Sdk.EAccelByteGameState
// NumValues: 0x0004
enum class EAccelByteGameState : uint8
{
	OUT_OF_GAMEPLAY                          = 0,
	IN_GAMEPLAY                              = 1,
	STORE                                    = 2,
	EAccelByteGameState_MAX                  = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteReportingCategory
// NumValues: 0x0005
enum class EAccelByteReportingCategory : uint8
{
	UGC                                      = 0,
	USER                                     = 1,
	CHAT                                     = 2,
	EXTENSION                                = 3,
	EAccelByteReportingCategory_MAX          = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassSource
// NumValues: 0x0003
enum class EAccelByteSeasonPassSource : uint8
{
	SWEAT                                    = 0,
	PAID_FOR                                 = 1,
	EAccelByteSeasonPassSource_MAX           = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassStrategyMethod
// NumValues: 0x0003
enum class EAccelByteSeasonPassStrategyMethod : uint8
{
	NONE                                     = 0,
	CURRENCY                                 = 1,
	EAccelByteSeasonPassStrategyMethod_MAX   = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteSessionType
// NumValues: 0x0004
enum class EAccelByteSessionType : uint8
{
	NONE                                     = 0,
	p2p                                      = 1,
	dedicated                                = 2,
	EAccelByteSessionType_MAX                = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteV2SessionPlatform
// NumValues: 0x0007
enum class EAccelByteV2SessionPlatform : uint8
{
	Unknown                                  = 0,
	Steam                                    = 1,
	EOS                                      = 2,
	Xbox                                     = 3,
	PS4                                      = 4,
	PS5                                      = 5,
	EAccelByteV2SessionPlatform_MAX          = 6,
};

// Enum AccelByteUe4Sdk.EAccelByteV2SessionType
// NumValues: 0x0004
enum class EAccelByteV2SessionType : uint8
{
	Unknown                                  = 0,
	GameSession                              = 1,
	PartySession                             = 2,
	EAccelByteV2SessionType_MAX              = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteV2SessionQueryComparisonOp
// NumValues: 0x0009
enum class EAccelByteV2SessionQueryComparisonOp : uint8
{
	EQUAL                                    = 0,
	NOT_EQUAL                                = 1,
	GREATER_THAN                             = 2,
	GREATER_THAN_EQUAL                       = 3,
	LESS_THAN                                = 4,
	LESS_THAN_EQUAL                          = 5,
	CONTAINS                                 = 6,
	NOT_CONTAINS                             = 7,
	EAccelByteV2SessionQueryComparisonOp_MAX = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteV2SessionConfigurationServerType
// NumValues: 0x0005
enum class EAccelByteV2SessionConfigurationServerType : uint8
{
	EMPTY                                    = 0,
	NONE                                     = 1,
	DS                                       = 2,
	P2P                                      = 3,
	EAccelByteV2SessionConfigurationServerType_MAX = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteV2GameSessionDsStatus
// NumValues: 0x0009
enum class EAccelByteV2GameSessionDsStatus : uint8
{
	EMPTY                                    = 0,
	NEED_TO_REQUEST                          = 1,
	REQUESTED                                = 2,
	PREPARING                                = 3,
	AVAILABLE                                = 4,
	FAILED_TO_REQUEST                        = 5,
	ENDED                                    = 6,
	UNKNOWN                                  = 7,
	EAccelByteV2GameSessionDsStatus_MAX      = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteV2SessionMemberStatus
// NumValues: 0x000C
enum class EAccelByteV2SessionMemberStatus : uint8
{
	EMPTY                                    = 0,
	INVITED                                  = 1,
	JOINED                                   = 2,
	CONNECTED                                = 3,
	LEFT                                     = 4,
	DROPPED                                  = 5,
	REJECTED                                 = 6,
	KICKED                                   = 7,
	TIMEOUT                                  = 8,
	DISCONNECTED                             = 9,
	TERMINATED                               = 10,
	EAccelByteV2SessionMemberStatus_MAX      = 11,
};

// Enum AccelByteUe4Sdk.EAccelByteV2SessionJoinability
// NumValues: 0x0005
enum class EAccelByteV2SessionJoinability : uint8
{
	EMPTY                                    = 0,
	CLOSED                                   = 1,
	INVITE_ONLY                              = 2,
	OPEN                                     = 3,
	EAccelByteV2SessionJoinability_MAX       = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteStatisticSortBy
// NumValues: 0x000B
enum class EAccelByteStatisticSortBy : uint8
{
	NONE                                     = 0,
	STAT_CODE                                = 1,
	STAT_CODE_ASC                            = 2,
	STAT_CODE_DESC                           = 3,
	CREATED_AT                               = 4,
	CREATED_AT_ASC                           = 5,
	CREATED_AT_DESC                          = 6,
	UPDATED_AT                               = 7,
	UPDATED_AT_ASC                           = 8,
	UPDATED_AT_DESC                          = 9,
	EAccelByteStatisticSortBy_MAX            = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteStatisticUpdateStrategy
// NumValues: 0x0004
enum class EAccelByteStatisticUpdateStrategy : uint8
{
	OVERRIDE                                 = 0,
	INCREMENT                                = 1,
	MAX                                      = 2,
	MIN                                      = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteStatisticStatus
// NumValues: 0x0003
enum class EAccelByteStatisticStatus : uint8
{
	INIT                                     = 0,
	TIED                                     = 1,
	EAccelByteStatisticStatus_MAX            = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteStatisticSetBy
// NumValues: 0x0003
enum class EAccelByteStatisticSetBy : uint8
{
	CLIENT                                   = 0,
	SERVER                                   = 1,
	EAccelByteStatisticSetBy_MAX             = 2,
};

// Enum AccelByteUe4Sdk.EP2PConnectionType
// NumValues: 0x0006
enum class EP2PConnectionType : uint8
{
	None                                     = 0,
	Host                                     = 1,
	Srflx                                    = 2,
	Prflx                                    = 3,
	Relay                                    = 4,
	EP2PConnectionType_MAX                   = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteUGCContentUtilitiesSortByV2
// NumValues: 0x0005
enum class EAccelByteUGCContentUtilitiesSortByV2 : uint8
{
	NONE                                     = 0,
	CREATED_TIME                             = 1,
	CREATED_TIME_ASC                         = 2,
	CREATED_TIME_DESC                        = 3,
	EAccelByteUGCContentUtilitiesSortByV2_MAX = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteUGCContentSortByV2
// NumValues: 0x000D
enum class EAccelByteUGCContentSortByV2 : uint8
{
	NAME                                     = 0,
	NAME_ASC                                 = 1,
	NAME_DESC                                = 2,
	DOWNLOAD                                 = 3,
	DOWNLOAD_ASC                             = 4,
	DOWNLOAD_DESC                            = 5,
	LIKE                                     = 6,
	LIKE_ASC                                 = 7,
	LIKE_DESC                                = 8,
	CREATED_TIME                             = 9,
	CREATED_TIME_ASC                         = 10,
	CREATED_TIME_DESC                        = 11,
	EAccelByteUGCContentSortByV2_MAX         = 12,
};

// Enum AccelByteUe4Sdk.EAccelByteUgcOrderBy
// NumValues: 0x0003
enum class EAccelByteUgcOrderBy : uint8
{
	ASC                                      = 0,
	DESC                                     = 1,
	EAccelByteUgcOrderBy_MAX                 = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteLikedContentSortBy
// NumValues: 0x0005
enum class EAccelByteLikedContentSortBy : uint8
{
	NAME                                     = 0,
	DOWNLOAD                                 = 1,
	LIKE                                     = 2,
	DATE                                     = 3,
	EAccelByteLikedContentSortBy_MAX         = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteUgcSortBy
// NumValues: 0x0006
enum class EAccelByteUgcSortBy : uint8
{
	NAME                                     = 0,
	DOWNLOAD                                 = 1,
	LIKE                                     = 2,
	DATE                                     = 3,
	UPDATED_TIME                             = 4,
	EAccelByteUgcSortBy_MAX                  = 5,
};

// Enum AccelByteUe4Sdk.EVerificationContext
// NumValues: 0x0004
enum class EVerificationContext : uint8
{
	UserAccountRegistration                  = 0,
	UpdateEmailAddress                       = 1,
	upgradeHeadlessAccount                   = 2,
	EVerificationContext_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EBanType
// NumValues: 0x000A
enum class EBanType : uint8
{
	EMPTY                                    = 0,
	LOGIN                                    = 1,
	CHAT_SEND                                = 2,
	CHAT_ALL                                 = 3,
	ORDER_AND_PAYMENT                        = 4,
	STATISTIC                                = 5,
	LEADERBOARD                              = 6,
	MATCHMAKING                              = 7,
	UGC_CREATE_UPDATE                        = 8,
	EBanType_MAX                             = 9,
};

// Enum AccelByteUe4Sdk.EAccelByteSearchType
// NumValues: 0x0004
enum class EAccelByteSearchType : uint8
{
	ALL                                      = 0,
	DISPLAYNAME                              = 1,
	USERNAME                                 = 2,
	EAccelByteSearchType_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformType
// NumValues: 0x0017
enum class EAccelBytePlatformType : uint8
{
	Steam                                    = 0,
	PS4                                      = 1,
	PS4CrossGen                              = 2,
	PS5                                      = 3,
	Live                                     = 4,
	Google                                   = 5,
	Apple                                    = 6,
	Facebook                                 = 7,
	Android                                  = 8,
	iOS                                      = 9,
	Device                                   = 10,
	Twitch                                   = 11,
	Oculus                                   = 12,
	Twitter                                  = 13,
	EpicGames                                = 14,
	AwsCognito                               = 15,
	Discord                                  = 16,
	Nintendo                                 = 17,
	SnapChat                                 = 18,
	EAOrigin                                 = 19,
	PS4Web                                   = 20,
	Unset                                    = 255,
	EAccelBytePlatformType_MAX               = 256,
};

// Enum AccelByteUe4Sdk.EAccelByteLoginAuthFactorType
// NumValues: 0x0003
enum class EAccelByteLoginAuthFactorType : uint8
{
	Authenticator                            = 0,
	BackupCode                               = 1,
	EAccelByteLoginAuthFactorType_MAX        = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteUploadCategory
// NumValues: 0x0003
enum class EAccelByteUploadCategory : uint8
{
	DEFAULT                                  = 0,
	REPORTING                                = 1,
	EAccelByteUploadCategory_MAX             = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteDevModeDeviceIdMethod
// NumValues: 0x0006
enum class EAccelByteDevModeDeviceIdMethod : uint8
{
	UNSPECIFIED                              = 0,
	COMMANDLINE                              = 1,
	PICK_RANDOM                              = 2,
	RANDOMIZE                                = 3,
	PERSISTENT                               = 4,
	EAccelByteDevModeDeviceIdMethod_MAX      = 5,
};

// ScriptStruct AccelByteUe4Sdk.BannedBy
// 0x0020 (0x0020 - 0x0000)
struct FBannedBy final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBannedBy) == 0x000008, "Wrong alignment on FBannedBy");
static_assert(sizeof(FBannedBy) == 0x000020, "Wrong size on FBannedBy");
static_assert(offsetof(FBannedBy, DisplayName) == 0x000000, "Member 'FBannedBy::DisplayName' has a wrong offset!");
static_assert(offsetof(FBannedBy, UserId) == 0x000010, "Member 'FBannedBy::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BanUserResponse
// 0x00B0 (0x00B0 - 0x0000)
struct FBanUserResponse final
{
public:
	class FString                                 Ban;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BanId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBannedBy                              BannedBy;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisableDate;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBanUserResponse) == 0x000008, "Wrong alignment on FBanUserResponse");
static_assert(sizeof(FBanUserResponse) == 0x0000B0, "Wrong size on FBanUserResponse");
static_assert(offsetof(FBanUserResponse, Ban) == 0x000000, "Member 'FBanUserResponse::Ban' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, BanId) == 0x000010, "Member 'FBanUserResponse::BanId' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, BannedBy) == 0x000020, "Member 'FBanUserResponse::BannedBy' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Comment) == 0x000040, "Member 'FBanUserResponse::Comment' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, CreatedAt) == 0x000050, "Member 'FBanUserResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, DisableDate) == 0x000060, "Member 'FBanUserResponse::DisableDate' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Enabled) == 0x000070, "Member 'FBanUserResponse::Enabled' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, EndDate) == 0x000078, "Member 'FBanUserResponse::EndDate' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Namespace) == 0x000088, "Member 'FBanUserResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Reason) == 0x000098, "Member 'FBanUserResponse::Reason' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, UserId) == 0x0000A0, "Member 'FBanUserResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaging
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPaging final
{
public:
	class FString                                 First;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Previous;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaging) == 0x000008, "Wrong alignment on FAccelByteModelsPaging");
static_assert(sizeof(FAccelByteModelsPaging) == 0x000040, "Wrong size on FAccelByteModelsPaging");
static_assert(offsetof(FAccelByteModelsPaging, First) == 0x000000, "Member 'FAccelByteModelsPaging::First' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaging, Last) == 0x000010, "Member 'FAccelByteModelsPaging::Last' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaging, Next) == 0x000020, "Member 'FAccelByteModelsPaging::Next' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaging, Previous) == 0x000030, "Member 'FAccelByteModelsPaging::Previous' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetUserBansResponse
// 0x0050 (0x0050 - 0x0000)
struct FGetUserBansResponse final
{
public:
	TArray<struct FBanUserResponse>               Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetUserBansResponse) == 0x000008, "Wrong alignment on FGetUserBansResponse");
static_assert(sizeof(FGetUserBansResponse) == 0x000050, "Wrong size on FGetUserBansResponse");
static_assert(offsetof(FGetUserBansResponse, Data) == 0x000000, "Member 'FGetUserBansResponse::Data' has a wrong offset!");
static_assert(offsetof(FGetUserBansResponse, Paging) == 0x000010, "Member 'FGetUserBansResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemLootBoxItem
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsItemLootBoxItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemType;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndDate;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsItemLootBoxItem) == 0x000008, "Wrong alignment on FAccelByteModelsItemLootBoxItem");
static_assert(sizeof(FAccelByteModelsItemLootBoxItem) == 0x000048, "Wrong size on FAccelByteModelsItemLootBoxItem");
static_assert(offsetof(FAccelByteModelsItemLootBoxItem, ItemId) == 0x000000, "Member 'FAccelByteModelsItemLootBoxItem::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemLootBoxItem, ItemSku) == 0x000010, "Member 'FAccelByteModelsItemLootBoxItem::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemLootBoxItem, ItemType) == 0x000020, "Member 'FAccelByteModelsItemLootBoxItem::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemLootBoxItem, Duration) == 0x000030, "Member 'FAccelByteModelsItemLootBoxItem::Duration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemLootBoxItem, EndDate) == 0x000038, "Member 'FAccelByteModelsItemLootBoxItem::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemLootBoxItem, Count) == 0x000040, "Member 'FAccelByteModelsItemLootBoxItem::Count' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemReward
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsItemReward final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteLootBoxRewardType                   Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsItemLootBoxItem> LootBoxItems;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Odds;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemReward) == 0x000008, "Wrong alignment on FAccelByteModelsItemReward");
static_assert(sizeof(FAccelByteModelsItemReward) == 0x000030, "Wrong size on FAccelByteModelsItemReward");
static_assert(offsetof(FAccelByteModelsItemReward, Name) == 0x000000, "Member 'FAccelByteModelsItemReward::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemReward, Type) == 0x000010, "Member 'FAccelByteModelsItemReward::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemReward, LootBoxItems) == 0x000018, "Member 'FAccelByteModelsItemReward::LootBoxItems' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemReward, Weight) == 0x000028, "Member 'FAccelByteModelsItemReward::Weight' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemReward, Odds) == 0x00002C, "Member 'FAccelByteModelsItemReward::Odds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemLootBoxConfig
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsItemLootBoxConfig final
{
public:
	int32                                         RewardCount;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsItemReward>     Rewards;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemLootBoxConfig) == 0x000008, "Wrong alignment on FAccelByteModelsItemLootBoxConfig");
static_assert(sizeof(FAccelByteModelsItemLootBoxConfig) == 0x000018, "Wrong size on FAccelByteModelsItemLootBoxConfig");
static_assert(offsetof(FAccelByteModelsItemLootBoxConfig, RewardCount) == 0x000000, "Member 'FAccelByteModelsItemLootBoxConfig::RewardCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemLootBoxConfig, Rewards) == 0x000008, "Member 'FAccelByteModelsItemLootBoxConfig::Rewards' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionInviteRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2SessionInviteRequest final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionInviteRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionInviteRequest");
static_assert(sizeof(FAccelByteModelsV2SessionInviteRequest) == 0x000010, "Wrong size on FAccelByteModelsV2SessionInviteRequest");
static_assert(offsetof(FAccelByteModelsV2SessionInviteRequest, UserID) == 0x000000, "Member 'FAccelByteModelsV2SessionInviteRequest::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserAchievement
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsUserAchievement final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Name;                                              // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AchievementCode;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievedAt;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatestValue;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsUserAchievement");
static_assert(sizeof(FAccelByteModelsUserAchievement) == 0x000088, "Wrong size on FAccelByteModelsUserAchievement");
static_assert(offsetof(FAccelByteModelsUserAchievement, Id) == 0x000000, "Member 'FAccelByteModelsUserAchievement::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, Name) == 0x000010, "Member 'FAccelByteModelsUserAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, AchievementCode) == 0x000060, "Member 'FAccelByteModelsUserAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, AchievedAt) == 0x000070, "Member 'FAccelByteModelsUserAchievement::AchievedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, LatestValue) == 0x000080, "Member 'FAccelByteModelsUserAchievement::LatestValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, Status) == 0x000084, "Member 'FAccelByteModelsUserAchievement::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementIcon
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsAchievementIcon final
{
public:
	class FString                                 Url;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Slug;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementIcon) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementIcon");
static_assert(sizeof(FAccelByteModelsAchievementIcon) == 0x000020, "Wrong size on FAccelByteModelsAchievementIcon");
static_assert(offsetof(FAccelByteModelsAchievementIcon, Url) == 0x000000, "Member 'FAccelByteModelsAchievementIcon::Url' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAchievementIcon, Slug) == 0x000010, "Member 'FAccelByteModelsAchievementIcon::Slug' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicAchievement
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsPublicAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> LockedIcons;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> UnlockedIcons;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListOrder;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Incremental;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Global;                                            // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GoalValue;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPublicAchievement");
static_assert(sizeof(FAccelByteModelsPublicAchievement) == 0x0000D0, "Wrong size on FAccelByteModelsPublicAchievement");
static_assert(offsetof(FAccelByteModelsPublicAchievement, AchievementCode) == 0x000000, "Member 'FAccelByteModelsPublicAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicAchievement::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Name) == 0x000020, "Member 'FAccelByteModelsPublicAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Description) == 0x000030, "Member 'FAccelByteModelsPublicAchievement::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, LockedIcons) == 0x000040, "Member 'FAccelByteModelsPublicAchievement::LockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, UnlockedIcons) == 0x000050, "Member 'FAccelByteModelsPublicAchievement::UnlockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Hidden) == 0x000060, "Member 'FAccelByteModelsPublicAchievement::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, ListOrder) == 0x000064, "Member 'FAccelByteModelsPublicAchievement::ListOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Tags) == 0x000068, "Member 'FAccelByteModelsPublicAchievement::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Incremental) == 0x000078, "Member 'FAccelByteModelsPublicAchievement::Incremental' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Global) == 0x000079, "Member 'FAccelByteModelsPublicAchievement::Global' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, GoalValue) == 0x00007C, "Member 'FAccelByteModelsPublicAchievement::GoalValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, StatCode) == 0x000080, "Member 'FAccelByteModelsPublicAchievement::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, CreatedAt) == 0x000090, "Member 'FAccelByteModelsPublicAchievement::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, UpdatedAt) == 0x0000A0, "Member 'FAccelByteModelsPublicAchievement::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, CustomAttributes) == 0x0000B0, "Member 'FAccelByteModelsPublicAchievement::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedPublicAchievement
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedPublicAchievement final
{
public:
	TArray<struct FAccelByteModelsPublicAchievement> Data;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedPublicAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedPublicAchievement");
static_assert(sizeof(FAccelByteModelsPaginatedPublicAchievement) == 0x000050, "Wrong size on FAccelByteModelsPaginatedPublicAchievement");
static_assert(offsetof(FAccelByteModelsPaginatedPublicAchievement, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedPublicAchievement::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedPublicAchievement, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedPublicAchievement::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUploadContentURLResponseV2
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUGCUploadContentURLResponseV2 final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileLocation;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUploadContentURLResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUploadContentURLResponseV2");
static_assert(sizeof(FAccelByteModelsUGCUploadContentURLResponseV2) == 0x000040, "Wrong size on FAccelByteModelsUGCUploadContentURLResponseV2");
static_assert(offsetof(FAccelByteModelsUGCUploadContentURLResponseV2, ContentType) == 0x000000, "Member 'FAccelByteModelsUGCUploadContentURLResponseV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUploadContentURLResponseV2, FileExtension) == 0x000010, "Member 'FAccelByteModelsUGCUploadContentURLResponseV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUploadContentURLResponseV2, Url) == 0x000020, "Member 'FAccelByteModelsUGCUploadContentURLResponseV2::Url' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUploadContentURLResponseV2, FileLocation) == 0x000030, "Member 'FAccelByteModelsUGCUploadContentURLResponseV2::FileLocation' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCountInfo
// 0x000C (0x000C - 0x0000)
struct FAccelByteModelsCountInfo final
{
public:
	int32                                         NumberOfAchievements;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfHiddenAchievements;                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfVisibleAchievements;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCountInfo) == 0x000004, "Wrong alignment on FAccelByteModelsCountInfo");
static_assert(sizeof(FAccelByteModelsCountInfo) == 0x00000C, "Wrong size on FAccelByteModelsCountInfo");
static_assert(offsetof(FAccelByteModelsCountInfo, NumberOfAchievements) == 0x000000, "Member 'FAccelByteModelsCountInfo::NumberOfAchievements' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCountInfo, NumberOfHiddenAchievements) == 0x000004, "Member 'FAccelByteModelsCountInfo::NumberOfHiddenAchievements' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCountInfo, NumberOfVisibleAchievements) == 0x000008, "Member 'FAccelByteModelsCountInfo::NumberOfVisibleAchievements' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatPublicTopicQueryData
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsChatPublicTopicQueryData final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfMembers;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatPublicTopicQueryData) == 0x000008, "Wrong alignment on FAccelByteModelsChatPublicTopicQueryData");
static_assert(sizeof(FAccelByteModelsChatPublicTopicQueryData) == 0x000028, "Wrong size on FAccelByteModelsChatPublicTopicQueryData");
static_assert(offsetof(FAccelByteModelsChatPublicTopicQueryData, TopicId) == 0x000000, "Member 'FAccelByteModelsChatPublicTopicQueryData::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatPublicTopicQueryData, Name) == 0x000010, "Member 'FAccelByteModelsChatPublicTopicQueryData::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatPublicTopicQueryData, NumberOfMembers) == 0x000020, "Member 'FAccelByteModelsChatPublicTopicQueryData::NumberOfMembers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserIdState
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsUserIdState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserIdState) == 0x000008, "Wrong alignment on FAccelByteModelsUserIdState");
static_assert(sizeof(FAccelByteModelsUserIdState) == 0x000018, "Wrong size on FAccelByteModelsUserIdState");
static_assert(offsetof(FAccelByteModelsUserIdState, State) == 0x000000, "Member 'FAccelByteModelsUserIdState::State' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserIdState, UserId) == 0x000008, "Member 'FAccelByteModelsUserIdState::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelSpayLoadURL
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelSpayLoadURL final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelSpayLoadURL) == 0x000008, "Wrong alignment on FAccelByteModelSpayLoadURL");
static_assert(sizeof(FAccelByteModelSpayLoadURL) == 0x000020, "Wrong size on FAccelByteModelSpayLoadURL");
static_assert(offsetof(FAccelByteModelSpayLoadURL, Source) == 0x000000, "Member 'FAccelByteModelSpayLoadURL::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelSpayLoadURL, Url) == 0x000010, "Member 'FAccelByteModelSpayLoadURL::Url' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelScreenshots
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelScreenshots final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenshotId;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelScreenshots) == 0x000008, "Wrong alignment on FAccelByteModelScreenshots");
static_assert(sizeof(FAccelByteModelScreenshots) == 0x000060, "Wrong size on FAccelByteModelScreenshots");
static_assert(offsetof(FAccelByteModelScreenshots, ContentType) == 0x000000, "Member 'FAccelByteModelScreenshots::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelScreenshots, Description) == 0x000010, "Member 'FAccelByteModelScreenshots::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelScreenshots, FileExtension) == 0x000020, "Member 'FAccelByteModelScreenshots::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelScreenshots, ScreenshotId) == 0x000030, "Member 'FAccelByteModelScreenshots::ScreenshotId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelScreenshots, Source) == 0x000040, "Member 'FAccelByteModelScreenshots::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelScreenshots, Url) == 0x000050, "Member 'FAccelByteModelScreenshots::Url' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCContentResponseV2
// 0x0148 (0x0148 - 0x0000)
struct FAccelByteModelsUGCContentResponseV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedTime;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdState            CreatorFollowState;                                // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DownloadCount;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileExtension;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Groups;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LikeCount;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdState            LikeState;                                         // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelSpayLoadURL>     PayloadURL;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelScreenshots>     Screenshots;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedTime;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0128(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCContentResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCContentResponseV2");
static_assert(sizeof(FAccelByteModelsUGCContentResponseV2) == 0x000148, "Wrong size on FAccelByteModelsUGCContentResponseV2");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCContentResponseV2::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, CreatedTime) == 0x000010, "Member 'FAccelByteModelsUGCContentResponseV2::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, CreatorFollowState) == 0x000020, "Member 'FAccelByteModelsUGCContentResponseV2::CreatorFollowState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, DownloadCount) == 0x000038, "Member 'FAccelByteModelsUGCContentResponseV2::DownloadCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, FileExtension) == 0x000040, "Member 'FAccelByteModelsUGCContentResponseV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Groups) == 0x000050, "Member 'FAccelByteModelsUGCContentResponseV2::Groups' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Id) == 0x000060, "Member 'FAccelByteModelsUGCContentResponseV2::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, IsHidden) == 0x000070, "Member 'FAccelByteModelsUGCContentResponseV2::IsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, IsOfficial) == 0x000071, "Member 'FAccelByteModelsUGCContentResponseV2::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, LikeCount) == 0x000074, "Member 'FAccelByteModelsUGCContentResponseV2::LikeCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, LikeState) == 0x000078, "Member 'FAccelByteModelsUGCContentResponseV2::LikeState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Name) == 0x000090, "Member 'FAccelByteModelsUGCContentResponseV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Namespace) == 0x0000A0, "Member 'FAccelByteModelsUGCContentResponseV2::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, PayloadURL) == 0x0000B0, "Member 'FAccelByteModelsUGCContentResponseV2::PayloadURL' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Screenshots) == 0x0000C0, "Member 'FAccelByteModelsUGCContentResponseV2::Screenshots' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, ShareCode) == 0x0000D0, "Member 'FAccelByteModelsUGCContentResponseV2::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, SubType) == 0x0000E0, "Member 'FAccelByteModelsUGCContentResponseV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Tags) == 0x0000F0, "Member 'FAccelByteModelsUGCContentResponseV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, Type) == 0x000100, "Member 'FAccelByteModelsUGCContentResponseV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, UpdatedTime) == 0x000110, "Member 'FAccelByteModelsUGCContentResponseV2::UpdatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, UserId) == 0x000118, "Member 'FAccelByteModelsUGCContentResponseV2::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponseV2, CustomAttributes) == 0x000128, "Member 'FAccelByteModelsUGCContentResponseV2::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPredefinedEvent
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsPredefinedEvent
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreDefinedEventName;                               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPredefinedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsPredefinedEvent");
static_assert(sizeof(FAccelByteModelsPredefinedEvent) == 0x000018, "Wrong size on FAccelByteModelsPredefinedEvent");
static_assert(offsetof(FAccelByteModelsPredefinedEvent, PreDefinedEventName) == 0x000008, "Member 'FAccelByteModelsPredefinedEvent::PreDefinedEventName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2PartySessionLeaderPromotedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV2PartySessionLeaderPromotedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 PromotedUserId;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartySessionId;                                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV2PartySessionLeaderPromotedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2PartySessionLeaderPromotedPayload");
static_assert(sizeof(FAccelByteModelsMPV2PartySessionLeaderPromotedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2PartySessionLeaderPromotedPayload");
static_assert(offsetof(FAccelByteModelsMPV2PartySessionLeaderPromotedPayload, PromotedUserId) == 0x000018, "Member 'FAccelByteModelsMPV2PartySessionLeaderPromotedPayload::PromotedUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2PartySessionLeaderPromotedPayload, PartySessionId) == 0x000028, "Member 'FAccelByteModelsMPV2PartySessionLeaderPromotedPayload::PartySessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnblockPlayerNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUnblockPlayerNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnblockedUserId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnblockPlayerNotif) == 0x000008, "Wrong alignment on FAccelByteModelsUnblockPlayerNotif");
static_assert(sizeof(FAccelByteModelsUnblockPlayerNotif) == 0x000020, "Wrong size on FAccelByteModelsUnblockPlayerNotif");
static_assert(offsetof(FAccelByteModelsUnblockPlayerNotif, UserId) == 0x000000, "Member 'FAccelByteModelsUnblockPlayerNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUnblockPlayerNotif, UnblockedUserId) == 0x000010, "Member 'FAccelByteModelsUnblockPlayerNotif::UnblockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkStatItemOperationResult
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsBulkStatItemOperationResult final
{
public:
	TMap<class FString, class FString>            Details;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkStatItemOperationResult) == 0x000008, "Wrong alignment on FAccelByteModelsBulkStatItemOperationResult");
static_assert(sizeof(FAccelByteModelsBulkStatItemOperationResult) == 0x000078, "Wrong size on FAccelByteModelsBulkStatItemOperationResult");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, Details) == 0x000000, "Member 'FAccelByteModelsBulkStatItemOperationResult::Details' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, StatCode) == 0x000050, "Member 'FAccelByteModelsBulkStatItemOperationResult::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, Success) == 0x000060, "Member 'FAccelByteModelsBulkStatItemOperationResult::Success' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, UserId) == 0x000068, "Member 'FAccelByteModelsBulkStatItemOperationResult::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterRequestv2
// 0x0070 (0x0070 - 0x0000)
struct FRegisterRequestv2 final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterRequestv2) == 0x000008, "Wrong alignment on FRegisterRequestv2");
static_assert(sizeof(FRegisterRequestv2) == 0x000070, "Wrong size on FRegisterRequestv2");
static_assert(offsetof(FRegisterRequestv2, AuthType) == 0x000000, "Member 'FRegisterRequestv2::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, DisplayName) == 0x000010, "Member 'FRegisterRequestv2::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, EmailAddress) == 0x000020, "Member 'FRegisterRequestv2::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, Password) == 0x000030, "Member 'FRegisterRequestv2::Password' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, Country) == 0x000040, "Member 'FRegisterRequestv2::Country' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, DateOfBirth) == 0x000050, "Member 'FRegisterRequestv2::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, Username) == 0x000060, "Member 'FRegisterRequestv2::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupMemberKickedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupMemberKickedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickedUserId;                                      // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupMemberKickedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupMemberKickedPayload");
static_assert(sizeof(FAccelByteModelsGroupMemberKickedPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupMemberKickedPayload");
static_assert(offsetof(FAccelByteModelsGroupMemberKickedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupMemberKickedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberKickedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupMemberKickedPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberKickedPayload, KickedUserId) == 0x000038, "Member 'FAccelByteModelsGroupMemberKickedPayload::KickedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetListFollowersResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUGCGetListFollowersResponse final
{
public:
	int32                                         FollowCount;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FollowingCount;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLikedContent;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUGCGetListFollowersResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetListFollowersResponse");
static_assert(sizeof(FAccelByteModelsUGCGetListFollowersResponse) == 0x000030, "Wrong size on FAccelByteModelsUGCGetListFollowersResponse");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersResponse, FollowCount) == 0x000000, "Member 'FAccelByteModelsUGCGetListFollowersResponse::FollowCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersResponse, FollowingCount) == 0x000004, "Member 'FAccelByteModelsUGCGetListFollowersResponse::FollowingCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersResponse, Id) == 0x000008, "Member 'FAccelByteModelsUGCGetListFollowersResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersResponse, Namespace) == 0x000018, "Member 'FAccelByteModelsUGCGetListFollowersResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersResponse, TotalLikedContent) == 0x000028, "Member 'FAccelByteModelsUGCGetListFollowersResponse::TotalLikedContent' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetListFollowersPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCGetListFollowersPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCGetListFollowersResponse> Data;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGetListFollowersPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetListFollowersPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCGetListFollowersPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCGetListFollowersPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCGetListFollowersPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetListFollowersPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCGetListFollowersPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementSyncBase
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsEntitlementSyncBase final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XstsToken;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServiceLabel;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EpicGamesJwtToken;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementSyncBase) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementSyncBase");
static_assert(sizeof(FAccelByteModelsEntitlementSyncBase) == 0x000070, "Wrong size on FAccelByteModelsEntitlementSyncBase");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, ProductId) == 0x000000, "Member 'FAccelByteModelsEntitlementSyncBase::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, Price) == 0x000010, "Member 'FAccelByteModelsEntitlementSyncBase::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, CurrencyCode) == 0x000018, "Member 'FAccelByteModelsEntitlementSyncBase::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, XstsToken) == 0x000028, "Member 'FAccelByteModelsEntitlementSyncBase::XstsToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, ServiceLabel) == 0x000038, "Member 'FAccelByteModelsEntitlementSyncBase::ServiceLabel' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, Region) == 0x000040, "Member 'FAccelByteModelsEntitlementSyncBase::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, Language) == 0x000050, "Member 'FAccelByteModelsEntitlementSyncBase::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSyncBase, EpicGamesJwtToken) == 0x000060, "Member 'FAccelByteModelsEntitlementSyncBase::EpicGamesJwtToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.CodeForTokenExchangeResponse
// 0x0010 (0x0010 - 0x0000)
struct FCodeForTokenExchangeResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCodeForTokenExchangeResponse) == 0x000008, "Wrong alignment on FCodeForTokenExchangeResponse");
static_assert(sizeof(FCodeForTokenExchangeResponse) == 0x000010, "Wrong size on FCodeForTokenExchangeResponse");
static_assert(offsetof(FCodeForTokenExchangeResponse, Code) == 0x000000, "Member 'FCodeForTokenExchangeResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCategoryInfo
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsCategoryInfo final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentCategoryPath;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Root;                                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsCategoryInfo) == 0x000008, "Wrong alignment on FAccelByteModelsCategoryInfo");
static_assert(sizeof(FAccelByteModelsCategoryInfo) == 0x000058, "Wrong size on FAccelByteModelsCategoryInfo");
static_assert(offsetof(FAccelByteModelsCategoryInfo, Namespace) == 0x000000, "Member 'FAccelByteModelsCategoryInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, ParentCategoryPath) == 0x000010, "Member 'FAccelByteModelsCategoryInfo::ParentCategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, CategoryPath) == 0x000020, "Member 'FAccelByteModelsCategoryInfo::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, CreatedAt) == 0x000030, "Member 'FAccelByteModelsCategoryInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, UpdatedAt) == 0x000038, "Member 'FAccelByteModelsCategoryInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, DisplayName) == 0x000040, "Member 'FAccelByteModelsCategoryInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, Root) == 0x000050, "Member 'FAccelByteModelsCategoryInfo::Root' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsCategoryInfoResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsCategoryInfoResponse final
{
public:
	TArray<struct FAccelByteModelsCategoryInfo>   Content;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsCategoryInfoResponse) == 0x000008, "Wrong alignment on FArrayModelsCategoryInfoResponse");
static_assert(sizeof(FArrayModelsCategoryInfoResponse) == 0x000010, "Wrong size on FArrayModelsCategoryInfoResponse");
static_assert(offsetof(FArrayModelsCategoryInfoResponse, Content) == 0x000000, "Member 'FArrayModelsCategoryInfoResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionTeamParties
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2GameSessionTeamParties final
{
public:
	class FString                                 PartyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIDs;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionTeamParties) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionTeamParties");
static_assert(sizeof(FAccelByteModelsV2GameSessionTeamParties) == 0x000020, "Wrong size on FAccelByteModelsV2GameSessionTeamParties");
static_assert(offsetof(FAccelByteModelsV2GameSessionTeamParties, PartyID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionTeamParties::PartyID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionTeamParties, UserIDs) == 0x000010, "Member 'FAccelByteModelsV2GameSessionTeamParties::UserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionTeam
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2GameSessionTeam final
{
public:
	TArray<class FString>                         UserIDs;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2GameSessionTeamParties> Parties;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionTeam) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionTeam");
static_assert(sizeof(FAccelByteModelsV2GameSessionTeam) == 0x000020, "Wrong size on FAccelByteModelsV2GameSessionTeam");
static_assert(offsetof(FAccelByteModelsV2GameSessionTeam, UserIDs) == 0x000000, "Member 'FAccelByteModelsV2GameSessionTeam::UserIDs' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionTeam, Parties) == 0x000010, "Member 'FAccelByteModelsV2GameSessionTeam::Parties' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerInfo
// 0x0128 (0x0128 - 0x0000)
struct FAccelByteModelsServerInfo final
{
public:
	class FString                                 Pod_name;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_version;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Alternate_ips;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    Ports;                                             // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last_update;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_attribute;                                  // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerInfo) == 0x000008, "Wrong alignment on FAccelByteModelsServerInfo");
static_assert(sizeof(FAccelByteModelsServerInfo) == 0x000128, "Wrong size on FAccelByteModelsServerInfo");
static_assert(offsetof(FAccelByteModelsServerInfo, Pod_name) == 0x000000, "Member 'FAccelByteModelsServerInfo::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Image_version) == 0x000010, "Member 'FAccelByteModelsServerInfo::Image_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Namespace) == 0x000020, "Member 'FAccelByteModelsServerInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Ip) == 0x000030, "Member 'FAccelByteModelsServerInfo::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Alternate_ips) == 0x000040, "Member 'FAccelByteModelsServerInfo::Alternate_ips' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Port) == 0x000050, "Member 'FAccelByteModelsServerInfo::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Ports) == 0x000058, "Member 'FAccelByteModelsServerInfo::Ports' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Provider) == 0x0000A8, "Member 'FAccelByteModelsServerInfo::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Game_version) == 0x0000B8, "Member 'FAccelByteModelsServerInfo::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Status) == 0x0000C8, "Member 'FAccelByteModelsServerInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Last_update) == 0x0000D8, "Member 'FAccelByteModelsServerInfo::Last_update' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Region) == 0x0000E8, "Member 'FAccelByteModelsServerInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Custom_attribute) == 0x0000F8, "Member 'FAccelByteModelsServerInfo::Custom_attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Deployment) == 0x000108, "Member 'FAccelByteModelsServerInfo::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Session_id) == 0x000118, "Member 'FAccelByteModelsServerInfo::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionDSInformation
// 0x0138 (0x0138 - 0x0000)
struct FAccelByteModelsV2GameSessionDSInformation final
{
public:
	struct FAccelByteModelsServerInfo             Server;                                            // 0x0000(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              RequestedAt;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2GameSessionDsStatus               Status;                                            // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2GameSessionDsStatus               StatusV2;                                          // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2GameSessionDSInformation) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionDSInformation");
static_assert(sizeof(FAccelByteModelsV2GameSessionDSInformation) == 0x000138, "Wrong size on FAccelByteModelsV2GameSessionDSInformation");
static_assert(offsetof(FAccelByteModelsV2GameSessionDSInformation, Server) == 0x000000, "Member 'FAccelByteModelsV2GameSessionDSInformation::Server' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionDSInformation, RequestedAt) == 0x000128, "Member 'FAccelByteModelsV2GameSessionDSInformation::RequestedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionDSInformation, Status) == 0x000130, "Member 'FAccelByteModelsV2GameSessionDSInformation::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionDSInformation, StatusV2) == 0x000131, "Member 'FAccelByteModelsV2GameSessionDSInformation::StatusV2' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionUser
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsV2SessionUser final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionMemberStatus               Status;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionMemberStatus               StatusV2;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UpdatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformID;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserID;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionUser) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionUser");
static_assert(sizeof(FAccelByteModelsV2SessionUser) == 0x000040, "Wrong size on FAccelByteModelsV2SessionUser");
static_assert(offsetof(FAccelByteModelsV2SessionUser, ID) == 0x000000, "Member 'FAccelByteModelsV2SessionUser::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionUser, Status) == 0x000010, "Member 'FAccelByteModelsV2SessionUser::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionUser, StatusV2) == 0x000011, "Member 'FAccelByteModelsV2SessionUser::StatusV2' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionUser, UpdatedAt) == 0x000018, "Member 'FAccelByteModelsV2SessionUser::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionUser, PlatformID) == 0x000020, "Member 'FAccelByteModelsV2SessionUser::PlatformID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionUser, PlatformUserID) == 0x000030, "Member 'FAccelByteModelsV2SessionUser::PlatformUserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelbyteModelsV2SessionStorage
// 0x0070 (0x0070 - 0x0000)
struct FAccelbyteModelsV2SessionStorage final
{
public:
	struct FJsonObjectWrapper                     Leader;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> Member;                                           // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelbyteModelsV2SessionStorage) == 0x000008, "Wrong alignment on FAccelbyteModelsV2SessionStorage");
static_assert(sizeof(FAccelbyteModelsV2SessionStorage) == 0x000070, "Wrong size on FAccelbyteModelsV2SessionStorage");
static_assert(offsetof(FAccelbyteModelsV2SessionStorage, Leader) == 0x000000, "Member 'FAccelbyteModelsV2SessionStorage::Leader' has a wrong offset!");
static_assert(offsetof(FAccelbyteModelsV2SessionStorage, Member) == 0x000020, "Member 'FAccelbyteModelsV2SessionStorage::Member' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionConfiguration
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsV2SessionConfiguration final
{
public:
	EAccelByteV2SessionConfigurationServerType    Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionJoinability                Joinability;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinPlayers;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxPlayers;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InactiveTimeout;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteTimeout;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         RequestedRegions;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TextChat;                                          // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persistent;                                        // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoJoin;                                          // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2SessionConfiguration) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionConfiguration");
static_assert(sizeof(FAccelByteModelsV2SessionConfiguration) == 0x000070, "Wrong size on FAccelByteModelsV2SessionConfiguration");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, Type) == 0x000000, "Member 'FAccelByteModelsV2SessionConfiguration::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, Joinability) == 0x000001, "Member 'FAccelByteModelsV2SessionConfiguration::Joinability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, Name) == 0x000008, "Member 'FAccelByteModelsV2SessionConfiguration::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, MinPlayers) == 0x000018, "Member 'FAccelByteModelsV2SessionConfiguration::MinPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, MaxPlayers) == 0x000020, "Member 'FAccelByteModelsV2SessionConfiguration::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, InactiveTimeout) == 0x000028, "Member 'FAccelByteModelsV2SessionConfiguration::InactiveTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, InviteTimeout) == 0x000030, "Member 'FAccelByteModelsV2SessionConfiguration::InviteTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, Deployment) == 0x000038, "Member 'FAccelByteModelsV2SessionConfiguration::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, ClientVersion) == 0x000048, "Member 'FAccelByteModelsV2SessionConfiguration::ClientVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, RequestedRegions) == 0x000058, "Member 'FAccelByteModelsV2SessionConfiguration::RequestedRegions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, TextChat) == 0x000068, "Member 'FAccelByteModelsV2SessionConfiguration::TextChat' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, Persistent) == 0x000069, "Member 'FAccelByteModelsV2SessionConfiguration::Persistent' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionConfiguration, AutoJoin) == 0x00006A, "Member 'FAccelByteModelsV2SessionConfiguration::AutoJoin' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2BaseSession
// 0x0178 (0x0178 - 0x0000)
struct FAccelByteModelsV2BaseSession
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFull;                                            // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderID;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2SessionConfiguration Configuration;                                     // 0x0088(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int64                                         Version;                                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionType                       SessionType;                                       // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelbyteModelsV2SessionStorage       Storage;                                           // 0x0108(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2BaseSession) == 0x000008, "Wrong alignment on FAccelByteModelsV2BaseSession");
static_assert(sizeof(FAccelByteModelsV2BaseSession) == 0x000178, "Wrong size on FAccelByteModelsV2BaseSession");
static_assert(offsetof(FAccelByteModelsV2BaseSession, ID) == 0x000000, "Member 'FAccelByteModelsV2BaseSession::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, Namespace) == 0x000010, "Member 'FAccelByteModelsV2BaseSession::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, IsActive) == 0x000020, "Member 'FAccelByteModelsV2BaseSession::IsActive' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, IsFull) == 0x000021, "Member 'FAccelByteModelsV2BaseSession::IsFull' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, Attributes) == 0x000028, "Member 'FAccelByteModelsV2BaseSession::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, Members) == 0x000048, "Member 'FAccelByteModelsV2BaseSession::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, CreatedBy) == 0x000058, "Member 'FAccelByteModelsV2BaseSession::CreatedBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, LeaderID) == 0x000068, "Member 'FAccelByteModelsV2BaseSession::LeaderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, CreatedAt) == 0x000078, "Member 'FAccelByteModelsV2BaseSession::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, UpdatedAt) == 0x000080, "Member 'FAccelByteModelsV2BaseSession::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, Configuration) == 0x000088, "Member 'FAccelByteModelsV2BaseSession::Configuration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, Version) == 0x0000F8, "Member 'FAccelByteModelsV2BaseSession::Version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, SessionType) == 0x000100, "Member 'FAccelByteModelsV2BaseSession::SessionType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2BaseSession, Storage) == 0x000108, "Member 'FAccelByteModelsV2BaseSession::Storage' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSession
// 0x0178 (0x02F0 - 0x0178)
struct FAccelByteModelsV2GameSession final : public FAccelByteModelsV2BaseSession
{
public:
	TArray<struct FAccelByteModelsV2GameSessionTeam> Teams;                                          // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2GameSessionDSInformation DSInformation;                                 // 0x0188(0x0138)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 BackfillTicketID;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSession) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSession");
static_assert(sizeof(FAccelByteModelsV2GameSession) == 0x0002F0, "Wrong size on FAccelByteModelsV2GameSession");
static_assert(offsetof(FAccelByteModelsV2GameSession, Teams) == 0x000178, "Member 'FAccelByteModelsV2GameSession::Teams' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSession, DSInformation) == 0x000188, "Member 'FAccelByteModelsV2GameSession::DSInformation' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSession, BackfillTicketID) == 0x0002C0, "Member 'FAccelByteModelsV2GameSession::BackfillTicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSession, MatchPool) == 0x0002D0, "Member 'FAccelByteModelsV2GameSession::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSession, Code) == 0x0002E0, "Member 'FAccelByteModelsV2GameSession::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PaginatedGameSessionQueryResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsV2PaginatedGameSessionQueryResult final
{
public:
	TArray<struct FAccelByteModelsV2GameSession>  Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PaginatedGameSessionQueryResult) == 0x000008, "Wrong alignment on FAccelByteModelsV2PaginatedGameSessionQueryResult");
static_assert(sizeof(FAccelByteModelsV2PaginatedGameSessionQueryResult) == 0x000050, "Wrong size on FAccelByteModelsV2PaginatedGameSessionQueryResult");
static_assert(offsetof(FAccelByteModelsV2PaginatedGameSessionQueryResult, Data) == 0x000000, "Member 'FAccelByteModelsV2PaginatedGameSessionQueryResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PaginatedGameSessionQueryResult, Paging) == 0x000010, "Member 'FAccelByteModelsV2PaginatedGameSessionQueryResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.VersionInfo
// 0x0040 (0x0040 - 0x0000)
struct FVersionInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GitHash;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Realm;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVersionInfo) == 0x000008, "Wrong alignment on FVersionInfo");
static_assert(sizeof(FVersionInfo) == 0x000040, "Wrong size on FVersionInfo");
static_assert(offsetof(FVersionInfo, Name) == 0x000000, "Member 'FVersionInfo::Name' has a wrong offset!");
static_assert(offsetof(FVersionInfo, Version) == 0x000010, "Member 'FVersionInfo::Version' has a wrong offset!");
static_assert(offsetof(FVersionInfo, GitHash) == 0x000020, "Member 'FVersionInfo::GitHash' has a wrong offset!");
static_assert(offsetof(FVersionInfo, Realm) == 0x000030, "Member 'FVersionInfo::Realm' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupJoinRequestAcceptedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupJoinRequestAcceptedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AcceptedUserId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupJoinRequestAcceptedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupJoinRequestAcceptedPayload");
static_assert(sizeof(FAccelByteModelsGroupJoinRequestAcceptedPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupJoinRequestAcceptedPayload");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestAcceptedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupJoinRequestAcceptedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestAcceptedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupJoinRequestAcceptedPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestAcceptedPayload, AcceptedUserId) == 0x000038, "Member 'FAccelByteModelsGroupJoinRequestAcceptedPayload::AcceptedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMultiLanguageAchievement
// 0x0150 (0x0150 - 0x0000)
struct FAccelByteModelsMultiLanguageAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Name;                                              // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Description;                                       // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> LockedIcons;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> UnlockedIcons;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListOrder;                                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Incremental;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Global;                                            // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GoalValue;                                         // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0130(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMultiLanguageAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsMultiLanguageAchievement");
static_assert(sizeof(FAccelByteModelsMultiLanguageAchievement) == 0x000150, "Wrong size on FAccelByteModelsMultiLanguageAchievement");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, AchievementCode) == 0x000000, "Member 'FAccelByteModelsMultiLanguageAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Namespace) == 0x000010, "Member 'FAccelByteModelsMultiLanguageAchievement::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Name) == 0x000020, "Member 'FAccelByteModelsMultiLanguageAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Description) == 0x000070, "Member 'FAccelByteModelsMultiLanguageAchievement::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, LockedIcons) == 0x0000C0, "Member 'FAccelByteModelsMultiLanguageAchievement::LockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, UnlockedIcons) == 0x0000D0, "Member 'FAccelByteModelsMultiLanguageAchievement::UnlockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Hidden) == 0x0000E0, "Member 'FAccelByteModelsMultiLanguageAchievement::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, ListOrder) == 0x0000E4, "Member 'FAccelByteModelsMultiLanguageAchievement::ListOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Tags) == 0x0000E8, "Member 'FAccelByteModelsMultiLanguageAchievement::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Incremental) == 0x0000F8, "Member 'FAccelByteModelsMultiLanguageAchievement::Incremental' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Global) == 0x0000F9, "Member 'FAccelByteModelsMultiLanguageAchievement::Global' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, GoalValue) == 0x0000FC, "Member 'FAccelByteModelsMultiLanguageAchievement::GoalValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, StatCode) == 0x000100, "Member 'FAccelByteModelsMultiLanguageAchievement::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, CreatedAt) == 0x000110, "Member 'FAccelByteModelsMultiLanguageAchievement::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, UpdatedAt) == 0x000120, "Member 'FAccelByteModelsMultiLanguageAchievement::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, CustomAttributes) == 0x000130, "Member 'FAccelByteModelsMultiLanguageAchievement::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsActionUpdateSystemMessage
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsActionUpdateSystemMessage final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteOptionalBool                        Read;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteOptionalBool                        Keep;                                              // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsActionUpdateSystemMessage) == 0x000008, "Wrong alignment on FAccelByteModelsActionUpdateSystemMessage");
static_assert(sizeof(FAccelByteModelsActionUpdateSystemMessage) == 0x000018, "Wrong size on FAccelByteModelsActionUpdateSystemMessage");
static_assert(offsetof(FAccelByteModelsActionUpdateSystemMessage, ID) == 0x000000, "Member 'FAccelByteModelsActionUpdateSystemMessage::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsActionUpdateSystemMessage, Read) == 0x000010, "Member 'FAccelByteModelsActionUpdateSystemMessage::Read' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsActionUpdateSystemMessage, Keep) == 0x000011, "Member 'FAccelByteModelsActionUpdateSystemMessage::Keep' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemRecurring
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsItemRecurring final
{
public:
	EAccelByteCycle                               Cycle;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixedFreeDays;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FixedTrialCycles;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GraceDays;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemRecurring) == 0x000004, "Wrong alignment on FAccelByteModelsItemRecurring");
static_assert(sizeof(FAccelByteModelsItemRecurring) == 0x000010, "Wrong size on FAccelByteModelsItemRecurring");
static_assert(offsetof(FAccelByteModelsItemRecurring, Cycle) == 0x000000, "Member 'FAccelByteModelsItemRecurring::Cycle' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRecurring, FixedFreeDays) == 0x000004, "Member 'FAccelByteModelsItemRecurring::FixedFreeDays' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRecurring, FixedTrialCycles) == 0x000008, "Member 'FAccelByteModelsItemRecurring::FixedTrialCycles' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRecurring, GraceDays) == 0x00000C, "Member 'FAccelByteModelsItemRecurring::GraceDays' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelItemPredicate
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelItemPredicate final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelBytePredicateType                       PredicateType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comparison;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyOf;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Values;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelItemPredicate) == 0x000008, "Wrong alignment on FAccelByteModelItemPredicate");
static_assert(sizeof(FAccelByteModelItemPredicate) == 0x000050, "Wrong size on FAccelByteModelItemPredicate");
static_assert(offsetof(FAccelByteModelItemPredicate, Name) == 0x000000, "Member 'FAccelByteModelItemPredicate::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemPredicate, PredicateType) == 0x000010, "Member 'FAccelByteModelItemPredicate::PredicateType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemPredicate, Comparison) == 0x000018, "Member 'FAccelByteModelItemPredicate::Comparison' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemPredicate, AnyOf) == 0x000028, "Member 'FAccelByteModelItemPredicate::AnyOf' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemPredicate, Values) == 0x000030, "Member 'FAccelByteModelItemPredicate::Values' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemPredicate, Value) == 0x000040, "Member 'FAccelByteModelItemPredicate::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelItemConditionGroup
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelItemConditionGroup final
{
public:
	TArray<struct FAccelByteModelItemPredicate>   Predicates;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Operator;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelItemConditionGroup) == 0x000008, "Wrong alignment on FAccelByteModelItemConditionGroup");
static_assert(sizeof(FAccelByteModelItemConditionGroup) == 0x000020, "Wrong size on FAccelByteModelItemConditionGroup");
static_assert(offsetof(FAccelByteModelItemConditionGroup, Predicates) == 0x000000, "Member 'FAccelByteModelItemConditionGroup::Predicates' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemConditionGroup, Operator) == 0x000010, "Member 'FAccelByteModelItemConditionGroup::Operator' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelItemPurchaseCondition
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelItemPurchaseCondition final
{
public:
	TArray<struct FAccelByteModelItemConditionGroup> ConditionGroups;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelItemPurchaseCondition) == 0x000008, "Wrong alignment on FAccelByteModelItemPurchaseCondition");
static_assert(sizeof(FAccelByteModelItemPurchaseCondition) == 0x000010, "Wrong size on FAccelByteModelItemPurchaseCondition");
static_assert(offsetof(FAccelByteModelItemPurchaseCondition, ConditionGroups) == 0x000000, "Member 'FAccelByteModelItemPurchaseCondition::ConditionGroups' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemImage
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsItemImage final
{
public:
	class FString                                 As;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Caption;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SmallImageUrl;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemImage) == 0x000008, "Wrong alignment on FAccelByteModelsItemImage");
static_assert(sizeof(FAccelByteModelsItemImage) == 0x000048, "Wrong size on FAccelByteModelsItemImage");
static_assert(offsetof(FAccelByteModelsItemImage, As) == 0x000000, "Member 'FAccelByteModelsItemImage::As' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, Caption) == 0x000010, "Member 'FAccelByteModelsItemImage::Caption' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, Height) == 0x000020, "Member 'FAccelByteModelsItemImage::Height' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, Width) == 0x000024, "Member 'FAccelByteModelsItemImage::Width' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, ImageUrl) == 0x000028, "Member 'FAccelByteModelsItemImage::ImageUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, SmallImageUrl) == 0x000038, "Member 'FAccelByteModelsItemImage::SmallImageUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelItemBoxItem
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelItemBoxItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemType;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndDate;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelItemBoxItem) == 0x000008, "Wrong alignment on FAccelByteModelItemBoxItem");
static_assert(sizeof(FAccelByteModelItemBoxItem) == 0x000048, "Wrong size on FAccelByteModelItemBoxItem");
static_assert(offsetof(FAccelByteModelItemBoxItem, ItemId) == 0x000000, "Member 'FAccelByteModelItemBoxItem::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemBoxItem, ItemSku) == 0x000010, "Member 'FAccelByteModelItemBoxItem::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemBoxItem, ItemType) == 0x000020, "Member 'FAccelByteModelItemBoxItem::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemBoxItem, Duration) == 0x000030, "Member 'FAccelByteModelItemBoxItem::Duration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemBoxItem, EndDate) == 0x000038, "Member 'FAccelByteModelItemBoxItem::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelItemBoxItem, Count) == 0x000040, "Member 'FAccelByteModelItemBoxItem::Count' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelItemOptionBoxConfig
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelItemOptionBoxConfig final
{
public:
	TArray<struct FAccelByteModelItemBoxItem>     BoxItems;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelItemOptionBoxConfig) == 0x000008, "Wrong alignment on FAccelByteModelItemOptionBoxConfig");
static_assert(sizeof(FAccelByteModelItemOptionBoxConfig) == 0x000010, "Wrong size on FAccelByteModelItemOptionBoxConfig");
static_assert(offsetof(FAccelByteModelItemOptionBoxConfig, BoxItems) == 0x000000, "Member 'FAccelByteModelItemOptionBoxConfig::BoxItems' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemRegionDataItem
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsItemRegionDataItem final
{
public:
	int64                                         Price;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPercentage;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountAmount;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemCurrencyType                    CurrencyType;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyNamespace;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrialPrice;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PurchaseAt;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DiscountPurchaseAt;                                // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DiscountExpireAt;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemRegionDataItem) == 0x000008, "Wrong alignment on FAccelByteModelsItemRegionDataItem");
static_assert(sizeof(FAccelByteModelsItemRegionDataItem) == 0x000068, "Wrong size on FAccelByteModelsItemRegionDataItem");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, Price) == 0x000000, "Member 'FAccelByteModelsItemRegionDataItem::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountPercentage) == 0x000008, "Member 'FAccelByteModelsItemRegionDataItem::DiscountPercentage' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountAmount) == 0x00000C, "Member 'FAccelByteModelsItemRegionDataItem::DiscountAmount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountedPrice) == 0x000010, "Member 'FAccelByteModelsItemRegionDataItem::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, CurrencyCode) == 0x000018, "Member 'FAccelByteModelsItemRegionDataItem::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, CurrencyType) == 0x000028, "Member 'FAccelByteModelsItemRegionDataItem::CurrencyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, CurrencyNamespace) == 0x000030, "Member 'FAccelByteModelsItemRegionDataItem::CurrencyNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, TrialPrice) == 0x000040, "Member 'FAccelByteModelsItemRegionDataItem::TrialPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, PurchaseAt) == 0x000048, "Member 'FAccelByteModelsItemRegionDataItem::PurchaseAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, ExpireAt) == 0x000050, "Member 'FAccelByteModelsItemRegionDataItem::ExpireAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountPurchaseAt) == 0x000058, "Member 'FAccelByteModelsItemRegionDataItem::DiscountPurchaseAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountExpireAt) == 0x000060, "Member 'FAccelByteModelsItemRegionDataItem::DiscountExpireAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemSaleConfig
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsItemSaleConfig final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsItemSaleConfig) == 0x000008, "Wrong alignment on FAccelByteModelsItemSaleConfig");
static_assert(sizeof(FAccelByteModelsItemSaleConfig) == 0x000018, "Wrong size on FAccelByteModelsItemSaleConfig");
static_assert(offsetof(FAccelByteModelsItemSaleConfig, CurrencyCode) == 0x000000, "Member 'FAccelByteModelsItemSaleConfig::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemSaleConfig, Price) == 0x000010, "Member 'FAccelByteModelsItemSaleConfig::Price' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemInfo
// 0x02D0 (0x02D0 - 0x0000)
struct FAccelByteModelsItemInfo
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongDescription;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppType;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonType                          SeasonType;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     EntitlementType;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryPath;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Listable;                                          // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Purchasable;                                       // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SectionExclusive;                                  // 0x00CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetNamespace;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCurrencyCode;                                // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetItemId;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailUrl;                                      // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemRegionDataItem> RegionData;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemRecurring          Recurring;                                         // 0x0130(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    ItemQty;                                           // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         BoundItemIds;                                      // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCountPerUser;                                   // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Clazz;                                             // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoothName;                                         // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Ext;                                               // 0x0200(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelItemPurchaseCondition   PurchaseCondition;                                 // 0x0250(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelItemOptionBoxConfig     OptionBoxConfig;                                   // 0x0260(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Fresh;                                             // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSellable;                                         // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sellable;                                          // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_273[0x5];                                      // 0x0273(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsItemSaleConfig         SaleConfig;                                        // 0x0278(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     LocalExt;                                          // 0x0290(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemLootBoxConfig      LootBoxConfig;                                     // 0x02B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Flexible;                                          // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsItemInfo");
static_assert(sizeof(FAccelByteModelsItemInfo) == 0x0002D0, "Wrong size on FAccelByteModelsItemInfo");
static_assert(offsetof(FAccelByteModelsItemInfo, Title) == 0x000000, "Member 'FAccelByteModelsItemInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Description) == 0x000010, "Member 'FAccelByteModelsItemInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, LongDescription) == 0x000020, "Member 'FAccelByteModelsItemInfo::LongDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemId) == 0x000030, "Member 'FAccelByteModelsItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, AppId) == 0x000040, "Member 'FAccelByteModelsItemInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, AppType) == 0x000050, "Member 'FAccelByteModelsItemInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, SeasonType) == 0x000060, "Member 'FAccelByteModelsItemInfo::SeasonType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, BaseAppId) == 0x000068, "Member 'FAccelByteModelsItemInfo::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Sku) == 0x000078, "Member 'FAccelByteModelsItemInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Namespace) == 0x000088, "Member 'FAccelByteModelsItemInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Name) == 0x000098, "Member 'FAccelByteModelsItemInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, EntitlementType) == 0x0000A8, "Member 'FAccelByteModelsItemInfo::EntitlementType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, UseCount) == 0x0000AC, "Member 'FAccelByteModelsItemInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Stackable) == 0x0000B0, "Member 'FAccelByteModelsItemInfo::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, CategoryPath) == 0x0000B8, "Member 'FAccelByteModelsItemInfo::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Status) == 0x0000C8, "Member 'FAccelByteModelsItemInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Listable) == 0x0000C9, "Member 'FAccelByteModelsItemInfo::Listable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Purchasable) == 0x0000CA, "Member 'FAccelByteModelsItemInfo::Purchasable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, SectionExclusive) == 0x0000CB, "Member 'FAccelByteModelsItemInfo::SectionExclusive' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemType) == 0x0000CC, "Member 'FAccelByteModelsItemInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, TargetNamespace) == 0x0000D0, "Member 'FAccelByteModelsItemInfo::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, TargetCurrencyCode) == 0x0000E0, "Member 'FAccelByteModelsItemInfo::TargetCurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, TargetItemId) == 0x0000F0, "Member 'FAccelByteModelsItemInfo::TargetItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Images) == 0x000100, "Member 'FAccelByteModelsItemInfo::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ThumbnailUrl) == 0x000110, "Member 'FAccelByteModelsItemInfo::ThumbnailUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, RegionData) == 0x000120, "Member 'FAccelByteModelsItemInfo::RegionData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Recurring) == 0x000130, "Member 'FAccelByteModelsItemInfo::Recurring' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemIds) == 0x000140, "Member 'FAccelByteModelsItemInfo::ItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemQty) == 0x000150, "Member 'FAccelByteModelsItemInfo::ItemQty' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, BoundItemIds) == 0x0001A0, "Member 'FAccelByteModelsItemInfo::BoundItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Tags) == 0x0001B0, "Member 'FAccelByteModelsItemInfo::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Features) == 0x0001C0, "Member 'FAccelByteModelsItemInfo::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, MaxCountPerUser) == 0x0001D0, "Member 'FAccelByteModelsItemInfo::MaxCountPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, MaxCount) == 0x0001D4, "Member 'FAccelByteModelsItemInfo::MaxCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Clazz) == 0x0001D8, "Member 'FAccelByteModelsItemInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, BoothName) == 0x0001E8, "Member 'FAccelByteModelsItemInfo::BoothName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, DisplayOrder) == 0x0001F8, "Member 'FAccelByteModelsItemInfo::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Ext) == 0x000200, "Member 'FAccelByteModelsItemInfo::Ext' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Region) == 0x000220, "Member 'FAccelByteModelsItemInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Language) == 0x000230, "Member 'FAccelByteModelsItemInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, CreatedAt) == 0x000240, "Member 'FAccelByteModelsItemInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, UpdatedAt) == 0x000248, "Member 'FAccelByteModelsItemInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, PurchaseCondition) == 0x000250, "Member 'FAccelByteModelsItemInfo::PurchaseCondition' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, OptionBoxConfig) == 0x000260, "Member 'FAccelByteModelsItemInfo::OptionBoxConfig' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Fresh) == 0x000270, "Member 'FAccelByteModelsItemInfo::Fresh' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, bSellable) == 0x000271, "Member 'FAccelByteModelsItemInfo::bSellable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Sellable) == 0x000272, "Member 'FAccelByteModelsItemInfo::Sellable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, SaleConfig) == 0x000278, "Member 'FAccelByteModelsItemInfo::SaleConfig' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, LocalExt) == 0x000290, "Member 'FAccelByteModelsItemInfo::LocalExt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, LootBoxConfig) == 0x0002B0, "Member 'FAccelByteModelsItemInfo::LootBoxConfig' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Flexible) == 0x0002C8, "Member 'FAccelByteModelsItemInfo::Flexible' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserRecentPlayerData
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsSessionBrowserRecentPlayerData final
{
public:
	class FString                                 Other_id;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Other_display_name;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserRecentPlayerData) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserRecentPlayerData");
static_assert(sizeof(FAccelByteModelsSessionBrowserRecentPlayerData) == 0x000020, "Wrong size on FAccelByteModelsSessionBrowserRecentPlayerData");
static_assert(offsetof(FAccelByteModelsSessionBrowserRecentPlayerData, Other_id) == 0x000000, "Member 'FAccelByteModelsSessionBrowserRecentPlayerData::Other_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserRecentPlayerData, Other_display_name) == 0x000010, "Member 'FAccelByteModelsSessionBrowserRecentPlayerData::Other_display_name' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedUserAchievement
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsPaginatedUserAchievement final
{
public:
	struct FAccelByteModelsCountInfo              CountInfo;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsUserAchievement> Data;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0020(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedUserAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedUserAchievement");
static_assert(sizeof(FAccelByteModelsPaginatedUserAchievement) == 0x000060, "Wrong size on FAccelByteModelsPaginatedUserAchievement");
static_assert(offsetof(FAccelByteModelsPaginatedUserAchievement, CountInfo) == 0x000000, "Member 'FAccelByteModelsPaginatedUserAchievement::CountInfo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedUserAchievement, Data) == 0x000010, "Member 'FAccelByteModelsPaginatedUserAchievement::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedUserAchievement, Paging) == 0x000020, "Member 'FAccelByteModelsPaginatedUserAchievement::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemInfo
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsUserStatItemInfo final
{
public:
	class FString                                 CreatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 userId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0078(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemInfo");
static_assert(sizeof(FAccelByteModelsUserStatItemInfo) == 0x000098, "Wrong size on FAccelByteModelsUserStatItemInfo");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, CreatedAt) == 0x000000, "Member 'FAccelByteModelsUserStatItemInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsUserStatItemInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, userId) == 0x000020, "Member 'FAccelByteModelsUserStatItemInfo::userId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, StatCode) == 0x000030, "Member 'FAccelByteModelsUserStatItemInfo::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, StatName) == 0x000040, "Member 'FAccelByteModelsUserStatItemInfo::StatName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, Tags) == 0x000050, "Member 'FAccelByteModelsUserStatItemInfo::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, UpdatedAt) == 0x000060, "Member 'FAccelByteModelsUserStatItemInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, Value) == 0x000070, "Member 'FAccelByteModelsUserStatItemInfo::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, AdditionalData) == 0x000078, "Member 'FAccelByteModelsUserStatItemInfo::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUserStatItemPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsUserStatItemInfo> Data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatItemPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsUserStatItemPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsUserStatItemPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsUserStatItemPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsUserStatItemPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsUserStatItemPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDataUpdateStringRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPartyDataUpdateStringRequest final
{
public:
	class FString                                 UpdatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Custom_attribute;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDataUpdateStringRequest) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDataUpdateStringRequest");
static_assert(sizeof(FAccelByteModelsPartyDataUpdateStringRequest) == 0x000030, "Wrong size on FAccelByteModelsPartyDataUpdateStringRequest");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateStringRequest, UpdatedAt) == 0x000000, "Member 'FAccelByteModelsPartyDataUpdateStringRequest::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateStringRequest, Custom_attribute) == 0x000010, "Member 'FAccelByteModelsPartyDataUpdateStringRequest::Custom_attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserGlobalAchievement
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsUserGlobalAchievement final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Name;                                              // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AchievementCode;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConvertAchievementStatus                     Status;                                            // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LatestValue;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AchievedAt;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserGlobalAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsUserGlobalAchievement");
static_assert(sizeof(FAccelByteModelsUserGlobalAchievement) == 0x0000A0, "Wrong size on FAccelByteModelsUserGlobalAchievement");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, Id) == 0x000000, "Member 'FAccelByteModelsUserGlobalAchievement::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, Name) == 0x000010, "Member 'FAccelByteModelsUserGlobalAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, AchievementCode) == 0x000060, "Member 'FAccelByteModelsUserGlobalAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, Namespace) == 0x000070, "Member 'FAccelByteModelsUserGlobalAchievement::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, Status) == 0x000080, "Member 'FAccelByteModelsUserGlobalAchievement::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, LatestValue) == 0x000084, "Member 'FAccelByteModelsUserGlobalAchievement::LatestValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, AchievedAt) == 0x000088, "Member 'FAccelByteModelsUserGlobalAchievement::AchievedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, CreatedAt) == 0x000090, "Member 'FAccelByteModelsUserGlobalAchievement::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGlobalAchievement, UpdatedAt) == 0x000098, "Member 'FAccelByteModelsUserGlobalAchievement::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedUserGlobalAchievement
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedUserGlobalAchievement final
{
public:
	TArray<struct FAccelByteModelsUserGlobalAchievement> Data;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedUserGlobalAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedUserGlobalAchievement");
static_assert(sizeof(FAccelByteModelsPaginatedUserGlobalAchievement) == 0x000050, "Wrong size on FAccelByteModelsPaginatedUserGlobalAchievement");
static_assert(offsetof(FAccelByteModelsPaginatedUserGlobalAchievement, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedUserGlobalAchievement::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedUserGlobalAchievement, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedUserGlobalAchievement::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardGetUserRankingPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsLeaderboardGetUserRankingPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardGetUserRankingPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardGetUserRankingPayload");
static_assert(sizeof(FAccelByteModelsLeaderboardGetUserRankingPayload) == 0x000038, "Wrong size on FAccelByteModelsLeaderboardGetUserRankingPayload");
static_assert(offsetof(FAccelByteModelsLeaderboardGetUserRankingPayload, LeaderboardCode) == 0x000018, "Member 'FAccelByteModelsLeaderboardGetUserRankingPayload::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardGetUserRankingPayload, UserId) == 0x000028, "Member 'FAccelByteModelsLeaderboardGetUserRankingPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCPayloadUrl
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUGCPayloadUrl final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCPayloadUrl) == 0x000008, "Wrong alignment on FAccelByteModelsUGCPayloadUrl");
static_assert(sizeof(FAccelByteModelsUGCPayloadUrl) == 0x000020, "Wrong size on FAccelByteModelsUGCPayloadUrl");
static_assert(offsetof(FAccelByteModelsUGCPayloadUrl, Source) == 0x000000, "Member 'FAccelByteModelsUGCPayloadUrl::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCPayloadUrl, Url) == 0x000010, "Member 'FAccelByteModelsUGCPayloadUrl::Url' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCModifyUGCResponseV2
// 0x0108 (0x0108 - 0x0000)
struct FAccelByteModelsUGCModifyUGCResponseV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentNamespace;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedTime;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x00E8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCModifyUGCResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCModifyUGCResponseV2");
static_assert(sizeof(FAccelByteModelsUGCModifyUGCResponseV2) == 0x000108, "Wrong size on FAccelByteModelsUGCModifyUGCResponseV2");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, ContentType) == 0x000010, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, CreatedTime) == 0x000020, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, FileExtension) == 0x000028, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, Id) == 0x000038, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, IsHidden) == 0x000048, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::IsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, IsOfficial) == 0x000049, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, Name) == 0x000050, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, Namespace) == 0x000060, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, ParentNamespace) == 0x000070, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::ParentNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, PayloadUrl) == 0x000080, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, ShareCode) == 0x000090, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, Type) == 0x0000A0, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, SubType) == 0x0000B0, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, Tags) == 0x0000C0, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, UpdatedTime) == 0x0000D0, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::UpdatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, UserId) == 0x0000D8, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCModifyUGCResponseV2, CustomAttributes) == 0x0000E8, "Member 'FAccelByteModelsUGCModifyUGCResponseV2::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserPointV3
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUserPointV3 final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserPointV3) == 0x000008, "Wrong alignment on FAccelByteModelsUserPointV3");
static_assert(sizeof(FAccelByteModelsUserPointV3) == 0x000038, "Wrong size on FAccelByteModelsUserPointV3");
static_assert(offsetof(FAccelByteModelsUserPointV3, Hidden) == 0x000000, "Member 'FAccelByteModelsUserPointV3::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPointV3, Point) == 0x000004, "Member 'FAccelByteModelsUserPointV3::Point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPointV3, UserId) == 0x000008, "Member 'FAccelByteModelsUserPointV3::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPointV3, AdditionalData) == 0x000018, "Member 'FAccelByteModelsUserPointV3::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalAchievementContributors
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsGlobalAchievementContributors final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementCode;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributedValue;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalAchievementContributors) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalAchievementContributors");
static_assert(sizeof(FAccelByteModelsGlobalAchievementContributors) == 0x000058, "Wrong size on FAccelByteModelsGlobalAchievementContributors");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, Id) == 0x000000, "Member 'FAccelByteModelsGlobalAchievementContributors::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, Namespace) == 0x000010, "Member 'FAccelByteModelsGlobalAchievementContributors::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, AchievementCode) == 0x000020, "Member 'FAccelByteModelsGlobalAchievementContributors::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, UserId) == 0x000030, "Member 'FAccelByteModelsGlobalAchievementContributors::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, ContributedValue) == 0x000040, "Member 'FAccelByteModelsGlobalAchievementContributors::ContributedValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, CreatedAt) == 0x000048, "Member 'FAccelByteModelsGlobalAchievementContributors::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributors, UpdatedAt) == 0x000050, "Member 'FAccelByteModelsGlobalAchievementContributors::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedGlobalAchievementContributors
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedGlobalAchievementContributors final
{
public:
	TArray<struct FAccelByteModelsGlobalAchievementContributors> Data;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedGlobalAchievementContributors) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedGlobalAchievementContributors");
static_assert(sizeof(FAccelByteModelsPaginatedGlobalAchievementContributors) == 0x000050, "Wrong size on FAccelByteModelsPaginatedGlobalAchievementContributors");
static_assert(offsetof(FAccelByteModelsPaginatedGlobalAchievementContributors, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedGlobalAchievementContributors::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedGlobalAchievementContributors, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedGlobalAchievementContributors::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalAchievementContributed
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsGlobalAchievementContributed final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Name;                                              // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementCode;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributedValue;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanClaimReward;                                    // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsGlobalAchievementContributed) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalAchievementContributed");
static_assert(sizeof(FAccelByteModelsGlobalAchievementContributed) == 0x000098, "Wrong size on FAccelByteModelsGlobalAchievementContributed");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, Id) == 0x000000, "Member 'FAccelByteModelsGlobalAchievementContributed::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, Name) == 0x000010, "Member 'FAccelByteModelsGlobalAchievementContributed::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, Namespace) == 0x000060, "Member 'FAccelByteModelsGlobalAchievementContributed::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, AchievementCode) == 0x000070, "Member 'FAccelByteModelsGlobalAchievementContributed::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, UserId) == 0x000080, "Member 'FAccelByteModelsGlobalAchievementContributed::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, ContributedValue) == 0x000090, "Member 'FAccelByteModelsGlobalAchievementContributed::ContributedValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalAchievementContributed, CanClaimReward) == 0x000094, "Member 'FAccelByteModelsGlobalAchievementContributed::CanClaimReward' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedGlobalAchievementUserContributed
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedGlobalAchievementUserContributed final
{
public:
	TArray<struct FAccelByteModelsGlobalAchievementContributed> Data;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedGlobalAchievementUserContributed) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedGlobalAchievementUserContributed");
static_assert(sizeof(FAccelByteModelsPaginatedGlobalAchievementUserContributed) == 0x000050, "Wrong size on FAccelByteModelsPaginatedGlobalAchievementUserContributed");
static_assert(offsetof(FAccelByteModelsPaginatedGlobalAchievementUserContributed, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedGlobalAchievementUserContributed::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedGlobalAchievementUserContributed, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedGlobalAchievementUserContributed::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatAddUserToTopicRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsChatAddUserToTopicRequest final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatAddUserToTopicRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChatAddUserToTopicRequest");
static_assert(sizeof(FAccelByteModelsChatAddUserToTopicRequest) == 0x000020, "Wrong size on FAccelByteModelsChatAddUserToTopicRequest");
static_assert(offsetof(FAccelByteModelsChatAddUserToTopicRequest, TopicId) == 0x000000, "Member 'FAccelByteModelsChatAddUserToTopicRequest::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatAddUserToTopicRequest, UserId) == 0x000010, "Member 'FAccelByteModelsChatAddUserToTopicRequest::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsUserStatItemCreatedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StatCodes;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatItemCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemCreatedPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemCreatedPayload");
static_assert(offsetof(FAccelByteModelsUserStatItemCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsUserStatItemCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemCreatedPayload, StatCodes) == 0x000028, "Member 'FAccelByteModelsUserStatItemCreatedPayload::StatCodes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCSearchContentsResponse
// 0x0180 (0x0180 - 0x0000)
struct FAccelByteModelsUGCSearchContentsResponse final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedTime;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdState            CreatorFollowState;                                // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownloadCount;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileExtension;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Groups;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LikeCount;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserIdState            LikeState;                                         // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelSpayLoadURL>     PayloadURL;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelSpayLoadURL>     PreviewURL;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelScreenshots>     Screenshots;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedTime;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0160(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCSearchContentsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCSearchContentsResponse");
static_assert(sizeof(FAccelByteModelsUGCSearchContentsResponse) == 0x000180, "Wrong size on FAccelByteModelsUGCSearchContentsResponse");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCSearchContentsResponse::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, CreatedTime) == 0x000010, "Member 'FAccelByteModelsUGCSearchContentsResponse::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, CreatorFollowState) == 0x000020, "Member 'FAccelByteModelsUGCSearchContentsResponse::CreatorFollowState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, CreatorName) == 0x000038, "Member 'FAccelByteModelsUGCSearchContentsResponse::CreatorName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, DownloadCount) == 0x000048, "Member 'FAccelByteModelsUGCSearchContentsResponse::DownloadCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, FileExtension) == 0x000050, "Member 'FAccelByteModelsUGCSearchContentsResponse::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Groups) == 0x000060, "Member 'FAccelByteModelsUGCSearchContentsResponse::Groups' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Id) == 0x000070, "Member 'FAccelByteModelsUGCSearchContentsResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, IsHidden) == 0x000080, "Member 'FAccelByteModelsUGCSearchContentsResponse::IsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, IsOfficial) == 0x000081, "Member 'FAccelByteModelsUGCSearchContentsResponse::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, LikeCount) == 0x000084, "Member 'FAccelByteModelsUGCSearchContentsResponse::LikeCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, LikeState) == 0x000088, "Member 'FAccelByteModelsUGCSearchContentsResponse::LikeState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Name) == 0x0000A0, "Member 'FAccelByteModelsUGCSearchContentsResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Namespace) == 0x0000B0, "Member 'FAccelByteModelsUGCSearchContentsResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Payload) == 0x0000C0, "Member 'FAccelByteModelsUGCSearchContentsResponse::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, PayloadURL) == 0x0000D0, "Member 'FAccelByteModelsUGCSearchContentsResponse::PayloadURL' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, PreviewURL) == 0x0000E0, "Member 'FAccelByteModelsUGCSearchContentsResponse::PreviewURL' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Screenshots) == 0x0000F0, "Member 'FAccelByteModelsUGCSearchContentsResponse::Screenshots' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, ShareCode) == 0x000100, "Member 'FAccelByteModelsUGCSearchContentsResponse::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, SubType) == 0x000110, "Member 'FAccelByteModelsUGCSearchContentsResponse::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Tags) == 0x000120, "Member 'FAccelByteModelsUGCSearchContentsResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, Type) == 0x000130, "Member 'FAccelByteModelsUGCSearchContentsResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, UpdatedTime) == 0x000140, "Member 'FAccelByteModelsUGCSearchContentsResponse::UpdatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, UserId) == 0x000150, "Member 'FAccelByteModelsUGCSearchContentsResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsResponse, CustomAttributes) == 0x000160, "Member 'FAccelByteModelsUGCSearchContentsResponse::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateUserStatItemWithStatCode
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUpdateUserStatItemWithStatCode final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticUpdateStrategy             UpdateStrategy;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateUserStatItemWithStatCode) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateUserStatItemWithStatCode");
static_assert(sizeof(FAccelByteModelsUpdateUserStatItemWithStatCode) == 0x000038, "Wrong size on FAccelByteModelsUpdateUserStatItemWithStatCode");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemWithStatCode, StatCode) == 0x000000, "Member 'FAccelByteModelsUpdateUserStatItemWithStatCode::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemWithStatCode, UpdateStrategy) == 0x000010, "Member 'FAccelByteModelsUpdateUserStatItemWithStatCode::UpdateStrategy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemWithStatCode, Value) == 0x000014, "Member 'FAccelByteModelsUpdateUserStatItemWithStatCode::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemWithStatCode, AdditionalData) == 0x000018, "Member 'FAccelByteModelsUpdateUserStatItemWithStatCode::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSectionInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsSectionInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongDescription;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SectionId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ViewId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDate;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemInfo>       CurrentRotationItems;                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CurrentRotationExpireAt;                           // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     LocalExt;                                          // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSectionInfo) == 0x000008, "Wrong alignment on FAccelByteModelsSectionInfo");
static_assert(sizeof(FAccelByteModelsSectionInfo) == 0x0000D0, "Wrong size on FAccelByteModelsSectionInfo");
static_assert(offsetof(FAccelByteModelsSectionInfo, Title) == 0x000000, "Member 'FAccelByteModelsSectionInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, Description) == 0x000010, "Member 'FAccelByteModelsSectionInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, LongDescription) == 0x000020, "Member 'FAccelByteModelsSectionInfo::LongDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, SectionId) == 0x000030, "Member 'FAccelByteModelsSectionInfo::SectionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, Namespace) == 0x000040, "Member 'FAccelByteModelsSectionInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, ViewId) == 0x000050, "Member 'FAccelByteModelsSectionInfo::ViewId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, Name) == 0x000060, "Member 'FAccelByteModelsSectionInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, Active) == 0x000070, "Member 'FAccelByteModelsSectionInfo::Active' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, StartDate) == 0x000078, "Member 'FAccelByteModelsSectionInfo::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, EndDate) == 0x000080, "Member 'FAccelByteModelsSectionInfo::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, CurrentRotationItems) == 0x000088, "Member 'FAccelByteModelsSectionInfo::CurrentRotationItems' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, CurrentRotationExpireAt) == 0x000098, "Member 'FAccelByteModelsSectionInfo::CurrentRotationExpireAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, CreatedAt) == 0x0000A0, "Member 'FAccelByteModelsSectionInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, UpdatedAt) == 0x0000A8, "Member 'FAccelByteModelsSectionInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSectionInfo, LocalExt) == 0x0000B0, "Member 'FAccelByteModelsSectionInfo::LocalExt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCCreateUGCResponseV2
// 0x0118 (0x0118 - 0x0000)
struct FAccelByteModelsUGCCreateUGCResponseV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileLocation;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentNamespace;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedTime;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x00F8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCCreateUGCResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCCreateUGCResponseV2");
static_assert(sizeof(FAccelByteModelsUGCCreateUGCResponseV2) == 0x000118, "Wrong size on FAccelByteModelsUGCCreateUGCResponseV2");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, ContentType) == 0x000010, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, CreatedTime) == 0x000020, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, FileExtension) == 0x000028, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, FileLocation) == 0x000038, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::FileLocation' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, Id) == 0x000048, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, IsHidden) == 0x000058, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::IsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, IsOfficial) == 0x000059, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, Name) == 0x000060, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, Namespace) == 0x000070, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, ParentNamespace) == 0x000080, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::ParentNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, PayloadUrl) == 0x000090, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, ShareCode) == 0x0000A0, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, Type) == 0x0000B0, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, SubType) == 0x0000C0, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, Tags) == 0x0000D0, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, UpdatedTime) == 0x0000E0, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::UpdatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, UserId) == 0x0000E8, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreateUGCResponseV2, CustomAttributes) == 0x0000F8, "Member 'FAccelByteModelsUGCCreateUGCResponseV2::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeason
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsSeason final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassStatus                    Status;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishedAt;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeason) == 0x000008, "Wrong alignment on FAccelByteModelsSeason");
static_assert(sizeof(FAccelByteModelsSeason) == 0x000050, "Wrong size on FAccelByteModelsSeason");
static_assert(offsetof(FAccelByteModelsSeason, Id) == 0x000000, "Member 'FAccelByteModelsSeason::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Namespace) == 0x000010, "Member 'FAccelByteModelsSeason::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Name) == 0x000020, "Member 'FAccelByteModelsSeason::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Start) == 0x000030, "Member 'FAccelByteModelsSeason::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, End) == 0x000038, "Member 'FAccelByteModelsSeason::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Status) == 0x000040, "Member 'FAccelByteModelsSeason::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, PublishedAt) == 0x000048, "Member 'FAccelByteModelsSeason::PublishedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonInfoClaimRewardAsJsonObject
// 0x0170 (0x0170 - 0x0000)
struct FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EnrolledAt;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnrolledPasses;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTierIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTierIndex;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cleared;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSeason                 Season;                                            // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FJsonObjectWrapper>        ToClaimRewards;                                    // 0x00C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FJsonObjectWrapper>        ClaimingRewards;                                   // 0x0110(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject");
static_assert(sizeof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject) == 0x000170, "Wrong size on FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Id) == 0x000000, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, UserId) == 0x000020, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, SeasonId) == 0x000030, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, EnrolledAt) == 0x000040, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::EnrolledAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, EnrolledPasses) == 0x000048, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::EnrolledPasses' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, CurrentTierIndex) == 0x000058, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::CurrentTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, LastTierIndex) == 0x00005C, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::LastTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, RequiredExp) == 0x000060, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, CurrentExp) == 0x000064, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::CurrentExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Cleared) == 0x000068, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Cleared' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Season) == 0x000070, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Season' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, ToClaimRewards) == 0x0000C0, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::ToClaimRewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, ClaimingRewards) == 0x000110, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::ClaimingRewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, CreatedAt) == 0x000160, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, UpdatedAt) == 0x000168, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicTag
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPublicTag final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicTag) == 0x000008, "Wrong alignment on FAccelByteModelsPublicTag");
static_assert(sizeof(FAccelByteModelsPublicTag) == 0x000030, "Wrong size on FAccelByteModelsPublicTag");
static_assert(offsetof(FAccelByteModelsPublicTag, Name) == 0x000000, "Member 'FAccelByteModelsPublicTag::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicTag, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicTag::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicTag, CreatedAt) == 0x000020, "Member 'FAccelByteModelsPublicTag::CreatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedPublicTag
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedPublicTag final
{
public:
	TArray<struct FAccelByteModelsPublicTag>      Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedPublicTag) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedPublicTag");
static_assert(sizeof(FAccelByteModelsPaginatedPublicTag) == 0x000050, "Wrong size on FAccelByteModelsPaginatedPublicTag");
static_assert(offsetof(FAccelByteModelsPaginatedPublicTag, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedPublicTag::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedPublicTag, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedPublicTag::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbyType
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsLobbyType
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbyType) == 0x000008, "Wrong alignment on FAccelByteModelsLobbyType");
static_assert(sizeof(FAccelByteModelsLobbyType) == 0x000010, "Wrong size on FAccelByteModelsLobbyType");
static_assert(offsetof(FAccelByteModelsLobbyType, Type) == 0x000000, "Member 'FAccelByteModelsLobbyType::Type' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbyBaseResponse
// 0x0020 (0x0030 - 0x0010)
struct FAccelByteModelsLobbyBaseResponse : public FAccelByteModelsLobbyType
{
public:
	class FString                                 Id;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbyBaseResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLobbyBaseResponse");
static_assert(sizeof(FAccelByteModelsLobbyBaseResponse) == 0x000030, "Wrong size on FAccelByteModelsLobbyBaseResponse");
static_assert(offsetof(FAccelByteModelsLobbyBaseResponse, Id) == 0x000010, "Member 'FAccelByteModelsLobbyBaseResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLobbyBaseResponse, Code) == 0x000020, "Member 'FAccelByteModelsLobbyBaseResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetFriendshipStatusStringResponse
// 0x0020 (0x0050 - 0x0030)
struct FAccelByteModelsGetFriendshipStatusStringResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 friendshipStatus;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendId;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetFriendshipStatusStringResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetFriendshipStatusStringResponse");
static_assert(sizeof(FAccelByteModelsGetFriendshipStatusStringResponse) == 0x000050, "Wrong size on FAccelByteModelsGetFriendshipStatusStringResponse");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusStringResponse, friendshipStatus) == 0x000030, "Member 'FAccelByteModelsGetFriendshipStatusStringResponse::friendshipStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusStringResponse, FriendId) == 0x000040, "Member 'FAccelByteModelsGetFriendshipStatusStringResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLocalizedPolicyVersionObject
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsLocalizedPolicyVersionObject final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocaleCode;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentLocation;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentVersionIdentifier;                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishedDate;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultSelection;                                // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsLocalizedPolicyVersionObject) == 0x000008, "Wrong alignment on FAccelByteModelsLocalizedPolicyVersionObject");
static_assert(sizeof(FAccelByteModelsLocalizedPolicyVersionObject) == 0x000090, "Wrong size on FAccelByteModelsLocalizedPolicyVersionObject");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, Id) == 0x000000, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, CreatedAt) == 0x000010, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, UpdatedAt) == 0x000018, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, LocaleCode) == 0x000020, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::LocaleCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, ContentType) == 0x000030, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, AttachmentLocation) == 0x000040, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::AttachmentLocation' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, AttachmentVersionIdentifier) == 0x000050, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::AttachmentVersionIdentifier' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, Description) == 0x000060, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, Status) == 0x000070, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, PublishedDate) == 0x000080, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::PublishedDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, IsDefaultSelection) == 0x000088, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::IsDefaultSelection' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPolicyVersionWithLocalizedVersionObject
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsPolicyVersionWithLocalizedVersionObject final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayVersion;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishedDate;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsLocalizedPolicyVersionObject> LocalizedPolicyVersions;             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsCommitted;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCrucial;                                         // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInEffect;                                        // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject) == 0x000008, "Wrong alignment on FAccelByteModelsPolicyVersionWithLocalizedVersionObject");
static_assert(sizeof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject) == 0x000070, "Wrong size on FAccelByteModelsPolicyVersionWithLocalizedVersionObject");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, Id) == 0x000000, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, CreatedAt) == 0x000010, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, UpdatedAt) == 0x000018, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, DisplayVersion) == 0x000020, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::DisplayVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, Description) == 0x000030, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, Status) == 0x000040, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, PublishedDate) == 0x000050, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::PublishedDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, LocalizedPolicyVersions) == 0x000058, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::LocalizedPolicyVersions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, IsCommitted) == 0x000068, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::IsCommitted' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, IsCrucial) == 0x000069, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::IsCrucial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, IsInEffect) == 0x00006A, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::IsInEffect' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPolicy
// 0x00C0 (0x00C0 - 0x0000)
struct FAccelByteModelsPublicPolicy final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              createdAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              updatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReadableId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyType;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryCode;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryGroupCode;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseUrls;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ShouldNotifyOnUpdate;                              // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsPolicyVersionWithLocalizedVersionObject> PolicyVersions;           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMandatory;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultOpted;                                    // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultSelection;                                // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsPublicPolicy) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPolicy");
static_assert(sizeof(FAccelByteModelsPublicPolicy) == 0x0000C0, "Wrong size on FAccelByteModelsPublicPolicy");
static_assert(offsetof(FAccelByteModelsPublicPolicy, Id) == 0x000000, "Member 'FAccelByteModelsPublicPolicy::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, createdAt) == 0x000010, "Member 'FAccelByteModelsPublicPolicy::createdAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, updatedAt) == 0x000018, "Member 'FAccelByteModelsPublicPolicy::updatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, ReadableId) == 0x000020, "Member 'FAccelByteModelsPublicPolicy::ReadableId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, PolicyName) == 0x000030, "Member 'FAccelByteModelsPublicPolicy::PolicyName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, PolicyType) == 0x000040, "Member 'FAccelByteModelsPublicPolicy::PolicyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, Namespace) == 0x000050, "Member 'FAccelByteModelsPublicPolicy::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, CountryCode) == 0x000060, "Member 'FAccelByteModelsPublicPolicy::CountryCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, CountryGroupCode) == 0x000070, "Member 'FAccelByteModelsPublicPolicy::CountryGroupCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, BaseUrls) == 0x000080, "Member 'FAccelByteModelsPublicPolicy::BaseUrls' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, ShouldNotifyOnUpdate) == 0x000090, "Member 'FAccelByteModelsPublicPolicy::ShouldNotifyOnUpdate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, PolicyVersions) == 0x000098, "Member 'FAccelByteModelsPublicPolicy::PolicyVersions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, Description) == 0x0000A8, "Member 'FAccelByteModelsPublicPolicy::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, IsMandatory) == 0x0000B8, "Member 'FAccelByteModelsPublicPolicy::IsMandatory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, IsDefaultOpted) == 0x0000B9, "Member 'FAccelByteModelsPublicPolicy::IsDefaultOpted' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, IsDefaultSelection) == 0x0000BA, "Member 'FAccelByteModelsPublicPolicy::IsDefaultSelection' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsPublicPolicyResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsPublicPolicyResponse final
{
public:
	TArray<struct FAccelByteModelsPublicPolicy>   Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsPublicPolicyResponse) == 0x000008, "Wrong alignment on FArrayModelsPublicPolicyResponse");
static_assert(sizeof(FArrayModelsPublicPolicyResponse) == 0x000010, "Wrong size on FArrayModelsPublicPolicyResponse");
static_assert(offsetof(FArrayModelsPublicPolicyResponse, Content) == 0x000000, "Member 'FArrayModelsPublicPolicyResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatRefreshTokenResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsChatRefreshTokenResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatRefreshTokenResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatRefreshTokenResponse");
static_assert(sizeof(FAccelByteModelsChatRefreshTokenResponse) == 0x000010, "Wrong size on FAccelByteModelsChatRefreshTokenResponse");
static_assert(offsetof(FAccelByteModelsChatRefreshTokenResponse, Code) == 0x000000, "Member 'FAccelByteModelsChatRefreshTokenResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalAchievementGetPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsGlobalAchievementGetPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 AchievementCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalAchievementGetPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalAchievementGetPayload");
static_assert(sizeof(FAccelByteModelsGlobalAchievementGetPayload) == 0x000028, "Wrong size on FAccelByteModelsGlobalAchievementGetPayload");
static_assert(offsetof(FAccelByteModelsGlobalAchievementGetPayload, AchievementCode) == 0x000018, "Member 'FAccelByteModelsGlobalAchievementGetPayload::AchievementCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassRewardCurrency
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsSeasonPassRewardCurrency final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassRewardCurrency) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassRewardCurrency");
static_assert(sizeof(FAccelByteModelsSeasonPassRewardCurrency) == 0x000020, "Wrong size on FAccelByteModelsSeasonPassRewardCurrency");
static_assert(offsetof(FAccelByteModelsSeasonPassRewardCurrency, Namespace) == 0x000000, "Member 'FAccelByteModelsSeasonPassRewardCurrency::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassRewardCurrency, CurrencyCode) == 0x000010, "Member 'FAccelByteModelsSeasonPassRewardCurrency::CurrencyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemCriteriaV3
// 0x00B8 (0x00B8 - 0x0000)
struct FAccelByteModelsItemCriteriaV3 final
{
public:
	class FString                                 StoreId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSubCategoryItem;                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          ItemStatus;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableDate;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetNamespace;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSectionExclusive;                                 // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAccelByteItemListSortBy>              SortBy;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemCriteriaV3) == 0x000008, "Wrong alignment on FAccelByteModelsItemCriteriaV3");
static_assert(sizeof(FAccelByteModelsItemCriteriaV3) == 0x0000B8, "Wrong size on FAccelByteModelsItemCriteriaV3");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, StoreId) == 0x000000, "Member 'FAccelByteModelsItemCriteriaV3::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, CategoryPath) == 0x000010, "Member 'FAccelByteModelsItemCriteriaV3::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, IncludeSubCategoryItem) == 0x000020, "Member 'FAccelByteModelsItemCriteriaV3::IncludeSubCategoryItem' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, ItemType) == 0x000021, "Member 'FAccelByteModelsItemCriteriaV3::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, AppType) == 0x000022, "Member 'FAccelByteModelsItemCriteriaV3::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, BaseAppId) == 0x000028, "Member 'FAccelByteModelsItemCriteriaV3::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, Tags) == 0x000038, "Member 'FAccelByteModelsItemCriteriaV3::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, Features) == 0x000048, "Member 'FAccelByteModelsItemCriteriaV3::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, ItemStatus) == 0x000058, "Member 'FAccelByteModelsItemCriteriaV3::ItemStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, Region) == 0x000060, "Member 'FAccelByteModelsItemCriteriaV3::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, AvailableDate) == 0x000070, "Member 'FAccelByteModelsItemCriteriaV3::AvailableDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, TargetNamespace) == 0x000078, "Member 'FAccelByteModelsItemCriteriaV3::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, ItemName) == 0x000088, "Member 'FAccelByteModelsItemCriteriaV3::ItemName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, bSectionExclusive) == 0x000098, "Member 'FAccelByteModelsItemCriteriaV3::bSectionExclusive' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, Offset) == 0x00009C, "Member 'FAccelByteModelsItemCriteriaV3::Offset' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, Limit) == 0x0000A0, "Member 'FAccelByteModelsItemCriteriaV3::Limit' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV3, SortBy) == 0x0000A8, "Member 'FAccelByteModelsItemCriteriaV3::SortBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatNotif
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsChatNotif final
{
public:
	class FString                                 ChatId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatNotif");
static_assert(sizeof(FAccelByteModelsChatNotif) == 0x000048, "Wrong size on FAccelByteModelsChatNotif");
static_assert(offsetof(FAccelByteModelsChatNotif, ChatId) == 0x000000, "Member 'FAccelByteModelsChatNotif::ChatId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatNotif, Message) == 0x000010, "Member 'FAccelByteModelsChatNotif::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatNotif, CreatedAt) == 0x000020, "Member 'FAccelByteModelsChatNotif::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatNotif, TopicId) == 0x000028, "Member 'FAccelByteModelsChatNotif::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatNotif, From) == 0x000038, "Member 'FAccelByteModelsChatNotif::From' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardItem
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsRewardItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardItem) == 0x000008, "Wrong alignment on FAccelByteModelsRewardItem");
static_assert(sizeof(FAccelByteModelsRewardItem) == 0x000020, "Wrong size on FAccelByteModelsRewardItem");
static_assert(offsetof(FAccelByteModelsRewardItem, ItemId) == 0x000000, "Member 'FAccelByteModelsRewardItem::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardItem, Quantity) == 0x000010, "Member 'FAccelByteModelsRewardItem::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardItem, Duration) == 0x000014, "Member 'FAccelByteModelsRewardItem::Duration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardItem, EndDate) == 0x000018, "Member 'FAccelByteModelsRewardItem::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardCondition
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsRewardCondition final
{
public:
	class FString                                 ConditionName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Condition;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsRewardItem>     RewardItems;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardCondition) == 0x000008, "Wrong alignment on FAccelByteModelsRewardCondition");
static_assert(sizeof(FAccelByteModelsRewardCondition) == 0x000040, "Wrong size on FAccelByteModelsRewardCondition");
static_assert(offsetof(FAccelByteModelsRewardCondition, ConditionName) == 0x000000, "Member 'FAccelByteModelsRewardCondition::ConditionName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCondition, Condition) == 0x000010, "Member 'FAccelByteModelsRewardCondition::Condition' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCondition, EventName) == 0x000020, "Member 'FAccelByteModelsRewardCondition::EventName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCondition, RewardItems) == 0x000030, "Member 'FAccelByteModelsRewardCondition::RewardItems' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardInfo
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsRewardInfo final
{
public:
	class FString                                 RewardId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardCode;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTopic;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsRewardCondition> RewardConditions;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxAwarded;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAwardedPerUser;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserIdExpression;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamespaceExpression;                               // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardInfo) == 0x000008, "Wrong alignment on FAccelByteModelsRewardInfo");
static_assert(sizeof(FAccelByteModelsRewardInfo) == 0x000098, "Wrong size on FAccelByteModelsRewardInfo");
static_assert(offsetof(FAccelByteModelsRewardInfo, RewardId) == 0x000000, "Member 'FAccelByteModelsRewardInfo::RewardId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsRewardInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, RewardCode) == 0x000020, "Member 'FAccelByteModelsRewardInfo::RewardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, Description) == 0x000030, "Member 'FAccelByteModelsRewardInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, EventTopic) == 0x000040, "Member 'FAccelByteModelsRewardInfo::EventTopic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, RewardConditions) == 0x000050, "Member 'FAccelByteModelsRewardInfo::RewardConditions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, MaxAwarded) == 0x000060, "Member 'FAccelByteModelsRewardInfo::MaxAwarded' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, MaxAwardedPerUser) == 0x000064, "Member 'FAccelByteModelsRewardInfo::MaxAwardedPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, CreatedAt) == 0x000068, "Member 'FAccelByteModelsRewardInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsRewardInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, UserIdExpression) == 0x000078, "Member 'FAccelByteModelsRewardInfo::UserIdExpression' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, NamespaceExpression) == 0x000088, "Member 'FAccelByteModelsRewardInfo::NamespaceExpression' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQueryRewardPaging
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsQueryRewardPaging final
{
public:
	class FString                                 Previous;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQueryRewardPaging) == 0x000008, "Wrong alignment on FAccelByteModelsQueryRewardPaging");
static_assert(sizeof(FAccelByteModelsQueryRewardPaging) == 0x000020, "Wrong size on FAccelByteModelsQueryRewardPaging");
static_assert(offsetof(FAccelByteModelsQueryRewardPaging, Previous) == 0x000000, "Member 'FAccelByteModelsQueryRewardPaging::Previous' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQueryRewardPaging, Next) == 0x000010, "Member 'FAccelByteModelsQueryRewardPaging::Next' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQueryReward
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsQueryReward final
{
public:
	TArray<struct FAccelByteModelsRewardInfo>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsQueryRewardPaging      Paging;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQueryReward) == 0x000008, "Wrong alignment on FAccelByteModelsQueryReward");
static_assert(sizeof(FAccelByteModelsQueryReward) == 0x000030, "Wrong size on FAccelByteModelsQueryReward");
static_assert(offsetof(FAccelByteModelsQueryReward, Data) == 0x000000, "Member 'FAccelByteModelsQueryReward::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQueryReward, Paging) == 0x000010, "Member 'FAccelByteModelsQueryReward::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserAddPlayerRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsSessionBrowserAddPlayerRequest final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          As_spectator;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSessionBrowserAddPlayerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserAddPlayerRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserAddPlayerRequest) == 0x000018, "Wrong size on FAccelByteModelsSessionBrowserAddPlayerRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserAddPlayerRequest, User_id) == 0x000000, "Member 'FAccelByteModelsSessionBrowserAddPlayerRequest::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserAddPlayerRequest, As_spectator) == 0x000010, "Member 'FAccelByteModelsSessionBrowserAddPlayerRequest::As_spectator' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2UserBlockedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsChatV2UserBlockedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlockedUserId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2UserBlockedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2UserBlockedPayload");
static_assert(sizeof(FAccelByteModelsChatV2UserBlockedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2UserBlockedPayload");
static_assert(offsetof(FAccelByteModelsChatV2UserBlockedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2UserBlockedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2UserBlockedPayload, BlockedUserId) == 0x000028, "Member 'FAccelByteModelsChatV2UserBlockedPayload::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRetrieveUserEligibilitiesResponse
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsRetrieveUserEligibilitiesResponse final
{
public:
	class FString                                 ReadableId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyType;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryCode;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryGrupCode;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseUrls;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsPolicyVersionWithLocalizedVersionObject> PolicyVersions;           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMandatory;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccepted;                                        // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsRetrieveUserEligibilitiesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRetrieveUserEligibilitiesResponse");
static_assert(sizeof(FAccelByteModelsRetrieveUserEligibilitiesResponse) == 0x0000A8, "Wrong size on FAccelByteModelsRetrieveUserEligibilitiesResponse");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, ReadableId) == 0x000000, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::ReadableId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyName) == 0x000010, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyType) == 0x000020, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, Namespace) == 0x000030, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, CountryCode) == 0x000040, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::CountryCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, CountryGrupCode) == 0x000050, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::CountryGrupCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, BaseUrls) == 0x000060, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::BaseUrls' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyVersions) == 0x000070, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyVersions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, Description) == 0x000080, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyId) == 0x000090, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, IsMandatory) == 0x0000A0, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::IsMandatory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, IsAccepted) == 0x0000A1, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::IsAccepted' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsRetrieveUserEligibilitiesResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsRetrieveUserEligibilitiesResponse final
{
public:
	TArray<struct FAccelByteModelsRetrieveUserEligibilitiesResponse> Content;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsRetrieveUserEligibilitiesResponse) == 0x000008, "Wrong alignment on FArrayModelsRetrieveUserEligibilitiesResponse");
static_assert(sizeof(FArrayModelsRetrieveUserEligibilitiesResponse) == 0x000010, "Wrong size on FArrayModelsRetrieveUserEligibilitiesResponse");
static_assert(offsetof(FArrayModelsRetrieveUserEligibilitiesResponse, Content) == 0x000000, "Member 'FArrayModelsRetrieveUserEligibilitiesResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserCurrentPlatformRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkUserCurrentPlatformRequest final
{
public:
	TArray<class FString>                         userIDs;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserCurrentPlatformRequest) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserCurrentPlatformRequest");
static_assert(sizeof(FAccelByteModelsBulkUserCurrentPlatformRequest) == 0x000010, "Wrong size on FAccelByteModelsBulkUserCurrentPlatformRequest");
static_assert(offsetof(FAccelByteModelsBulkUserCurrentPlatformRequest, userIDs) == 0x000000, "Member 'FAccelByteModelsBulkUserCurrentPlatformRequest::userIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptAgreementResponse
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsAcceptAgreementResponse final
{
public:
	bool                                          Proceed;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAcceptAgreementResponse) == 0x000001, "Wrong alignment on FAccelByteModelsAcceptAgreementResponse");
static_assert(sizeof(FAccelByteModelsAcceptAgreementResponse) == 0x000001, "Wrong size on FAccelByteModelsAcceptAgreementResponse");
static_assert(offsetof(FAccelByteModelsAcceptAgreementResponse, Proceed) == 0x000000, "Member 'FAccelByteModelsAcceptAgreementResponse::Proceed' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRecord
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPublic;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetByMetadataRecord                          SetBy;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Value;                                             // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRecord) == 0x000008, "Wrong alignment on FAccelByteModelsUserRecord");
static_assert(sizeof(FAccelByteModelsUserRecord) == 0x000070, "Wrong size on FAccelByteModelsUserRecord");
static_assert(offsetof(FAccelByteModelsUserRecord, Key) == 0x000000, "Member 'FAccelByteModelsUserRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, Namespace) == 0x000010, "Member 'FAccelByteModelsUserRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, UserId) == 0x000020, "Member 'FAccelByteModelsUserRecord::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, IsPublic) == 0x000030, "Member 'FAccelByteModelsUserRecord::IsPublic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, CreatedAt) == 0x000038, "Member 'FAccelByteModelsUserRecord::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, UpdatedAt) == 0x000040, "Member 'FAccelByteModelsUserRecord::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, SetBy) == 0x000048, "Member 'FAccelByteModelsUserRecord::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, Value) == 0x000050, "Member 'FAccelByteModelsUserRecord::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserGameSetting
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsSessionBrowserGameSetting final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map_name;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num_bot;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_player;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Current_player;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_internal_player;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Current_internal_player;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Allow_join_in_progress;                            // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Settings;                                          // 0x0048(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserGameSetting) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserGameSetting");
static_assert(sizeof(FAccelByteModelsSessionBrowserGameSetting) == 0x000068, "Wrong size on FAccelByteModelsSessionBrowserGameSetting");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Mode) == 0x000000, "Member 'FAccelByteModelsSessionBrowserGameSetting::Mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Map_name) == 0x000010, "Member 'FAccelByteModelsSessionBrowserGameSetting::Map_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Num_bot) == 0x000020, "Member 'FAccelByteModelsSessionBrowserGameSetting::Num_bot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Max_player) == 0x000024, "Member 'FAccelByteModelsSessionBrowserGameSetting::Max_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Current_player) == 0x000028, "Member 'FAccelByteModelsSessionBrowserGameSetting::Current_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Max_internal_player) == 0x00002C, "Member 'FAccelByteModelsSessionBrowserGameSetting::Max_internal_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Current_internal_player) == 0x000030, "Member 'FAccelByteModelsSessionBrowserGameSetting::Current_internal_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Allow_join_in_progress) == 0x000034, "Member 'FAccelByteModelsSessionBrowserGameSetting::Allow_join_in_progress' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Password) == 0x000038, "Member 'FAccelByteModelsSessionBrowserGameSetting::Password' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Settings) == 0x000048, "Member 'FAccelByteModelsSessionBrowserGameSetting::Settings' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserServer
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsSessionBrowserServer final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserServer) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserServer");
static_assert(sizeof(FAccelByteModelsSessionBrowserServer) == 0x000068, "Wrong size on FAccelByteModelsSessionBrowserServer");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Ip) == 0x000000, "Member 'FAccelByteModelsSessionBrowserServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Port) == 0x000010, "Member 'FAccelByteModelsSessionBrowserServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Region) == 0x000018, "Member 'FAccelByteModelsSessionBrowserServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Status) == 0x000028, "Member 'FAccelByteModelsSessionBrowserServer::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Pod_name) == 0x000038, "Member 'FAccelByteModelsSessionBrowserServer::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Deployment) == 0x000048, "Member 'FAccelByteModelsSessionBrowserServer::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Game_version) == 0x000058, "Member 'FAccelByteModelsSessionBrowserServer::Game_version' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUser
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUser final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ExtraAttributes;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUser) == 0x000008, "Wrong alignment on FAccelByteModelsUser");
static_assert(sizeof(FAccelByteModelsUser) == 0x000030, "Wrong size on FAccelByteModelsUser");
static_assert(offsetof(FAccelByteModelsUser, User_id) == 0x000000, "Member 'FAccelByteModelsUser::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUser, ExtraAttributes) == 0x000010, "Member 'FAccelByteModelsUser::ExtraAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchingParty
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsMatchingParty final
{
public:
	class FString                                 Party_id;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUser>           Party_members;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Party_attributes;                                  // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchingParty) == 0x000008, "Wrong alignment on FAccelByteModelsMatchingParty");
static_assert(sizeof(FAccelByteModelsMatchingParty) == 0x000040, "Wrong size on FAccelByteModelsMatchingParty");
static_assert(offsetof(FAccelByteModelsMatchingParty, Party_id) == 0x000000, "Member 'FAccelByteModelsMatchingParty::Party_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchingParty, Party_members) == 0x000010, "Member 'FAccelByteModelsMatchingParty::Party_members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchingParty, Party_attributes) == 0x000020, "Member 'FAccelByteModelsMatchingParty::Party_attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchingAlly
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMatchingAlly final
{
public:
	TArray<struct FAccelByteModelsMatchingParty>  Matching_parties;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchingAlly) == 0x000008, "Wrong alignment on FAccelByteModelsMatchingAlly");
static_assert(sizeof(FAccelByteModelsMatchingAlly) == 0x000010, "Wrong size on FAccelByteModelsMatchingAlly");
static_assert(offsetof(FAccelByteModelsMatchingAlly, Matching_parties) == 0x000000, "Member 'FAccelByteModelsMatchingAlly::Matching_parties' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchmakingResult
// 0x00C8 (0x00C8 - 0x0000)
struct FAccelByteModelsMatchmakingResult final
{
public:
	class FString                                 Channel;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Client_version;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_mode;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Match_id;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Party_attributes;                                  // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Party_id;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Queued_at;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Server_name;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteMatchmakingSessionStatus            Status;                                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMatchmakingResult) == 0x000008, "Wrong alignment on FAccelByteModelsMatchmakingResult");
static_assert(sizeof(FAccelByteModelsMatchmakingResult) == 0x0000C8, "Wrong size on FAccelByteModelsMatchmakingResult");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Channel) == 0x000000, "Member 'FAccelByteModelsMatchmakingResult::Channel' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Client_version) == 0x000010, "Member 'FAccelByteModelsMatchmakingResult::Client_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Game_mode) == 0x000020, "Member 'FAccelByteModelsMatchmakingResult::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Joinable) == 0x000030, "Member 'FAccelByteModelsMatchmakingResult::Joinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Match_id) == 0x000038, "Member 'FAccelByteModelsMatchmakingResult::Match_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Matching_allies) == 0x000048, "Member 'FAccelByteModelsMatchmakingResult::Matching_allies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Namespace) == 0x000058, "Member 'FAccelByteModelsMatchmakingResult::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Party_attributes) == 0x000068, "Member 'FAccelByteModelsMatchmakingResult::Party_attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Party_id) == 0x000088, "Member 'FAccelByteModelsMatchmakingResult::Party_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Queued_at) == 0x000098, "Member 'FAccelByteModelsMatchmakingResult::Queued_at' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Region) == 0x0000A0, "Member 'FAccelByteModelsMatchmakingResult::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Server_name) == 0x0000B0, "Member 'FAccelByteModelsMatchmakingResult::Server_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Status) == 0x0000C0, "Member 'FAccelByteModelsMatchmakingResult::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserData
// 0x0230 (0x0230 - 0x0000)
struct FAccelByteModelsSessionBrowserData final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User_id;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_type;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSessionBrowserGameSetting Game_session_setting;                           // 0x0068(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsSessionBrowserServer   Server;                                            // 0x00D0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         All_players;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Players;                                           // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Spectators;                                        // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsMatchmakingResult      Match;                                             // 0x0168(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserData) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserData");
static_assert(sizeof(FAccelByteModelsSessionBrowserData) == 0x000230, "Wrong size on FAccelByteModelsSessionBrowserData");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Session_id) == 0x000000, "Member 'FAccelByteModelsSessionBrowserData::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Namespace) == 0x000010, "Member 'FAccelByteModelsSessionBrowserData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, User_id) == 0x000020, "Member 'FAccelByteModelsSessionBrowserData::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Username) == 0x000030, "Member 'FAccelByteModelsSessionBrowserData::Username' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Session_type) == 0x000040, "Member 'FAccelByteModelsSessionBrowserData::Session_type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Game_version) == 0x000050, "Member 'FAccelByteModelsSessionBrowserData::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Joinable) == 0x000060, "Member 'FAccelByteModelsSessionBrowserData::Joinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Game_session_setting) == 0x000068, "Member 'FAccelByteModelsSessionBrowserData::Game_session_setting' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Server) == 0x0000D0, "Member 'FAccelByteModelsSessionBrowserData::Server' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, All_players) == 0x000138, "Member 'FAccelByteModelsSessionBrowserData::All_players' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Players) == 0x000148, "Member 'FAccelByteModelsSessionBrowserData::Players' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Spectators) == 0x000158, "Member 'FAccelByteModelsSessionBrowserData::Spectators' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Match) == 0x000168, "Member 'FAccelByteModelsSessionBrowserData::Match' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserGetByUserIdsResult
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSessionBrowserGetByUserIdsResult final
{
public:
	TArray<struct FAccelByteModelsSessionBrowserData> Data;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserGetByUserIdsResult) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserGetByUserIdsResult");
static_assert(sizeof(FAccelByteModelsSessionBrowserGetByUserIdsResult) == 0x000010, "Wrong size on FAccelByteModelsSessionBrowserGetByUserIdsResult");
static_assert(offsetof(FAccelByteModelsSessionBrowserGetByUserIdsResult, Data) == 0x000000, "Member 'FAccelByteModelsSessionBrowserGetByUserIdsResult::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSRegisteredPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsDSRegisteredPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 PodName;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSRegisteredPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSRegisteredPayload");
static_assert(sizeof(FAccelByteModelsDSRegisteredPayload) == 0x000028, "Wrong size on FAccelByteModelsDSRegisteredPayload");
static_assert(offsetof(FAccelByteModelsDSRegisteredPayload, PodName) == 0x000018, "Member 'FAccelByteModelsDSRegisteredPayload::PodName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSGameClientJoinedPayload
// 0x0010 (0x0038 - 0x0028)
struct FAccelByteModelsDSGameClientJoinedPayload : public FAccelByteModelsDSRegisteredPayload
{
public:
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSGameClientJoinedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSGameClientJoinedPayload");
static_assert(sizeof(FAccelByteModelsDSGameClientJoinedPayload) == 0x000038, "Wrong size on FAccelByteModelsDSGameClientJoinedPayload");
static_assert(offsetof(FAccelByteModelsDSGameClientJoinedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsDSGameClientJoinedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBinaryInfo
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsBinaryInfo
{
public:
	class FString                                 Content_Type;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 File_Location;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsBinaryInfo) == 0x000008, "Wrong alignment on FAccelByteModelsBinaryInfo");
static_assert(sizeof(FAccelByteModelsBinaryInfo) == 0x000038, "Wrong size on FAccelByteModelsBinaryInfo");
static_assert(offsetof(FAccelByteModelsBinaryInfo, Content_Type) == 0x000000, "Member 'FAccelByteModelsBinaryInfo::Content_Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBinaryInfo, File_Location) == 0x000010, "Member 'FAccelByteModelsBinaryInfo::File_Location' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBinaryInfo, Url) == 0x000020, "Member 'FAccelByteModelsBinaryInfo::Url' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBinaryInfo, Version) == 0x000030, "Member 'FAccelByteModelsBinaryInfo::Version' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyUpdateRequest
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsV2PartyUpdateRequest final
{
public:
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteV2SessionJoinability                Joinability;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Version;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionConfigurationServerType    Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         InactiveTimeout;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteTimeout;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinPlayers;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxPlayers;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyUpdateRequest");
static_assert(sizeof(FAccelByteModelsV2PartyUpdateRequest) == 0x000058, "Wrong size on FAccelByteModelsV2PartyUpdateRequest");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, Attributes) == 0x000000, "Member 'FAccelByteModelsV2PartyUpdateRequest::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, Joinability) == 0x000020, "Member 'FAccelByteModelsV2PartyUpdateRequest::Joinability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, Version) == 0x000028, "Member 'FAccelByteModelsV2PartyUpdateRequest::Version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, Type) == 0x000030, "Member 'FAccelByteModelsV2PartyUpdateRequest::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, InactiveTimeout) == 0x000038, "Member 'FAccelByteModelsV2PartyUpdateRequest::InactiveTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, InviteTimeout) == 0x000040, "Member 'FAccelByteModelsV2PartyUpdateRequest::InviteTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, MinPlayers) == 0x000048, "Member 'FAccelByteModelsV2PartyUpdateRequest::MinPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUpdateRequest, MaxPlayers) == 0x000050, "Member 'FAccelByteModelsV2PartyUpdateRequest::MaxPlayers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecord
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetByMetadataRecord                          SetBy;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Value;                                             // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameRecord) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecord");
static_assert(sizeof(FAccelByteModelsGameRecord) == 0x000058, "Wrong size on FAccelByteModelsGameRecord");
static_assert(offsetof(FAccelByteModelsGameRecord, Key) == 0x000000, "Member 'FAccelByteModelsGameRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, Namespace) == 0x000010, "Member 'FAccelByteModelsGameRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, CreatedAt) == 0x000020, "Member 'FAccelByteModelsGameRecord::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, UpdatedAt) == 0x000028, "Member 'FAccelByteModelsGameRecord::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, SetBy) == 0x000030, "Member 'FAccelByteModelsGameRecord::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, Value) == 0x000038, "Member 'FAccelByteModelsGameRecord::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetSessionAttributesResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsGetSessionAttributesResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 Value;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetSessionAttributesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetSessionAttributesResponse");
static_assert(sizeof(FAccelByteModelsGetSessionAttributesResponse) == 0x000040, "Wrong size on FAccelByteModelsGetSessionAttributesResponse");
static_assert(offsetof(FAccelByteModelsGetSessionAttributesResponse, Value) == 0x000030, "Member 'FAccelByteModelsGetSessionAttributesResponse::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonGroupsItem
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReasonGroupsItem final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonGroupsItem) == 0x000008, "Wrong alignment on FAccelByteModelsReasonGroupsItem");
static_assert(sizeof(FAccelByteModelsReasonGroupsItem) == 0x000020, "Wrong size on FAccelByteModelsReasonGroupsItem");
static_assert(offsetof(FAccelByteModelsReasonGroupsItem, ID) == 0x000000, "Member 'FAccelByteModelsReasonGroupsItem::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonGroupsItem, Title) == 0x000010, "Member 'FAccelByteModelsReasonGroupsItem::Title' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserBinaryRecord
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsUserBinaryRecord final
{
public:
	struct FAccelByteModelsBinaryInfo             Binary_Info;                                       // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              Created_At;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_Public;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetByMetadataRecord                          Set_By;                                            // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Updated_At;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User_Id;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserBinaryRecord) == 0x000008, "Wrong alignment on FAccelByteModelsUserBinaryRecord");
static_assert(sizeof(FAccelByteModelsUserBinaryRecord) == 0x000088, "Wrong size on FAccelByteModelsUserBinaryRecord");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Binary_Info) == 0x000000, "Member 'FAccelByteModelsUserBinaryRecord::Binary_Info' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Created_At) == 0x000038, "Member 'FAccelByteModelsUserBinaryRecord::Created_At' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Is_Public) == 0x000040, "Member 'FAccelByteModelsUserBinaryRecord::Is_Public' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Key) == 0x000048, "Member 'FAccelByteModelsUserBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Namespace) == 0x000058, "Member 'FAccelByteModelsUserBinaryRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Set_By) == 0x000068, "Member 'FAccelByteModelsUserBinaryRecord::Set_By' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, Updated_At) == 0x000070, "Member 'FAccelByteModelsUserBinaryRecord::Updated_At' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBinaryRecord, User_Id) == 0x000078, "Member 'FAccelByteModelsUserBinaryRecord::User_Id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBinaryInfoWithTime
// 0x0010 (0x0048 - 0x0038)
struct FAccelByteModelsBinaryInfoWithTime final : public FAccelByteModelsBinaryInfo
{
public:
	struct FDateTime                              Created_At;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Updated_At;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBinaryInfoWithTime) == 0x000008, "Wrong alignment on FAccelByteModelsBinaryInfoWithTime");
static_assert(sizeof(FAccelByteModelsBinaryInfoWithTime) == 0x000048, "Wrong size on FAccelByteModelsBinaryInfoWithTime");
static_assert(offsetof(FAccelByteModelsBinaryInfoWithTime, Created_At) == 0x000038, "Member 'FAccelByteModelsBinaryInfoWithTime::Created_At' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBinaryInfoWithTime, Updated_At) == 0x000040, "Member 'FAccelByteModelsBinaryInfoWithTime::Updated_At' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameBinaryRecord
// 0x0080 (0x0080 - 0x0000)
struct FAccelByteModelsGameBinaryRecord final
{
public:
	struct FAccelByteModelsBinaryInfoWithTime     Binary_Info;                                       // 0x0000(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              Created_At;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetByMetadataRecord                          Set_By;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Updated_At;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameBinaryRecord) == 0x000008, "Wrong alignment on FAccelByteModelsGameBinaryRecord");
static_assert(sizeof(FAccelByteModelsGameBinaryRecord) == 0x000080, "Wrong size on FAccelByteModelsGameBinaryRecord");
static_assert(offsetof(FAccelByteModelsGameBinaryRecord, Binary_Info) == 0x000000, "Member 'FAccelByteModelsGameBinaryRecord::Binary_Info' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecord, Created_At) == 0x000048, "Member 'FAccelByteModelsGameBinaryRecord::Created_At' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecord, Key) == 0x000050, "Member 'FAccelByteModelsGameBinaryRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecord, Namespace) == 0x000060, "Member 'FAccelByteModelsGameBinaryRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecord, Set_By) == 0x000070, "Member 'FAccelByteModelsGameBinaryRecord::Set_By' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecord, Updated_At) == 0x000078, "Member 'FAccelByteModelsGameBinaryRecord::Updated_At' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListGameRecords
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsListGameRecords final
{
public:
	TArray<struct FAccelByteModelsGameRecord>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListGameRecords) == 0x000008, "Wrong alignment on FAccelByteModelsListGameRecords");
static_assert(sizeof(FAccelByteModelsListGameRecords) == 0x000010, "Wrong size on FAccelByteModelsListGameRecords");
static_assert(offsetof(FAccelByteModelsListGameRecords, Data) == 0x000000, "Member 'FAccelByteModelsListGameRecords::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserBannedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsUserBannedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanType                                      BanType;                                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserBannedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserBannedPayload");
static_assert(sizeof(FAccelByteModelsUserBannedPayload) == 0x000048, "Wrong size on FAccelByteModelsUserBannedPayload");
static_assert(offsetof(FAccelByteModelsUserBannedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsUserBannedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedPayload, BanType) == 0x000028, "Member 'FAccelByteModelsUserBannedPayload::BanType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedPayload, EndDate) == 0x000030, "Member 'FAccelByteModelsUserBannedPayload::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedPayload, Reason) == 0x000040, "Member 'FAccelByteModelsUserBannedPayload::Reason' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionBaseRequest
// 0x00B8 (0x00B8 - 0x0000)
struct FAccelByteModelsV2GameSessionBaseRequest
{
public:
	class FString                                 ConfigurationName;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteV2SessionConfigurationServerType    Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionJoinability                Joinability;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsV2GameSessionTeam> Teams;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         RequestedRegions;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         MaxPlayers;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinPlayers;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InactiveTimeout;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteTimeout;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionBaseRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionBaseRequest");
static_assert(sizeof(FAccelByteModelsV2GameSessionBaseRequest) == 0x0000B8, "Wrong size on FAccelByteModelsV2GameSessionBaseRequest");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, ConfigurationName) == 0x000000, "Member 'FAccelByteModelsV2GameSessionBaseRequest::ConfigurationName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, Attributes) == 0x000010, "Member 'FAccelByteModelsV2GameSessionBaseRequest::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, Type) == 0x000030, "Member 'FAccelByteModelsV2GameSessionBaseRequest::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, Joinability) == 0x000031, "Member 'FAccelByteModelsV2GameSessionBaseRequest::Joinability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, Teams) == 0x000038, "Member 'FAccelByteModelsV2GameSessionBaseRequest::Teams' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, ClientVersion) == 0x000048, "Member 'FAccelByteModelsV2GameSessionBaseRequest::ClientVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, ServerName) == 0x000058, "Member 'FAccelByteModelsV2GameSessionBaseRequest::ServerName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, Deployment) == 0x000068, "Member 'FAccelByteModelsV2GameSessionBaseRequest::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, RequestedRegions) == 0x000078, "Member 'FAccelByteModelsV2GameSessionBaseRequest::RequestedRegions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, MaxPlayers) == 0x000088, "Member 'FAccelByteModelsV2GameSessionBaseRequest::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, MinPlayers) == 0x000090, "Member 'FAccelByteModelsV2GameSessionBaseRequest::MinPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, InactiveTimeout) == 0x000098, "Member 'FAccelByteModelsV2GameSessionBaseRequest::InactiveTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, InviteTimeout) == 0x0000A0, "Member 'FAccelByteModelsV2GameSessionBaseRequest::InviteTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionBaseRequest, MatchPool) == 0x0000A8, "Member 'FAccelByteModelsV2GameSessionBaseRequest::MatchPool' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionCreateRequest
// 0x0008 (0x00C0 - 0x00B8)
struct FAccelByteModelsV2GameSessionCreateRequest final : public FAccelByteModelsV2GameSessionBaseRequest
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2GameSessionCreateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionCreateRequest");
static_assert(sizeof(FAccelByteModelsV2GameSessionCreateRequest) == 0x0000C0, "Wrong size on FAccelByteModelsV2GameSessionCreateRequest");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetPublicUserRecordKeys
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGetPublicUserRecordKeys final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetPublicUserRecordKeys) == 0x000008, "Wrong alignment on FAccelByteModelsGetPublicUserRecordKeys");
static_assert(sizeof(FAccelByteModelsGetPublicUserRecordKeys) == 0x000020, "Wrong size on FAccelByteModelsGetPublicUserRecordKeys");
static_assert(offsetof(FAccelByteModelsGetPublicUserRecordKeys, Key) == 0x000000, "Member 'FAccelByteModelsGetPublicUserRecordKeys::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetPublicUserRecordKeys, UserId) == 0x000010, "Member 'FAccelByteModelsGetPublicUserRecordKeys::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse final
{
public:
	TArray<struct FAccelByteModelsGetPublicUserRecordKeys> Data;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse");
static_assert(sizeof(FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse) == 0x000050, "Wrong size on FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse");
static_assert(offsetof(FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedBulkGetPublicUserRecordKeysResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingAdditionalInfoChat
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReportingAdditionalInfoChat final
{
public:
	class FString                                 ChatCreatedAt;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingAdditionalInfoChat) == 0x000008, "Wrong alignment on FAccelByteModelsReportingAdditionalInfoChat");
static_assert(sizeof(FAccelByteModelsReportingAdditionalInfoChat) == 0x000020, "Wrong size on FAccelByteModelsReportingAdditionalInfoChat");
static_assert(offsetof(FAccelByteModelsReportingAdditionalInfoChat, ChatCreatedAt) == 0x000000, "Member 'FAccelByteModelsReportingAdditionalInfoChat::ChatCreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingAdditionalInfoChat, TopicId) == 0x000010, "Member 'FAccelByteModelsReportingAdditionalInfoChat::TopicId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListUserBinaryRecords
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsListUserBinaryRecords final
{
public:
	TArray<struct FAccelByteModelsUserBinaryRecord> Data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListUserBinaryRecords) == 0x000008, "Wrong alignment on FAccelByteModelsListUserBinaryRecords");
static_assert(sizeof(FAccelByteModelsListUserBinaryRecords) == 0x000010, "Wrong size on FAccelByteModelsListUserBinaryRecords");
static_assert(offsetof(FAccelByteModelsListUserBinaryRecords, Data) == 0x000000, "Member 'FAccelByteModelsListUserBinaryRecords::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCScreenshot
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsUGCScreenshot final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenshotId;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCScreenshot) == 0x000008, "Wrong alignment on FAccelByteModelsUGCScreenshot");
static_assert(sizeof(FAccelByteModelsUGCScreenshot) == 0x000060, "Wrong size on FAccelByteModelsUGCScreenshot");
static_assert(offsetof(FAccelByteModelsUGCScreenshot, ContentType) == 0x000000, "Member 'FAccelByteModelsUGCScreenshot::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshot, Description) == 0x000010, "Member 'FAccelByteModelsUGCScreenshot::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshot, FileExtension) == 0x000020, "Member 'FAccelByteModelsUGCScreenshot::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshot, ScreenshotId) == 0x000030, "Member 'FAccelByteModelsUGCScreenshot::ScreenshotId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshot, Source) == 0x000040, "Member 'FAccelByteModelsUGCScreenshot::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshot, Url) == 0x000050, "Member 'FAccelByteModelsUGCScreenshot::Url' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCScreenshotsRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCScreenshotsRequest final
{
public:
	TArray<struct FAccelByteModelsUGCScreenshot>  Screenshots;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCScreenshotsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCScreenshotsRequest");
static_assert(sizeof(FAccelByteModelsUGCScreenshotsRequest) == 0x000010, "Wrong size on FAccelByteModelsUGCScreenshotsRequest");
static_assert(offsetof(FAccelByteModelsUGCScreenshotsRequest, Screenshots) == 0x000000, "Member 'FAccelByteModelsUGCScreenshotsRequest::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListGameBinaryRecords
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsListGameBinaryRecords final
{
public:
	TArray<struct FAccelByteModelsGameBinaryRecord> Data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListGameBinaryRecords) == 0x000008, "Wrong alignment on FAccelByteModelsListGameBinaryRecords");
static_assert(sizeof(FAccelByteModelsListGameBinaryRecords) == 0x000010, "Wrong size on FAccelByteModelsListGameBinaryRecords");
static_assert(offsetof(FAccelByteModelsListGameBinaryRecords, Data) == 0x000000, "Member 'FAccelByteModelsListGameBinaryRecords::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingProposedProposal
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsV2MatchmakingProposedProposal final
{
public:
	class FString                                 BackfillID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProposalID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingProposedProposal) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingProposedProposal");
static_assert(sizeof(FAccelByteModelsV2MatchmakingProposedProposal) == 0x000030, "Wrong size on FAccelByteModelsV2MatchmakingProposedProposal");
static_assert(offsetof(FAccelByteModelsV2MatchmakingProposedProposal, BackfillID) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingProposedProposal::BackfillID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingProposedProposal, ProposalID) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingProposedProposal::ProposalID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingProposedProposal, Status) == 0x000020, "Member 'FAccelByteModelsV2MatchmakingProposedProposal::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingTicketStatus
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsV2MatchmakingTicketStatus final
{
public:
	bool                                          MatchFound;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchPool;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchTicketID;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2MatchmakingProposedProposal ProposedProposal;                           // 0x0028(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingTicketStatus) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingTicketStatus");
static_assert(sizeof(FAccelByteModelsV2MatchmakingTicketStatus) == 0x000068, "Wrong size on FAccelByteModelsV2MatchmakingTicketStatus");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatus, MatchFound) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingTicketStatus::MatchFound' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatus, MatchPool) == 0x000008, "Member 'FAccelByteModelsV2MatchmakingTicketStatus::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatus, MatchTicketID) == 0x000018, "Member 'FAccelByteModelsV2MatchmakingTicketStatus::MatchTicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatus, ProposedProposal) == 0x000028, "Member 'FAccelByteModelsV2MatchmakingTicketStatus::ProposedProposal' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatus, SessionID) == 0x000058, "Member 'FAccelByteModelsV2MatchmakingTicketStatus::SessionID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQueryUserSeasonExp
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsQueryUserSeasonExp final
{
public:
	TArray<class FString>                         Tags;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQueryUserSeasonExp) == 0x000008, "Wrong alignment on FAccelByteModelsQueryUserSeasonExp");
static_assert(sizeof(FAccelByteModelsQueryUserSeasonExp) == 0x000010, "Wrong size on FAccelByteModelsQueryUserSeasonExp");
static_assert(offsetof(FAccelByteModelsQueryUserSeasonExp, Tags) == 0x000000, "Member 'FAccelByteModelsQueryUserSeasonExp::Tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedUserBinaryRecords
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedUserBinaryRecords final
{
public:
	TArray<struct FAccelByteModelsUserBinaryRecord> Data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedUserBinaryRecords) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedUserBinaryRecords");
static_assert(sizeof(FAccelByteModelsPaginatedUserBinaryRecords) == 0x000050, "Wrong size on FAccelByteModelsPaginatedUserBinaryRecords");
static_assert(offsetof(FAccelByteModelsPaginatedUserBinaryRecords, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedUserBinaryRecords::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedUserBinaryRecords, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedUserBinaryRecords::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedGameBinaryRecords
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedGameBinaryRecords final
{
public:
	TArray<struct FAccelByteModelsGameBinaryRecord> Data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedGameBinaryRecords) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedGameBinaryRecords");
static_assert(sizeof(FAccelByteModelsPaginatedGameBinaryRecords) == 0x000050, "Wrong size on FAccelByteModelsPaginatedGameBinaryRecords");
static_assert(offsetof(FAccelByteModelsPaginatedGameBinaryRecords, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedGameBinaryRecords::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedGameBinaryRecords, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedGameBinaryRecords::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetPartyStorageRequest
// 0x0010 (0x0010 - 0x0000)
struct FGetPartyStorageRequest final
{
public:
	class FString                                 partyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPartyStorageRequest) == 0x000008, "Wrong alignment on FGetPartyStorageRequest");
static_assert(sizeof(FGetPartyStorageRequest) == 0x000010, "Wrong size on FGetPartyStorageRequest");
static_assert(offsetof(FGetPartyStorageRequest, partyId) == 0x000000, "Member 'FGetPartyStorageRequest::partyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTypeResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUGCTypeResponse final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Subtype;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTypeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTypeResponse");
static_assert(sizeof(FAccelByteModelsUGCTypeResponse) == 0x000040, "Wrong size on FAccelByteModelsUGCTypeResponse");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, Id) == 0x000000, "Member 'FAccelByteModelsUGCTypeResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, Namespace) == 0x000010, "Member 'FAccelByteModelsUGCTypeResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, Subtype) == 0x000020, "Member 'FAccelByteModelsUGCTypeResponse::Subtype' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, Type) == 0x000030, "Member 'FAccelByteModelsUGCTypeResponse::Type' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTypesPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCTypesPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCTypeResponse> Data;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTypesPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTypesPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCTypesPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCTypesPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCTypesPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCTypesPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypesPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCTypesPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2ConnectedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsChatV2ConnectedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2ConnectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2ConnectedPayload");
static_assert(sizeof(FAccelByteModelsChatV2ConnectedPayload) == 0x000028, "Wrong size on FAccelByteModelsChatV2ConnectedPayload");
static_assert(offsetof(FAccelByteModelsChatV2ConnectedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2ConnectedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCPreview
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCPreview final
{
public:
	class FString                                 Preview;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCPreview) == 0x000008, "Wrong alignment on FAccelByteModelsUGCPreview");
static_assert(sizeof(FAccelByteModelsUGCPreview) == 0x000010, "Wrong size on FAccelByteModelsUGCPreview");
static_assert(offsetof(FAccelByteModelsUGCPreview, Preview) == 0x000000, "Member 'FAccelByteModelsUGCPreview::Preview' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkRevokeEntitlements
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsBulkRevokeEntitlements final
{
public:
	int32                                         Affected;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkRevokeEntitlements) == 0x000004, "Wrong alignment on FAccelByteModelsBulkRevokeEntitlements");
static_assert(sizeof(FAccelByteModelsBulkRevokeEntitlements) == 0x000004, "Wrong size on FAccelByteModelsBulkRevokeEntitlements");
static_assert(offsetof(FAccelByteModelsBulkRevokeEntitlements, Affected) == 0x000000, "Member 'FAccelByteModelsBulkRevokeEntitlements::Affected' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetSessionAttributeRequest
// 0x0020 (0x0020 - 0x0000)
struct FSetSessionAttributeRequest final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetSessionAttributeRequest) == 0x000008, "Wrong alignment on FSetSessionAttributeRequest");
static_assert(sizeof(FSetSessionAttributeRequest) == 0x000020, "Wrong size on FSetSessionAttributeRequest");
static_assert(offsetof(FSetSessionAttributeRequest, Key) == 0x000000, "Member 'FSetSessionAttributeRequest::Key' has a wrong offset!");
static_assert(offsetof(FSetSessionAttributeRequest, Value) == 0x000010, "Member 'FSetSessionAttributeRequest::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBlockPlayerResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsBlockPlayerResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 BlockedUserId;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBlockPlayerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsBlockPlayerResponse");
static_assert(sizeof(FAccelByteModelsBlockPlayerResponse) == 0x000040, "Wrong size on FAccelByteModelsBlockPlayerResponse");
static_assert(offsetof(FAccelByteModelsBlockPlayerResponse, BlockedUserId) == 0x000030, "Member 'FAccelByteModelsBlockPlayerResponse::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyKickRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyKickRequest final
{
public:
	class FString                                 memberID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyKickRequest) == 0x000008, "Wrong alignment on FPartyKickRequest");
static_assert(sizeof(FPartyKickRequest) == 0x000010, "Wrong size on FPartyKickRequest");
static_assert(offsetof(FPartyKickRequest, memberID) == 0x000000, "Member 'FPartyKickRequest::memberID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTagResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUGCTagResponse final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTagResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTagResponse");
static_assert(sizeof(FAccelByteModelsUGCTagResponse) == 0x000030, "Wrong size on FAccelByteModelsUGCTagResponse");
static_assert(offsetof(FAccelByteModelsUGCTagResponse, Id) == 0x000000, "Member 'FAccelByteModelsUGCTagResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTagResponse, Namespace) == 0x000010, "Member 'FAccelByteModelsUGCTagResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTagResponse, Tag) == 0x000020, "Member 'FAccelByteModelsUGCTagResponse::Tag' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulFillCodeRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsFulFillCodeRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulFillCodeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsFulFillCodeRequest");
static_assert(sizeof(FAccelByteModelsFulFillCodeRequest) == 0x000030, "Wrong size on FAccelByteModelsFulFillCodeRequest");
static_assert(offsetof(FAccelByteModelsFulFillCodeRequest, Code) == 0x000000, "Member 'FAccelByteModelsFulFillCodeRequest::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulFillCodeRequest, Region) == 0x000010, "Member 'FAccelByteModelsFulFillCodeRequest::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulFillCodeRequest, Language) == 0x000020, "Member 'FAccelByteModelsFulFillCodeRequest::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnblockPlayerResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsUnblockPlayerResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 UnblockedUserId;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnblockPlayerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUnblockPlayerResponse");
static_assert(sizeof(FAccelByteModelsUnblockPlayerResponse) == 0x000040, "Wrong size on FAccelByteModelsUnblockPlayerResponse");
static_assert(offsetof(FAccelByteModelsUnblockPlayerResponse, UnblockedUserId) == 0x000030, "Member 'FAccelByteModelsUnblockPlayerResponse::UnblockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderCreate
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsOrderCreate final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnUrl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SectionId;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderCreate) == 0x000008, "Wrong alignment on FAccelByteModelsOrderCreate");
static_assert(sizeof(FAccelByteModelsOrderCreate) == 0x000070, "Wrong size on FAccelByteModelsOrderCreate");
static_assert(offsetof(FAccelByteModelsOrderCreate, ItemId) == 0x000000, "Member 'FAccelByteModelsOrderCreate::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Quantity) == 0x000010, "Member 'FAccelByteModelsOrderCreate::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Price) == 0x000014, "Member 'FAccelByteModelsOrderCreate::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, DiscountedPrice) == 0x000018, "Member 'FAccelByteModelsOrderCreate::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, CurrencyCode) == 0x000020, "Member 'FAccelByteModelsOrderCreate::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Region) == 0x000030, "Member 'FAccelByteModelsOrderCreate::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Language) == 0x000040, "Member 'FAccelByteModelsOrderCreate::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, ReturnUrl) == 0x000050, "Member 'FAccelByteModelsOrderCreate::ReturnUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, SectionId) == 0x000060, "Member 'FAccelByteModelsOrderCreate::SectionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2Ticket
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2Ticket final
{
public:
	class FString                                 TicketId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2Ticket) == 0x000008, "Wrong alignment on FAccelByteModelsV2Ticket");
static_assert(sizeof(FAccelByteModelsV2Ticket) == 0x000010, "Wrong size on FAccelByteModelsV2Ticket");
static_assert(offsetof(FAccelByteModelsV2Ticket, TicketId) == 0x000000, "Member 'FAccelByteModelsV2Ticket::TicketId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchFoundNotif
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsV2MatchFoundNotif final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2GameSessionTeam> Teams;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2Ticket>       Tickets;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchFoundNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchFoundNotif");
static_assert(sizeof(FAccelByteModelsV2MatchFoundNotif) == 0x000058, "Wrong size on FAccelByteModelsV2MatchFoundNotif");
static_assert(offsetof(FAccelByteModelsV2MatchFoundNotif, Id) == 0x000000, "Member 'FAccelByteModelsV2MatchFoundNotif::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchFoundNotif, Namespace) == 0x000010, "Member 'FAccelByteModelsV2MatchFoundNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchFoundNotif, CreatedAt) == 0x000020, "Member 'FAccelByteModelsV2MatchFoundNotif::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchFoundNotif, MatchPool) == 0x000028, "Member 'FAccelByteModelsV2MatchFoundNotif::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchFoundNotif, Teams) == 0x000038, "Member 'FAccelByteModelsV2MatchFoundNotif::Teams' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchFoundNotif, Tickets) == 0x000048, "Member 'FAccelByteModelsV2MatchFoundNotif::Tickets' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BlockedData
// 0x0010 (0x0010 - 0x0000)
struct FBlockedData final
{
public:
	class FString                                 BlockedUserId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockedData) == 0x000008, "Wrong alignment on FBlockedData");
static_assert(sizeof(FBlockedData) == 0x000010, "Wrong size on FBlockedData");
static_assert(offsetof(FBlockedData, BlockedUserId) == 0x000000, "Member 'FBlockedData::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListBlockedUserResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsListBlockedUserResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<struct FBlockedData>                   Data;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListBlockedUserResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListBlockedUserResponse");
static_assert(sizeof(FAccelByteModelsListBlockedUserResponse) == 0x000040, "Wrong size on FAccelByteModelsListBlockedUserResponse");
static_assert(offsetof(FAccelByteModelsListBlockedUserResponse, Data) == 0x000030, "Member 'FAccelByteModelsListBlockedUserResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Query;                                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload, Query) == 0x000028, "Member 'FAccelByteModelsPlayerBinaryRecordGetRecordsByQueryPayload::Query' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BlockerData
// 0x0010 (0x0010 - 0x0000)
struct FBlockerData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockerData) == 0x000008, "Wrong alignment on FBlockerData");
static_assert(sizeof(FBlockerData) == 0x000010, "Wrong size on FBlockerData");
static_assert(offsetof(FBlockerData, UserId) == 0x000000, "Member 'FBlockerData::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListBlockerResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsListBlockerResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<struct FBlockerData>                   Data;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListBlockerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListBlockerResponse");
static_assert(sizeof(FAccelByteModelsListBlockerResponse) == 0x000040, "Wrong size on FAccelByteModelsListBlockerResponse");
static_assert(offsetof(FAccelByteModelsListBlockerResponse, Data) == 0x000030, "Member 'FAccelByteModelsListBlockerResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload, Key) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload, UserIds) == 0x000028, "Member 'FAccelByteModelsPlayerBinaryRecordGetSameRecordsFromUsersPayload::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.CancelMatchmakingRequest
// 0x0018 (0x0018 - 0x0000)
struct FCancelMatchmakingRequest final
{
public:
	class FString                                 gameMode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isTempParty;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCancelMatchmakingRequest) == 0x000008, "Wrong alignment on FCancelMatchmakingRequest");
static_assert(sizeof(FCancelMatchmakingRequest) == 0x000018, "Wrong size on FCancelMatchmakingRequest");
static_assert(offsetof(FCancelMatchmakingRequest, gameMode) == 0x000000, "Member 'FCancelMatchmakingRequest::gameMode' has a wrong offset!");
static_assert(offsetof(FCancelMatchmakingRequest, isTempParty) == 0x000010, "Member 'FCancelMatchmakingRequest::isTempParty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBlockPlayerNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsBlockPlayerNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlockedUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBlockPlayerNotif) == 0x000008, "Wrong alignment on FAccelByteModelsBlockPlayerNotif");
static_assert(sizeof(FAccelByteModelsBlockPlayerNotif) == 0x000020, "Wrong size on FAccelByteModelsBlockPlayerNotif");
static_assert(offsetof(FAccelByteModelsBlockPlayerNotif, UserId) == 0x000000, "Member 'FAccelByteModelsBlockPlayerNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBlockPlayerNotif, BlockedUserId) == 0x000010, "Member 'FAccelByteModelsBlockPlayerNotif::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateGroupRequest
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsUpdateGroupRequest final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGroupType                           GroupType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupDescription;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupIcon;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateGroupRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateGroupRequest");
static_assert(sizeof(FAccelByteModelsUpdateGroupRequest) == 0x000048, "Wrong size on FAccelByteModelsUpdateGroupRequest");
static_assert(offsetof(FAccelByteModelsUpdateGroupRequest, GroupName) == 0x000000, "Member 'FAccelByteModelsUpdateGroupRequest::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateGroupRequest, GroupRegion) == 0x000010, "Member 'FAccelByteModelsUpdateGroupRequest::GroupRegion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateGroupRequest, GroupType) == 0x000020, "Member 'FAccelByteModelsUpdateGroupRequest::GroupType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateGroupRequest, GroupDescription) == 0x000028, "Member 'FAccelByteModelsUpdateGroupRequest::GroupDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateGroupRequest, GroupIcon) == 0x000038, "Member 'FAccelByteModelsUpdateGroupRequest::GroupIcon' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SystemMessageNotifMessage
// 0x0070 (0x0070 - 0x0000)
struct FSystemMessageNotifMessage final
{
public:
	class FString                                 MessageId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReadAt;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Gift;                                              // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSystemMessageNotifMessage) == 0x000008, "Wrong alignment on FSystemMessageNotifMessage");
static_assert(sizeof(FSystemMessageNotifMessage) == 0x000070, "Wrong size on FSystemMessageNotifMessage");
static_assert(offsetof(FSystemMessageNotifMessage, MessageId) == 0x000000, "Member 'FSystemMessageNotifMessage::MessageId' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, CreatedAt) == 0x000010, "Member 'FSystemMessageNotifMessage::CreatedAt' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, ExpiredAt) == 0x000018, "Member 'FSystemMessageNotifMessage::ExpiredAt' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, UpdatedAt) == 0x000020, "Member 'FSystemMessageNotifMessage::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, ReadAt) == 0x000028, "Member 'FSystemMessageNotifMessage::ReadAt' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, Title) == 0x000030, "Member 'FSystemMessageNotifMessage::Title' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, Body) == 0x000040, "Member 'FSystemMessageNotifMessage::Body' has a wrong offset!");
static_assert(offsetof(FSystemMessageNotifMessage, Gift) == 0x000050, "Member 'FSystemMessageNotifMessage::Gift' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatCycleItemInfo
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsUserStatCycleItemInfo final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CycleId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CycleName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatCycleItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatCycleItemInfo");
static_assert(sizeof(FAccelByteModelsUserStatCycleItemInfo) == 0x000088, "Wrong size on FAccelByteModelsUserStatCycleItemInfo");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, StatCode) == 0x000000, "Member 'FAccelByteModelsUserStatCycleItemInfo::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, StatName) == 0x000010, "Member 'FAccelByteModelsUserStatCycleItemInfo::StatName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, CycleId) == 0x000020, "Member 'FAccelByteModelsUserStatCycleItemInfo::CycleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, CycleName) == 0x000030, "Member 'FAccelByteModelsUserStatCycleItemInfo::CycleName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, Namespace) == 0x000040, "Member 'FAccelByteModelsUserStatCycleItemInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, Value) == 0x000050, "Member 'FAccelByteModelsUserStatCycleItemInfo::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, Tags) == 0x000058, "Member 'FAccelByteModelsUserStatCycleItemInfo::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, CreatedAt) == 0x000068, "Member 'FAccelByteModelsUserStatCycleItemInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsUserStatCycleItemInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemInfo, UserId) == 0x000078, "Member 'FAccelByteModelsUserStatCycleItemInfo::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSyncOculusConsumableEntitlementInfo
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsSyncOculusConsumableEntitlementInfo final
{
public:
	class FString                                 TransactionId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OculusItemSku;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementItemIdentityType         ItemIdentityType;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemIdentity;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementIAPOrderStatus           IAPOrderStatus;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSyncOculusConsumableEntitlementInfo) == 0x000008, "Wrong alignment on FAccelByteModelsSyncOculusConsumableEntitlementInfo");
static_assert(sizeof(FAccelByteModelsSyncOculusConsumableEntitlementInfo) == 0x000040, "Wrong size on FAccelByteModelsSyncOculusConsumableEntitlementInfo");
static_assert(offsetof(FAccelByteModelsSyncOculusConsumableEntitlementInfo, TransactionId) == 0x000000, "Member 'FAccelByteModelsSyncOculusConsumableEntitlementInfo::TransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncOculusConsumableEntitlementInfo, OculusItemSku) == 0x000010, "Member 'FAccelByteModelsSyncOculusConsumableEntitlementInfo::OculusItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncOculusConsumableEntitlementInfo, ItemIdentityType) == 0x000020, "Member 'FAccelByteModelsSyncOculusConsumableEntitlementInfo::ItemIdentityType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncOculusConsumableEntitlementInfo, ItemIdentity) == 0x000028, "Member 'FAccelByteModelsSyncOculusConsumableEntitlementInfo::ItemIdentity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncOculusConsumableEntitlementInfo, IAPOrderStatus) == 0x000038, "Member 'FAccelByteModelsSyncOculusConsumableEntitlementInfo::IAPOrderStatus' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCAddDownloadContentCountResponseV2
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCAddDownloadContentCountResponseV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCAddDownloadContentCountResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCAddDownloadContentCountResponseV2");
static_assert(sizeof(FAccelByteModelsUGCAddDownloadContentCountResponseV2) == 0x000010, "Wrong size on FAccelByteModelsUGCAddDownloadContentCountResponseV2");
static_assert(offsetof(FAccelByteModelsUGCAddDownloadContentCountResponseV2, ContentId) == 0x000000, "Member 'FAccelByteModelsUGCAddDownloadContentCountResponseV2::ContentId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateContentScreenshotResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCUpdateContentScreenshotResponse final
{
public:
	TArray<struct FAccelByteModelScreenshots>     Screenshots;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUpdateContentScreenshotResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateContentScreenshotResponse");
static_assert(sizeof(FAccelByteModelsUGCUpdateContentScreenshotResponse) == 0x000010, "Wrong size on FAccelByteModelsUGCUpdateContentScreenshotResponse");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentScreenshotResponse, Screenshots) == 0x000000, "Member 'FAccelByteModelsUGCUpdateContentScreenshotResponse::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementSummaryEventPayload
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsEntitlementSummaryEventPayload final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Clazz;                                             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementSummaryEventPayload) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementSummaryEventPayload");
static_assert(sizeof(FAccelByteModelsEntitlementSummaryEventPayload) == 0x000060, "Wrong size on FAccelByteModelsEntitlementSummaryEventPayload");
static_assert(offsetof(FAccelByteModelsEntitlementSummaryEventPayload, Id) == 0x000000, "Member 'FAccelByteModelsEntitlementSummaryEventPayload::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummaryEventPayload, Name) == 0x000010, "Member 'FAccelByteModelsEntitlementSummaryEventPayload::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummaryEventPayload, Type) == 0x000020, "Member 'FAccelByteModelsEntitlementSummaryEventPayload::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummaryEventPayload, Clazz) == 0x000030, "Member 'FAccelByteModelsEntitlementSummaryEventPayload::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummaryEventPayload, ItemId) == 0x000040, "Member 'FAccelByteModelsEntitlementSummaryEventPayload::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummaryEventPayload, StoreId) == 0x000050, "Member 'FAccelByteModelsEntitlementSummaryEventPayload::StoreId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPopulatedItemInfo
// 0x0010 (0x02E0 - 0x02D0)
struct FAccelByteModelsPopulatedItemInfo final : public FAccelByteModelsItemInfo
{
public:
	TArray<struct FAccelByteModelsItemInfo>       Items;                                             // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPopulatedItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPopulatedItemInfo");
static_assert(sizeof(FAccelByteModelsPopulatedItemInfo) == 0x0002E0, "Wrong size on FAccelByteModelsPopulatedItemInfo");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Items) == 0x0002D0, "Member 'FAccelByteModelsPopulatedItemInfo::Items' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetAllSessionAttributesResponse
// 0x0020 (0x0050 - 0x0030)
struct FAccelByteModelsGetAllSessionAttributesResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	struct FJsonObjectWrapper                     attributes;                                        // 0x0030(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetAllSessionAttributesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetAllSessionAttributesResponse");
static_assert(sizeof(FAccelByteModelsGetAllSessionAttributesResponse) == 0x000050, "Wrong size on FAccelByteModelsGetAllSessionAttributesResponse");
static_assert(offsetof(FAccelByteModelsGetAllSessionAttributesResponse, attributes) == 0x000030, "Member 'FAccelByteModelsGetAllSessionAttributesResponse::attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMClient
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsDSMClient final
{
public:
	class FString                                 Host_address;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMClient) == 0x000008, "Wrong alignment on FAccelByteModelsDSMClient");
static_assert(sizeof(FAccelByteModelsDSMClient) == 0x000040, "Wrong size on FAccelByteModelsDSMClient");
static_assert(offsetof(FAccelByteModelsDSMClient, Host_address) == 0x000000, "Member 'FAccelByteModelsDSMClient::Host_address' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMClient, Region) == 0x000010, "Member 'FAccelByteModelsDSMClient::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMClient, Provider) == 0x000020, "Member 'FAccelByteModelsDSMClient::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMClient, Status) == 0x000030, "Member 'FAccelByteModelsDSMClient::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTurnServerCredential
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsTurnServerCredential final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTurnServerCredential) == 0x000008, "Wrong alignment on FAccelByteModelsTurnServerCredential");
static_assert(sizeof(FAccelByteModelsTurnServerCredential) == 0x000048, "Wrong size on FAccelByteModelsTurnServerCredential");
static_assert(offsetof(FAccelByteModelsTurnServerCredential, Ip) == 0x000000, "Member 'FAccelByteModelsTurnServerCredential::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServerCredential, Port) == 0x000010, "Member 'FAccelByteModelsTurnServerCredential::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServerCredential, Region) == 0x000018, "Member 'FAccelByteModelsTurnServerCredential::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServerCredential, Username) == 0x000028, "Member 'FAccelByteModelsTurnServerCredential::Username' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServerCredential, Password) == 0x000038, "Member 'FAccelByteModelsTurnServerCredential::Password' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsItemPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsItemInfo>       Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsItemPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsItemPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsItemPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsItemPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsItemPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsItemPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionQuery
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2GameSessionQuery final
{
public:
	struct FJsonObjectWrapper                     JsonWrapper;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionQuery) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionQuery");
static_assert(sizeof(FAccelByteModelsV2GameSessionQuery) == 0x000020, "Wrong size on FAccelByteModelsV2GameSessionQuery");
static_assert(offsetof(FAccelByteModelsV2GameSessionQuery, JsonWrapper) == 0x000000, "Member 'FAccelByteModelsV2GameSessionQuery::JsonWrapper' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemDynamicData
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsItemDynamicData final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableCount;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserAvailableCount;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserPurchaseLimit;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsItemDynamicData) == 0x000008, "Wrong alignment on FAccelByteModelsItemDynamicData");
static_assert(sizeof(FAccelByteModelsItemDynamicData) == 0x000030, "Wrong size on FAccelByteModelsItemDynamicData");
static_assert(offsetof(FAccelByteModelsItemDynamicData, Namespace) == 0x000000, "Member 'FAccelByteModelsItemDynamicData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, ItemId) == 0x000010, "Member 'FAccelByteModelsItemDynamicData::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, AvailableCount) == 0x000020, "Member 'FAccelByteModelsItemDynamicData::AvailableCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, UserAvailableCount) == 0x000024, "Member 'FAccelByteModelsItemDynamicData::UserAvailableCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, UserPurchaseLimit) == 0x000028, "Member 'FAccelByteModelsItemDynamicData::UserPurchaseLimit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListAccelByteModelsUserRecord
// 0x0010 (0x0010 - 0x0000)
struct FListAccelByteModelsUserRecord final
{
public:
	TArray<struct FAccelByteModelsUserRecord>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListAccelByteModelsUserRecord) == 0x000008, "Wrong alignment on FListAccelByteModelsUserRecord");
static_assert(sizeof(FListAccelByteModelsUserRecord) == 0x000010, "Wrong size on FListAccelByteModelsUserRecord");
static_assert(offsetof(FListAccelByteModelsUserRecord, Data) == 0x000000, "Member 'FListAccelByteModelsUserRecord::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyPromoteLeaderRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyPromoteLeaderRequest final
{
public:
	class FString                                 userId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyPromoteLeaderRequest) == 0x000008, "Wrong alignment on FPartyPromoteLeaderRequest");
static_assert(sizeof(FPartyPromoteLeaderRequest) == 0x000010, "Wrong size on FPartyPromoteLeaderRequest");
static_assert(offsetof(FPartyPromoteLeaderRequest, userId) == 0x000000, "Member 'FPartyPromoteLeaderRequest::userId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRankingV3
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUserRankingV3 final
{
public:
	float                                         Point;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRankingV3) == 0x000008, "Wrong alignment on FAccelByteModelsUserRankingV3");
static_assert(sizeof(FAccelByteModelsUserRankingV3) == 0x000030, "Wrong size on FAccelByteModelsUserRankingV3");
static_assert(offsetof(FAccelByteModelsUserRankingV3, Point) == 0x000000, "Member 'FAccelByteModelsUserRankingV3::Point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingV3, Rank) == 0x000004, "Member 'FAccelByteModelsUserRankingV3::Rank' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingV3, Hidden) == 0x000008, "Member 'FAccelByteModelsUserRankingV3::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingV3, AdditionalData) == 0x000010, "Member 'FAccelByteModelsUserRankingV3::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCycleRank
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsCycleRank final
{
public:
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CycleId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCycleRank) == 0x000008, "Wrong alignment on FAccelByteModelsCycleRank");
static_assert(sizeof(FAccelByteModelsCycleRank) == 0x000040, "Wrong size on FAccelByteModelsCycleRank");
static_assert(offsetof(FAccelByteModelsCycleRank, AdditionalData) == 0x000000, "Member 'FAccelByteModelsCycleRank::AdditionalData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCycleRank, Hidden) == 0x000020, "Member 'FAccelByteModelsCycleRank::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCycleRank, Point) == 0x000024, "Member 'FAccelByteModelsCycleRank::Point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCycleRank, Rank) == 0x000028, "Member 'FAccelByteModelsCycleRank::Rank' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCycleRank, CycleId) == 0x000030, "Member 'FAccelByteModelsCycleRank::CycleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRankingDataV3
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserRankingDataV3
{
public:
	struct FAccelByteModelsUserRankingV3          AllTime;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsCycleRank>      Cycles;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRankingDataV3) == 0x000008, "Wrong alignment on FAccelByteModelsUserRankingDataV3");
static_assert(sizeof(FAccelByteModelsUserRankingDataV3) == 0x000040, "Wrong size on FAccelByteModelsUserRankingDataV3");
static_assert(offsetof(FAccelByteModelsUserRankingDataV3, AllTime) == 0x000000, "Member 'FAccelByteModelsUserRankingDataV3::AllTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingDataV3, Cycles) == 0x000030, "Member 'FAccelByteModelsUserRankingDataV3::Cycles' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformSyncMobileGoogle
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsPlatformSyncMobileGoogle final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PurchaseTime;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseToken;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAck;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformSyncMobileGoogle) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformSyncMobileGoogle");
static_assert(sizeof(FAccelByteModelsPlatformSyncMobileGoogle) == 0x000070, "Wrong size on FAccelByteModelsPlatformSyncMobileGoogle");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, OrderId) == 0x000000, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::OrderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, PackageName) == 0x000010, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::PackageName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, ProductId) == 0x000020, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, PurchaseTime) == 0x000030, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::PurchaseTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, PurchaseToken) == 0x000038, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::PurchaseToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, AutoAck) == 0x000048, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::AutoAck' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, Region) == 0x000050, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, Language) == 0x000060, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReplaceUserRecordResponse
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsReplaceUserRecordResponse final
{
public:
	struct FDateTime                              Updated_At;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReplaceUserRecordResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReplaceUserRecordResponse");
static_assert(sizeof(FAccelByteModelsReplaceUserRecordResponse) == 0x000008, "Wrong size on FAccelByteModelsReplaceUserRecordResponse");
static_assert(offsetof(FAccelByteModelsReplaceUserRecordResponse, Updated_At) == 0x000000, "Member 'FAccelByteModelsReplaceUserRecordResponse::Updated_At' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetPartyDataRequest
// 0x0010 (0x0010 - 0x0000)
struct FGetPartyDataRequest final
{
public:
	class FString                                 partyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPartyDataRequest) == 0x000008, "Wrong alignment on FGetPartyDataRequest");
static_assert(sizeof(FGetPartyDataRequest) == 0x000010, "Wrong size on FGetPartyDataRequest");
static_assert(offsetof(FGetPartyDataRequest, partyId) == 0x000000, "Member 'FGetPartyDataRequest::partyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCurrencyList
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsCurrencyList final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LocalizationDescriptions;                          // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteCurrencyType                        CurrencyType;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Decimals;                                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdateAt;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCurrencyList) == 0x000008, "Wrong alignment on FAccelByteModelsCurrencyList");
static_assert(sizeof(FAccelByteModelsCurrencyList) == 0x000098, "Wrong size on FAccelByteModelsCurrencyList");
static_assert(offsetof(FAccelByteModelsCurrencyList, CurrencyCode) == 0x000000, "Member 'FAccelByteModelsCurrencyList::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, LocalizationDescriptions) == 0x000010, "Member 'FAccelByteModelsCurrencyList::LocalizationDescriptions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, CurrencySymbol) == 0x000060, "Member 'FAccelByteModelsCurrencyList::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, Namespace) == 0x000070, "Member 'FAccelByteModelsCurrencyList::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, CurrencyType) == 0x000080, "Member 'FAccelByteModelsCurrencyList::CurrencyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, Decimals) == 0x000084, "Member 'FAccelByteModelsCurrencyList::Decimals' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, CreatedAt) == 0x000088, "Member 'FAccelByteModelsCurrencyList::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, UpdateAt) == 0x000090, "Member 'FAccelByteModelsCurrencyList::UpdateAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsCurrencyList
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsCurrencyList final
{
public:
	TArray<struct FAccelByteModelsCurrencyList>   Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsCurrencyList) == 0x000008, "Wrong alignment on FArrayModelsCurrencyList");
static_assert(sizeof(FArrayModelsCurrencyList) == 0x000010, "Wrong size on FArrayModelsCurrencyList");
static_assert(offsetof(FArrayModelsCurrencyList, Content) == 0x000000, "Member 'FArrayModelsCurrencyList::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatDisconnectNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsChatDisconnectNotif final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatDisconnectNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatDisconnectNotif");
static_assert(sizeof(FAccelByteModelsChatDisconnectNotif) == 0x000010, "Wrong size on FAccelByteModelsChatDisconnectNotif");
static_assert(offsetof(FAccelByteModelsChatDisconnectNotif, Message) == 0x000000, "Member 'FAccelByteModelsChatDisconnectNotif::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserPoint
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserPoint final
{
public:
	float                                         point;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 userId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hidden;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     additionalData;                                    // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserPoint) == 0x000008, "Wrong alignment on FAccelByteModelsUserPoint");
static_assert(sizeof(FAccelByteModelsUserPoint) == 0x000040, "Wrong size on FAccelByteModelsUserPoint");
static_assert(offsetof(FAccelByteModelsUserPoint, point) == 0x000000, "Member 'FAccelByteModelsUserPoint::point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPoint, userId) == 0x000008, "Member 'FAccelByteModelsUserPoint::userId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPoint, hidden) == 0x000018, "Member 'FAccelByteModelsUserPoint::hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPoint, additionalData) == 0x000020, "Member 'FAccelByteModelsUserPoint::additionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardRankingResultV3
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsLeaderboardRankingResultV3 final
{
public:
	TArray<struct FAccelByteModelsUserPoint>      Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardRankingResultV3) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardRankingResultV3");
static_assert(sizeof(FAccelByteModelsLeaderboardRankingResultV3) == 0x000050, "Wrong size on FAccelByteModelsLeaderboardRankingResultV3");
static_assert(offsetof(FAccelByteModelsLeaderboardRankingResultV3, Data) == 0x000000, "Member 'FAccelByteModelsLeaderboardRankingResultV3::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardRankingResultV3, Paging) == 0x000010, "Member 'FAccelByteModelsLeaderboardRankingResultV3::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonData
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsUserSeasonData final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrantExp;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassSource                    Source;                                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonData) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonData");
static_assert(sizeof(FAccelByteModelsUserSeasonData) == 0x000068, "Wrong size on FAccelByteModelsUserSeasonData");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Id) == 0x000000, "Member 'FAccelByteModelsUserSeasonData::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, SeasonId) == 0x000020, "Member 'FAccelByteModelsUserSeasonData::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, UserId) == 0x000030, "Member 'FAccelByteModelsUserSeasonData::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, GrantExp) == 0x000040, "Member 'FAccelByteModelsUserSeasonData::GrantExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Tags) == 0x000048, "Member 'FAccelByteModelsUserSeasonData::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, CreatedAt) == 0x000058, "Member 'FAccelByteModelsUserSeasonData::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Source) == 0x000060, "Member 'FAccelByteModelsUserSeasonData::Source' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1MatchmakingCanceledPayload
// 0x0028 (0x0040 - 0x0018)
struct FAccelByteModelsMPV1MatchmakingCanceledPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTempParty;                                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMPV1MatchmakingCanceledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1MatchmakingCanceledPayload");
static_assert(sizeof(FAccelByteModelsMPV1MatchmakingCanceledPayload) == 0x000040, "Wrong size on FAccelByteModelsMPV1MatchmakingCanceledPayload");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingCanceledPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV1MatchmakingCanceledPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingCanceledPayload, GameMode) == 0x000028, "Member 'FAccelByteModelsMPV1MatchmakingCanceledPayload::GameMode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingCanceledPayload, IsTempParty) == 0x000038, "Member 'FAccelByteModelsMPV1MatchmakingCanceledPayload::IsTempParty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementItemSnapshot
// 0x01E8 (0x01E8 - 0x0000)
struct FAccelByteModelsEntitlementItemSnapshot final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Listable;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     EntitlementType;                                   // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Purchasable;                                       // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThumbnailUrl;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetNamespace;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCurrencyCode;                                // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetItemId;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemRecurring          Recurring;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemRegionDataItem     RegionDataItem;                                    // 0x00E8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ItemQty;                                           // 0x0160(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCountPerUser;                                   // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoothName;                                         // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelItemOptionBoxConfig     OptionBoxConfig;                                   // 0x01D8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementItemSnapshot) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementItemSnapshot");
static_assert(sizeof(FAccelByteModelsEntitlementItemSnapshot) == 0x0001E8, "Wrong size on FAccelByteModelsEntitlementItemSnapshot");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemId) == 0x000000, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, AppId) == 0x000010, "Member 'FAccelByteModelsEntitlementItemSnapshot::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, AppType) == 0x000020, "Member 'FAccelByteModelsEntitlementItemSnapshot::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, BaseAppId) == 0x000028, "Member 'FAccelByteModelsEntitlementItemSnapshot::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Sku) == 0x000038, "Member 'FAccelByteModelsEntitlementItemSnapshot::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Namespace) == 0x000048, "Member 'FAccelByteModelsEntitlementItemSnapshot::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Name) == 0x000058, "Member 'FAccelByteModelsEntitlementItemSnapshot::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Listable) == 0x000068, "Member 'FAccelByteModelsEntitlementItemSnapshot::Listable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, EntitlementType) == 0x000069, "Member 'FAccelByteModelsEntitlementItemSnapshot::EntitlementType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, UseCount) == 0x00006C, "Member 'FAccelByteModelsEntitlementItemSnapshot::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Stackable) == 0x000070, "Member 'FAccelByteModelsEntitlementItemSnapshot::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Purchasable) == 0x000071, "Member 'FAccelByteModelsEntitlementItemSnapshot::Purchasable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemType) == 0x000072, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ThumbnailUrl) == 0x000078, "Member 'FAccelByteModelsEntitlementItemSnapshot::ThumbnailUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, TargetNamespace) == 0x000088, "Member 'FAccelByteModelsEntitlementItemSnapshot::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, TargetCurrencyCode) == 0x000098, "Member 'FAccelByteModelsEntitlementItemSnapshot::TargetCurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, TargetItemId) == 0x0000A8, "Member 'FAccelByteModelsEntitlementItemSnapshot::TargetItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Title) == 0x0000B8, "Member 'FAccelByteModelsEntitlementItemSnapshot::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Description) == 0x0000C8, "Member 'FAccelByteModelsEntitlementItemSnapshot::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Recurring) == 0x0000D8, "Member 'FAccelByteModelsEntitlementItemSnapshot::Recurring' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, RegionDataItem) == 0x0000E8, "Member 'FAccelByteModelsEntitlementItemSnapshot::RegionDataItem' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemIds) == 0x000150, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemQty) == 0x000160, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemQty' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Features) == 0x000180, "Member 'FAccelByteModelsEntitlementItemSnapshot::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, MaxCountPerUser) == 0x000190, "Member 'FAccelByteModelsEntitlementItemSnapshot::MaxCountPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, MaxCount) == 0x000194, "Member 'FAccelByteModelsEntitlementItemSnapshot::MaxCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, BoothName) == 0x000198, "Member 'FAccelByteModelsEntitlementItemSnapshot::BoothName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Region) == 0x0001A8, "Member 'FAccelByteModelsEntitlementItemSnapshot::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Language) == 0x0001B8, "Member 'FAccelByteModelsEntitlementItemSnapshot::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, CreatedAt) == 0x0001C8, "Member 'FAccelByteModelsEntitlementItemSnapshot::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, UpdatedAt) == 0x0001D0, "Member 'FAccelByteModelsEntitlementItemSnapshot::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, OptionBoxConfig) == 0x0001D8, "Member 'FAccelByteModelsEntitlementItemSnapshot::OptionBoxConfig' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementReward
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsEntitlementReward final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsEntitlementReward) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementReward");
static_assert(sizeof(FAccelByteModelsEntitlementReward) == 0x000028, "Wrong size on FAccelByteModelsEntitlementReward");
static_assert(offsetof(FAccelByteModelsEntitlementReward, ItemId) == 0x000000, "Member 'FAccelByteModelsEntitlementReward::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementReward, ItemSku) == 0x000010, "Member 'FAccelByteModelsEntitlementReward::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementReward, Count) == 0x000020, "Member 'FAccelByteModelsEntitlementReward::Count' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementInfo
// 0x0330 (0x0330 - 0x0000)
struct FAccelByteModelsEntitlementInfo final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    Clazz;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     Type;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementStatus                   Status;                                            // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppId;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sku;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementSource                   Source;                                            // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsEntitlementItemSnapshot ItemSnapshot;                                     // 0x00B8(0x01E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              GrantedAt;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelItemOptionBoxConfig     OptionBoxConfig;                                   // 0x02E0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 RequestId;                                         // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Replayed;                                          // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsEntitlementReward> Rewards;                                        // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemLootBoxConfig      LootBoxConfig;                                     // 0x0318(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementInfo) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementInfo");
static_assert(sizeof(FAccelByteModelsEntitlementInfo) == 0x000330, "Wrong size on FAccelByteModelsEntitlementInfo");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Id) == 0x000000, "Member 'FAccelByteModelsEntitlementInfo::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsEntitlementInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Clazz) == 0x000020, "Member 'FAccelByteModelsEntitlementInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Type) == 0x000021, "Member 'FAccelByteModelsEntitlementInfo::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Status) == 0x000022, "Member 'FAccelByteModelsEntitlementInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, AppId) == 0x000028, "Member 'FAccelByteModelsEntitlementInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, AppType) == 0x000038, "Member 'FAccelByteModelsEntitlementInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Sku) == 0x000040, "Member 'FAccelByteModelsEntitlementInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, UserId) == 0x000050, "Member 'FAccelByteModelsEntitlementInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ItemId) == 0x000060, "Member 'FAccelByteModelsEntitlementInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, GrantedCode) == 0x000070, "Member 'FAccelByteModelsEntitlementInfo::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ItemNamespace) == 0x000080, "Member 'FAccelByteModelsEntitlementInfo::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Name) == 0x000090, "Member 'FAccelByteModelsEntitlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Features) == 0x0000A0, "Member 'FAccelByteModelsEntitlementInfo::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, UseCount) == 0x0000B0, "Member 'FAccelByteModelsEntitlementInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Source) == 0x0000B4, "Member 'FAccelByteModelsEntitlementInfo::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ItemSnapshot) == 0x0000B8, "Member 'FAccelByteModelsEntitlementInfo::ItemSnapshot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, StartDate) == 0x0002A0, "Member 'FAccelByteModelsEntitlementInfo::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, EndDate) == 0x0002B0, "Member 'FAccelByteModelsEntitlementInfo::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Stackable) == 0x0002C0, "Member 'FAccelByteModelsEntitlementInfo::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, GrantedAt) == 0x0002C8, "Member 'FAccelByteModelsEntitlementInfo::GrantedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, CreatedAt) == 0x0002D0, "Member 'FAccelByteModelsEntitlementInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, UpdatedAt) == 0x0002D8, "Member 'FAccelByteModelsEntitlementInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, OptionBoxConfig) == 0x0002E0, "Member 'FAccelByteModelsEntitlementInfo::OptionBoxConfig' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, RequestId) == 0x0002F0, "Member 'FAccelByteModelsEntitlementInfo::RequestId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Replayed) == 0x000300, "Member 'FAccelByteModelsEntitlementInfo::Replayed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Rewards) == 0x000308, "Member 'FAccelByteModelsEntitlementInfo::Rewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, LootBoxConfig) == 0x000318, "Member 'FAccelByteModelsEntitlementInfo::LootBoxConfig' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsEntitlementPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsEntitlementInfo> Data;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsEntitlementPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsEntitlementPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsEntitlementPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsEntitlementPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsEntitlementPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetAdminUserRecordKeys
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGetAdminUserRecordKeys final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User_Id;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetAdminUserRecordKeys) == 0x000008, "Wrong alignment on FAccelByteModelsGetAdminUserRecordKeys");
static_assert(sizeof(FAccelByteModelsGetAdminUserRecordKeys) == 0x000020, "Wrong size on FAccelByteModelsGetAdminUserRecordKeys");
static_assert(offsetof(FAccelByteModelsGetAdminUserRecordKeys, Key) == 0x000000, "Member 'FAccelByteModelsGetAdminUserRecordKeys::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetAdminUserRecordKeys, User_Id) == 0x000010, "Member 'FAccelByteModelsGetAdminUserRecordKeys::User_Id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonInfoWithoutReward
// 0x00E0 (0x00E0 - 0x0000)
struct FAccelByteModelsUserSeasonInfoWithoutReward final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EnrolledAt;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnrolledPasses;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTierIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTierIndex;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cleared;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSeason                 Season;                                            // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPaidForExp;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSweatExp;                                     // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalExp;                                          // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonInfoWithoutReward) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonInfoWithoutReward");
static_assert(sizeof(FAccelByteModelsUserSeasonInfoWithoutReward) == 0x0000E0, "Wrong size on FAccelByteModelsUserSeasonInfoWithoutReward");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Id) == 0x000000, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, UserId) == 0x000020, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, SeasonId) == 0x000030, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, EnrolledAt) == 0x000040, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::EnrolledAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, EnrolledPasses) == 0x000048, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::EnrolledPasses' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, CurrentTierIndex) == 0x000058, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::CurrentTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, LastTierIndex) == 0x00005C, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::LastTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, RequiredExp) == 0x000060, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, CurrentExp) == 0x000064, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::CurrentExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Cleared) == 0x000068, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Cleared' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Season) == 0x000070, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Season' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, CreatedAt) == 0x0000C0, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, UpdatedAt) == 0x0000C8, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, TotalPaidForExp) == 0x0000D0, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::TotalPaidForExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, TotalSweatExp) == 0x0000D4, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::TotalSweatExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, TotalExp) == 0x0000D8, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::TotalExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbyConnectedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsLobbyConnectedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbyConnectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLobbyConnectedPayload");
static_assert(sizeof(FAccelByteModelsLobbyConnectedPayload) == 0x000028, "Wrong size on FAccelByteModelsLobbyConnectedPayload");
static_assert(offsetof(FAccelByteModelsLobbyConnectedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsLobbyConnectedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.LobbyMessages
// 0x0020 (0x0020 - 0x0000)
struct FLobbyMessages final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyMessages) == 0x000008, "Wrong alignment on FLobbyMessages");
static_assert(sizeof(FLobbyMessages) == 0x000020, "Wrong size on FLobbyMessages");
static_assert(offsetof(FLobbyMessages, Code) == 0x000000, "Member 'FLobbyMessages::Code' has a wrong offset!");
static_assert(offsetof(FLobbyMessages, CodeName) == 0x000010, "Member 'FLobbyMessages::CodeName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerTimeoutResponse
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsServerTimeoutResponse final
{
public:
	int32                                         Session_timeout;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerTimeoutResponse) == 0x000004, "Wrong alignment on FAccelByteModelsServerTimeoutResponse");
static_assert(sizeof(FAccelByteModelsServerTimeoutResponse) == 0x000004, "Wrong size on FAccelByteModelsServerTimeoutResponse");
static_assert(offsetof(FAccelByteModelsServerTimeoutResponse, Session_timeout) == 0x000000, "Member 'FAccelByteModelsServerTimeoutResponse::Session_timeout' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardData
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsLeaderboardData final
{
public:
	bool                                          Descending;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconUrl;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeleted;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeaderboardCode;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CyleIds;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AllTime;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DeletedAt;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardData) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardData");
static_assert(sizeof(FAccelByteModelsLeaderboardData) == 0x000088, "Wrong size on FAccelByteModelsLeaderboardData");
static_assert(offsetof(FAccelByteModelsLeaderboardData, Descending) == 0x000000, "Member 'FAccelByteModelsLeaderboardData::Descending' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, IconUrl) == 0x000008, "Member 'FAccelByteModelsLeaderboardData::IconUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, IsDeleted) == 0x000018, "Member 'FAccelByteModelsLeaderboardData::IsDeleted' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, LeaderboardCode) == 0x000020, "Member 'FAccelByteModelsLeaderboardData::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, Name) == 0x000030, "Member 'FAccelByteModelsLeaderboardData::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, Description) == 0x000040, "Member 'FAccelByteModelsLeaderboardData::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, StatCode) == 0x000050, "Member 'FAccelByteModelsLeaderboardData::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, CyleIds) == 0x000060, "Member 'FAccelByteModelsLeaderboardData::CyleIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, AllTime) == 0x000070, "Member 'FAccelByteModelsLeaderboardData::AllTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, CreatedAt) == 0x000078, "Member 'FAccelByteModelsLeaderboardData::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardData, DeletedAt) == 0x000080, "Member 'FAccelByteModelsLeaderboardData::DeletedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatTopicQueryData
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsChatTopicQueryData final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETopicType                                    Type;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Members;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnreadChats;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatTopicQueryData) == 0x000008, "Wrong alignment on FAccelByteModelsChatTopicQueryData");
static_assert(sizeof(FAccelByteModelsChatTopicQueryData) == 0x000048, "Wrong size on FAccelByteModelsChatTopicQueryData");
static_assert(offsetof(FAccelByteModelsChatTopicQueryData, TopicId) == 0x000000, "Member 'FAccelByteModelsChatTopicQueryData::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatTopicQueryData, UpdatedAt) == 0x000010, "Member 'FAccelByteModelsChatTopicQueryData::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatTopicQueryData, Name) == 0x000018, "Member 'FAccelByteModelsChatTopicQueryData::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatTopicQueryData, Type) == 0x000028, "Member 'FAccelByteModelsChatTopicQueryData::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatTopicQueryData, Members) == 0x000030, "Member 'FAccelByteModelsChatTopicQueryData::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatTopicQueryData, UnreadChats) == 0x000040, "Member 'FAccelByteModelsChatTopicQueryData::UnreadChats' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnership
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsEntitlementOwnership final
{
public:
	bool                                          Owned;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndDate;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnership) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnership");
static_assert(sizeof(FAccelByteModelsEntitlementOwnership) == 0x000010, "Wrong size on FAccelByteModelsEntitlementOwnership");
static_assert(offsetof(FAccelByteModelsEntitlementOwnership, Owned) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnership::Owned' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnership, EndDate) == 0x000008, "Member 'FAccelByteModelsEntitlementOwnership::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAttributes
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsAttributes final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAttributes) == 0x000008, "Wrong alignment on FAccelByteModelsAttributes");
static_assert(sizeof(FAccelByteModelsAttributes) == 0x000040, "Wrong size on FAccelByteModelsAttributes");
static_assert(offsetof(FAccelByteModelsAttributes, ServerId) == 0x000000, "Member 'FAccelByteModelsAttributes::ServerId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAttributes, ServerName) == 0x000010, "Member 'FAccelByteModelsAttributes::ServerName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAttributes, CharacterId) == 0x000020, "Member 'FAccelByteModelsAttributes::CharacterId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAttributes, CharacterName) == 0x000030, "Member 'FAccelByteModelsAttributes::CharacterName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDistributionReceiver
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsDistributionReceiver final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtUserId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsAttributes             Attributes;                                        // 0x0030(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDistributionReceiver) == 0x000008, "Wrong alignment on FAccelByteModelsDistributionReceiver");
static_assert(sizeof(FAccelByteModelsDistributionReceiver) == 0x000070, "Wrong size on FAccelByteModelsDistributionReceiver");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, UserId) == 0x000000, "Member 'FAccelByteModelsDistributionReceiver::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, Namespace) == 0x000010, "Member 'FAccelByteModelsDistributionReceiver::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, ExtUserId) == 0x000020, "Member 'FAccelByteModelsDistributionReceiver::ExtUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, Attributes) == 0x000030, "Member 'FAccelByteModelsDistributionReceiver::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsDistributionReceiver
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsDistributionReceiver final
{
public:
	TArray<struct FAccelByteModelsDistributionReceiver> Content;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsDistributionReceiver) == 0x000008, "Wrong alignment on FArrayModelsDistributionReceiver");
static_assert(sizeof(FArrayModelsDistributionReceiver) == 0x000010, "Wrong size on FArrayModelsDistributionReceiver");
static_assert(offsetof(FArrayModelsDistributionReceiver, Content) == 0x000000, "Member 'FArrayModelsDistributionReceiver::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDebitUserWalletRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsDebitUserWalletRequest final
{
public:
	int64                                         Amount;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDebitUserWalletRequest) == 0x000008, "Wrong alignment on FAccelByteModelsDebitUserWalletRequest");
static_assert(sizeof(FAccelByteModelsDebitUserWalletRequest) == 0x000018, "Wrong size on FAccelByteModelsDebitUserWalletRequest");
static_assert(offsetof(FAccelByteModelsDebitUserWalletRequest, Amount) == 0x000000, "Member 'FAccelByteModelsDebitUserWalletRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDebitUserWalletRequest, Reason) == 0x000008, "Member 'FAccelByteModelsDebitUserWalletRequest::Reason' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyRejectRequest
// 0x0020 (0x0020 - 0x0000)
struct FPartyRejectRequest final
{
public:
	class FString                                 partyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 invitationToken;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyRejectRequest) == 0x000008, "Wrong alignment on FPartyRejectRequest");
static_assert(sizeof(FPartyRejectRequest) == 0x000020, "Wrong size on FPartyRejectRequest");
static_assert(offsetof(FPartyRejectRequest, partyID) == 0x000000, "Member 'FPartyRejectRequest::partyID' has a wrong offset!");
static_assert(offsetof(FPartyRejectRequest, invitationToken) == 0x000010, "Member 'FPartyRejectRequest::invitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformSyncMobileGoogleResponse
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsPlatformSyncMobileGoogleResponse final
{
public:
	bool                                          NeedConsume;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformSyncMobileGoogleResponse) == 0x000001, "Wrong alignment on FAccelByteModelsPlatformSyncMobileGoogleResponse");
static_assert(sizeof(FAccelByteModelsPlatformSyncMobileGoogleResponse) == 0x000001, "Wrong size on FAccelByteModelsPlatformSyncMobileGoogleResponse");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogleResponse, NeedConsume) == 0x000000, "Member 'FAccelByteModelsPlatformSyncMobileGoogleResponse::NeedConsume' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerRecordGetRecordsPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerRecordGetRecordsPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Keys;                                              // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerRecordGetRecordsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerRecordGetRecordsPayload");
static_assert(sizeof(FAccelByteModelsPlayerRecordGetRecordsPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerRecordGetRecordsPayload");
static_assert(offsetof(FAccelByteModelsPlayerRecordGetRecordsPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerRecordGetRecordsPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordGetRecordsPayload, Keys) == 0x000028, "Member 'FAccelByteModelsPlayerRecordGetRecordsPayload::Keys' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPlayerRecordGetOtherUserRecordsPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsPublicPlayerRecordGetOtherUserRecordsPayload final : public FAccelByteModelsPlayerRecordGetRecordsPayload
{
};
static_assert(alignof(FAccelByteModelsPublicPlayerRecordGetOtherUserRecordsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPlayerRecordGetOtherUserRecordsPayload");
static_assert(sizeof(FAccelByteModelsPublicPlayerRecordGetOtherUserRecordsPayload) == 0x000038, "Wrong size on FAccelByteModelsPublicPlayerRecordGetOtherUserRecordsPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformPredicateValidateResults
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPlatformPredicateValidateResults final
{
public:
	class FString                                 PredicateName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Validated;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Matched;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Unmatched;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformPredicateValidateResults) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformPredicateValidateResults");
static_assert(sizeof(FAccelByteModelsPlatformPredicateValidateResults) == 0x000040, "Wrong size on FAccelByteModelsPlatformPredicateValidateResults");
static_assert(offsetof(FAccelByteModelsPlatformPredicateValidateResults, PredicateName) == 0x000000, "Member 'FAccelByteModelsPlatformPredicateValidateResults::PredicateName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformPredicateValidateResults, Validated) == 0x000010, "Member 'FAccelByteModelsPlatformPredicateValidateResults::Validated' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformPredicateValidateResults, Matched) == 0x000020, "Member 'FAccelByteModelsPlatformPredicateValidateResults::Matched' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformPredicateValidateResults, Unmatched) == 0x000030, "Member 'FAccelByteModelsPlatformPredicateValidateResults::Unmatched' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformValidateDetails
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPlatformValidateDetails final
{
public:
	TArray<struct FAccelByteModelsPlatformPredicateValidateResults> PredicateValidateResults;        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformValidateDetails) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformValidateDetails");
static_assert(sizeof(FAccelByteModelsPlatformValidateDetails) == 0x000010, "Wrong size on FAccelByteModelsPlatformValidateDetails");
static_assert(offsetof(FAccelByteModelsPlatformValidateDetails, PredicateValidateResults) == 0x000000, "Member 'FAccelByteModelsPlatformValidateDetails::PredicateValidateResults' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformValidateUserItemPurchaseResponse
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsPlatformValidateUserItemPurchaseResponse final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Purchasable;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsPlatformValidateDetails> ValidateDetails;                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformValidateUserItemPurchaseResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformValidateUserItemPurchaseResponse");
static_assert(sizeof(FAccelByteModelsPlatformValidateUserItemPurchaseResponse) == 0x000038, "Wrong size on FAccelByteModelsPlatformValidateUserItemPurchaseResponse");
static_assert(offsetof(FAccelByteModelsPlatformValidateUserItemPurchaseResponse, ItemId) == 0x000000, "Member 'FAccelByteModelsPlatformValidateUserItemPurchaseResponse::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformValidateUserItemPurchaseResponse, Sku) == 0x000010, "Member 'FAccelByteModelsPlatformValidateUserItemPurchaseResponse::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformValidateUserItemPurchaseResponse, Purchasable) == 0x000020, "Member 'FAccelByteModelsPlatformValidateUserItemPurchaseResponse::Purchasable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformValidateUserItemPurchaseResponse, ValidateDetails) == 0x000028, "Member 'FAccelByteModelsPlatformValidateUserItemPurchaseResponse::ValidateDetails' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPlayerRecordUpdatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPublicPlayerRecordUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicPlayerRecordUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPlayerRecordUpdatedPayload");
static_assert(sizeof(FAccelByteModelsPublicPlayerRecordUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsPublicPlayerRecordUpdatedPayload");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordUpdatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPublicPlayerRecordUpdatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordUpdatedPayload, Key) == 0x000028, "Member 'FAccelByteModelsPublicPlayerRecordUpdatedPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRequestFriendsResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsRequestFriendsResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 FriendId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRequestFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRequestFriendsResponse");
static_assert(sizeof(FAccelByteModelsRequestFriendsResponse) == 0x000040, "Wrong size on FAccelByteModelsRequestFriendsResponse");
static_assert(offsetof(FAccelByteModelsRequestFriendsResponse, FriendId) == 0x000030, "Member 'FAccelByteModelsRequestFriendsResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnfriendResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsUnfriendResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 FriendId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnfriendResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUnfriendResponse");
static_assert(sizeof(FAccelByteModelsUnfriendResponse) == 0x000040, "Wrong size on FAccelByteModelsUnfriendResponse");
static_assert(offsetof(FAccelByteModelsUnfriendResponse, FriendId) == 0x000030, "Member 'FAccelByteModelsUnfriendResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListOutgoingFriendsResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsListOutgoingFriendsResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<class FString>                         friendsId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListOutgoingFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListOutgoingFriendsResponse");
static_assert(sizeof(FAccelByteModelsListOutgoingFriendsResponse) == 0x000040, "Wrong size on FAccelByteModelsListOutgoingFriendsResponse");
static_assert(offsetof(FAccelByteModelsListOutgoingFriendsResponse, friendsId) == 0x000030, "Member 'FAccelByteModelsListOutgoingFriendsResponse::friendsId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ValidationDescription
// 0x0020 (0x0020 - 0x0000)
struct FValidationDescription final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidationDescription) == 0x000008, "Wrong alignment on FValidationDescription");
static_assert(sizeof(FValidationDescription) == 0x000020, "Wrong size on FValidationDescription");
static_assert(offsetof(FValidationDescription, Language) == 0x000000, "Member 'FValidationDescription::Language' has a wrong offset!");
static_assert(offsetof(FValidationDescription, Message) == 0x000010, "Member 'FValidationDescription::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Validation
// 0x0088 (0x0088 - 0x0000)
struct FValidation final
{
public:
	bool                                          AllowDigit;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLetter;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowSpace;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowUnicode;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValidationDescription                 Description;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsCustomRegex;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LetterCase;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRepeatingAlphaNum;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRepeatingSpecialCharacter;                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCharType;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLength;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Regex;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpecialCharacterLocation;                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SpecialCharacters;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidation) == 0x000008, "Wrong alignment on FValidation");
static_assert(sizeof(FValidation) == 0x000088, "Wrong size on FValidation");
static_assert(offsetof(FValidation, AllowDigit) == 0x000000, "Member 'FValidation::AllowDigit' has a wrong offset!");
static_assert(offsetof(FValidation, AllowLetter) == 0x000001, "Member 'FValidation::AllowLetter' has a wrong offset!");
static_assert(offsetof(FValidation, AllowSpace) == 0x000002, "Member 'FValidation::AllowSpace' has a wrong offset!");
static_assert(offsetof(FValidation, AllowUnicode) == 0x000003, "Member 'FValidation::AllowUnicode' has a wrong offset!");
static_assert(offsetof(FValidation, Description) == 0x000008, "Member 'FValidation::Description' has a wrong offset!");
static_assert(offsetof(FValidation, IsCustomRegex) == 0x000028, "Member 'FValidation::IsCustomRegex' has a wrong offset!");
static_assert(offsetof(FValidation, LetterCase) == 0x000030, "Member 'FValidation::LetterCase' has a wrong offset!");
static_assert(offsetof(FValidation, MaxLength) == 0x000040, "Member 'FValidation::MaxLength' has a wrong offset!");
static_assert(offsetof(FValidation, MaxRepeatingAlphaNum) == 0x000044, "Member 'FValidation::MaxRepeatingAlphaNum' has a wrong offset!");
static_assert(offsetof(FValidation, MaxRepeatingSpecialCharacter) == 0x000048, "Member 'FValidation::MaxRepeatingSpecialCharacter' has a wrong offset!");
static_assert(offsetof(FValidation, MinCharType) == 0x00004C, "Member 'FValidation::MinCharType' has a wrong offset!");
static_assert(offsetof(FValidation, MinLength) == 0x000050, "Member 'FValidation::MinLength' has a wrong offset!");
static_assert(offsetof(FValidation, Regex) == 0x000058, "Member 'FValidation::Regex' has a wrong offset!");
static_assert(offsetof(FValidation, SpecialCharacterLocation) == 0x000068, "Member 'FValidation::SpecialCharacterLocation' has a wrong offset!");
static_assert(offsetof(FValidation, SpecialCharacters) == 0x000078, "Member 'FValidation::SpecialCharacters' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCancelFriendsResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsCancelFriendsResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 FriendId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCancelFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsCancelFriendsResponse");
static_assert(sizeof(FAccelByteModelsCancelFriendsResponse) == 0x000040, "Wrong size on FAccelByteModelsCancelFriendsResponse");
static_assert(offsetof(FAccelByteModelsCancelFriendsResponse, FriendId) == 0x000030, "Member 'FAccelByteModelsCancelFriendsResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteJwtError
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteJwtError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteJwtError) == 0x000008, "Wrong alignment on FAccelByteJwtError");
static_assert(sizeof(FAccelByteJwtError) == 0x000018, "Wrong size on FAccelByteJwtError");
static_assert(offsetof(FAccelByteJwtError, Code) == 0x000000, "Member 'FAccelByteJwtError::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteJwtError, Message) == 0x000008, "Member 'FAccelByteJwtError::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartySession
// 0x0010 (0x0188 - 0x0178)
struct FAccelByteModelsV2PartySession final : public FAccelByteModelsV2BaseSession
{
public:
	class FString                                 Code;                                              // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartySession) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartySession");
static_assert(sizeof(FAccelByteModelsV2PartySession) == 0x000188, "Wrong size on FAccelByteModelsV2PartySession");
static_assert(offsetof(FAccelByteModelsV2PartySession, Code) == 0x000178, "Member 'FAccelByteModelsV2PartySession::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListIncomingFriendsResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsListIncomingFriendsResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<class FString>                         friendsId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListIncomingFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListIncomingFriendsResponse");
static_assert(sizeof(FAccelByteModelsListIncomingFriendsResponse) == 0x000040, "Wrong size on FAccelByteModelsListIncomingFriendsResponse");
static_assert(offsetof(FAccelByteModelsListIncomingFriendsResponse, friendsId) == 0x000030, "Member 'FAccelByteModelsListIncomingFriendsResponse::friendsId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListBulkUserInfoRequest
// 0x0010 (0x0010 - 0x0000)
struct FListBulkUserInfoRequest final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListBulkUserInfoRequest) == 0x000008, "Wrong alignment on FListBulkUserInfoRequest");
static_assert(sizeof(FListBulkUserInfoRequest) == 0x000010, "Wrong size on FListBulkUserInfoRequest");
static_assert(offsetof(FListBulkUserInfoRequest, UserIds) == 0x000000, "Member 'FListBulkUserInfoRequest::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptFriendsResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsAcceptFriendsResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 FriendId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAcceptFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsAcceptFriendsResponse");
static_assert(sizeof(FAccelByteModelsAcceptFriendsResponse) == 0x000040, "Wrong size on FAccelByteModelsAcceptFriendsResponse");
static_assert(offsetof(FAccelByteModelsAcceptFriendsResponse, FriendId) == 0x000030, "Member 'FAccelByteModelsAcceptFriendsResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserPlatformInfo
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUserPlatformInfo final
{
public:
	class FString                                 platformName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 platformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 platformDisplayName;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserPlatformInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserPlatformInfo");
static_assert(sizeof(FAccelByteModelsUserPlatformInfo) == 0x000030, "Wrong size on FAccelByteModelsUserPlatformInfo");
static_assert(offsetof(FAccelByteModelsUserPlatformInfo, platformName) == 0x000000, "Member 'FAccelByteModelsUserPlatformInfo::platformName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPlatformInfo, platformUserId) == 0x000010, "Member 'FAccelByteModelsUserPlatformInfo::platformUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPlatformInfo, platformDisplayName) == 0x000020, "Member 'FAccelByteModelsUserPlatformInfo::platformDisplayName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLoadFriendWithPlatformData
// 0x0030 (0x0060 - 0x0030)
struct FAccelByteModelsLoadFriendWithPlatformData final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 userId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayName;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUserPlatformInfo> platformInfos;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLoadFriendWithPlatformData) == 0x000008, "Wrong alignment on FAccelByteModelsLoadFriendWithPlatformData");
static_assert(sizeof(FAccelByteModelsLoadFriendWithPlatformData) == 0x000060, "Wrong size on FAccelByteModelsLoadFriendWithPlatformData");
static_assert(offsetof(FAccelByteModelsLoadFriendWithPlatformData, userId) == 0x000030, "Member 'FAccelByteModelsLoadFriendWithPlatformData::userId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoadFriendWithPlatformData, displayName) == 0x000040, "Member 'FAccelByteModelsLoadFriendWithPlatformData::displayName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoadFriendWithPlatformData, platformInfos) == 0x000050, "Member 'FAccelByteModelsLoadFriendWithPlatformData::platformInfos' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatMutedNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsChatMutedNotif final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingTime;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatMutedNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatMutedNotif");
static_assert(sizeof(FAccelByteModelsChatMutedNotif) == 0x000020, "Wrong size on FAccelByteModelsChatMutedNotif");
static_assert(offsetof(FAccelByteModelsChatMutedNotif, TopicId) == 0x000000, "Member 'FAccelByteModelsChatMutedNotif::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatMutedNotif, ExpiredAt) == 0x000010, "Member 'FAccelByteModelsChatMutedNotif::ExpiredAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatMutedNotif, RemainingTime) == 0x000018, "Member 'FAccelByteModelsChatMutedNotif::RemainingTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRejectFriendsResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsRejectFriendsResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 FriendId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRejectFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRejectFriendsResponse");
static_assert(sizeof(FAccelByteModelsRejectFriendsResponse) == 0x000040, "Wrong size on FAccelByteModelsRejectFriendsResponse");
static_assert(offsetof(FAccelByteModelsRejectFriendsResponse, FriendId) == 0x000030, "Member 'FAccelByteModelsRejectFriendsResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLoadFriendListResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsLoadFriendListResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<class FString>                         friendsId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLoadFriendListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLoadFriendListResponse");
static_assert(sizeof(FAccelByteModelsLoadFriendListResponse) == 0x000040, "Wrong size on FAccelByteModelsLoadFriendListResponse");
static_assert(offsetof(FAccelByteModelsLoadFriendListResponse, friendsId) == 0x000030, "Member 'FAccelByteModelsLoadFriendListResponse::friendsId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLimitOffsetRequest
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsLimitOffsetRequest
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLimitOffsetRequest) == 0x000004, "Wrong alignment on FAccelByteModelsLimitOffsetRequest");
static_assert(sizeof(FAccelByteModelsLimitOffsetRequest) == 0x000008, "Wrong size on FAccelByteModelsLimitOffsetRequest");
static_assert(offsetof(FAccelByteModelsLimitOffsetRequest, Limit) == 0x000000, "Member 'FAccelByteModelsLimitOffsetRequest::Limit' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLimitOffsetRequest, Offset) == 0x000004, "Member 'FAccelByteModelsLimitOffsetRequest::Offset' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupMembersListByGroupIdRequest
// 0x0004 (0x000C - 0x0008)
struct FAccelByteModelsGetGroupMembersListByGroupIdRequest final : public FAccelByteModelsLimitOffsetRequest
{
public:
	EAccelByteGroupListSortBy                     SortBy;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsGetGroupMembersListByGroupIdRequest) == 0x000004, "Wrong alignment on FAccelByteModelsGetGroupMembersListByGroupIdRequest");
static_assert(sizeof(FAccelByteModelsGetGroupMembersListByGroupIdRequest) == 0x00000C, "Wrong size on FAccelByteModelsGetGroupMembersListByGroupIdRequest");
static_assert(offsetof(FAccelByteModelsGetGroupMembersListByGroupIdRequest, SortBy) == 0x000008, "Member 'FAccelByteModelsGetGroupMembersListByGroupIdRequest::SortBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UpgradeAndVerifyRequest
// 0x0080 (0x0080 - 0x0000)
struct FUpgradeAndVerifyRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachMinimumAge;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Username;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidateOnly;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpgradeAndVerifyRequest) == 0x000008, "Wrong alignment on FUpgradeAndVerifyRequest");
static_assert(sizeof(FUpgradeAndVerifyRequest) == 0x000080, "Wrong size on FUpgradeAndVerifyRequest");
static_assert(offsetof(FUpgradeAndVerifyRequest, Code) == 0x000000, "Member 'FUpgradeAndVerifyRequest::Code' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, Country) == 0x000010, "Member 'FUpgradeAndVerifyRequest::Country' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, DateOfBirth) == 0x000020, "Member 'FUpgradeAndVerifyRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, DisplayName) == 0x000030, "Member 'FUpgradeAndVerifyRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, EmailAddress) == 0x000040, "Member 'FUpgradeAndVerifyRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, Password) == 0x000050, "Member 'FUpgradeAndVerifyRequest::Password' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, ReachMinimumAge) == 0x000060, "Member 'FUpgradeAndVerifyRequest::ReachMinimumAge' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, Username) == 0x000068, "Member 'FUpgradeAndVerifyRequest::Username' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, ValidateOnly) == 0x000078, "Member 'FUpgradeAndVerifyRequest::ValidateOnly' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetFriendshipStatusResponse
// 0x0018 (0x0048 - 0x0030)
struct FAccelByteModelsGetFriendshipStatusResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	ERelationshipStatusCode                       friendshipStatus;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FriendId;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetFriendshipStatusResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetFriendshipStatusResponse");
static_assert(sizeof(FAccelByteModelsGetFriendshipStatusResponse) == 0x000048, "Wrong size on FAccelByteModelsGetFriendshipStatusResponse");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusResponse, friendshipStatus) == 0x000030, "Member 'FAccelByteModelsGetFriendshipStatusResponse::friendshipStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusResponse, FriendId) == 0x000038, "Member 'FAccelByteModelsGetFriendshipStatusResponse::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsAcceptFriendsNotif final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAcceptFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsAcceptFriendsNotif");
static_assert(sizeof(FAccelByteModelsAcceptFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsAcceptFriendsNotif");
static_assert(offsetof(FAccelByteModelsAcceptFriendsNotif, friendId) == 0x000000, "Member 'FAccelByteModelsAcceptFriendsNotif::friendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UserBan
// 0x0028 (0x0028 - 0x0000)
struct FUserBan final
{
public:
	EBanReason                                    Reason;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserBan) == 0x000008, "Wrong alignment on FUserBan");
static_assert(sizeof(FUserBan) == 0x000028, "Wrong size on FUserBan");
static_assert(offsetof(FUserBan, Reason) == 0x000000, "Member 'FUserBan::Reason' has a wrong offset!");
static_assert(offsetof(FUserBan, EndDate) == 0x000008, "Member 'FUserBan::EndDate' has a wrong offset!");
static_assert(offsetof(FUserBan, Comment) == 0x000018, "Member 'FUserBan::Comment' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatUnmutedNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsChatUnmutedNotif final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatUnmutedNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatUnmutedNotif");
static_assert(sizeof(FAccelByteModelsChatUnmutedNotif) == 0x000010, "Wrong size on FAccelByteModelsChatUnmutedNotif");
static_assert(offsetof(FAccelByteModelsChatUnmutedNotif, TopicId) == 0x000000, "Member 'FAccelByteModelsChatUnmutedNotif::TopicId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AcceptedPolicies
// 0x0038 (0x0038 - 0x0000)
struct FAcceptedPolicies final
{
public:
	bool                                          IsAccepted;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocalizedPolicyVersionId;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyVersionId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAcceptedPolicies) == 0x000008, "Wrong alignment on FAcceptedPolicies");
static_assert(sizeof(FAcceptedPolicies) == 0x000038, "Wrong size on FAcceptedPolicies");
static_assert(offsetof(FAcceptedPolicies, IsAccepted) == 0x000000, "Member 'FAcceptedPolicies::IsAccepted' has a wrong offset!");
static_assert(offsetof(FAcceptedPolicies, LocalizedPolicyVersionId) == 0x000008, "Member 'FAcceptedPolicies::LocalizedPolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAcceptedPolicies, PolicyVersionId) == 0x000018, "Member 'FAcceptedPolicies::PolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAcceptedPolicies, PolicyId) == 0x000028, "Member 'FAcceptedPolicies::PolicyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRequestFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRequestFriendsNotif final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRequestFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsRequestFriendsNotif");
static_assert(sizeof(FAccelByteModelsRequestFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsRequestFriendsNotif");
static_assert(offsetof(FAccelByteModelsRequestFriendsNotif, friendId) == 0x000000, "Member 'FAccelByteModelsRequestFriendsNotif::friendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnfriendNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUnfriendNotif final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnfriendNotif) == 0x000008, "Wrong alignment on FAccelByteModelsUnfriendNotif");
static_assert(sizeof(FAccelByteModelsUnfriendNotif) == 0x000010, "Wrong size on FAccelByteModelsUnfriendNotif");
static_assert(offsetof(FAccelByteModelsUnfriendNotif, friendId) == 0x000000, "Member 'FAccelByteModelsUnfriendNotif::friendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsInfoPartyResponse
// 0x0060 (0x0090 - 0x0030)
struct FAccelByteModelsInfoPartyResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsInfoPartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsInfoPartyResponse");
static_assert(sizeof(FAccelByteModelsInfoPartyResponse) == 0x000090, "Wrong size on FAccelByteModelsInfoPartyResponse");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, PartyId) == 0x000030, "Member 'FAccelByteModelsInfoPartyResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, LeaderId) == 0x000040, "Member 'FAccelByteModelsInfoPartyResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Leader) == 0x000050, "Member 'FAccelByteModelsInfoPartyResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Members) == 0x000060, "Member 'FAccelByteModelsInfoPartyResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Invitees) == 0x000070, "Member 'FAccelByteModelsInfoPartyResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, InvitationToken) == 0x000080, "Member 'FAccelByteModelsInfoPartyResponse::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GeneratedOneTimeCode
// 0x0028 (0x0028 - 0x0000)
struct FGeneratedOneTimeCode final
{
public:
	class FString                                 OneTimeLinkCode;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneTimeLinkURL;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneratedOneTimeCode) == 0x000008, "Wrong alignment on FGeneratedOneTimeCode");
static_assert(sizeof(FGeneratedOneTimeCode) == 0x000028, "Wrong size on FGeneratedOneTimeCode");
static_assert(offsetof(FGeneratedOneTimeCode, OneTimeLinkCode) == 0x000000, "Member 'FGeneratedOneTimeCode::OneTimeLinkCode' has a wrong offset!");
static_assert(offsetof(FGeneratedOneTimeCode, OneTimeLinkURL) == 0x000010, "Member 'FGeneratedOneTimeCode::OneTimeLinkURL' has a wrong offset!");
static_assert(offsetof(FGeneratedOneTimeCode, Exp) == 0x000020, "Member 'FGeneratedOneTimeCode::Exp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCancelFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsCancelFriendsNotif final
{
public:
	class FString                                 userId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCancelFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsCancelFriendsNotif");
static_assert(sizeof(FAccelByteModelsCancelFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsCancelFriendsNotif");
static_assert(offsetof(FAccelByteModelsCancelFriendsNotif, userId) == 0x000000, "Member 'FAccelByteModelsCancelFriendsNotif::userId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRejectFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRejectFriendsNotif final
{
public:
	class FString                                 userId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRejectFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsRejectFriendsNotif");
static_assert(sizeof(FAccelByteModelsRejectFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsRejectFriendsNotif");
static_assert(offsetof(FAccelByteModelsRejectFriendsNotif, userId) == 0x000000, "Member 'FAccelByteModelsRejectFriendsNotif::userId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserRankingDataRequestV3
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkUserRankingDataRequestV3 final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserRankingDataRequestV3) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserRankingDataRequestV3");
static_assert(sizeof(FAccelByteModelsBulkUserRankingDataRequestV3) == 0x000010, "Wrong size on FAccelByteModelsBulkUserRankingDataRequestV3");
static_assert(offsetof(FAccelByteModelsBulkUserRankingDataRequestV3, UserIds) == 0x000000, "Member 'FAccelByteModelsBulkUserRankingDataRequestV3::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementSummary
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsEntitlementSummary final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    Clazz;                                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     Type;                                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackedUseCount;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackedQuantity;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreatedAt;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartDate;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementSummary) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementSummary");
static_assert(sizeof(FAccelByteModelsEntitlementSummary) == 0x0000A8, "Wrong size on FAccelByteModelsEntitlementSummary");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Id) == 0x000000, "Member 'FAccelByteModelsEntitlementSummary::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, ItemId) == 0x000010, "Member 'FAccelByteModelsEntitlementSummary::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Namespace) == 0x000020, "Member 'FAccelByteModelsEntitlementSummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Name) == 0x000030, "Member 'FAccelByteModelsEntitlementSummary::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, UserId) == 0x000040, "Member 'FAccelByteModelsEntitlementSummary::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Clazz) == 0x000050, "Member 'FAccelByteModelsEntitlementSummary::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Type) == 0x000051, "Member 'FAccelByteModelsEntitlementSummary::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Stackable) == 0x000052, "Member 'FAccelByteModelsEntitlementSummary::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, StackedUseCount) == 0x000054, "Member 'FAccelByteModelsEntitlementSummary::StackedUseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, StoreId) == 0x000058, "Member 'FAccelByteModelsEntitlementSummary::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, StackedQuantity) == 0x000068, "Member 'FAccelByteModelsEntitlementSummary::StackedQuantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, CreatedAt) == 0x000070, "Member 'FAccelByteModelsEntitlementSummary::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, UpdatedAt) == 0x000080, "Member 'FAccelByteModelsEntitlementSummary::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, GrantedCode) == 0x000088, "Member 'FAccelByteModelsEntitlementSummary::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, StartDate) == 0x000098, "Member 'FAccelByteModelsEntitlementSummary::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, EndDate) == 0x0000A0, "Member 'FAccelByteModelsEntitlementSummary::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreditSummary
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsCreditSummary final
{
public:
	class FString                                 WalletId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreditSummary) == 0x000008, "Wrong alignment on FAccelByteModelsCreditSummary");
static_assert(sizeof(FAccelByteModelsCreditSummary) == 0x000048, "Wrong size on FAccelByteModelsCreditSummary");
static_assert(offsetof(FAccelByteModelsCreditSummary, WalletId) == 0x000000, "Member 'FAccelByteModelsCreditSummary::WalletId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, Namespace) == 0x000010, "Member 'FAccelByteModelsCreditSummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, UserId) == 0x000020, "Member 'FAccelByteModelsCreditSummary::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, Amount) == 0x000030, "Member 'FAccelByteModelsCreditSummary::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, CurrencyCode) == 0x000038, "Member 'FAccelByteModelsCreditSummary::CurrencyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSubscriptionSummary
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsSubscriptionSummary final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSubscriptionSummaryStatus           Status;                                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CurrentPeriodStart;                                // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CurrentPeriodEnd;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSubscriptionSummarySubscribedBy     SubscribedBy;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSubscriptionSummary) == 0x000008, "Wrong alignment on FAccelByteModelsSubscriptionSummary");
static_assert(sizeof(FAccelByteModelsSubscriptionSummary) == 0x000070, "Wrong size on FAccelByteModelsSubscriptionSummary");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, Id) == 0x000000, "Member 'FAccelByteModelsSubscriptionSummary::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, Namespace) == 0x000010, "Member 'FAccelByteModelsSubscriptionSummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, UserId) == 0x000020, "Member 'FAccelByteModelsSubscriptionSummary::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, ItemId) == 0x000030, "Member 'FAccelByteModelsSubscriptionSummary::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, Sku) == 0x000040, "Member 'FAccelByteModelsSubscriptionSummary::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, Status) == 0x000050, "Member 'FAccelByteModelsSubscriptionSummary::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, CurrentPeriodStart) == 0x000058, "Member 'FAccelByteModelsSubscriptionSummary::CurrentPeriodStart' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, CurrentPeriodEnd) == 0x000060, "Member 'FAccelByteModelsSubscriptionSummary::CurrentPeriodEnd' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummary, SubscribedBy) == 0x000068, "Member 'FAccelByteModelsSubscriptionSummary::SubscribedBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulfillmentResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsFulfillmentResult final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsEntitlementSummary> EntitlementSummaries;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsCreditSummary>  CreditSummaries;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSubscriptionSummary> SubscriptionSummaries;                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulfillmentResult) == 0x000008, "Wrong alignment on FAccelByteModelsFulfillmentResult");
static_assert(sizeof(FAccelByteModelsFulfillmentResult) == 0x000050, "Wrong size on FAccelByteModelsFulfillmentResult");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, Namespace) == 0x000000, "Member 'FAccelByteModelsFulfillmentResult::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, UserId) == 0x000010, "Member 'FAccelByteModelsFulfillmentResult::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, EntitlementSummaries) == 0x000020, "Member 'FAccelByteModelsFulfillmentResult::EntitlementSummaries' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, CreditSummaries) == 0x000030, "Member 'FAccelByteModelsFulfillmentResult::CreditSummaries' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, SubscriptionSummaries) == 0x000040, "Member 'FAccelByteModelsFulfillmentResult::SubscriptionSummaries' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatUpdateTopicRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsChatUpdateTopicRequest final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJoinable;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatUpdateTopicRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChatUpdateTopicRequest");
static_assert(sizeof(FAccelByteModelsChatUpdateTopicRequest) == 0x000028, "Wrong size on FAccelByteModelsChatUpdateTopicRequest");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicRequest, TopicId) == 0x000000, "Member 'FAccelByteModelsChatUpdateTopicRequest::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicRequest, Name) == 0x000010, "Member 'FAccelByteModelsChatUpdateTopicRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicRequest, IsJoinable) == 0x000020, "Member 'FAccelByteModelsChatUpdateTopicRequest::IsJoinable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSnapshotMessage
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsSnapshotMessage final
{
public:
	class FString                                 ChatId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSnapshotMessage) == 0x000008, "Wrong alignment on FAccelByteModelsSnapshotMessage");
static_assert(sizeof(FAccelByteModelsSnapshotMessage) == 0x000038, "Wrong size on FAccelByteModelsSnapshotMessage");
static_assert(offsetof(FAccelByteModelsSnapshotMessage, ChatId) == 0x000000, "Member 'FAccelByteModelsSnapshotMessage::ChatId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSnapshotMessage, CreatedAt) == 0x000010, "Member 'FAccelByteModelsSnapshotMessage::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSnapshotMessage, Message) == 0x000018, "Member 'FAccelByteModelsSnapshotMessage::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSnapshotMessage, SenderId) == 0x000028, "Member 'FAccelByteModelsSnapshotMessage::SenderId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyJoinResponse
// 0x0060 (0x0090 - 0x0030)
struct FAccelByteModelsPartyJoinResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyJoinResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyJoinResponse");
static_assert(sizeof(FAccelByteModelsPartyJoinResponse) == 0x000090, "Wrong size on FAccelByteModelsPartyJoinResponse");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, PartyId) == 0x000030, "Member 'FAccelByteModelsPartyJoinResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, LeaderId) == 0x000040, "Member 'FAccelByteModelsPartyJoinResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Leader) == 0x000050, "Member 'FAccelByteModelsPartyJoinResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Members) == 0x000060, "Member 'FAccelByteModelsPartyJoinResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Invitees) == 0x000070, "Member 'FAccelByteModelsPartyJoinResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, InvitationToken) == 0x000080, "Member 'FAccelByteModelsPartyJoinResponse::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1PartyJoinedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV1PartyJoinedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV1PartyJoinedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1PartyJoinedPayload");
static_assert(sizeof(FAccelByteModelsMPV1PartyJoinedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV1PartyJoinedPayload");
static_assert(offsetof(FAccelByteModelsMPV1PartyJoinedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV1PartyJoinedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1PartyJoinedPayload, PartyId) == 0x000028, "Member 'FAccelByteModelsMPV1PartyJoinedPayload::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1PartyKickPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV1PartyKickPayload final : public FAccelByteModelsMPV1PartyJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV1PartyKickPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1PartyKickPayload");
static_assert(sizeof(FAccelByteModelsMPV1PartyKickPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV1PartyKickPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnershipDetail
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsEntitlementOwnershipDetail final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppType;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnershipDetail) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnershipDetail");
static_assert(sizeof(FAccelByteModelsEntitlementOwnershipDetail) == 0x000050, "Wrong size on FAccelByteModelsEntitlementOwnershipDetail");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, AppId) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnershipDetail::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, AppType) == 0x000010, "Member 'FAccelByteModelsEntitlementOwnershipDetail::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, Sku) == 0x000020, "Member 'FAccelByteModelsEntitlementOwnershipDetail::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, ItemId) == 0x000030, "Member 'FAccelByteModelsEntitlementOwnershipDetail::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, ItemNamespace) == 0x000040, "Member 'FAccelByteModelsEntitlementOwnershipDetail::ItemNamespace' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.DataInputValidation
// 0x0098 (0x0098 - 0x0000)
struct FDataInputValidation final
{
public:
	class FString                                 Field;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FValidation                            Validation;                                        // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataInputValidation) == 0x000008, "Wrong alignment on FDataInputValidation");
static_assert(sizeof(FDataInputValidation) == 0x000098, "Wrong size on FDataInputValidation");
static_assert(offsetof(FDataInputValidation, Field) == 0x000000, "Member 'FDataInputValidation::Field' has a wrong offset!");
static_assert(offsetof(FDataInputValidation, Validation) == 0x000010, "Member 'FDataInputValidation::Validation' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.InputValidation
// 0x0018 (0x0018 - 0x0000)
struct FInputValidation final
{
public:
	TArray<struct FDataInputValidation>           Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputValidation) == 0x000008, "Wrong alignment on FInputValidation");
static_assert(sizeof(FInputValidation) == 0x000018, "Wrong size on FInputValidation");
static_assert(offsetof(FInputValidation, Data) == 0x000000, "Member 'FInputValidation::Data' has a wrong offset!");
static_assert(offsetof(FInputValidation, Version) == 0x000010, "Member 'FInputValidation::Version' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupMember
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGroupMember final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberRoleId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupMember) == 0x000008, "Wrong alignment on FAccelByteModelsGroupMember");
static_assert(sizeof(FAccelByteModelsGroupMember) == 0x000020, "Wrong size on FAccelByteModelsGroupMember");
static_assert(offsetof(FAccelByteModelsGroupMember, UserId) == 0x000000, "Member 'FAccelByteModelsGroupMember::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMember, MemberRoleId) == 0x000010, "Member 'FAccelByteModelsGroupMember::MemberRoleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRuleInformation
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsRuleInformation final
{
public:
	class FString                                 RuleAttribute;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteRuleCriteria                        RuleCriteria;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RuleValue;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRuleInformation) == 0x000008, "Wrong alignment on FAccelByteModelsRuleInformation");
static_assert(sizeof(FAccelByteModelsRuleInformation) == 0x000018, "Wrong size on FAccelByteModelsRuleInformation");
static_assert(offsetof(FAccelByteModelsRuleInformation, RuleAttribute) == 0x000000, "Member 'FAccelByteModelsRuleInformation::RuleAttribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRuleInformation, RuleCriteria) == 0x000010, "Member 'FAccelByteModelsRuleInformation::RuleCriteria' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRuleInformation, RuleValue) == 0x000014, "Member 'FAccelByteModelsRuleInformation::RuleValue' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRules
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsRules final
{
public:
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsRuleInformation> RuleDetail;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRules) == 0x000008, "Wrong alignment on FAccelByteModelsRules");
static_assert(sizeof(FAccelByteModelsRules) == 0x000018, "Wrong size on FAccelByteModelsRules");
static_assert(offsetof(FAccelByteModelsRules, AllowedAction) == 0x000000, "Member 'FAccelByteModelsRules::AllowedAction' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRules, RuleDetail) == 0x000008, "Member 'FAccelByteModelsRules::RuleDetail' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupRules
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsGroupRules final
{
public:
	struct FJsonObjectWrapper                     GroupCustomRule;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsRules>          GroupPredefinedRules;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupRules) == 0x000008, "Wrong alignment on FAccelByteModelsGroupRules");
static_assert(sizeof(FAccelByteModelsGroupRules) == 0x000030, "Wrong size on FAccelByteModelsGroupRules");
static_assert(offsetof(FAccelByteModelsGroupRules, GroupCustomRule) == 0x000000, "Member 'FAccelByteModelsGroupRules::GroupCustomRule' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupRules, GroupPredefinedRules) == 0x000020, "Member 'FAccelByteModelsGroupRules::GroupPredefinedRules' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInformation
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsGroupInformation final
{
public:
	class FString                                 ConfigurationCode;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GroupDescription;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupIcon;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaxMember;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsGroupMember>    GroupMembers;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsGroupRules             GroupRules;                                        // 0x0098(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteGroupType                           GroupType;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsGroupInformation) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInformation");
static_assert(sizeof(FAccelByteModelsGroupInformation) == 0x0000D0, "Wrong size on FAccelByteModelsGroupInformation");
static_assert(offsetof(FAccelByteModelsGroupInformation, ConfigurationCode) == 0x000000, "Member 'FAccelByteModelsGroupInformation::ConfigurationCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, CustomAttributes) == 0x000010, "Member 'FAccelByteModelsGroupInformation::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupDescription) == 0x000030, "Member 'FAccelByteModelsGroupInformation::GroupDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupIcon) == 0x000040, "Member 'FAccelByteModelsGroupInformation::GroupIcon' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupId) == 0x000050, "Member 'FAccelByteModelsGroupInformation::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupMaxMember) == 0x000060, "Member 'FAccelByteModelsGroupInformation::GroupMaxMember' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupMembers) == 0x000068, "Member 'FAccelByteModelsGroupInformation::GroupMembers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupName) == 0x000078, "Member 'FAccelByteModelsGroupInformation::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupRegion) == 0x000088, "Member 'FAccelByteModelsGroupInformation::GroupRegion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupRules) == 0x000098, "Member 'FAccelByteModelsGroupInformation::GroupRules' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupType) == 0x0000C8, "Member 'FAccelByteModelsGroupInformation::GroupType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatCycleItemGetItemListPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsStatCycleItemGetItemListPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CycleId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatCycleItemGetItemListPayload) == 0x000008, "Wrong alignment on FAccelByteModelsStatCycleItemGetItemListPayload");
static_assert(sizeof(FAccelByteModelsStatCycleItemGetItemListPayload) == 0x000038, "Wrong size on FAccelByteModelsStatCycleItemGetItemListPayload");
static_assert(offsetof(FAccelByteModelsStatCycleItemGetItemListPayload, UserId) == 0x000018, "Member 'FAccelByteModelsStatCycleItemGetItemListPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleItemGetItemListPayload, CycleId) == 0x000028, "Member 'FAccelByteModelsStatCycleItemGetItemListPayload::CycleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatCycleItemGetConfigByCycleIdPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsStatCycleItemGetConfigByCycleIdPayload final : public FAccelByteModelsStatCycleItemGetItemListPayload
{
};
static_assert(alignof(FAccelByteModelsStatCycleItemGetConfigByCycleIdPayload) == 0x000008, "Wrong alignment on FAccelByteModelsStatCycleItemGetConfigByCycleIdPayload");
static_assert(sizeof(FAccelByteModelsStatCycleItemGetConfigByCycleIdPayload) == 0x000038, "Wrong size on FAccelByteModelsStatCycleItemGetConfigByCycleIdPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyInviteResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsPartyInviteResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 InviteeID;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyInviteResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyInviteResponse");
static_assert(sizeof(FAccelByteModelsPartyInviteResponse) == 0x000040, "Wrong size on FAccelByteModelsPartyInviteResponse");
static_assert(offsetof(FAccelByteModelsPartyInviteResponse, InviteeID) == 0x000030, "Member 'FAccelByteModelsPartyInviteResponse::InviteeID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsResetUserStatItemValue
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsResetUserStatItemValue final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsResetUserStatItemValue) == 0x000008, "Wrong alignment on FAccelByteModelsResetUserStatItemValue");
static_assert(sizeof(FAccelByteModelsResetUserStatItemValue) == 0x000020, "Wrong size on FAccelByteModelsResetUserStatItemValue");
static_assert(offsetof(FAccelByteModelsResetUserStatItemValue, UserId) == 0x000000, "Member 'FAccelByteModelsResetUserStatItemValue::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResetUserStatItemValue, StatCode) == 0x000010, "Member 'FAccelByteModelsResetUserStatItemValue::StatCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayByte
// 0x0010 (0x0010 - 0x0000)
struct FArrayByte final
{
public:
	TArray<uint8>                                 Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayByte) == 0x000008, "Wrong alignment on FArrayByte");
static_assert(sizeof(FArrayByte) == 0x000010, "Wrong size on FArrayByte");
static_assert(offsetof(FArrayByte, Content) == 0x000000, "Member 'FArrayByte::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BinaryFileStructure
// 0x0050 (0x0050 - 0x0000)
struct FBinaryFileStructure final
{
public:
	TMap<class FString, struct FArrayByte>        Segments;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinaryFileStructure) == 0x000008, "Wrong alignment on FBinaryFileStructure");
static_assert(sizeof(FBinaryFileStructure) == 0x000050, "Wrong size on FBinaryFileStructure");
static_assert(offsetof(FBinaryFileStructure, Segments) == 0x000000, "Member 'FBinaryFileStructure::Segments' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkedPlatform
// 0x0020 (0x0020 - 0x0000)
struct FAccountLinkedPlatform final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkedPlatform) == 0x000008, "Wrong alignment on FAccountLinkedPlatform");
static_assert(sizeof(FAccountLinkedPlatform) == 0x000020, "Wrong size on FAccountLinkedPlatform");
static_assert(offsetof(FAccountLinkedPlatform, Namespace) == 0x000000, "Member 'FAccountLinkedPlatform::Namespace' has a wrong offset!");
static_assert(offsetof(FAccountLinkedPlatform, PlatformUserId) == 0x000010, "Member 'FAccountLinkedPlatform::PlatformUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyRejectResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsPartyRejectResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyRejectResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyRejectResponse");
static_assert(sizeof(FAccelByteModelsPartyRejectResponse) == 0x000040, "Wrong size on FAccelByteModelsPartyRejectResponse");
static_assert(offsetof(FAccelByteModelsPartyRejectResponse, PartyId) == 0x000030, "Member 'FAccelByteModelsPartyRejectResponse::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItem
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUserStatItem final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatItem) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItem");
static_assert(sizeof(FAccelByteModelsUserStatItem) == 0x000030, "Wrong size on FAccelByteModelsUserStatItem");
static_assert(offsetof(FAccelByteModelsUserStatItem, StatCode) == 0x000000, "Member 'FAccelByteModelsUserStatItem::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItem, AdditionalData) == 0x000010, "Member 'FAccelByteModelsUserStatItem::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupListResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGetGroupListResponse final
{
public:
	TArray<struct FAccelByteModelsGroupInformation> data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupListResponse");
static_assert(sizeof(FAccelByteModelsGetGroupListResponse) == 0x000050, "Wrong size on FAccelByteModelsGetGroupListResponse");
static_assert(offsetof(FAccelByteModelsGetGroupListResponse, data) == 0x000000, "Member 'FAccelByteModelsGetGroupListResponse::data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetGroupListResponse, Paging) == 0x000010, "Member 'FAccelByteModelsGetGroupListResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameStandardEvent
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsGameStandardEvent
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameStandardEventName;                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameStandardEvent) == 0x000008, "Wrong alignment on FAccelByteModelsGameStandardEvent");
static_assert(sizeof(FAccelByteModelsGameStandardEvent) == 0x000018, "Wrong size on FAccelByteModelsGameStandardEvent");
static_assert(offsetof(FAccelByteModelsGameStandardEvent, GameStandardEventName) == 0x000008, "Member 'FAccelByteModelsGameStandardEvent::GameStandardEventName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQuestEndedPayload
// 0x0050 (0x0068 - 0x0018)
struct FAccelByteModelsQuestEndedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 QuestName;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestID;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestType;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestOutcome;                                      // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestDifficulty;                                   // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQuestEndedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsQuestEndedPayload");
static_assert(sizeof(FAccelByteModelsQuestEndedPayload) == 0x000068, "Wrong size on FAccelByteModelsQuestEndedPayload");
static_assert(offsetof(FAccelByteModelsQuestEndedPayload, QuestName) == 0x000018, "Member 'FAccelByteModelsQuestEndedPayload::QuestName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestEndedPayload, QuestID) == 0x000028, "Member 'FAccelByteModelsQuestEndedPayload::QuestID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestEndedPayload, QuestType) == 0x000038, "Member 'FAccelByteModelsQuestEndedPayload::QuestType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestEndedPayload, QuestOutcome) == 0x000048, "Member 'FAccelByteModelsQuestEndedPayload::QuestOutcome' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestEndedPayload, QuestDifficulty) == 0x000058, "Member 'FAccelByteModelsQuestEndedPayload::QuestDifficulty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeavePartyResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsLeavePartyResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsLeavePartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLeavePartyResponse");
static_assert(sizeof(FAccelByteModelsLeavePartyResponse) == 0x000030, "Wrong size on FAccelByteModelsLeavePartyResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQuerySystemMessagesResponseItem
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsQuerySystemMessagesResponseItem final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReadAt;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQuerySystemMessagesResponseItem) == 0x000008, "Wrong alignment on FAccelByteModelsQuerySystemMessagesResponseItem");
static_assert(sizeof(FAccelByteModelsQuerySystemMessagesResponseItem) == 0x000050, "Wrong size on FAccelByteModelsQuerySystemMessagesResponseItem");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, Id) == 0x000000, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, Category) == 0x000010, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::Category' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, Message) == 0x000020, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, CreatedAt) == 0x000030, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, UpdatedAt) == 0x000038, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, ExpiredAt) == 0x000040, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::ExpiredAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponseItem, ReadAt) == 0x000048, "Member 'FAccelByteModelsQuerySystemMessagesResponseItem::ReadAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMemberRequestGroupResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsMemberRequestGroupResponse
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMemberRequestGroupResponse) == 0x000008, "Wrong alignment on FAccelByteModelsMemberRequestGroupResponse");
static_assert(sizeof(FAccelByteModelsMemberRequestGroupResponse) == 0x000020, "Wrong size on FAccelByteModelsMemberRequestGroupResponse");
static_assert(offsetof(FAccelByteModelsMemberRequestGroupResponse, GroupId) == 0x000000, "Member 'FAccelByteModelsMemberRequestGroupResponse::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRequestGroupResponse, UserId) == 0x000010, "Member 'FAccelByteModelsMemberRequestGroupResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDataUpdateRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsPartyDataUpdateRequest final
{
public:
	int64                                         UpdatedAt;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Custom_attribute;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDataUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDataUpdateRequest");
static_assert(sizeof(FAccelByteModelsPartyDataUpdateRequest) == 0x000028, "Wrong size on FAccelByteModelsPartyDataUpdateRequest");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateRequest, UpdatedAt) == 0x000000, "Member 'FAccelByteModelsPartyDataUpdateRequest::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateRequest, Custom_attribute) == 0x000008, "Member 'FAccelByteModelsPartyDataUpdateRequest::Custom_attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchingAllies
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMatchingAllies final
{
public:
	TArray<struct FAccelByteModelsMatchingAlly>   Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchingAllies) == 0x000008, "Wrong alignment on FAccelByteModelsMatchingAllies");
static_assert(sizeof(FAccelByteModelsMatchingAllies) == 0x000010, "Wrong size on FAccelByteModelsMatchingAllies");
static_assert(offsetof(FAccelByteModelsMatchingAllies, Data) == 0x000000, "Member 'FAccelByteModelsMatchingAllies::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchmakingNotice
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsMatchmakingNotice final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteMatchmakingStatus                   Status;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsMatchingAllies         MatchingAllies;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMatchmakingNotice) == 0x000008, "Wrong alignment on FAccelByteModelsMatchmakingNotice");
static_assert(sizeof(FAccelByteModelsMatchmakingNotice) == 0x000088, "Wrong size on FAccelByteModelsMatchmakingNotice");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, MatchId) == 0x000000, "Member 'FAccelByteModelsMatchmakingNotice::MatchId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Status) == 0x000010, "Member 'FAccelByteModelsMatchmakingNotice::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, GameMode) == 0x000018, "Member 'FAccelByteModelsMatchmakingNotice::GameMode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Deployment) == 0x000028, "Member 'FAccelByteModelsMatchmakingNotice::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, ClientVersion) == 0x000038, "Member 'FAccelByteModelsMatchmakingNotice::ClientVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Joinable) == 0x000048, "Member 'FAccelByteModelsMatchmakingNotice::Joinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, MatchingAllies) == 0x000050, "Member 'FAccelByteModelsMatchmakingNotice::MatchingAllies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Region) == 0x000060, "Member 'FAccelByteModelsMatchmakingNotice::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Message) == 0x000070, "Member 'FAccelByteModelsMatchmakingNotice::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, ErrorCode) == 0x000080, "Member 'FAccelByteModelsMatchmakingNotice::ErrorCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAdminUserRecord
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsAdminUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Value;                                             // 0x0040(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAdminUserRecord) == 0x000008, "Wrong alignment on FAccelByteModelsAdminUserRecord");
static_assert(sizeof(FAccelByteModelsAdminUserRecord) == 0x000060, "Wrong size on FAccelByteModelsAdminUserRecord");
static_assert(offsetof(FAccelByteModelsAdminUserRecord, Key) == 0x000000, "Member 'FAccelByteModelsAdminUserRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminUserRecord, Namespace) == 0x000010, "Member 'FAccelByteModelsAdminUserRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminUserRecord, UserId) == 0x000020, "Member 'FAccelByteModelsAdminUserRecord::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminUserRecord, CreatedAt) == 0x000030, "Member 'FAccelByteModelsAdminUserRecord::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminUserRecord, UpdatedAt) == 0x000038, "Member 'FAccelByteModelsAdminUserRecord::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminUserRecord, Value) == 0x000040, "Member 'FAccelByteModelsAdminUserRecord::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptAgreementRequest
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsAcceptAgreementRequest final
{
public:
	class FString                                 LocalizedPolicyVersionId;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyVersionId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccepted;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsAcceptAgreementRequest) == 0x000008, "Wrong alignment on FAccelByteModelsAcceptAgreementRequest");
static_assert(sizeof(FAccelByteModelsAcceptAgreementRequest) == 0x000038, "Wrong size on FAccelByteModelsAcceptAgreementRequest");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, LocalizedPolicyVersionId) == 0x000000, "Member 'FAccelByteModelsAcceptAgreementRequest::LocalizedPolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, PolicyVersionId) == 0x000010, "Member 'FAccelByteModelsAcceptAgreementRequest::PolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, PolicyId) == 0x000020, "Member 'FAccelByteModelsAcceptAgreementRequest::PolicyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, IsAccepted) == 0x000030, "Member 'FAccelByteModelsAcceptAgreementRequest::IsAccepted' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsAcceptAgreementRequest
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsAcceptAgreementRequest final
{
public:
	TArray<struct FAccelByteModelsAcceptAgreementRequest> Content;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsAcceptAgreementRequest) == 0x000008, "Wrong alignment on FArrayModelsAcceptAgreementRequest");
static_assert(sizeof(FArrayModelsAcceptAgreementRequest) == 0x000010, "Wrong size on FArrayModelsAcceptAgreementRequest");
static_assert(offsetof(FArrayModelsAcceptAgreementRequest, Content) == 0x000000, "Member 'FArrayModelsAcceptAgreementRequest::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsJoinGroupResponse
// 0x0010 (0x0030 - 0x0020)
struct FAccelByteModelsJoinGroupResponse final : public FAccelByteModelsMemberRequestGroupResponse
{
public:
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsJoinGroupResponse) == 0x000008, "Wrong alignment on FAccelByteModelsJoinGroupResponse");
static_assert(sizeof(FAccelByteModelsJoinGroupResponse) == 0x000030, "Wrong size on FAccelByteModelsJoinGroupResponse");
static_assert(offsetof(FAccelByteModelsJoinGroupResponse, Status) == 0x000020, "Member 'FAccelByteModelsJoinGroupResponse::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionTeamsSetting
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2GameSessionTeamsSetting final
{
public:
	TArray<struct FAccelByteModelsV2GameSessionTeam> Teams;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionTeamsSetting) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionTeamsSetting");
static_assert(sizeof(FAccelByteModelsV2GameSessionTeamsSetting) == 0x000010, "Wrong size on FAccelByteModelsV2GameSessionTeamsSetting");
static_assert(offsetof(FAccelByteModelsV2GameSessionTeamsSetting, Teams) == 0x000000, "Member 'FAccelByteModelsV2GameSessionTeamsSetting::Teams' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserGroupInformationResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserGroupInformationResponse final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberRoleId;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserGroupInformationResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUserGroupInformationResponse");
static_assert(sizeof(FAccelByteModelsUserGroupInformationResponse) == 0x000040, "Wrong size on FAccelByteModelsUserGroupInformationResponse");
static_assert(offsetof(FAccelByteModelsUserGroupInformationResponse, GroupId) == 0x000000, "Member 'FAccelByteModelsUserGroupInformationResponse::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGroupInformationResponse, UserId) == 0x000010, "Member 'FAccelByteModelsUserGroupInformationResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGroupInformationResponse, Status) == 0x000020, "Member 'FAccelByteModelsUserGroupInformationResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserGroupInformationResponse, MemberRoleId) == 0x000030, "Member 'FAccelByteModelsUserGroupInformationResponse::MemberRoleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupMemberListResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGetGroupMemberListResponse final
{
public:
	TArray<struct FAccelByteModelsUserGroupInformationResponse> data;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupMemberListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupMemberListResponse");
static_assert(sizeof(FAccelByteModelsGetGroupMemberListResponse) == 0x000050, "Wrong size on FAccelByteModelsGetGroupMemberListResponse");
static_assert(offsetof(FAccelByteModelsGetGroupMemberListResponse, data) == 0x000000, "Member 'FAccelByteModelsGetGroupMemberListResponse::data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetGroupMemberListResponse, Paging) == 0x000010, "Member 'FAccelByteModelsGetGroupMemberListResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayStationIAPSync
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPlayStationIAPSync final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServiceLabel;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsPlayStationIAPSync) == 0x000008, "Wrong alignment on FAccelByteModelsPlayStationIAPSync");
static_assert(sizeof(FAccelByteModelsPlayStationIAPSync) == 0x000030, "Wrong size on FAccelByteModelsPlayStationIAPSync");
static_assert(offsetof(FAccelByteModelsPlayStationIAPSync, ProductId) == 0x000000, "Member 'FAccelByteModelsPlayStationIAPSync::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayStationIAPSync, Price) == 0x000010, "Member 'FAccelByteModelsPlayStationIAPSync::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayStationIAPSync, CurrencyCode) == 0x000018, "Member 'FAccelByteModelsPlayStationIAPSync::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayStationIAPSync, ServiceLabel) == 0x000028, "Member 'FAccelByteModelsPlayStationIAPSync::ServiceLabel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyJoinNotice
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPartyJoinNotice final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyJoinNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyJoinNotice");
static_assert(sizeof(FAccelByteModelsPartyJoinNotice) == 0x000010, "Wrong size on FAccelByteModelsPartyJoinNotice");
static_assert(offsetof(FAccelByteModelsPartyJoinNotice, UserId) == 0x000000, "Member 'FAccelByteModelsPartyJoinNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetUserGroupInfoResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsGetUserGroupInfoResponse final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberRoleId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetUserGroupInfoResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetUserGroupInfoResponse");
static_assert(sizeof(FAccelByteModelsGetUserGroupInfoResponse) == 0x000040, "Wrong size on FAccelByteModelsGetUserGroupInfoResponse");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, GroupId) == 0x000000, "Member 'FAccelByteModelsGetUserGroupInfoResponse::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, MemberRoleId) == 0x000010, "Member 'FAccelByteModelsGetUserGroupInfoResponse::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, Status) == 0x000020, "Member 'FAccelByteModelsGetUserGroupInfoResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, UserId) == 0x000030, "Member 'FAccelByteModelsGetUserGroupInfoResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteGetSystemMessageStatsRequest
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteGetSystemMessageStatsRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteGetSystemMessageStatsRequest) == 0x000001, "Wrong alignment on FAccelByteGetSystemMessageStatsRequest");
static_assert(sizeof(FAccelByteGetSystemMessageStatsRequest) == 0x000001, "Wrong size on FAccelByteGetSystemMessageStatsRequest");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformRewardItem
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPlatformRewardItem final
{
public:
	class FString                                 ItemType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformRewardItem) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformRewardItem");
static_assert(sizeof(FAccelByteModelsPlatformRewardItem) == 0x000030, "Wrong size on FAccelByteModelsPlatformRewardItem");
static_assert(offsetof(FAccelByteModelsPlatformRewardItem, ItemType) == 0x000000, "Member 'FAccelByteModelsPlatformRewardItem::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformRewardItem, ItemId) == 0x000010, "Member 'FAccelByteModelsPlatformRewardItem::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformRewardItem, ItemSku) == 0x000020, "Member 'FAccelByteModelsPlatformRewardItem::ItemSku' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsKickGroupMemberResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsKickGroupMemberResponse final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickedUserId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsKickGroupMemberResponse) == 0x000008, "Wrong alignment on FAccelByteModelsKickGroupMemberResponse");
static_assert(sizeof(FAccelByteModelsKickGroupMemberResponse) == 0x000020, "Wrong size on FAccelByteModelsKickGroupMemberResponse");
static_assert(offsetof(FAccelByteModelsKickGroupMemberResponse, GroupId) == 0x000000, "Member 'FAccelByteModelsKickGroupMemberResponse::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickGroupMemberResponse, KickedUserId) == 0x000010, "Member 'FAccelByteModelsKickGroupMemberResponse::KickedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsViewInfo
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsViewInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongDescription;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ViewId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     LocalExt;                                          // 0x0078(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsViewInfo) == 0x000008, "Wrong alignment on FAccelByteModelsViewInfo");
static_assert(sizeof(FAccelByteModelsViewInfo) == 0x000098, "Wrong size on FAccelByteModelsViewInfo");
static_assert(offsetof(FAccelByteModelsViewInfo, Title) == 0x000000, "Member 'FAccelByteModelsViewInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, Description) == 0x000010, "Member 'FAccelByteModelsViewInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, LongDescription) == 0x000020, "Member 'FAccelByteModelsViewInfo::LongDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, ViewId) == 0x000030, "Member 'FAccelByteModelsViewInfo::ViewId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, Namespace) == 0x000040, "Member 'FAccelByteModelsViewInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, Name) == 0x000050, "Member 'FAccelByteModelsViewInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, DisplayOrder) == 0x000060, "Member 'FAccelByteModelsViewInfo::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, CreatedAt) == 0x000068, "Member 'FAccelByteModelsViewInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsViewInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsViewInfo, LocalExt) == 0x000078, "Member 'FAccelByteModelsViewInfo::LocalExt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMemberRequestResponse
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsMemberRequestResponse final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGroupRequestType                    RequestType;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMemberRequestResponse) == 0x000008, "Wrong alignment on FAccelByteModelsMemberRequestResponse");
static_assert(sizeof(FAccelByteModelsMemberRequestResponse) == 0x000028, "Wrong size on FAccelByteModelsMemberRequestResponse");
static_assert(offsetof(FAccelByteModelsMemberRequestResponse, GroupId) == 0x000000, "Member 'FAccelByteModelsMemberRequestResponse::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRequestResponse, UserId) == 0x000010, "Member 'FAccelByteModelsMemberRequestResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRequestResponse, RequestType) == 0x000020, "Member 'FAccelByteModelsMemberRequestResponse::RequestType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetMemberRequestsListResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGetMemberRequestsListResponse final
{
public:
	TArray<struct FAccelByteModelsMemberRequestResponse> Data;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetMemberRequestsListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetMemberRequestsListResponse");
static_assert(sizeof(FAccelByteModelsGetMemberRequestsListResponse) == 0x000050, "Wrong size on FAccelByteModelsGetMemberRequestsListResponse");
static_assert(offsetof(FAccelByteModelsGetMemberRequestsListResponse, Data) == 0x000000, "Member 'FAccelByteModelsGetMemberRequestsListResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetMemberRequestsListResponse, Paging) == 0x000010, "Member 'FAccelByteModelsGetMemberRequestsListResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListServerResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsListServerResponse final
{
public:
	TArray<struct FAccelByteModelsServerInfo>     Servers;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListServerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListServerResponse");
static_assert(sizeof(FAccelByteModelsListServerResponse) == 0x000050, "Wrong size on FAccelByteModelsListServerResponse");
static_assert(offsetof(FAccelByteModelsListServerResponse, Servers) == 0x000000, "Member 'FAccelByteModelsListServerResponse::Servers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsListServerResponse, Paging) == 0x000010, "Member 'FAccelByteModelsListServerResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkStatItemInc
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsBulkStatItemInc final
{
public:
	float                                         inc;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 statCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkStatItemInc) == 0x000008, "Wrong alignment on FAccelByteModelsBulkStatItemInc");
static_assert(sizeof(FAccelByteModelsBulkStatItemInc) == 0x000018, "Wrong size on FAccelByteModelsBulkStatItemInc");
static_assert(offsetof(FAccelByteModelsBulkStatItemInc, inc) == 0x000000, "Member 'FAccelByteModelsBulkStatItemInc::inc' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemInc, statCode) == 0x000008, "Member 'FAccelByteModelsBulkStatItemInc::statCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQosServer
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsQosServer final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last_update;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQosServer) == 0x000008, "Wrong alignment on FAccelByteModelsQosServer");
static_assert(sizeof(FAccelByteModelsQosServer) == 0x000048, "Wrong size on FAccelByteModelsQosServer");
static_assert(offsetof(FAccelByteModelsQosServer, Ip) == 0x000000, "Member 'FAccelByteModelsQosServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Port) == 0x000010, "Member 'FAccelByteModelsQosServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Region) == 0x000018, "Member 'FAccelByteModelsQosServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Status) == 0x000028, "Member 'FAccelByteModelsQosServer::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Last_update) == 0x000038, "Member 'FAccelByteModelsQosServer::Last_update' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQosServerList
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsQosServerList final
{
public:
	TArray<struct FAccelByteModelsQosServer>      Servers;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQosServerList) == 0x000008, "Wrong alignment on FAccelByteModelsQosServerList");
static_assert(sizeof(FAccelByteModelsQosServerList) == 0x000010, "Wrong size on FAccelByteModelsQosServerList");
static_assert(offsetof(FAccelByteModelsQosServerList, Servers) == 0x000000, "Member 'FAccelByteModelsQosServerList::Servers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PublicUserOtherPlatformInfo
// 0x0070 (0x0070 - 0x0000)
struct FPublicUserOtherPlatformInfo final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformDisplayName;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPublicUserOtherPlatformInfo) == 0x000008, "Wrong alignment on FPublicUserOtherPlatformInfo");
static_assert(sizeof(FPublicUserOtherPlatformInfo) == 0x000070, "Wrong size on FPublicUserOtherPlatformInfo");
static_assert(offsetof(FPublicUserOtherPlatformInfo, DisplayName) == 0x000000, "Member 'FPublicUserOtherPlatformInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FPublicUserOtherPlatformInfo, Namespace) == 0x000010, "Member 'FPublicUserOtherPlatformInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FPublicUserOtherPlatformInfo, PlatformDisplayName) == 0x000020, "Member 'FPublicUserOtherPlatformInfo::PlatformDisplayName' has a wrong offset!");
static_assert(offsetof(FPublicUserOtherPlatformInfo, PlatformId) == 0x000030, "Member 'FPublicUserOtherPlatformInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FPublicUserOtherPlatformInfo, PlatformUserId) == 0x000040, "Member 'FPublicUserOtherPlatformInfo::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FPublicUserOtherPlatformInfo, UserId) == 0x000050, "Member 'FPublicUserOtherPlatformInfo::UserId' has a wrong offset!");
static_assert(offsetof(FPublicUserOtherPlatformInfo, UserName) == 0x000060, "Member 'FPublicUserOtherPlatformInfo::UserName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PublicPagedUserOtherPlatformInfo
// 0x0050 (0x0050 - 0x0000)
struct FPublicPagedUserOtherPlatformInfo final
{
public:
	TArray<struct FPublicUserOtherPlatformInfo>   Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPublicPagedUserOtherPlatformInfo) == 0x000008, "Wrong alignment on FPublicPagedUserOtherPlatformInfo");
static_assert(sizeof(FPublicPagedUserOtherPlatformInfo) == 0x000050, "Wrong size on FPublicPagedUserOtherPlatformInfo");
static_assert(offsetof(FPublicPagedUserOtherPlatformInfo, Data) == 0x000000, "Member 'FPublicPagedUserOtherPlatformInfo::Data' has a wrong offset!");
static_assert(offsetof(FPublicPagedUserOtherPlatformInfo, Paging) == 0x000010, "Member 'FPublicPagedUserOtherPlatformInfo::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSGameClientLeftPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsDSGameClientLeftPayload final : public FAccelByteModelsDSGameClientJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsDSGameClientLeftPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSGameClientLeftPayload");
static_assert(sizeof(FAccelByteModelsDSGameClientLeftPayload) == 0x000038, "Wrong size on FAccelByteModelsDSGameClientLeftPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMemberRolePermission
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsMemberRolePermission final
{
public:
	int32                                         Action;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourceName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMemberRolePermission) == 0x000008, "Wrong alignment on FAccelByteModelsMemberRolePermission");
static_assert(sizeof(FAccelByteModelsMemberRolePermission) == 0x000018, "Wrong size on FAccelByteModelsMemberRolePermission");
static_assert(offsetof(FAccelByteModelsMemberRolePermission, Action) == 0x000000, "Member 'FAccelByteModelsMemberRolePermission::Action' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRolePermission, ResourceName) == 0x000008, "Member 'FAccelByteModelsMemberRolePermission::ResourceName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMemberRole
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsMemberRole final
{
public:
	class FString                                 MemberRoleId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleName;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMemberRolePermission> MemberRolePermissions;                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMemberRole) == 0x000008, "Wrong alignment on FAccelByteModelsMemberRole");
static_assert(sizeof(FAccelByteModelsMemberRole) == 0x000030, "Wrong size on FAccelByteModelsMemberRole");
static_assert(offsetof(FAccelByteModelsMemberRole, MemberRoleId) == 0x000000, "Member 'FAccelByteModelsMemberRole::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRole, MemberRoleName) == 0x000010, "Member 'FAccelByteModelsMemberRole::MemberRoleName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRole, MemberRolePermissions) == 0x000020, "Member 'FAccelByteModelsMemberRole::MemberRolePermissions' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetMemberRolesListResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGetMemberRolesListResponse final
{
public:
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMemberRole>     Data;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetMemberRolesListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetMemberRolesListResponse");
static_assert(sizeof(FAccelByteModelsGetMemberRolesListResponse) == 0x000050, "Wrong size on FAccelByteModelsGetMemberRolesListResponse");
static_assert(offsetof(FAccelByteModelsGetMemberRolesListResponse, Paging) == 0x000000, "Member 'FAccelByteModelsGetMemberRolesListResponse::Paging' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetMemberRolesListResponse, Data) == 0x000040, "Member 'FAccelByteModelsGetMemberRolesListResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerStatusHistory
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsServerStatusHistory final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time_stamp;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerStatusHistory) == 0x000008, "Wrong alignment on FAccelByteModelsServerStatusHistory");
static_assert(sizeof(FAccelByteModelsServerStatusHistory) == 0x000020, "Wrong size on FAccelByteModelsServerStatusHistory");
static_assert(offsetof(FAccelByteModelsServerStatusHistory, Status) == 0x000000, "Member 'FAccelByteModelsServerStatusHistory::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerStatusHistory, Time_stamp) == 0x000010, "Member 'FAccelByteModelsServerStatusHistory::Time_stamp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMServer
// 0x0128 (0x0128 - 0x0000)
struct FAccelByteModelsDSMServer final
{
public:
	class FString                                 Custom_attribute;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_version;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    Ports;                                             // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Protocol;                                          // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsServerStatusHistory> Status_history;                               // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMServer) == 0x000008, "Wrong alignment on FAccelByteModelsDSMServer");
static_assert(sizeof(FAccelByteModelsDSMServer) == 0x000128, "Wrong size on FAccelByteModelsDSMServer");
static_assert(offsetof(FAccelByteModelsDSMServer, Custom_attribute) == 0x000000, "Member 'FAccelByteModelsDSMServer::Custom_attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Deployment) == 0x000010, "Member 'FAccelByteModelsDSMServer::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Game_version) == 0x000020, "Member 'FAccelByteModelsDSMServer::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Image_version) == 0x000030, "Member 'FAccelByteModelsDSMServer::Image_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Ip) == 0x000040, "Member 'FAccelByteModelsDSMServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Namespace) == 0x000050, "Member 'FAccelByteModelsDSMServer::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Params) == 0x000060, "Member 'FAccelByteModelsDSMServer::Params' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Pod_name) == 0x000070, "Member 'FAccelByteModelsDSMServer::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Port) == 0x000080, "Member 'FAccelByteModelsDSMServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Ports) == 0x000088, "Member 'FAccelByteModelsDSMServer::Ports' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Protocol) == 0x0000D8, "Member 'FAccelByteModelsDSMServer::Protocol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Provider) == 0x0000E8, "Member 'FAccelByteModelsDSMServer::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Region) == 0x0000F8, "Member 'FAccelByteModelsDSMServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Session_id) == 0x000108, "Member 'FAccelByteModelsDSMServer::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Status_history) == 0x000118, "Member 'FAccelByteModelsDSMServer::Status_history' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMSession
// 0x0168 (0x0168 - 0x0000)
struct FAccelByteModelsDSMSession final
{
public:
	struct FAccelByteModelsDSMServer              Server;                                            // 0x0000(0x0128)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMSession) == 0x000008, "Wrong alignment on FAccelByteModelsDSMSession");
static_assert(sizeof(FAccelByteModelsDSMSession) == 0x000168, "Wrong size on FAccelByteModelsDSMSession");
static_assert(offsetof(FAccelByteModelsDSMSession, Server) == 0x000000, "Member 'FAccelByteModelsDSMSession::Server' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Id) == 0x000128, "Member 'FAccelByteModelsDSMSession::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Namespace) == 0x000138, "Member 'FAccelByteModelsDSMSession::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Provider) == 0x000148, "Member 'FAccelByteModelsDSMSession::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Region) == 0x000158, "Member 'FAccelByteModelsDSMSession::Region' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerCreateSessionResponse
// 0x0168 (0x0168 - 0x0000)
struct FAccelByteModelsServerCreateSessionResponse final
{
public:
	struct FAccelByteModelsDSMSession             Session;                                           // 0x0000(0x0168)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerCreateSessionResponse) == 0x000008, "Wrong alignment on FAccelByteModelsServerCreateSessionResponse");
static_assert(sizeof(FAccelByteModelsServerCreateSessionResponse) == 0x000168, "Wrong size on FAccelByteModelsServerCreateSessionResponse");
static_assert(offsetof(FAccelByteModelsServerCreateSessionResponse, Session) == 0x000000, "Member 'FAccelByteModelsServerCreateSessionResponse::Session' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingCanceledNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2MatchmakingCanceledNotif final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIDs;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingCanceledNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingCanceledNotif");
static_assert(sizeof(FAccelByteModelsV2MatchmakingCanceledNotif) == 0x000020, "Wrong size on FAccelByteModelsV2MatchmakingCanceledNotif");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCanceledNotif, Namespace) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingCanceledNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCanceledNotif, UserIDs) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingCanceledNotif::UserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardRankingResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsLeaderboardRankingResult final
{
public:
	TArray<struct FAccelByteModelsUserPoint>      data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardRankingResult) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardRankingResult");
static_assert(sizeof(FAccelByteModelsLeaderboardRankingResult) == 0x000050, "Wrong size on FAccelByteModelsLeaderboardRankingResult");
static_assert(offsetof(FAccelByteModelsLeaderboardRankingResult, data) == 0x000000, "Member 'FAccelByteModelsLeaderboardRankingResult::data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardRankingResult, paging) == 0x000010, "Member 'FAccelByteModelsLeaderboardRankingResult::paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBanGroupChatRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBanGroupChatRequest final
{
public:
	TArray<class FString>                         UserIDs;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBanGroupChatRequest) == 0x000008, "Wrong alignment on FAccelByteModelsBanGroupChatRequest");
static_assert(sizeof(FAccelByteModelsBanGroupChatRequest) == 0x000010, "Wrong size on FAccelByteModelsBanGroupChatRequest");
static_assert(offsetof(FAccelByteModelsBanGroupChatRequest, UserIDs) == 0x000000, "Member 'FAccelByteModelsBanGroupChatRequest::UserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateCustomRulesRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUpdateCustomRulesRequest final
{
public:
	struct FJsonObjectWrapper                     GroupCustomRule;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateCustomRulesRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateCustomRulesRequest");
static_assert(sizeof(FAccelByteModelsUpdateCustomRulesRequest) == 0x000020, "Wrong size on FAccelByteModelsUpdateCustomRulesRequest");
static_assert(offsetof(FAccelByteModelsUpdateCustomRulesRequest, GroupCustomRule) == 0x000000, "Member 'FAccelByteModelsUpdateCustomRulesRequest::GroupCustomRule' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRegisterLocalServerRequest
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsRegisterLocalServerRequest final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Custom_attribute;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRegisterLocalServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsRegisterLocalServerRequest");
static_assert(sizeof(FAccelByteModelsRegisterLocalServerRequest) == 0x000038, "Wrong size on FAccelByteModelsRegisterLocalServerRequest");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Ip) == 0x000000, "Member 'FAccelByteModelsRegisterLocalServerRequest::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Name) == 0x000010, "Member 'FAccelByteModelsRegisterLocalServerRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Port) == 0x000020, "Member 'FAccelByteModelsRegisterLocalServerRequest::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Custom_attribute) == 0x000028, "Member 'FAccelByteModelsRegisterLocalServerRequest::Custom_attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementGrantData
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsEntitlementGrantData final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementGrantData) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementGrantData");
static_assert(sizeof(FAccelByteModelsEntitlementGrantData) == 0x000050, "Wrong size on FAccelByteModelsEntitlementGrantData");
static_assert(offsetof(FAccelByteModelsEntitlementGrantData, ItemId) == 0x000000, "Member 'FAccelByteModelsEntitlementGrantData::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrantData, ItemNamespace) == 0x000010, "Member 'FAccelByteModelsEntitlementGrantData::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrantData, StoreId) == 0x000020, "Member 'FAccelByteModelsEntitlementGrantData::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrantData, GrantedCode) == 0x000030, "Member 'FAccelByteModelsEntitlementGrantData::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrantData, Source) == 0x000040, "Member 'FAccelByteModelsEntitlementGrantData::Source' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRanking
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUserRanking final
{
public:
	float                                         point;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rank;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hidden;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     additionalData;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRanking) == 0x000008, "Wrong alignment on FAccelByteModelsUserRanking");
static_assert(sizeof(FAccelByteModelsUserRanking) == 0x000030, "Wrong size on FAccelByteModelsUserRanking");
static_assert(offsetof(FAccelByteModelsUserRanking, point) == 0x000000, "Member 'FAccelByteModelsUserRanking::point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRanking, rank) == 0x000004, "Member 'FAccelByteModelsUserRanking::rank' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRanking, hidden) == 0x000008, "Member 'FAccelByteModelsUserRanking::hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRanking, additionalData) == 0x000010, "Member 'FAccelByteModelsUserRanking::additionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRankingData
// 0x0100 (0x0100 - 0x0000)
struct FAccelByteModelsUserRankingData final
{
public:
	struct FAccelByteModelsUserRanking            allTime;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            current;                                           // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            daily;                                             // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            monthly;                                           // 0x0090(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            weekly;                                            // 0x00C0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 userId;                                            // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRankingData) == 0x000008, "Wrong alignment on FAccelByteModelsUserRankingData");
static_assert(sizeof(FAccelByteModelsUserRankingData) == 0x000100, "Wrong size on FAccelByteModelsUserRankingData");
static_assert(offsetof(FAccelByteModelsUserRankingData, allTime) == 0x000000, "Member 'FAccelByteModelsUserRankingData::allTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, current) == 0x000030, "Member 'FAccelByteModelsUserRankingData::current' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, daily) == 0x000060, "Member 'FAccelByteModelsUserRankingData::daily' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, monthly) == 0x000090, "Member 'FAccelByteModelsUserRankingData::monthly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, weekly) == 0x0000C0, "Member 'FAccelByteModelsUserRankingData::weekly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, userId) == 0x0000F0, "Member 'FAccelByteModelsUserRankingData::userId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMuteGroupChatRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsMuteGroupChatRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMuteGroupChatRequest) == 0x000008, "Wrong alignment on FAccelByteModelsMuteGroupChatRequest");
static_assert(sizeof(FAccelByteModelsMuteGroupChatRequest) == 0x000018, "Wrong size on FAccelByteModelsMuteGroupChatRequest");
static_assert(offsetof(FAccelByteModelsMuteGroupChatRequest, UserId) == 0x000000, "Member 'FAccelByteModelsMuteGroupChatRequest::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMuteGroupChatRequest, Duration) == 0x000010, "Member 'FAccelByteModelsMuteGroupChatRequest::Duration' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFetchUser
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsFetchUser final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsFetchUser) == 0x000008, "Wrong alignment on FAccelByteModelsFetchUser");
static_assert(sizeof(FAccelByteModelsFetchUser) == 0x000028, "Wrong size on FAccelByteModelsFetchUser");
static_assert(offsetof(FAccelByteModelsFetchUser, ProfileId) == 0x000000, "Member 'FAccelByteModelsFetchUser::ProfileId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFetchUser, StatCode) == 0x000010, "Member 'FAccelByteModelsFetchUser::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFetchUser, Value) == 0x000020, "Member 'FAccelByteModelsFetchUser::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedLeaderboardData
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedLeaderboardData final
{
public:
	TArray<struct FAccelByteModelsLeaderboardData> Data;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedLeaderboardData) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedLeaderboardData");
static_assert(sizeof(FAccelByteModelsPaginatedLeaderboardData) == 0x000050, "Wrong size on FAccelByteModelsPaginatedLeaderboardData");
static_assert(offsetof(FAccelByteModelsPaginatedLeaderboardData, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedLeaderboardData::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedLeaderboardData, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedLeaderboardData::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemCriteriaV2
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsItemCriteriaV2 final
{
public:
	class FString                                 StoreId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSubCategoryItem;                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ActiveOnly;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableDate;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetNamespace;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EAccelByteItemListSortBy>              SortBy;                                            // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemCriteriaV2) == 0x000008, "Wrong alignment on FAccelByteModelsItemCriteriaV2");
static_assert(sizeof(FAccelByteModelsItemCriteriaV2) == 0x0000A0, "Wrong size on FAccelByteModelsItemCriteriaV2");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, StoreId) == 0x000000, "Member 'FAccelByteModelsItemCriteriaV2::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, CategoryPath) == 0x000010, "Member 'FAccelByteModelsItemCriteriaV2::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, IncludeSubCategoryItem) == 0x000020, "Member 'FAccelByteModelsItemCriteriaV2::IncludeSubCategoryItem' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, ItemType) == 0x000021, "Member 'FAccelByteModelsItemCriteriaV2::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, AppType) == 0x000022, "Member 'FAccelByteModelsItemCriteriaV2::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, BaseAppId) == 0x000028, "Member 'FAccelByteModelsItemCriteriaV2::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, Tags) == 0x000038, "Member 'FAccelByteModelsItemCriteriaV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, Features) == 0x000048, "Member 'FAccelByteModelsItemCriteriaV2::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, ActiveOnly) == 0x000058, "Member 'FAccelByteModelsItemCriteriaV2::ActiveOnly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, Region) == 0x000060, "Member 'FAccelByteModelsItemCriteriaV2::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, AvailableDate) == 0x000070, "Member 'FAccelByteModelsItemCriteriaV2::AvailableDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, TargetNamespace) == 0x000078, "Member 'FAccelByteModelsItemCriteriaV2::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, Offset) == 0x000088, "Member 'FAccelByteModelsItemCriteriaV2::Offset' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, Limit) == 0x00008C, "Member 'FAccelByteModelsItemCriteriaV2::Limit' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteriaV2, SortBy) == 0x000090, "Member 'FAccelByteModelsItemCriteriaV2::SortBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsXBoxDLCSync
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsXBoxDLCSync final
{
public:
	class FString                                 XstsToken;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsXBoxDLCSync) == 0x000008, "Wrong alignment on FAccelByteModelsXBoxDLCSync");
static_assert(sizeof(FAccelByteModelsXBoxDLCSync) == 0x000010, "Wrong size on FAccelByteModelsXBoxDLCSync");
static_assert(offsetof(FAccelByteModelsXBoxDLCSync, XstsToken) == 0x000000, "Member 'FAccelByteModelsXBoxDLCSync::XstsToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserRankingDataValueV3
// 0x0010 (0x0050 - 0x0040)
struct FAccelByteModelsBulkUserRankingDataValueV3 final : public FAccelByteModelsUserRankingDataV3
{
public:
	class FString                                 UserId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserRankingDataValueV3) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserRankingDataValueV3");
static_assert(sizeof(FAccelByteModelsBulkUserRankingDataValueV3) == 0x000050, "Wrong size on FAccelByteModelsBulkUserRankingDataValueV3");
static_assert(offsetof(FAccelByteModelsBulkUserRankingDataValueV3, UserId) == 0x000040, "Member 'FAccelByteModelsBulkUserRankingDataValueV3::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserRankingDataV3
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkUserRankingDataV3 final
{
public:
	TArray<struct FAccelByteModelsBulkUserRankingDataValueV3> Data;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserRankingDataV3) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserRankingDataV3");
static_assert(sizeof(FAccelByteModelsBulkUserRankingDataV3) == 0x000010, "Wrong size on FAccelByteModelsBulkUserRankingDataV3");
static_assert(offsetof(FAccelByteModelsBulkUserRankingDataV3, Data) == 0x000000, "Member 'FAccelByteModelsBulkUserRankingDataV3::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartySendNotifResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsPartySendNotifResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsPartySendNotifResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartySendNotifResponse");
static_assert(sizeof(FAccelByteModelsPartySendNotifResponse) == 0x000030, "Wrong size on FAccelByteModelsPartySendNotifResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerRecordSizeResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPlayerRecordSizeResponse final
{
public:
	int32                                         CurrentSize;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingSize;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerRecordSizeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerRecordSizeResponse");
static_assert(sizeof(FAccelByteModelsPlayerRecordSizeResponse) == 0x000030, "Wrong size on FAccelByteModelsPlayerRecordSizeResponse");
static_assert(offsetof(FAccelByteModelsPlayerRecordSizeResponse, CurrentSize) == 0x000000, "Member 'FAccelByteModelsPlayerRecordSizeResponse::CurrentSize' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordSizeResponse, Key) == 0x000008, "Member 'FAccelByteModelsPlayerRecordSizeResponse::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordSizeResponse, RemainingSize) == 0x000018, "Member 'FAccelByteModelsPlayerRecordSizeResponse::RemainingSize' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordSizeResponse, UserId) == 0x000020, "Member 'FAccelByteModelsPlayerRecordSizeResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse final
{
public:
	TArray<struct FAccelByteModelsPlayerRecordSizeResponse> Data;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse");
static_assert(sizeof(FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse) == 0x000010, "Wrong size on FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse");
static_assert(offsetof(FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedBulkGetPlayerRecordSizeResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchmakingResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsMatchmakingResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsMatchmakingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsMatchmakingResponse");
static_assert(sizeof(FAccelByteModelsMatchmakingResponse) == 0x000030, "Wrong size on FAccelByteModelsMatchmakingResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReadyConsentRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReadyConsentRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReadyConsentRequest) == 0x000008, "Wrong alignment on FAccelByteModelsReadyConsentRequest");
static_assert(sizeof(FAccelByteModelsReadyConsentRequest) == 0x000020, "Wrong size on FAccelByteModelsReadyConsentRequest");
static_assert(offsetof(FAccelByteModelsReadyConsentRequest, Code) == 0x000000, "Member 'FAccelByteModelsReadyConsentRequest::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReadyConsentRequest, MatchId) == 0x000010, "Member 'FAccelByteModelsReadyConsentRequest::MatchId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRejectConsentRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsRejectConsentRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRejectConsentRequest) == 0x000008, "Wrong alignment on FAccelByteModelsRejectConsentRequest");
static_assert(sizeof(FAccelByteModelsRejectConsentRequest) == 0x000020, "Wrong size on FAccelByteModelsRejectConsentRequest");
static_assert(offsetof(FAccelByteModelsRejectConsentRequest, Code) == 0x000000, "Member 'FAccelByteModelsRejectConsentRequest::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRejectConsentRequest, MatchId) == 0x000010, "Member 'FAccelByteModelsRejectConsentRequest::MatchId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSHubConnectedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsDSHubConnectedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 PodName;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSHubConnectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSHubConnectedPayload");
static_assert(sizeof(FAccelByteModelsDSHubConnectedPayload) == 0x000028, "Wrong size on FAccelByteModelsDSHubConnectedPayload");
static_assert(offsetof(FAccelByteModelsDSHubConnectedPayload, PodName) == 0x000018, "Member 'FAccelByteModelsDSHubConnectedPayload::PodName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSHubDisconnectedPayload
// 0x0008 (0x0030 - 0x0028)
struct FAccelByteModelsDSHubDisconnectedPayload final : public FAccelByteModelsDSHubConnectedPayload
{
public:
	int32                                         StatusCode;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsDSHubDisconnectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSHubDisconnectedPayload");
static_assert(sizeof(FAccelByteModelsDSHubDisconnectedPayload) == 0x000030, "Wrong size on FAccelByteModelsDSHubDisconnectedPayload");
static_assert(offsetof(FAccelByteModelsDSHubDisconnectedPayload, StatusCode) == 0x000028, "Member 'FAccelByteModelsDSHubDisconnectedPayload::StatusCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingTicketPlayerData
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsV2MatchmakingTicketPlayerData final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingTicketPlayerData) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingTicketPlayerData");
static_assert(sizeof(FAccelByteModelsV2MatchmakingTicketPlayerData) == 0x000030, "Wrong size on FAccelByteModelsV2MatchmakingTicketPlayerData");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketPlayerData, PlayerID) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingTicketPlayerData::PlayerID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketPlayerData, Attributes) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingTicketPlayerData::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingTicket
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsV2MatchmakingTicket final
{
public:
	class FString                                 TicketID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    Latencies;                                         // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2MatchmakingTicketPlayerData> Players;                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingTicket) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingTicket");
static_assert(sizeof(FAccelByteModelsV2MatchmakingTicket) == 0x000088, "Wrong size on FAccelByteModelsV2MatchmakingTicket");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicket, TicketID) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingTicket::TicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicket, MatchPool) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingTicket::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicket, CreatedAt) == 0x000020, "Member 'FAccelByteModelsV2MatchmakingTicket::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicket, Latencies) == 0x000028, "Member 'FAccelByteModelsV2MatchmakingTicket::Latencies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicket, Players) == 0x000078, "Member 'FAccelByteModelsV2MatchmakingTicket::Players' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSBackfillProposalReceivedPayload
// 0x0060 (0x0088 - 0x0028)
struct FAccelByteModelsDSBackfillProposalReceivedPayload : public FAccelByteModelsDSRegisteredPayload
{
public:
	class FString                                 BackfillTicketId;                                  // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProposalId;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionId;                                     // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2GameSessionTeam> ProposedTeams;                                  // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2MatchmakingTicket> AddedTickets;                                 // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSBackfillProposalReceivedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSBackfillProposalReceivedPayload");
static_assert(sizeof(FAccelByteModelsDSBackfillProposalReceivedPayload) == 0x000088, "Wrong size on FAccelByteModelsDSBackfillProposalReceivedPayload");
static_assert(offsetof(FAccelByteModelsDSBackfillProposalReceivedPayload, BackfillTicketId) == 0x000028, "Member 'FAccelByteModelsDSBackfillProposalReceivedPayload::BackfillTicketId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSBackfillProposalReceivedPayload, ProposalId) == 0x000038, "Member 'FAccelByteModelsDSBackfillProposalReceivedPayload::ProposalId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSBackfillProposalReceivedPayload, MatchPool) == 0x000048, "Member 'FAccelByteModelsDSBackfillProposalReceivedPayload::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSBackfillProposalReceivedPayload, GameSessionId) == 0x000058, "Member 'FAccelByteModelsDSBackfillProposalReceivedPayload::GameSessionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSBackfillProposalReceivedPayload, ProposedTeams) == 0x000068, "Member 'FAccelByteModelsDSBackfillProposalReceivedPayload::ProposedTeams' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSBackfillProposalReceivedPayload, AddedTickets) == 0x000078, "Member 'FAccelByteModelsDSBackfillProposalReceivedPayload::AddedTickets' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSBackfillProposalAcceptedPayload
// 0x0000 (0x0088 - 0x0088)
struct FAccelByteModelsDSBackfillProposalAcceptedPayload final : public FAccelByteModelsDSBackfillProposalReceivedPayload
{
};
static_assert(alignof(FAccelByteModelsDSBackfillProposalAcceptedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSBackfillProposalAcceptedPayload");
static_assert(sizeof(FAccelByteModelsDSBackfillProposalAcceptedPayload) == 0x000088, "Wrong size on FAccelByteModelsDSBackfillProposalAcceptedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatReadChatData
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsChatReadChatData final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           ChatIds;                                           // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatReadChatData) == 0x000008, "Wrong alignment on FAccelByteModelsChatReadChatData");
static_assert(sizeof(FAccelByteModelsChatReadChatData) == 0x000060, "Wrong size on FAccelByteModelsChatReadChatData");
static_assert(offsetof(FAccelByteModelsChatReadChatData, TopicId) == 0x000000, "Member 'FAccelByteModelsChatReadChatData::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatReadChatData, ChatIds) == 0x000010, "Member 'FAccelByteModelsChatReadChatData::ChatIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFriendRequestData
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsFriendRequestData final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RequestedAt;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFriendRequestData) == 0x000008, "Wrong alignment on FAccelByteModelsFriendRequestData");
static_assert(sizeof(FAccelByteModelsFriendRequestData) == 0x000018, "Wrong size on FAccelByteModelsFriendRequestData");
static_assert(offsetof(FAccelByteModelsFriendRequestData, FriendId) == 0x000000, "Member 'FAccelByteModelsFriendRequestData::FriendId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFriendRequestData, RequestedAt) == 0x000010, "Member 'FAccelByteModelsFriendRequestData::RequestedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryTopicByIdResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsChatQueryTopicByIdResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsChatTopicQueryData     Data;                                              // 0x0008(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatQueryTopicByIdResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryTopicByIdResponse");
static_assert(sizeof(FAccelByteModelsChatQueryTopicByIdResponse) == 0x000050, "Wrong size on FAccelByteModelsChatQueryTopicByIdResponse");
static_assert(offsetof(FAccelByteModelsChatQueryTopicByIdResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatQueryTopicByIdResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryTopicByIdResponse, Data) == 0x000008, "Member 'FAccelByteModelsChatQueryTopicByIdResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDistributionAttributes
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsDistributionAttributes final
{
public:
	struct FAccelByteModelsAttributes             Attributes;                                        // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDistributionAttributes) == 0x000008, "Wrong alignment on FAccelByteModelsDistributionAttributes");
static_assert(sizeof(FAccelByteModelsDistributionAttributes) == 0x000040, "Wrong size on FAccelByteModelsDistributionAttributes");
static_assert(offsetof(FAccelByteModelsDistributionAttributes, Attributes) == 0x000000, "Member 'FAccelByteModelsDistributionAttributes::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReadyConsentNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReadyConsentNotice final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReadyConsentNotice) == 0x000008, "Wrong alignment on FAccelByteModelsReadyConsentNotice");
static_assert(sizeof(FAccelByteModelsReadyConsentNotice) == 0x000020, "Wrong size on FAccelByteModelsReadyConsentNotice");
static_assert(offsetof(FAccelByteModelsReadyConsentNotice, MatchId) == 0x000000, "Member 'FAccelByteModelsReadyConsentNotice::MatchId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReadyConsentNotice, UserId) == 0x000010, "Member 'FAccelByteModelsReadyConsentNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionRecentPlayer
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsV2SessionRecentPlayer final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastPlayedTime;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionRecentPlayer) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionRecentPlayer");
static_assert(sizeof(FAccelByteModelsV2SessionRecentPlayer) == 0x000038, "Wrong size on FAccelByteModelsV2SessionRecentPlayer");
static_assert(offsetof(FAccelByteModelsV2SessionRecentPlayer, Namespace) == 0x000000, "Member 'FAccelByteModelsV2SessionRecentPlayer::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionRecentPlayer, PlatformName) == 0x000010, "Member 'FAccelByteModelsV2SessionRecentPlayer::PlatformName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionRecentPlayer, UserId) == 0x000020, "Member 'FAccelByteModelsV2SessionRecentPlayer::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionRecentPlayer, LastPlayedTime) == 0x000030, "Member 'FAccelByteModelsV2SessionRecentPlayer::LastPlayedTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTwitchDropEntitlement
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsTwitchDropEntitlement final
{
public:
	class FString                                 GameId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTwitchDropEntitlement) == 0x000008, "Wrong alignment on FAccelByteModelsTwitchDropEntitlement");
static_assert(sizeof(FAccelByteModelsTwitchDropEntitlement) == 0x000030, "Wrong size on FAccelByteModelsTwitchDropEntitlement");
static_assert(offsetof(FAccelByteModelsTwitchDropEntitlement, GameId) == 0x000000, "Member 'FAccelByteModelsTwitchDropEntitlement::GameId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTwitchDropEntitlement, Region) == 0x000010, "Member 'FAccelByteModelsTwitchDropEntitlement::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTwitchDropEntitlement, Language) == 0x000020, "Member 'FAccelByteModelsTwitchDropEntitlement::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRejectConsentNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsRejectConsentNotice final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRejectConsentNotice) == 0x000008, "Wrong alignment on FAccelByteModelsRejectConsentNotice");
static_assert(sizeof(FAccelByteModelsRejectConsentNotice) == 0x000020, "Wrong size on FAccelByteModelsRejectConsentNotice");
static_assert(offsetof(FAccelByteModelsRejectConsentNotice, MatchId) == 0x000000, "Member 'FAccelByteModelsRejectConsentNotice::MatchId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRejectConsentNotice, UserId) == 0x000010, "Member 'FAccelByteModelsRejectConsentNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderCurrencySummary
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsOrderCurrencySummary final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemCurrencyType                    CurrencyType;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Decimals;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsOrderCurrencySummary) == 0x000008, "Wrong alignment on FAccelByteModelsOrderCurrencySummary");
static_assert(sizeof(FAccelByteModelsOrderCurrencySummary) == 0x000040, "Wrong size on FAccelByteModelsOrderCurrencySummary");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, CurrencyCode) == 0x000000, "Member 'FAccelByteModelsOrderCurrencySummary::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, CurrencySymbol) == 0x000010, "Member 'FAccelByteModelsOrderCurrencySummary::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, CurrencyType) == 0x000020, "Member 'FAccelByteModelsOrderCurrencySummary::CurrencyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, Namespace) == 0x000028, "Member 'FAccelByteModelsOrderCurrencySummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, Decimals) == 0x000038, "Member 'FAccelByteModelsOrderCurrencySummary::Decimals' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderInfoTransaction
// 0x0110 (0x0110 - 0x0000)
struct FAccelByteModelsOrderInfoTransaction final
{
public:
	class FString                                 TransactionId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vat;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SalesTax;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsOrderCurrencySummary   Currency;                                          // 0x0020(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentProviderFee;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PaymentMethod;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentMethodFee;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MerchantId;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalTransactionId;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalStatusCode;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalMessage;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionStartTime;                              // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionEndTime;                                // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderInfoTransaction) == 0x000008, "Wrong alignment on FAccelByteModelsOrderInfoTransaction");
static_assert(sizeof(FAccelByteModelsOrderInfoTransaction) == 0x000110, "Wrong size on FAccelByteModelsOrderInfoTransaction");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, TransactionId) == 0x000000, "Member 'FAccelByteModelsOrderInfoTransaction::TransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Amount) == 0x000010, "Member 'FAccelByteModelsOrderInfoTransaction::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Vat) == 0x000014, "Member 'FAccelByteModelsOrderInfoTransaction::Vat' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, SalesTax) == 0x000018, "Member 'FAccelByteModelsOrderInfoTransaction::SalesTax' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Currency) == 0x000020, "Member 'FAccelByteModelsOrderInfoTransaction::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Type) == 0x000060, "Member 'FAccelByteModelsOrderInfoTransaction::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Status) == 0x000070, "Member 'FAccelByteModelsOrderInfoTransaction::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Provider) == 0x000080, "Member 'FAccelByteModelsOrderInfoTransaction::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, PaymentProviderFee) == 0x000090, "Member 'FAccelByteModelsOrderInfoTransaction::PaymentProviderFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, PaymentMethod) == 0x000098, "Member 'FAccelByteModelsOrderInfoTransaction::PaymentMethod' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, PaymentMethodFee) == 0x0000A8, "Member 'FAccelByteModelsOrderInfoTransaction::PaymentMethodFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, MerchantId) == 0x0000B0, "Member 'FAccelByteModelsOrderInfoTransaction::MerchantId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, ExternalTransactionId) == 0x0000C0, "Member 'FAccelByteModelsOrderInfoTransaction::ExternalTransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, ExternalStatusCode) == 0x0000D0, "Member 'FAccelByteModelsOrderInfoTransaction::ExternalStatusCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, ExternalMessage) == 0x0000E0, "Member 'FAccelByteModelsOrderInfoTransaction::ExternalMessage' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, TransactionStartTime) == 0x0000F0, "Member 'FAccelByteModelsOrderInfoTransaction::TransactionStartTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, TransactionEndTime) == 0x000100, "Member 'FAccelByteModelsOrderInfoTransaction::TransactionEndTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListUserDataRequest
// 0x0010 (0x0010 - 0x0000)
struct FListUserDataRequest final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListUserDataRequest) == 0x000008, "Wrong alignment on FListUserDataRequest");
static_assert(sizeof(FListUserDataRequest) == 0x000010, "Wrong size on FListUserDataRequest");
static_assert(offsetof(FListUserDataRequest, UserIds) == 0x000000, "Member 'FListUserDataRequest::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRematchmakingNotice
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsRematchmakingNotice final
{
public:
	int32                                         BanDuration;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRematchmakingNotice) == 0x000004, "Wrong alignment on FAccelByteModelsRematchmakingNotice");
static_assert(sizeof(FAccelByteModelsRematchmakingNotice) == 0x000004, "Wrong size on FAccelByteModelsRematchmakingNotice");
static_assert(offsetof(FAccelByteModelsRematchmakingNotice, BanDuration) == 0x000000, "Member 'FAccelByteModelsRematchmakingNotice::BanDuration' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDsNotice
// 0x00F8 (0x00F8 - 0x0000)
struct FAccelByteModelsDsNotice final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PodName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageVersion;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IsOK;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    Ports;                                             // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDsNotice) == 0x000008, "Wrong alignment on FAccelByteModelsDsNotice");
static_assert(sizeof(FAccelByteModelsDsNotice) == 0x0000F8, "Wrong size on FAccelByteModelsDsNotice");
static_assert(offsetof(FAccelByteModelsDsNotice, Status) == 0x000000, "Member 'FAccelByteModelsDsNotice::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, MatchId) == 0x000010, "Member 'FAccelByteModelsDsNotice::MatchId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, PodName) == 0x000020, "Member 'FAccelByteModelsDsNotice::PodName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Ip) == 0x000030, "Member 'FAccelByteModelsDsNotice::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, ImageVersion) == 0x000040, "Member 'FAccelByteModelsDsNotice::ImageVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, ServerVersion) == 0x000050, "Member 'FAccelByteModelsDsNotice::ServerVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Port) == 0x000060, "Member 'FAccelByteModelsDsNotice::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Message) == 0x000068, "Member 'FAccelByteModelsDsNotice::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, IsOK) == 0x000078, "Member 'FAccelByteModelsDsNotice::IsOK' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Region) == 0x000088, "Member 'FAccelByteModelsDsNotice::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Ports) == 0x000098, "Member 'FAccelByteModelsDsNotice::Ports' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, CustomAttribute) == 0x0000E8, "Member 'FAccelByteModelsDsNotice::CustomAttribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPersonalMessageResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsPersonalMessageResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsPersonalMessageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPersonalMessageResponse");
static_assert(sizeof(FAccelByteModelsPersonalMessageResponse) == 0x000030, "Wrong size on FAccelByteModelsPersonalMessageResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatSendChatResponse
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsChatSendChatResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatSendChatResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatSendChatResponse");
static_assert(sizeof(FAccelByteModelsChatSendChatResponse) == 0x000038, "Wrong size on FAccelByteModelsChatSendChatResponse");
static_assert(offsetof(FAccelByteModelsChatSendChatResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatSendChatResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSendChatResponse, TopicId) == 0x000008, "Member 'FAccelByteModelsChatSendChatResponse::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSendChatResponse, ChatId) == 0x000018, "Member 'FAccelByteModelsChatSendChatResponse::ChatId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSendChatResponse, Message) == 0x000028, "Member 'FAccelByteModelsChatSendChatResponse::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.User2FaMethod
// 0x0020 (0x0020 - 0x0000)
struct FUser2FaMethod final
{
public:
	class FString                                 Default;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Enabled;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUser2FaMethod) == 0x000008, "Wrong alignment on FUser2FaMethod");
static_assert(sizeof(FUser2FaMethod) == 0x000020, "Wrong size on FUser2FaMethod");
static_assert(offsetof(FUser2FaMethod, Default) == 0x000000, "Member 'FUser2FaMethod::Default' has a wrong offset!");
static_assert(offsetof(FUser2FaMethod, Enabled) == 0x000010, "Member 'FUser2FaMethod::Enabled' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyMessageResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsPartyMessageResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsPartyMessageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyMessageResponse");
static_assert(sizeof(FAccelByteModelsPartyMessageResponse) == 0x000030, "Wrong size on FAccelByteModelsPartyMessageResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformRewardCurrency
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPlatformRewardCurrency final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformRewardCurrency) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformRewardCurrency");
static_assert(sizeof(FAccelByteModelsPlatformRewardCurrency) == 0x000020, "Wrong size on FAccelByteModelsPlatformRewardCurrency");
static_assert(offsetof(FAccelByteModelsPlatformRewardCurrency, Namespace) == 0x000000, "Member 'FAccelByteModelsPlatformRewardCurrency::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformRewardCurrency, CurrencyCode) == 0x000010, "Member 'FAccelByteModelsPlatformRewardCurrency::CurrencyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformReward
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsPlatformReward final
{
public:
	EAccelBytePlatformRewardType                  Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsPlatformRewardItem     Item;                                              // 0x0008(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPlatformRewardCurrency Currency;                                          // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsPlatformReward) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformReward");
static_assert(sizeof(FAccelByteModelsPlatformReward) == 0x000060, "Wrong size on FAccelByteModelsPlatformReward");
static_assert(offsetof(FAccelByteModelsPlatformReward, Type) == 0x000000, "Member 'FAccelByteModelsPlatformReward::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformReward, Item) == 0x000008, "Member 'FAccelByteModelsPlatformReward::Item' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformReward, Currency) == 0x000038, "Member 'FAccelByteModelsPlatformReward::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformReward, Quantity) == 0x000058, "Member 'FAccelByteModelsPlatformReward::Quantity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulfillRewards
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsFulfillRewards final
{
public:
	TArray<struct FAccelByteModelsPlatformReward> Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelBytePlatformRewardSource                Source;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelBytePlatformRewardOrigin                Origin;                                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Metadata;                                          // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulfillRewards) == 0x000008, "Wrong alignment on FAccelByteModelsFulfillRewards");
static_assert(sizeof(FAccelByteModelsFulfillRewards) == 0x000038, "Wrong size on FAccelByteModelsFulfillRewards");
static_assert(offsetof(FAccelByteModelsFulfillRewards, Rewards) == 0x000000, "Member 'FAccelByteModelsFulfillRewards::Rewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillRewards, Source) == 0x000010, "Member 'FAccelByteModelsFulfillRewards::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillRewards, Origin) == 0x000011, "Member 'FAccelByteModelsFulfillRewards::Origin' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillRewards, Metadata) == 0x000018, "Member 'FAccelByteModelsFulfillRewards::Metadata' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsJoinDefaultChannelResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsJoinDefaultChannelResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 ChannelSlug;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsJoinDefaultChannelResponse) == 0x000008, "Wrong alignment on FAccelByteModelsJoinDefaultChannelResponse");
static_assert(sizeof(FAccelByteModelsJoinDefaultChannelResponse) == 0x000040, "Wrong size on FAccelByteModelsJoinDefaultChannelResponse");
static_assert(offsetof(FAccelByteModelsJoinDefaultChannelResponse, ChannelSlug) == 0x000030, "Member 'FAccelByteModelsJoinDefaultChannelResponse::ChannelSlug' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionInvitePlatformResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2SessionInvitePlatformResponse final
{
public:
	class FString                                 PlatformUserID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionInvitePlatformResponse) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionInvitePlatformResponse");
static_assert(sizeof(FAccelByteModelsV2SessionInvitePlatformResponse) == 0x000010, "Wrong size on FAccelByteModelsV2SessionInvitePlatformResponse");
static_assert(offsetof(FAccelByteModelsV2SessionInvitePlatformResponse, PlatformUserID) == 0x000000, "Member 'FAccelByteModelsV2SessionInvitePlatformResponse::PlatformUserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTimeLimitedBalance
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsTimeLimitedBalance final
{
public:
	int64                                         Balance;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BalanceSource;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTimeLimitedBalance) == 0x000008, "Wrong alignment on FAccelByteModelsTimeLimitedBalance");
static_assert(sizeof(FAccelByteModelsTimeLimitedBalance) == 0x000020, "Wrong size on FAccelByteModelsTimeLimitedBalance");
static_assert(offsetof(FAccelByteModelsTimeLimitedBalance, Balance) == 0x000000, "Member 'FAccelByteModelsTimeLimitedBalance::Balance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTimeLimitedBalance, BalanceSource) == 0x000008, "Member 'FAccelByteModelsTimeLimitedBalance::BalanceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTimeLimitedBalance, ExpiredAt) == 0x000018, "Member 'FAccelByteModelsTimeLimitedBalance::ExpiredAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletCreditResponse
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsWalletCreditResponse final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Balance;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BalanceOrigin;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsTimeLimitedBalance> timeLimitedBalances;                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalPermanentBalance;                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalTimeLimitedBalance;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsWalletCreditResponse) == 0x000008, "Wrong alignment on FAccelByteModelsWalletCreditResponse");
static_assert(sizeof(FAccelByteModelsWalletCreditResponse) == 0x0000A0, "Wrong size on FAccelByteModelsWalletCreditResponse");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, Id) == 0x000000, "Member 'FAccelByteModelsWalletCreditResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, Namespace) == 0x000010, "Member 'FAccelByteModelsWalletCreditResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, UserId) == 0x000020, "Member 'FAccelByteModelsWalletCreditResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, CurrencySymbol) == 0x000030, "Member 'FAccelByteModelsWalletCreditResponse::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, CurrencyCode) == 0x000040, "Member 'FAccelByteModelsWalletCreditResponse::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, Balance) == 0x000050, "Member 'FAccelByteModelsWalletCreditResponse::Balance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, BalanceOrigin) == 0x000058, "Member 'FAccelByteModelsWalletCreditResponse::BalanceOrigin' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, timeLimitedBalances) == 0x000068, "Member 'FAccelByteModelsWalletCreditResponse::timeLimitedBalances' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, CreatedAt) == 0x000078, "Member 'FAccelByteModelsWalletCreditResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, UpdatedAt) == 0x000080, "Member 'FAccelByteModelsWalletCreditResponse::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, TotalPermanentBalance) == 0x000088, "Member 'FAccelByteModelsWalletCreditResponse::TotalPermanentBalance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, TotalTimeLimitedBalance) == 0x000090, "Member 'FAccelByteModelsWalletCreditResponse::TotalTimeLimitedBalance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletCreditResponse, Status) == 0x000098, "Member 'FAccelByteModelsWalletCreditResponse::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChannelMessageResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsChannelMessageResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 Message;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChannelMessageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChannelMessageResponse");
static_assert(sizeof(FAccelByteModelsChannelMessageResponse) == 0x000040, "Wrong size on FAccelByteModelsChannelMessageResponse");
static_assert(offsetof(FAccelByteModelsChannelMessageResponse, Message) == 0x000030, "Member 'FAccelByteModelsChannelMessageResponse::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPersonalMessageNotice
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPersonalMessageNotice final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivedAt;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPersonalMessageNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPersonalMessageNotice");
static_assert(sizeof(FAccelByteModelsPersonalMessageNotice) == 0x000050, "Wrong size on FAccelByteModelsPersonalMessageNotice");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, Id) == 0x000000, "Member 'FAccelByteModelsPersonalMessageNotice::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, From) == 0x000010, "Member 'FAccelByteModelsPersonalMessageNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, To) == 0x000020, "Member 'FAccelByteModelsPersonalMessageNotice::To' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, Payload) == 0x000030, "Member 'FAccelByteModelsPersonalMessageNotice::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, ReceivedAt) == 0x000040, "Member 'FAccelByteModelsPersonalMessageNotice::ReceivedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDeleteSystemMessagesResponse
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsDeleteSystemMessagesResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDeleteSystemMessagesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsDeleteSystemMessagesResponse");
static_assert(sizeof(FAccelByteModelsDeleteSystemMessagesResponse) == 0x000008, "Wrong size on FAccelByteModelsDeleteSystemMessagesResponse");
static_assert(offsetof(FAccelByteModelsDeleteSystemMessagesResponse, Processed) == 0x000000, "Member 'FAccelByteModelsDeleteSystemMessagesResponse::Processed' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsNotificationMessage
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsNotificationMessage final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Topic;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SentAt;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsNotificationMessage) == 0x000008, "Wrong alignment on FAccelByteModelsNotificationMessage");
static_assert(sizeof(FAccelByteModelsNotificationMessage) == 0x000058, "Wrong size on FAccelByteModelsNotificationMessage");
static_assert(offsetof(FAccelByteModelsNotificationMessage, Id) == 0x000000, "Member 'FAccelByteModelsNotificationMessage::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, From) == 0x000010, "Member 'FAccelByteModelsNotificationMessage::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, To) == 0x000020, "Member 'FAccelByteModelsNotificationMessage::To' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, Topic) == 0x000030, "Member 'FAccelByteModelsNotificationMessage::Topic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, Payload) == 0x000040, "Member 'FAccelByteModelsNotificationMessage::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, SentAt) == 0x000050, "Member 'FAccelByteModelsNotificationMessage::SentAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChannelMessageNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsChannelMessageNotice final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelSlug;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SentAt;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChannelMessageNotice) == 0x000008, "Wrong alignment on FAccelByteModelsChannelMessageNotice");
static_assert(sizeof(FAccelByteModelsChannelMessageNotice) == 0x000040, "Wrong size on FAccelByteModelsChannelMessageNotice");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, From) == 0x000000, "Member 'FAccelByteModelsChannelMessageNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, ChannelSlug) == 0x000010, "Member 'FAccelByteModelsChannelMessageNotice::ChannelSlug' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, Payload) == 0x000020, "Member 'FAccelByteModelsChannelMessageNotice::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, SentAt) == 0x000030, "Member 'FAccelByteModelsChannelMessageNotice::SentAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2GameSessionCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV2GameSessionCreatedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV2GameSessionCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2GameSessionCreatedPayload");
static_assert(sizeof(FAccelByteModelsMPV2GameSessionCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2GameSessionCreatedPayload");
static_assert(offsetof(FAccelByteModelsMPV2GameSessionCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV2GameSessionCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2GameSessionCreatedPayload, GameSessionId) == 0x000028, "Member 'FAccelByteModelsMPV2GameSessionCreatedPayload::GameSessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2GameSessionLeftPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2GameSessionLeftPayload final : public FAccelByteModelsMPV2GameSessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2GameSessionLeftPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2GameSessionLeftPayload");
static_assert(sizeof(FAccelByteModelsMPV2GameSessionLeftPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2GameSessionLeftPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyMessageNotice
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPartyMessageNotice final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivedAt;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyMessageNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyMessageNotice");
static_assert(sizeof(FAccelByteModelsPartyMessageNotice) == 0x000050, "Wrong size on FAccelByteModelsPartyMessageNotice");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, Id) == 0x000000, "Member 'FAccelByteModelsPartyMessageNotice::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, From) == 0x000010, "Member 'FAccelByteModelsPartyMessageNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, To) == 0x000020, "Member 'FAccelByteModelsPartyMessageNotice::To' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, Payload) == 0x000030, "Member 'FAccelByteModelsPartyMessageNotice::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, ReceivedAt) == 0x000040, "Member 'FAccelByteModelsPartyMessageNotice::ReceivedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2GameSessionLeaderPromotedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV2GameSessionLeaderPromotedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 PromotedUserId;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV2GameSessionLeaderPromotedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2GameSessionLeaderPromotedPayload");
static_assert(sizeof(FAccelByteModelsMPV2GameSessionLeaderPromotedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2GameSessionLeaderPromotedPayload");
static_assert(offsetof(FAccelByteModelsMPV2GameSessionLeaderPromotedPayload, PromotedUserId) == 0x000018, "Member 'FAccelByteModelsMPV2GameSessionLeaderPromotedPayload::PromotedUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2GameSessionLeaderPromotedPayload, GameSessionId) == 0x000028, "Member 'FAccelByteModelsMPV2GameSessionLeaderPromotedPayload::GameSessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupListRequest
// 0x0020 (0x0028 - 0x0008)
struct FAccelByteModelsGetGroupListRequest final : public FAccelByteModelsLimitOffsetRequest
{
public:
	class FString                                 GroupName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupListRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupListRequest");
static_assert(sizeof(FAccelByteModelsGetGroupListRequest) == 0x000028, "Wrong size on FAccelByteModelsGetGroupListRequest");
static_assert(offsetof(FAccelByteModelsGetGroupListRequest, GroupName) == 0x000008, "Member 'FAccelByteModelsGetGroupListRequest::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetGroupListRequest, GroupRegion) == 0x000018, "Member 'FAccelByteModelsGetGroupListRequest::GroupRegion' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderBundleItemInfo
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsOrderBundleItemInfo final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Purchased;                                         // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsOrderBundleItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsOrderBundleItemInfo");
static_assert(sizeof(FAccelByteModelsOrderBundleItemInfo) == 0x000040, "Wrong size on FAccelByteModelsOrderBundleItemInfo");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, Price) == 0x000000, "Member 'FAccelByteModelsOrderBundleItemInfo::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, DiscountedPrice) == 0x000004, "Member 'FAccelByteModelsOrderBundleItemInfo::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, ItemName) == 0x000008, "Member 'FAccelByteModelsOrderBundleItemInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, ItemId) == 0x000018, "Member 'FAccelByteModelsOrderBundleItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, ItemSku) == 0x000028, "Member 'FAccelByteModelsOrderBundleItemInfo::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, Quantity) == 0x000038, "Member 'FAccelByteModelsOrderBundleItemInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderBundleItemInfo, Purchased) == 0x00003C, "Member 'FAccelByteModelsOrderBundleItemInfo::Purchased' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderInfo
// 0x0378 (0x0378 - 0x0000)
struct FAccelByteModelsOrderInfo final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentOrderNo;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sandbox;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vat;                                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SalesTax;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelBytePaymentProvider                     PaymentProvider;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PaymentProviderFee;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentMethodFee;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsOrderCurrencySummary   Currency;                                          // 0x0078(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PaymentStationUrl;                                 // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsEntitlementItemSnapshot ItemSnapshot;                                     // 0x00C8(0x01E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteOrderStatus                         Status;                                            // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusReason;                                      // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChargedTime;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FulfilledTime;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RefundedTime;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChargebackTime;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChargebackReversedTime;                            // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireTime;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentRemainSeconds;                              // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Ext;                                               // 0x0328(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TotalTax;                                          // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPrice;                                        // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubtotalPrice;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsOrderBundleItemInfo> OrderBundleItemInfos;                         // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderInfo) == 0x000008, "Wrong alignment on FAccelByteModelsOrderInfo");
static_assert(sizeof(FAccelByteModelsOrderInfo) == 0x000378, "Wrong size on FAccelByteModelsOrderInfo");
static_assert(offsetof(FAccelByteModelsOrderInfo, OrderNo) == 0x000000, "Member 'FAccelByteModelsOrderInfo::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentOrderNo) == 0x000010, "Member 'FAccelByteModelsOrderInfo::PaymentOrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Namespace) == 0x000020, "Member 'FAccelByteModelsOrderInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, UserId) == 0x000030, "Member 'FAccelByteModelsOrderInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ItemId) == 0x000040, "Member 'FAccelByteModelsOrderInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Sandbox) == 0x000050, "Member 'FAccelByteModelsOrderInfo::Sandbox' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Quantity) == 0x000054, "Member 'FAccelByteModelsOrderInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Price) == 0x000058, "Member 'FAccelByteModelsOrderInfo::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, DiscountedPrice) == 0x00005C, "Member 'FAccelByteModelsOrderInfo::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Vat) == 0x000060, "Member 'FAccelByteModelsOrderInfo::Vat' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, SalesTax) == 0x000064, "Member 'FAccelByteModelsOrderInfo::SalesTax' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentProvider) == 0x000068, "Member 'FAccelByteModelsOrderInfo::PaymentProvider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentProviderFee) == 0x00006C, "Member 'FAccelByteModelsOrderInfo::PaymentProviderFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentMethodFee) == 0x000070, "Member 'FAccelByteModelsOrderInfo::PaymentMethodFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Currency) == 0x000078, "Member 'FAccelByteModelsOrderInfo::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentStationUrl) == 0x0000B8, "Member 'FAccelByteModelsOrderInfo::PaymentStationUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ItemSnapshot) == 0x0000C8, "Member 'FAccelByteModelsOrderInfo::ItemSnapshot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Region) == 0x0002B0, "Member 'FAccelByteModelsOrderInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Language) == 0x0002C0, "Member 'FAccelByteModelsOrderInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Status) == 0x0002D0, "Member 'FAccelByteModelsOrderInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, StatusReason) == 0x0002D8, "Member 'FAccelByteModelsOrderInfo::StatusReason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, CreatedTime) == 0x0002E8, "Member 'FAccelByteModelsOrderInfo::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ChargedTime) == 0x0002F0, "Member 'FAccelByteModelsOrderInfo::ChargedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, FulfilledTime) == 0x0002F8, "Member 'FAccelByteModelsOrderInfo::FulfilledTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, RefundedTime) == 0x000300, "Member 'FAccelByteModelsOrderInfo::RefundedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ChargebackTime) == 0x000308, "Member 'FAccelByteModelsOrderInfo::ChargebackTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ChargebackReversedTime) == 0x000310, "Member 'FAccelByteModelsOrderInfo::ChargebackReversedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ExpireTime) == 0x000318, "Member 'FAccelByteModelsOrderInfo::ExpireTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentRemainSeconds) == 0x000320, "Member 'FAccelByteModelsOrderInfo::PaymentRemainSeconds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Ext) == 0x000328, "Member 'FAccelByteModelsOrderInfo::Ext' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, TotalTax) == 0x000348, "Member 'FAccelByteModelsOrderInfo::TotalTax' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, TotalPrice) == 0x00034C, "Member 'FAccelByteModelsOrderInfo::TotalPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, SubtotalPrice) == 0x000350, "Member 'FAccelByteModelsOrderInfo::SubtotalPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, OrderBundleItemInfos) == 0x000358, "Member 'FAccelByteModelsOrderInfo::OrderBundleItemInfos' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, CreatedAt) == 0x000368, "Member 'FAccelByteModelsOrderInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, UpdatedAt) == 0x000370, "Member 'FAccelByteModelsOrderInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsConsumeUserEntitlementRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsConsumeUserEntitlementRequest final
{
public:
	int32                                         UseCount;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Options;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RequestId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsConsumeUserEntitlementRequest) == 0x000008, "Wrong alignment on FAccelByteModelsConsumeUserEntitlementRequest");
static_assert(sizeof(FAccelByteModelsConsumeUserEntitlementRequest) == 0x000028, "Wrong size on FAccelByteModelsConsumeUserEntitlementRequest");
static_assert(offsetof(FAccelByteModelsConsumeUserEntitlementRequest, UseCount) == 0x000000, "Member 'FAccelByteModelsConsumeUserEntitlementRequest::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsConsumeUserEntitlementRequest, Options) == 0x000008, "Member 'FAccelByteModelsConsumeUserEntitlementRequest::Options' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsConsumeUserEntitlementRequest, RequestId) == 0x000018, "Member 'FAccelByteModelsConsumeUserEntitlementRequest::RequestId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnbanGroupChatResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUnbanGroupChatResponse final
{
public:
	TArray<class FString>                         UserIDs;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnbanGroupChatResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUnbanGroupChatResponse");
static_assert(sizeof(FAccelByteModelsUnbanGroupChatResponse) == 0x000010, "Wrong size on FAccelByteModelsUnbanGroupChatResponse");
static_assert(offsetof(FAccelByteModelsUnbanGroupChatResponse, UserIDs) == 0x000000, "Member 'FAccelByteModelsUnbanGroupChatResponse::UserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatSystemMessageNotif
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsChatSystemMessageNotif final
{
public:
	class FString                                 MessageId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatSystemMessageNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatSystemMessageNotif");
static_assert(sizeof(FAccelByteModelsChatSystemMessageNotif) == 0x000040, "Wrong size on FAccelByteModelsChatSystemMessageNotif");
static_assert(offsetof(FAccelByteModelsChatSystemMessageNotif, MessageId) == 0x000000, "Member 'FAccelByteModelsChatSystemMessageNotif::MessageId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSystemMessageNotif, Category) == 0x000010, "Member 'FAccelByteModelsChatSystemMessageNotif::Category' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSystemMessageNotif, Message) == 0x000020, "Member 'FAccelByteModelsChatSystemMessageNotif::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSystemMessageNotif, CreatedAt) == 0x000030, "Member 'FAccelByteModelsChatSystemMessageNotif::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSystemMessageNotif, ExpiredAt) == 0x000038, "Member 'FAccelByteModelsChatSystemMessageNotif::ExpiredAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPagedOrderInfo
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPagedOrderInfo final
{
public:
	TArray<struct FAccelByteModelsOrderInfo>      Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPagedOrderInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPagedOrderInfo");
static_assert(sizeof(FAccelByteModelsPagedOrderInfo) == 0x000050, "Wrong size on FAccelByteModelsPagedOrderInfo");
static_assert(offsetof(FAccelByteModelsPagedOrderInfo, Data) == 0x000000, "Member 'FAccelByteModelsPagedOrderInfo::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPagedOrderInfo, Paging) == 0x000010, "Member 'FAccelByteModelsPagedOrderInfo::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderHistoryInfo
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsOrderHistoryInfo final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Operator;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Action;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderHistoryInfo) == 0x000008, "Wrong alignment on FAccelByteModelsOrderHistoryInfo");
static_assert(sizeof(FAccelByteModelsOrderHistoryInfo) == 0x000070, "Wrong size on FAccelByteModelsOrderHistoryInfo");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, OrderNo) == 0x000000, "Member 'FAccelByteModelsOrderHistoryInfo::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Operator) == 0x000010, "Member 'FAccelByteModelsOrderHistoryInfo::Operator' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Action) == 0x000020, "Member 'FAccelByteModelsOrderHistoryInfo::Action' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Reason) == 0x000030, "Member 'FAccelByteModelsOrderHistoryInfo::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Namespace) == 0x000040, "Member 'FAccelByteModelsOrderHistoryInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, UserId) == 0x000050, "Member 'FAccelByteModelsOrderHistoryInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, CreatedAt) == 0x000060, "Member 'FAccelByteModelsOrderHistoryInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, UpdatedAt) == 0x000068, "Member 'FAccelByteModelsOrderHistoryInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsOrderHistoryInfo
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsOrderHistoryInfo final
{
public:
	TArray<struct FAccelByteModelsOrderHistoryInfo> Content;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsOrderHistoryInfo) == 0x000008, "Wrong alignment on FArrayModelsOrderHistoryInfo");
static_assert(sizeof(FArrayModelsOrderHistoryInfo) == 0x000010, "Wrong size on FArrayModelsOrderHistoryInfo");
static_assert(offsetof(FArrayModelsOrderHistoryInfo, Content) == 0x000000, "Member 'FArrayModelsOrderHistoryInfo::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGDPRAccountDeletionStatusResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGDPRAccountDeletionStatusResponse final
{
public:
	class FString                                 DeletionDate;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeletionStatus;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExecutionDate;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGDPRAccountDeletionStatusResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGDPRAccountDeletionStatusResponse");
static_assert(sizeof(FAccelByteModelsGDPRAccountDeletionStatusResponse) == 0x000050, "Wrong size on FAccelByteModelsGDPRAccountDeletionStatusResponse");
static_assert(offsetof(FAccelByteModelsGDPRAccountDeletionStatusResponse, DeletionDate) == 0x000000, "Member 'FAccelByteModelsGDPRAccountDeletionStatusResponse::DeletionDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGDPRAccountDeletionStatusResponse, DeletionStatus) == 0x000010, "Member 'FAccelByteModelsGDPRAccountDeletionStatusResponse::DeletionStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGDPRAccountDeletionStatusResponse, DisplayName) == 0x000018, "Member 'FAccelByteModelsGDPRAccountDeletionStatusResponse::DisplayName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGDPRAccountDeletionStatusResponse, ExecutionDate) == 0x000028, "Member 'FAccelByteModelsGDPRAccountDeletionStatusResponse::ExecutionDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGDPRAccountDeletionStatusResponse, Status) == 0x000030, "Member 'FAccelByteModelsGDPRAccountDeletionStatusResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGDPRAccountDeletionStatusResponse, UserID) == 0x000040, "Member 'FAccelByteModelsGDPRAccountDeletionStatusResponse::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatRemoveUserFromTopicRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsChatRemoveUserFromTopicRequest final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatRemoveUserFromTopicRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChatRemoveUserFromTopicRequest");
static_assert(sizeof(FAccelByteModelsChatRemoveUserFromTopicRequest) == 0x000020, "Wrong size on FAccelByteModelsChatRemoveUserFromTopicRequest");
static_assert(offsetof(FAccelByteModelsChatRemoveUserFromTopicRequest, TopicId) == 0x000000, "Member 'FAccelByteModelsChatRemoveUserFromTopicRequest::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatRemoveUserFromTopicRequest, UserId) == 0x000010, "Member 'FAccelByteModelsChatRemoveUserFromTopicRequest::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreatePartyResponse
// 0x0070 (0x00A0 - 0x0030)
struct FAccelByteModelsCreatePartyResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyCode;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreatePartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsCreatePartyResponse");
static_assert(sizeof(FAccelByteModelsCreatePartyResponse) == 0x0000A0, "Wrong size on FAccelByteModelsCreatePartyResponse");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, PartyId) == 0x000030, "Member 'FAccelByteModelsCreatePartyResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, LeaderId) == 0x000040, "Member 'FAccelByteModelsCreatePartyResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Leader) == 0x000050, "Member 'FAccelByteModelsCreatePartyResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Members) == 0x000060, "Member 'FAccelByteModelsCreatePartyResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Invitees) == 0x000070, "Member 'FAccelByteModelsCreatePartyResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, InvitationToken) == 0x000080, "Member 'FAccelByteModelsCreatePartyResponse::InvitationToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, PartyCode) == 0x000090, "Member 'FAccelByteModelsCreatePartyResponse::PartyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingTicketStatuses
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsV2MatchmakingTicketStatuses final
{
public:
	TArray<struct FAccelByteModelsV2MatchmakingTicketStatus> Data;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Pagination;                                        // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingTicketStatuses) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingTicketStatuses");
static_assert(sizeof(FAccelByteModelsV2MatchmakingTicketStatuses) == 0x000050, "Wrong size on FAccelByteModelsV2MatchmakingTicketStatuses");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatuses, Data) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingTicketStatuses::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingTicketStatuses, Pagination) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingTicketStatuses::Pagination' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatConnectNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsChatConnectNotif final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatConnectNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatConnectNotif");
static_assert(sizeof(FAccelByteModelsChatConnectNotif) == 0x000010, "Wrong size on FAccelByteModelsChatConnectNotif");
static_assert(offsetof(FAccelByteModelsChatConnectNotif, SessionID) == 0x000000, "Member 'FAccelByteModelsChatConnectNotif::SessionID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInviteUserPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupInviteUserPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitedUserId;                                     // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupInviteUserPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInviteUserPayload");
static_assert(sizeof(FAccelByteModelsGroupInviteUserPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupInviteUserPayload");
static_assert(offsetof(FAccelByteModelsGroupInviteUserPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupInviteUserPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInviteUserPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupInviteUserPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInviteUserPayload, InvitedUserId) == 0x000038, "Member 'FAccelByteModelsGroupInviteUserPayload::InvitedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsKickPartyMemberResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsKickPartyMemberResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsKickPartyMemberResponse) == 0x000008, "Wrong alignment on FAccelByteModelsKickPartyMemberResponse");
static_assert(sizeof(FAccelByteModelsKickPartyMemberResponse) == 0x000040, "Wrong size on FAccelByteModelsKickPartyMemberResponse");
static_assert(offsetof(FAccelByteModelsKickPartyMemberResponse, UserId) == 0x000030, "Member 'FAccelByteModelsKickPartyMemberResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.QuerySystemMessageOptions
// 0x0030 (0x0030 - 0x0000)
struct FQuerySystemMessageOptions final
{
public:
	bool                                          UnreadOnly;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartCreatedAt;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndCreatedAt;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuerySystemMessageOptions) == 0x000008, "Wrong alignment on FQuerySystemMessageOptions");
static_assert(sizeof(FQuerySystemMessageOptions) == 0x000030, "Wrong size on FQuerySystemMessageOptions");
static_assert(offsetof(FQuerySystemMessageOptions, UnreadOnly) == 0x000000, "Member 'FQuerySystemMessageOptions::UnreadOnly' has a wrong offset!");
static_assert(offsetof(FQuerySystemMessageOptions, StartCreatedAt) == 0x000008, "Member 'FQuerySystemMessageOptions::StartCreatedAt' has a wrong offset!");
static_assert(offsetof(FQuerySystemMessageOptions, EndCreatedAt) == 0x000010, "Member 'FQuerySystemMessageOptions::EndCreatedAt' has a wrong offset!");
static_assert(offsetof(FQuerySystemMessageOptions, Category) == 0x000018, "Member 'FQuerySystemMessageOptions::Category' has a wrong offset!");
static_assert(offsetof(FQuerySystemMessageOptions, Offset) == 0x000028, "Member 'FQuerySystemMessageOptions::Offset' has a wrong offset!");
static_assert(offsetof(FQuerySystemMessageOptions, Limit) == 0x00002C, "Member 'FQuerySystemMessageOptions::Limit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2StartMatchmakingNotif
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsV2StartMatchmakingNotif final
{
public:
	class FString                                 TicketID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2StartMatchmakingNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2StartMatchmakingNotif");
static_assert(sizeof(FAccelByteModelsV2StartMatchmakingNotif) == 0x000048, "Wrong size on FAccelByteModelsV2StartMatchmakingNotif");
static_assert(offsetof(FAccelByteModelsV2StartMatchmakingNotif, TicketID) == 0x000000, "Member 'FAccelByteModelsV2StartMatchmakingNotif::TicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StartMatchmakingNotif, PartyID) == 0x000010, "Member 'FAccelByteModelsV2StartMatchmakingNotif::PartyID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StartMatchmakingNotif, Namespace) == 0x000020, "Member 'FAccelByteModelsV2StartMatchmakingNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StartMatchmakingNotif, CreatedAt) == 0x000030, "Member 'FAccelByteModelsV2StartMatchmakingNotif::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StartMatchmakingNotif, MatchPool) == 0x000038, "Member 'FAccelByteModelsV2StartMatchmakingNotif::MatchPool' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyGenerateCodeResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsPartyGenerateCodeResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyCode;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyGenerateCodeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyGenerateCodeResponse");
static_assert(sizeof(FAccelByteModelsPartyGenerateCodeResponse) == 0x000040, "Wrong size on FAccelByteModelsPartyGenerateCodeResponse");
static_assert(offsetof(FAccelByteModelsPartyGenerateCodeResponse, PartyCode) == 0x000030, "Member 'FAccelByteModelsPartyGenerateCodeResponse::PartyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkPublisherAccount
// 0x0030 (0x0030 - 0x0000)
struct FAccountLinkPublisherAccount final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccountLinkedPlatform>         LinkedPlatforms;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkPublisherAccount) == 0x000008, "Wrong alignment on FAccountLinkPublisherAccount");
static_assert(sizeof(FAccountLinkPublisherAccount) == 0x000030, "Wrong size on FAccountLinkPublisherAccount");
static_assert(offsetof(FAccountLinkPublisherAccount, UserId) == 0x000000, "Member 'FAccountLinkPublisherAccount::UserId' has a wrong offset!");
static_assert(offsetof(FAccountLinkPublisherAccount, Namespace) == 0x000010, "Member 'FAccountLinkPublisherAccount::Namespace' has a wrong offset!");
static_assert(offsetof(FAccountLinkPublisherAccount, LinkedPlatforms) == 0x000020, "Member 'FAccountLinkPublisherAccount::LinkedPlatforms' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupFindByIdsPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupFindByIdsPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         GroupIds;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupFindByIdsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupFindByIdsPayload");
static_assert(sizeof(FAccelByteModelsGroupFindByIdsPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupFindByIdsPayload");
static_assert(offsetof(FAccelByteModelsGroupFindByIdsPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGroupFindByIdsPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupFindByIdsPayload, GroupIds) == 0x000028, "Member 'FAccelByteModelsGroupFindByIdsPayload::GroupIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyGetCodeResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsPartyGetCodeResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyCode;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyGetCodeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyGetCodeResponse");
static_assert(sizeof(FAccelByteModelsPartyGetCodeResponse) == 0x000040, "Wrong size on FAccelByteModelsPartyGetCodeResponse");
static_assert(offsetof(FAccelByteModelsPartyGetCodeResponse, PartyCode) == 0x000030, "Member 'FAccelByteModelsPartyGetCodeResponse::PartyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDeleteCodeResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsPartyDeleteCodeResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsPartyDeleteCodeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDeleteCodeResponse");
static_assert(sizeof(FAccelByteModelsPartyDeleteCodeResponse) == 0x000030, "Wrong size on FAccelByteModelsPartyDeleteCodeResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyPromoteLeaderResponse
// 0x0060 (0x0090 - 0x0030)
struct FAccelByteModelsPartyPromoteLeaderResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 invitationToken;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyPromoteLeaderResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyPromoteLeaderResponse");
static_assert(sizeof(FAccelByteModelsPartyPromoteLeaderResponse) == 0x000090, "Wrong size on FAccelByteModelsPartyPromoteLeaderResponse");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, PartyId) == 0x000030, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, LeaderId) == 0x000040, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Leader) == 0x000050, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Members) == 0x000060, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Invitees) == 0x000070, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, invitationToken) == 0x000080, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::invitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsResourceSourcedPayload
// 0x0080 (0x0098 - 0x0018)
struct FAccelByteModelsResourceSourcedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 ResourceName;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceID;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceCategory;                                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRating;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceSource;                                    // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceLevelRequirement;                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRarity;                                    // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourcedAmount;                                     // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsResourceSourcedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsResourceSourcedPayload");
static_assert(sizeof(FAccelByteModelsResourceSourcedPayload) == 0x000098, "Wrong size on FAccelByteModelsResourceSourcedPayload");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceName) == 0x000018, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceID) == 0x000028, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceCategory) == 0x000038, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceCategory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceRating) == 0x000048, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceRating' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceSource) == 0x000058, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceLevelRequirement) == 0x000068, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceLevelRequirement' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, ResourceRarity) == 0x000078, "Member 'FAccelByteModelsResourceSourcedPayload::ResourceRarity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSourcedPayload, SourcedAmount) == 0x000088, "Member 'FAccelByteModelsResourceSourcedPayload::SourcedAmount' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyData
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsPartyData final
{
public:
	struct FJsonObjectWrapper                     Custom_Attribute;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UpdatedAt;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyData) == 0x000008, "Wrong alignment on FAccelByteModelsPartyData");
static_assert(sizeof(FAccelByteModelsPartyData) == 0x000078, "Wrong size on FAccelByteModelsPartyData");
static_assert(offsetof(FAccelByteModelsPartyData, Custom_Attribute) == 0x000000, "Member 'FAccelByteModelsPartyData::Custom_Attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Invitees) == 0x000020, "Member 'FAccelByteModelsPartyData::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Leader) == 0x000030, "Member 'FAccelByteModelsPartyData::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Members) == 0x000040, "Member 'FAccelByteModelsPartyData::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Namespace) == 0x000050, "Member 'FAccelByteModelsPartyData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, PartyId) == 0x000060, "Member 'FAccelByteModelsPartyData::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsPartyData::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDataNotif
// 0x0080 (0x0080 - 0x0000)
struct FAccelByteModelsPartyDataNotif final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Custom_attribute;                                  // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDataNotif) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDataNotif");
static_assert(sizeof(FAccelByteModelsPartyDataNotif) == 0x000080, "Wrong size on FAccelByteModelsPartyDataNotif");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, PartyId) == 0x000000, "Member 'FAccelByteModelsPartyDataNotif::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Namespace) == 0x000010, "Member 'FAccelByteModelsPartyDataNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Leader) == 0x000020, "Member 'FAccelByteModelsPartyDataNotif::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Members) == 0x000030, "Member 'FAccelByteModelsPartyDataNotif::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Invitees) == 0x000040, "Member 'FAccelByteModelsPartyDataNotif::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Custom_attribute) == 0x000050, "Member 'FAccelByteModelsPartyDataNotif::Custom_attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsPartyDataNotif::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformStore
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsPlatformStore final
{
public:
	class FString                                 StoreId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Published;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SupportedLanguages;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SupportedRegions;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DefaultRegion;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultLanguage;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishedTime;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformStore) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformStore");
static_assert(sizeof(FAccelByteModelsPlatformStore) == 0x0000A0, "Wrong size on FAccelByteModelsPlatformStore");
static_assert(offsetof(FAccelByteModelsPlatformStore, StoreId) == 0x000000, "Member 'FAccelByteModelsPlatformStore::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, Namespace) == 0x000010, "Member 'FAccelByteModelsPlatformStore::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, Title) == 0x000020, "Member 'FAccelByteModelsPlatformStore::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, Description) == 0x000030, "Member 'FAccelByteModelsPlatformStore::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, Published) == 0x000040, "Member 'FAccelByteModelsPlatformStore::Published' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, SupportedLanguages) == 0x000048, "Member 'FAccelByteModelsPlatformStore::SupportedLanguages' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, SupportedRegions) == 0x000058, "Member 'FAccelByteModelsPlatformStore::SupportedRegions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, DefaultRegion) == 0x000068, "Member 'FAccelByteModelsPlatformStore::DefaultRegion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, DefaultLanguage) == 0x000078, "Member 'FAccelByteModelsPlatformStore::DefaultLanguage' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, PublishedTime) == 0x000088, "Member 'FAccelByteModelsPlatformStore::PublishedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, CreatedAt) == 0x000090, "Member 'FAccelByteModelsPlatformStore::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformStore, UpdatedAt) == 0x000098, "Member 'FAccelByteModelsPlatformStore::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyGetInvitedNotice
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPartyGetInvitedNotice final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyGetInvitedNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyGetInvitedNotice");
static_assert(sizeof(FAccelByteModelsPartyGetInvitedNotice) == 0x000030, "Wrong size on FAccelByteModelsPartyGetInvitedNotice");
static_assert(offsetof(FAccelByteModelsPartyGetInvitedNotice, From) == 0x000000, "Member 'FAccelByteModelsPartyGetInvitedNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyGetInvitedNotice, PartyId) == 0x000010, "Member 'FAccelByteModelsPartyGetInvitedNotice::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyGetInvitedNotice, InvitationToken) == 0x000020, "Member 'FAccelByteModelsPartyGetInvitedNotice::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryPublicTopicResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatQueryPublicTopicResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsChatPublicTopicQueryData> Data;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatQueryPublicTopicResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryPublicTopicResponse");
static_assert(sizeof(FAccelByteModelsChatQueryPublicTopicResponse) == 0x000018, "Wrong size on FAccelByteModelsChatQueryPublicTopicResponse");
static_assert(offsetof(FAccelByteModelsChatQueryPublicTopicResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatQueryPublicTopicResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryPublicTopicResponse, Data) == 0x000008, "Member 'FAccelByteModelsChatQueryPublicTopicResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletTransactionInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsWalletTransactionInfo final
{
public:
	class FString                                 WalletId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Amount;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Operator;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteWalletAction                        WalletAction;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BalanceSource;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsWalletTransactionInfo) == 0x000008, "Wrong alignment on FAccelByteModelsWalletTransactionInfo");
static_assert(sizeof(FAccelByteModelsWalletTransactionInfo) == 0x0000A0, "Wrong size on FAccelByteModelsWalletTransactionInfo");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, WalletId) == 0x000000, "Member 'FAccelByteModelsWalletTransactionInfo::WalletId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Amount) == 0x000010, "Member 'FAccelByteModelsWalletTransactionInfo::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Reason) == 0x000018, "Member 'FAccelByteModelsWalletTransactionInfo::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Namespace) == 0x000028, "Member 'FAccelByteModelsWalletTransactionInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, UserId) == 0x000038, "Member 'FAccelByteModelsWalletTransactionInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Operator) == 0x000048, "Member 'FAccelByteModelsWalletTransactionInfo::Operator' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, WalletAction) == 0x000058, "Member 'FAccelByteModelsWalletTransactionInfo::WalletAction' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, CurrencyCode) == 0x000060, "Member 'FAccelByteModelsWalletTransactionInfo::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, BalanceSource) == 0x000070, "Member 'FAccelByteModelsWalletTransactionInfo::BalanceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, CreatedAt) == 0x000080, "Member 'FAccelByteModelsWalletTransactionInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, UpdatedAt) == 0x000090, "Member 'FAccelByteModelsWalletTransactionInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletTransactionPaging
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsWalletTransactionPaging final
{
public:
	TArray<struct FAccelByteModelsWalletTransactionInfo> Data;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsWalletTransactionPaging) == 0x000008, "Wrong alignment on FAccelByteModelsWalletTransactionPaging");
static_assert(sizeof(FAccelByteModelsWalletTransactionPaging) == 0x000050, "Wrong size on FAccelByteModelsWalletTransactionPaging");
static_assert(offsetof(FAccelByteModelsWalletTransactionPaging, Data) == 0x000000, "Member 'FAccelByteModelsWalletTransactionPaging::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionPaging, Paging) == 0x000010, "Member 'FAccelByteModelsWalletTransactionPaging::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyRejectNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPartyRejectNotice final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyRejectNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyRejectNotice");
static_assert(sizeof(FAccelByteModelsPartyRejectNotice) == 0x000040, "Wrong size on FAccelByteModelsPartyRejectNotice");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, PartyId) == 0x000000, "Member 'FAccelByteModelsPartyRejectNotice::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, LeaderId) == 0x000010, "Member 'FAccelByteModelsPartyRejectNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, Leader) == 0x000020, "Member 'FAccelByteModelsPartyRejectNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, UserId) == 0x000030, "Member 'FAccelByteModelsPartyRejectNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryTopicResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatQueryTopicResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsChatTopicQueryData> Data;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatQueryTopicResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryTopicResponse");
static_assert(sizeof(FAccelByteModelsChatQueryTopicResponse) == 0x000018, "Wrong size on FAccelByteModelsChatQueryTopicResponse");
static_assert(offsetof(FAccelByteModelsChatQueryTopicResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatQueryTopicResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryTopicResponse, Data) == 0x000008, "Member 'FAccelByteModelsChatQueryTopicResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeavePartyNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsLeavePartyNotice final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeavePartyNotice) == 0x000008, "Wrong alignment on FAccelByteModelsLeavePartyNotice");
static_assert(sizeof(FAccelByteModelsLeavePartyNotice) == 0x000040, "Wrong size on FAccelByteModelsLeavePartyNotice");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, UserID) == 0x000000, "Member 'FAccelByteModelsLeavePartyNotice::UserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, LeaderID) == 0x000010, "Member 'FAccelByteModelsLeavePartyNotice::LeaderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, Leader) == 0x000020, "Member 'FAccelByteModelsLeavePartyNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, PartyId) == 0x000030, "Member 'FAccelByteModelsLeavePartyNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGotKickedFromPartyNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsGotKickedFromPartyNotice final
{
public:
	class FString                                 LeaderId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGotKickedFromPartyNotice) == 0x000008, "Wrong alignment on FAccelByteModelsGotKickedFromPartyNotice");
static_assert(sizeof(FAccelByteModelsGotKickedFromPartyNotice) == 0x000040, "Wrong size on FAccelByteModelsGotKickedFromPartyNotice");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, LeaderId) == 0x000000, "Member 'FAccelByteModelsGotKickedFromPartyNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, Leader) == 0x000010, "Member 'FAccelByteModelsGotKickedFromPartyNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, UserId) == 0x000020, "Member 'FAccelByteModelsGotKickedFromPartyNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, PartyId) == 0x000030, "Member 'FAccelByteModelsGotKickedFromPartyNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyNotif
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPartyNotif final
{
public:
	class FString                                 Sender;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Topic;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyNotif) == 0x000008, "Wrong alignment on FAccelByteModelsPartyNotif");
static_assert(sizeof(FAccelByteModelsPartyNotif) == 0x000030, "Wrong size on FAccelByteModelsPartyNotif");
static_assert(offsetof(FAccelByteModelsPartyNotif, Sender) == 0x000000, "Member 'FAccelByteModelsPartyNotif::Sender' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyNotif, Topic) == 0x000010, "Member 'FAccelByteModelsPartyNotif::Topic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyNotif, Payload) == 0x000020, "Member 'FAccelByteModelsPartyNotif::Payload' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupsByGroupIdsRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsGetGroupsByGroupIdsRequest final
{
public:
	TArray<class FString>                         GroupIds;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupsByGroupIdsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupsByGroupIdsRequest");
static_assert(sizeof(FAccelByteModelsGetGroupsByGroupIdsRequest) == 0x000010, "Wrong size on FAccelByteModelsGetGroupsByGroupIdsRequest");
static_assert(offsetof(FAccelByteModelsGetGroupsByGroupIdsRequest, GroupIds) == 0x000000, "Member 'FAccelByteModelsGetGroupsByGroupIdsRequest::GroupIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsInvitationNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsInvitationNotice final
{
public:
	class FString                                 InviterID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsInvitationNotice) == 0x000008, "Wrong alignment on FAccelByteModelsInvitationNotice");
static_assert(sizeof(FAccelByteModelsInvitationNotice) == 0x000020, "Wrong size on FAccelByteModelsInvitationNotice");
static_assert(offsetof(FAccelByteModelsInvitationNotice, InviterID) == 0x000000, "Member 'FAccelByteModelsInvitationNotice::InviterID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInvitationNotice, InviteeID) == 0x000010, "Member 'FAccelByteModelsInvitationNotice::InviteeID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyMemberConnectionNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPartyMemberConnectionNotice final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyMemberConnectionNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyMemberConnectionNotice");
static_assert(sizeof(FAccelByteModelsPartyMemberConnectionNotice) == 0x000020, "Wrong size on FAccelByteModelsPartyMemberConnectionNotice");
static_assert(offsetof(FAccelByteModelsPartyMemberConnectionNotice, UserId) == 0x000000, "Member 'FAccelByteModelsPartyMemberConnectionNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMemberConnectionNotice, PartyId) == 0x000010, "Member 'FAccelByteModelsPartyMemberConnectionNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetOnlineUsersResponse
// 0x0080 (0x0080 - 0x0000)
struct FAccelByteModelsGetOnlineUsersResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 id;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         friendsId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAvailability>                         availability;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         activity;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         lastSeenAt;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Platform;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetOnlineUsersResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetOnlineUsersResponse");
static_assert(sizeof(FAccelByteModelsGetOnlineUsersResponse) == 0x000080, "Wrong size on FAccelByteModelsGetOnlineUsersResponse");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, Code) == 0x000000, "Member 'FAccelByteModelsGetOnlineUsersResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, type) == 0x000010, "Member 'FAccelByteModelsGetOnlineUsersResponse::type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, id) == 0x000020, "Member 'FAccelByteModelsGetOnlineUsersResponse::id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, friendsId) == 0x000030, "Member 'FAccelByteModelsGetOnlineUsersResponse::friendsId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, availability) == 0x000040, "Member 'FAccelByteModelsGetOnlineUsersResponse::availability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, activity) == 0x000050, "Member 'FAccelByteModelsGetOnlineUsersResponse::activity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, lastSeenAt) == 0x000060, "Member 'FAccelByteModelsGetOnlineUsersResponse::lastSeenAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, Platform) == 0x000070, "Member 'FAccelByteModelsGetOnlineUsersResponse::Platform' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatusNotif
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsUserStatusNotif final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailability                                 Availability;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastSeenAt;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatusNotif) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatusNotif");
static_assert(sizeof(FAccelByteModelsUserStatusNotif) == 0x000058, "Wrong size on FAccelByteModelsUserStatusNotif");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, UserID) == 0x000000, "Member 'FAccelByteModelsUserStatusNotif::UserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Availability) == 0x000010, "Member 'FAccelByteModelsUserStatusNotif::Availability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Activity) == 0x000018, "Member 'FAccelByteModelsUserStatusNotif::Activity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Namespace) == 0x000028, "Member 'FAccelByteModelsUserStatusNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, LastSeenAt) == 0x000038, "Member 'FAccelByteModelsUserStatusNotif::LastSeenAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Platform) == 0x000048, "Member 'FAccelByteModelsUserStatusNotif::Platform' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserStatusNotif
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsBulkUserStatusNotif final
{
public:
	TArray<struct FAccelByteModelsUserStatusNotif> Data;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Online;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Busy;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Invisible;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offline;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Away;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         NotProcessed;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserStatusNotif) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserStatusNotif");
static_assert(sizeof(FAccelByteModelsBulkUserStatusNotif) == 0x000038, "Wrong size on FAccelByteModelsBulkUserStatusNotif");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Data) == 0x000000, "Member 'FAccelByteModelsBulkUserStatusNotif::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Online) == 0x000010, "Member 'FAccelByteModelsBulkUserStatusNotif::Online' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Busy) == 0x000014, "Member 'FAccelByteModelsBulkUserStatusNotif::Busy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Invisible) == 0x000018, "Member 'FAccelByteModelsBulkUserStatusNotif::Invisible' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Offline) == 0x00001C, "Member 'FAccelByteModelsBulkUserStatusNotif::Offline' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Away) == 0x000020, "Member 'FAccelByteModelsBulkUserStatusNotif::Away' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, NotProcessed) == 0x000028, "Member 'FAccelByteModelsBulkUserStatusNotif::NotProcessed' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerClaimedNotification
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsServerClaimedNotification final
{
public:
	class FString                                 Game_mode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerClaimedNotification) == 0x000008, "Wrong alignment on FAccelByteModelsServerClaimedNotification");
static_assert(sizeof(FAccelByteModelsServerClaimedNotification) == 0x000040, "Wrong size on FAccelByteModelsServerClaimedNotification");
static_assert(offsetof(FAccelByteModelsServerClaimedNotification, Game_mode) == 0x000000, "Member 'FAccelByteModelsServerClaimedNotification::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerClaimedNotification, Matching_allies) == 0x000010, "Member 'FAccelByteModelsServerClaimedNotification::Matching_allies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerClaimedNotification, Namespace) == 0x000020, "Member 'FAccelByteModelsServerClaimedNotification::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerClaimedNotification, Session_id) == 0x000030, "Member 'FAccelByteModelsServerClaimedNotification::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetRejectConsentRequest
// 0x0010 (0x0010 - 0x0000)
struct FSetRejectConsentRequest final
{
public:
	class FString                                 matchId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetRejectConsentRequest) == 0x000008, "Wrong alignment on FSetRejectConsentRequest");
static_assert(sizeof(FSetRejectConsentRequest) == 0x000010, "Wrong size on FSetRejectConsentRequest");
static_assert(offsetof(FSetRejectConsentRequest, matchId) == 0x000000, "Member 'FSetRejectConsentRequest::matchId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSetOnlineUsersResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsSetOnlineUsersResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsSetOnlineUsersResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSetOnlineUsersResponse");
static_assert(sizeof(FAccelByteModelsSetOnlineUsersResponse) == 0x000030, "Wrong size on FAccelByteModelsSetOnlineUsersResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUsersPresenceNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUsersPresenceNotice final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailability                                 Availability;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastSeenAt;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUsersPresenceNotice) == 0x000008, "Wrong alignment on FAccelByteModelsUsersPresenceNotice");
static_assert(sizeof(FAccelByteModelsUsersPresenceNotice) == 0x000040, "Wrong size on FAccelByteModelsUsersPresenceNotice");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, UserID) == 0x000000, "Member 'FAccelByteModelsUsersPresenceNotice::UserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, Availability) == 0x000010, "Member 'FAccelByteModelsUsersPresenceNotice::Availability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, Activity) == 0x000018, "Member 'FAccelByteModelsUsersPresenceNotice::Activity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, Platform) == 0x000028, "Member 'FAccelByteModelsUsersPresenceNotice::Platform' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, LastSeenAt) == 0x000038, "Member 'FAccelByteModelsUsersPresenceNotice::LastSeenAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UpdateEmailRequest
// 0x0020 (0x0020 - 0x0000)
struct FUpdateEmailRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateEmailRequest) == 0x000008, "Wrong alignment on FUpdateEmailRequest");
static_assert(sizeof(FUpdateEmailRequest) == 0x000020, "Wrong size on FUpdateEmailRequest");
static_assert(offsetof(FUpdateEmailRequest, Code) == 0x000000, "Member 'FUpdateEmailRequest::Code' has a wrong offset!");
static_assert(offsetof(FUpdateEmailRequest, EmailAddress) == 0x000010, "Member 'FUpdateEmailRequest::EmailAddress' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PublicUserInfo
// 0x0050 (0x0050 - 0x0000)
struct FPublicUserInfo final
{
public:
	class FString                                 CreatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPublicUserInfo) == 0x000008, "Wrong alignment on FPublicUserInfo");
static_assert(sizeof(FPublicUserInfo) == 0x000050, "Wrong size on FPublicUserInfo");
static_assert(offsetof(FPublicUserInfo, CreatedAt) == 0x000000, "Member 'FPublicUserInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, DisplayName) == 0x000010, "Member 'FPublicUserInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, Namespace) == 0x000020, "Member 'FPublicUserInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, UserId) == 0x000030, "Member 'FPublicUserInfo::UserId' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, UserName) == 0x000040, "Member 'FPublicUserInfo::UserName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PagedPublicUsersInfo
// 0x0050 (0x0050 - 0x0000)
struct FPagedPublicUsersInfo final
{
public:
	TArray<struct FPublicUserInfo>                Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPagedPublicUsersInfo) == 0x000008, "Wrong alignment on FPagedPublicUsersInfo");
static_assert(sizeof(FPagedPublicUsersInfo) == 0x000050, "Wrong size on FPagedPublicUsersInfo");
static_assert(offsetof(FPagedPublicUsersInfo, Data) == 0x000000, "Member 'FPagedPublicUsersInfo::Data' has a wrong offset!");
static_assert(offsetof(FPagedPublicUsersInfo, Paging) == 0x000010, "Member 'FPagedPublicUsersInfo::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassTier
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsSeasonPassTier final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x54];                                      // 0x0014(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSeasonPassTier) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassTier");
static_assert(sizeof(FAccelByteModelsSeasonPassTier) == 0x000068, "Wrong size on FAccelByteModelsSeasonPassTier");
static_assert(offsetof(FAccelByteModelsSeasonPassTier, Id) == 0x000000, "Member 'FAccelByteModelsSeasonPassTier::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassTier, RequiredExp) == 0x000010, "Member 'FAccelByteModelsSeasonPassTier::RequiredExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPass
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsSeasonPass final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayOrder;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoEnroll;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PassItemId;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPass) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPass");
static_assert(sizeof(FAccelByteModelsSeasonPass) == 0x0000A8, "Wrong size on FAccelByteModelsSeasonPass");
static_assert(offsetof(FAccelByteModelsSeasonPass, Title) == 0x000000, "Member 'FAccelByteModelsSeasonPass::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Description) == 0x000010, "Member 'FAccelByteModelsSeasonPass::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, SeasonId) == 0x000020, "Member 'FAccelByteModelsSeasonPass::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Code) == 0x000030, "Member 'FAccelByteModelsSeasonPass::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Namespace) == 0x000040, "Member 'FAccelByteModelsSeasonPass::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, DisplayOrder) == 0x000050, "Member 'FAccelByteModelsSeasonPass::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, AutoEnroll) == 0x000060, "Member 'FAccelByteModelsSeasonPass::AutoEnroll' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, PassItemId) == 0x000068, "Member 'FAccelByteModelsSeasonPass::PassItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Images) == 0x000078, "Member 'FAccelByteModelsSeasonPass::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Language) == 0x000088, "Member 'FAccelByteModelsSeasonPass::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, CreatedAt) == 0x000098, "Member 'FAccelByteModelsSeasonPass::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, UpdatedAt) == 0x0000A0, "Member 'FAccelByteModelsSeasonPass::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassReward
// 0x00C8 (0x00C8 - 0x0000)
struct FAccelByteModelsSeasonPassReward final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassRewardType                Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPassRewardCurrency> Currency;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsItemImage              Image;                                             // 0x0080(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassReward) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassReward");
static_assert(sizeof(FAccelByteModelsSeasonPassReward) == 0x0000C8, "Wrong size on FAccelByteModelsSeasonPassReward");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Namespace) == 0x000000, "Member 'FAccelByteModelsSeasonPassReward::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, SeasonId) == 0x000010, "Member 'FAccelByteModelsSeasonPassReward::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Code) == 0x000020, "Member 'FAccelByteModelsSeasonPassReward::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Type) == 0x000030, "Member 'FAccelByteModelsSeasonPassReward::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, ItemId) == 0x000038, "Member 'FAccelByteModelsSeasonPassReward::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, ItemName) == 0x000048, "Member 'FAccelByteModelsSeasonPassReward::ItemName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, ItemSku) == 0x000058, "Member 'FAccelByteModelsSeasonPassReward::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Currency) == 0x000068, "Member 'FAccelByteModelsSeasonPassReward::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Quantity) == 0x000078, "Member 'FAccelByteModelsSeasonPassReward::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Image) == 0x000080, "Member 'FAccelByteModelsSeasonPassReward::Image' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonInfo
// 0x0138 (0x0138 - 0x0000)
struct FAccelByteModelsSeasonInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TierItemId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoClaim;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PassCodes;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassStatus                    Status;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishedAt;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPass>     Passes;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FAccelByteModelsSeasonPassReward> Rewards;                            // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPassTier> Tiers;                                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonInfo) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonInfo");
static_assert(sizeof(FAccelByteModelsSeasonInfo) == 0x000138, "Wrong size on FAccelByteModelsSeasonInfo");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Title) == 0x000000, "Member 'FAccelByteModelsSeasonInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Description) == 0x000010, "Member 'FAccelByteModelsSeasonInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Id) == 0x000020, "Member 'FAccelByteModelsSeasonInfo::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Namespace) == 0x000030, "Member 'FAccelByteModelsSeasonInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Name) == 0x000040, "Member 'FAccelByteModelsSeasonInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Start) == 0x000050, "Member 'FAccelByteModelsSeasonInfo::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, End) == 0x000058, "Member 'FAccelByteModelsSeasonInfo::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, TierItemId) == 0x000060, "Member 'FAccelByteModelsSeasonInfo::TierItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, AutoClaim) == 0x000070, "Member 'FAccelByteModelsSeasonInfo::AutoClaim' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Images) == 0x000078, "Member 'FAccelByteModelsSeasonInfo::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, PassCodes) == 0x000088, "Member 'FAccelByteModelsSeasonInfo::PassCodes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Status) == 0x000098, "Member 'FAccelByteModelsSeasonInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, PublishedAt) == 0x0000A0, "Member 'FAccelByteModelsSeasonInfo::PublishedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Language) == 0x0000A8, "Member 'FAccelByteModelsSeasonInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, CreatedAt) == 0x0000B8, "Member 'FAccelByteModelsSeasonInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, UpdatedAt) == 0x0000C0, "Member 'FAccelByteModelsSeasonInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Passes) == 0x0000C8, "Member 'FAccelByteModelsSeasonInfo::Passes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Rewards) == 0x0000D8, "Member 'FAccelByteModelsSeasonInfo::Rewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Tiers) == 0x000128, "Member 'FAccelByteModelsSeasonInfo::Tiers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingAdditionalInfo
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsReportingAdditionalInfo final
{
public:
	TArray<class FString>                         Screenshots;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingAdditionalInfo) == 0x000008, "Wrong alignment on FAccelByteModelsReportingAdditionalInfo");
static_assert(sizeof(FAccelByteModelsReportingAdditionalInfo) == 0x000010, "Wrong size on FAccelByteModelsReportingAdditionalInfo");
static_assert(offsetof(FAccelByteModelsReportingAdditionalInfo, Screenshots) == 0x000000, "Member 'FAccelByteModelsReportingAdditionalInfo::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupDeletedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupDeletedPayload");
static_assert(sizeof(FAccelByteModelsGroupDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupDeletedPayload");
static_assert(offsetof(FAccelByteModelsGroupDeletedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupDeletedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupDeletedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupDeletedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCContentDownloaderV2
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUGCContentDownloaderV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DownloadedBy;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCContentDownloaderV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCContentDownloaderV2");
static_assert(sizeof(FAccelByteModelsUGCContentDownloaderV2) == 0x000038, "Wrong size on FAccelByteModelsUGCContentDownloaderV2");
static_assert(offsetof(FAccelByteModelsUGCContentDownloaderV2, ContentId) == 0x000000, "Member 'FAccelByteModelsUGCContentDownloaderV2::ContentId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentDownloaderV2, CreatedTime) == 0x000010, "Member 'FAccelByteModelsUGCContentDownloaderV2::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentDownloaderV2, DownloadedBy) == 0x000018, "Member 'FAccelByteModelsUGCContentDownloaderV2::DownloadedBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentDownloaderV2, Namespace) == 0x000028, "Member 'FAccelByteModelsUGCContentDownloaderV2::Namespace' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetPaginatedContentDownloaderResponseV2
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2 final
{
public:
	TArray<struct FAccelByteModelsUGCContentDownloaderV2> Data;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2");
static_assert(sizeof(FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2) == 0x000050, "Wrong size on FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2");
static_assert(offsetof(FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2, Data) == 0x000000, "Member 'FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2, Paging) == 0x000010, "Member 'FAccelByteModelsUGCGetPaginatedContentDownloaderResponseV2::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMultipleServicePlayStationInfo
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsMultipleServicePlayStationInfo final
{
public:
	class FString                                 TransactionId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PsnItemId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementIAPOrderStatus           IAPOrderStatus;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMultipleServicePlayStationInfo) == 0x000008, "Wrong alignment on FAccelByteModelsMultipleServicePlayStationInfo");
static_assert(sizeof(FAccelByteModelsMultipleServicePlayStationInfo) == 0x000048, "Wrong size on FAccelByteModelsMultipleServicePlayStationInfo");
static_assert(offsetof(FAccelByteModelsMultipleServicePlayStationInfo, TransactionId) == 0x000000, "Member 'FAccelByteModelsMultipleServicePlayStationInfo::TransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePlayStationInfo, PsnItemId) == 0x000010, "Member 'FAccelByteModelsMultipleServicePlayStationInfo::PsnItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePlayStationInfo, ItemId) == 0x000020, "Member 'FAccelByteModelsMultipleServicePlayStationInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePlayStationInfo, Sku) == 0x000030, "Member 'FAccelByteModelsMultipleServicePlayStationInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePlayStationInfo, IAPOrderStatus) == 0x000040, "Member 'FAccelByteModelsMultipleServicePlayStationInfo::IAPOrderStatus' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonInfo
// 0x0180 (0x0180 - 0x0000)
struct FAccelByteModelsUserSeasonInfo final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EnrolledAt;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnrolledPasses;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTierIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTierIndex;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cleared;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSeason                 Season;                                            // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0xA0];                                      // 0x00C0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPaidForExp;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSweatExp;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalExp;                                          // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccumulatedXpBoost;                                // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserSeasonInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonInfo");
static_assert(sizeof(FAccelByteModelsUserSeasonInfo) == 0x000180, "Wrong size on FAccelByteModelsUserSeasonInfo");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Id) == 0x000000, "Member 'FAccelByteModelsUserSeasonInfo::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, UserId) == 0x000020, "Member 'FAccelByteModelsUserSeasonInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, SeasonId) == 0x000030, "Member 'FAccelByteModelsUserSeasonInfo::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, EnrolledAt) == 0x000040, "Member 'FAccelByteModelsUserSeasonInfo::EnrolledAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, EnrolledPasses) == 0x000048, "Member 'FAccelByteModelsUserSeasonInfo::EnrolledPasses' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, CurrentTierIndex) == 0x000058, "Member 'FAccelByteModelsUserSeasonInfo::CurrentTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, LastTierIndex) == 0x00005C, "Member 'FAccelByteModelsUserSeasonInfo::LastTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, RequiredExp) == 0x000060, "Member 'FAccelByteModelsUserSeasonInfo::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, CurrentExp) == 0x000064, "Member 'FAccelByteModelsUserSeasonInfo::CurrentExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Cleared) == 0x000068, "Member 'FAccelByteModelsUserSeasonInfo::Cleared' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Season) == 0x000070, "Member 'FAccelByteModelsUserSeasonInfo::Season' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, CreatedAt) == 0x000160, "Member 'FAccelByteModelsUserSeasonInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, UpdatedAt) == 0x000168, "Member 'FAccelByteModelsUserSeasonInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, TotalPaidForExp) == 0x000170, "Member 'FAccelByteModelsUserSeasonInfo::TotalPaidForExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, TotalSweatExp) == 0x000174, "Member 'FAccelByteModelsUserSeasonInfo::TotalSweatExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, TotalExp) == 0x000178, "Member 'FAccelByteModelsUserSeasonInfo::TotalExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, AccumulatedXpBoost) == 0x00017C, "Member 'FAccelByteModelsUserSeasonInfo::AccumulatedXpBoost' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyJoinViaCodeRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyJoinViaCodeRequest final
{
public:
	class FString                                 partyCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyJoinViaCodeRequest) == 0x000008, "Wrong alignment on FPartyJoinViaCodeRequest");
static_assert(sizeof(FPartyJoinViaCodeRequest) == 0x000010, "Wrong size on FPartyJoinViaCodeRequest");
static_assert(offsetof(FPartyJoinViaCodeRequest, partyCode) == 0x000000, "Member 'FPartyJoinViaCodeRequest::partyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupLeftPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupLeftPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupLeftPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupLeftPayload");
static_assert(sizeof(FAccelByteModelsGroupLeftPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupLeftPayload");
static_assert(offsetof(FAccelByteModelsGroupLeftPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupLeftPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupLeftPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupLeftPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionEndedNotification
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsSessionEndedNotification final
{
public:
	bool                                          Is_active;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Session_id;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionEndedNotification) == 0x000008, "Wrong alignment on FAccelByteModelsSessionEndedNotification");
static_assert(sizeof(FAccelByteModelsSessionEndedNotification) == 0x000018, "Wrong size on FAccelByteModelsSessionEndedNotification");
static_assert(offsetof(FAccelByteModelsSessionEndedNotification, Is_active) == 0x000000, "Member 'FAccelByteModelsSessionEndedNotification::Is_active' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionEndedNotification, Session_id) == 0x000008, "Member 'FAccelByteModelsSessionEndedNotification::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonClaimRewardResponse
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FAccelByteModelsSeasonClaimRewardResponse final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSeasonClaimRewardResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonClaimRewardResponse");
static_assert(sizeof(FAccelByteModelsSeasonClaimRewardResponse) == 0x0000A0, "Wrong size on FAccelByteModelsSeasonClaimRewardResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerSessionResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsServerSessionResponse final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerSessionResponse) == 0x000008, "Wrong alignment on FAccelByteModelsServerSessionResponse");
static_assert(sizeof(FAccelByteModelsServerSessionResponse) == 0x000010, "Wrong size on FAccelByteModelsServerSessionResponse");
static_assert(offsetof(FAccelByteModelsServerSessionResponse, Session_id) == 0x000000, "Member 'FAccelByteModelsServerSessionResponse::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAdminGameRecord
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsAdminGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created_At;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Updated_At;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Value;                                             // 0x0030(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAdminGameRecord) == 0x000008, "Wrong alignment on FAccelByteModelsAdminGameRecord");
static_assert(sizeof(FAccelByteModelsAdminGameRecord) == 0x000050, "Wrong size on FAccelByteModelsAdminGameRecord");
static_assert(offsetof(FAccelByteModelsAdminGameRecord, Key) == 0x000000, "Member 'FAccelByteModelsAdminGameRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminGameRecord, Namespace) == 0x000010, "Member 'FAccelByteModelsAdminGameRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminGameRecord, Created_At) == 0x000020, "Member 'FAccelByteModelsAdminGameRecord::Created_At' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminGameRecord, Updated_At) == 0x000028, "Member 'FAccelByteModelsAdminGameRecord::Updated_At' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAdminGameRecord, Value) == 0x000030, "Member 'FAccelByteModelsAdminGameRecord::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbyDisconnectedPayload
// 0x0008 (0x0030 - 0x0028)
struct FAccelByteModelsLobbyDisconnectedPayload final : public FAccelByteModelsLobbyConnectedPayload
{
public:
	int32                                         StatusCode;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsLobbyDisconnectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLobbyDisconnectedPayload");
static_assert(sizeof(FAccelByteModelsLobbyDisconnectedPayload) == 0x000030, "Wrong size on FAccelByteModelsLobbyDisconnectedPayload");
static_assert(offsetof(FAccelByteModelsLobbyDisconnectedPayload, StatusCode) == 0x000028, "Member 'FAccelByteModelsLobbyDisconnectedPayload::StatusCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDataPartyResponse
// 0x00B0 (0x00E0 - 0x0030)
struct FAccelByteModelsDataPartyResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TMap<class FString, class FString>            custom_attribute;                                  // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 updatedAt;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 partyId;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 leader;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         members;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         invitees;                                          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 invitationToken;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDataPartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsDataPartyResponse");
static_assert(sizeof(FAccelByteModelsDataPartyResponse) == 0x0000E0, "Wrong size on FAccelByteModelsDataPartyResponse");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, custom_attribute) == 0x000030, "Member 'FAccelByteModelsDataPartyResponse::custom_attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, updatedAt) == 0x000080, "Member 'FAccelByteModelsDataPartyResponse::updatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, partyId) == 0x000090, "Member 'FAccelByteModelsDataPartyResponse::partyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, leader) == 0x0000A0, "Member 'FAccelByteModelsDataPartyResponse::leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, members) == 0x0000B0, "Member 'FAccelByteModelsDataPartyResponse::members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, invitees) == 0x0000C0, "Member 'FAccelByteModelsDataPartyResponse::invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, invitationToken) == 0x0000D0, "Member 'FAccelByteModelsDataPartyResponse::invitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetPlayerRecordSizeRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGetPlayerRecordSizeRequest final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 User_id;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetPlayerRecordSizeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGetPlayerRecordSizeRequest");
static_assert(sizeof(FAccelByteModelsGetPlayerRecordSizeRequest) == 0x000020, "Wrong size on FAccelByteModelsGetPlayerRecordSizeRequest");
static_assert(offsetof(FAccelByteModelsGetPlayerRecordSizeRequest, Keys) == 0x000000, "Member 'FAccelByteModelsGetPlayerRecordSizeRequest::Keys' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetPlayerRecordSizeRequest, User_id) == 0x000010, "Member 'FAccelByteModelsGetPlayerRecordSizeRequest::User_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetSessionAttributeAllResponse
// 0x0050 (0x0080 - 0x0030)
struct FAccelByteModelsGetSessionAttributeAllResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TMap<class FString, class FString>            Attributes;                                        // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetSessionAttributeAllResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetSessionAttributeAllResponse");
static_assert(sizeof(FAccelByteModelsGetSessionAttributeAllResponse) == 0x000080, "Wrong size on FAccelByteModelsGetSessionAttributeAllResponse");
static_assert(offsetof(FAccelByteModelsGetSessionAttributeAllResponse, Attributes) == 0x000030, "Member 'FAccelByteModelsGetSessionAttributeAllResponse::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatActionTopicResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatActionTopicResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatActionTopicResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatActionTopicResponse");
static_assert(sizeof(FAccelByteModelsChatActionTopicResponse) == 0x000018, "Wrong size on FAccelByteModelsChatActionTopicResponse");
static_assert(offsetof(FAccelByteModelsChatActionTopicResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatActionTopicResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionTopicResponse, TopicId) == 0x000008, "Member 'FAccelByteModelsChatActionTopicResponse::TopicId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetSessionAttributeResponse
// 0x0020 (0x0050 - 0x0030)
struct FAccelByteModelsGetSessionAttributeResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	class FString                                 Key;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetSessionAttributeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetSessionAttributeResponse");
static_assert(sizeof(FAccelByteModelsGetSessionAttributeResponse) == 0x000050, "Wrong size on FAccelByteModelsGetSessionAttributeResponse");
static_assert(offsetof(FAccelByteModelsGetSessionAttributeResponse, Key) == 0x000030, "Member 'FAccelByteModelsGetSessionAttributeResponse::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetSessionAttributeResponse, Value) == 0x000040, "Member 'FAccelByteModelsGetSessionAttributeResponse::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1MatchmakingReadyConsentPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV1MatchmakingReadyConsentPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV1MatchmakingReadyConsentPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1MatchmakingReadyConsentPayload");
static_assert(sizeof(FAccelByteModelsMPV1MatchmakingReadyConsentPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV1MatchmakingReadyConsentPayload");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingReadyConsentPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV1MatchmakingReadyConsentPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingReadyConsentPayload, MatchId) == 0x000028, "Member 'FAccelByteModelsMPV1MatchmakingReadyConsentPayload::MatchId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.JwkSet
// 0x0010 (0x0010 - 0x0000)
struct FJwkSet final
{
public:
	TArray<struct FJsonObjectWrapper>             keys;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJwkSet) == 0x000008, "Wrong alignment on FJwkSet");
static_assert(sizeof(FJwkSet) == 0x000010, "Wrong size on FJwkSet");
static_assert(offsetof(FJwkSet, keys) == 0x000000, "Member 'FJwkSet::keys' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsActivePartiesData
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsActivePartiesData final
{
public:
	TArray<struct FAccelByteModelsPartyDataNotif> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsActivePartiesData) == 0x000008, "Wrong alignment on FAccelByteModelsActivePartiesData");
static_assert(sizeof(FAccelByteModelsActivePartiesData) == 0x000050, "Wrong size on FAccelByteModelsActivePartiesData");
static_assert(offsetof(FAccelByteModelsActivePartiesData, Data) == 0x000000, "Member 'FAccelByteModelsActivePartiesData::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsActivePartiesData, Paging) == 0x000010, "Member 'FAccelByteModelsActivePartiesData::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserGetResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsSessionBrowserGetResult final
{
public:
	TArray<struct FAccelByteModelsSessionBrowserData> Sessions;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 pagination;                                        // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserGetResult) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserGetResult");
static_assert(sizeof(FAccelByteModelsSessionBrowserGetResult) == 0x000050, "Wrong size on FAccelByteModelsSessionBrowserGetResult");
static_assert(offsetof(FAccelByteModelsSessionBrowserGetResult, Sessions) == 0x000000, "Member 'FAccelByteModelsSessionBrowserGetResult::Sessions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGetResult, pagination) == 0x000010, "Member 'FAccelByteModelsSessionBrowserGetResult::pagination' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalStatItemGetItemByCodePayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGlobalStatItemGetItemByCodePayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalStatItemGetItemByCodePayload) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalStatItemGetItemByCodePayload");
static_assert(sizeof(FAccelByteModelsGlobalStatItemGetItemByCodePayload) == 0x000038, "Wrong size on FAccelByteModelsGlobalStatItemGetItemByCodePayload");
static_assert(offsetof(FAccelByteModelsGlobalStatItemGetItemByCodePayload, UserId) == 0x000018, "Member 'FAccelByteModelsGlobalStatItemGetItemByCodePayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemGetItemByCodePayload, StatCode) == 0x000028, "Member 'FAccelByteModelsGlobalStatItemGetItemByCodePayload::StatCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserAddPlayerResponse
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsSessionBrowserAddPlayerResponse final
{
public:
	bool                                          Status;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserAddPlayerResponse) == 0x000001, "Wrong alignment on FAccelByteModelsSessionBrowserAddPlayerResponse");
static_assert(sizeof(FAccelByteModelsSessionBrowserAddPlayerResponse) == 0x000001, "Wrong size on FAccelByteModelsSessionBrowserAddPlayerResponse");
static_assert(offsetof(FAccelByteModelsSessionBrowserAddPlayerResponse, Status) == 0x000000, "Member 'FAccelByteModelsSessionBrowserAddPlayerResponse::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserIdWrapper
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUserIdWrapper final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserIdWrapper) == 0x000008, "Wrong alignment on FAccelByteModelsUserIdWrapper");
static_assert(sizeof(FAccelByteModelsUserIdWrapper) == 0x000010, "Wrong size on FAccelByteModelsUserIdWrapper");
static_assert(offsetof(FAccelByteModelsUserIdWrapper, UserId) == 0x000000, "Member 'FAccelByteModelsUserIdWrapper::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryChatData
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsChatQueryChatData final
{
public:
	class FString                                 ChatId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReadAt;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatQueryChatData) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryChatData");
static_assert(sizeof(FAccelByteModelsChatQueryChatData) == 0x000050, "Wrong size on FAccelByteModelsChatQueryChatData");
static_assert(offsetof(FAccelByteModelsChatQueryChatData, ChatId) == 0x000000, "Member 'FAccelByteModelsChatQueryChatData::ChatId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatData, TopicId) == 0x000010, "Member 'FAccelByteModelsChatQueryChatData::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatData, Message) == 0x000020, "Member 'FAccelByteModelsChatQueryChatData::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatData, CreatedAt) == 0x000030, "Member 'FAccelByteModelsChatQueryChatData::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatData, From) == 0x000038, "Member 'FAccelByteModelsChatQueryChatData::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatData, ReadAt) == 0x000048, "Member 'FAccelByteModelsChatQueryChatData::ReadAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitDataChat
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsReportingSubmitDataChat final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatTopicId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChatCreatedAt;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitDataChat) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitDataChat");
static_assert(sizeof(FAccelByteModelsReportingSubmitDataChat) == 0x000058, "Wrong size on FAccelByteModelsReportingSubmitDataChat");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChat, UserId) == 0x000000, "Member 'FAccelByteModelsReportingSubmitDataChat::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChat, ChatTopicId) == 0x000010, "Member 'FAccelByteModelsReportingSubmitDataChat::ChatTopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChat, ChatId) == 0x000020, "Member 'FAccelByteModelsReportingSubmitDataChat::ChatId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChat, Comment) == 0x000030, "Member 'FAccelByteModelsReportingSubmitDataChat::Comment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChat, Reason) == 0x000040, "Member 'FAccelByteModelsReportingSubmitDataChat::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChat, ChatCreatedAt) == 0x000050, "Member 'FAccelByteModelsReportingSubmitDataChat::ChatCreatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkConflictMessageVariables
// 0x0020 (0x0020 - 0x0000)
struct FAccountLinkConflictMessageVariables final
{
public:
	class FString                                 PlatformUserID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccountLinkPublisherAccount>   PublisherAccounts;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkConflictMessageVariables) == 0x000008, "Wrong alignment on FAccountLinkConflictMessageVariables");
static_assert(sizeof(FAccountLinkConflictMessageVariables) == 0x000020, "Wrong size on FAccountLinkConflictMessageVariables");
static_assert(offsetof(FAccountLinkConflictMessageVariables, PlatformUserID) == 0x000000, "Member 'FAccountLinkConflictMessageVariables::PlatformUserID' has a wrong offset!");
static_assert(offsetof(FAccountLinkConflictMessageVariables, PublisherAccounts) == 0x000010, "Member 'FAccountLinkConflictMessageVariables::PublisherAccounts' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkConflictErrorJson
// 0x0040 (0x0040 - 0x0000)
struct FAccountLinkConflictErrorJson final
{
public:
	class FString                                 ErrorCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccountLinkConflictMessageVariables   MessageVariables;                                  // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkConflictErrorJson) == 0x000008, "Wrong alignment on FAccountLinkConflictErrorJson");
static_assert(sizeof(FAccountLinkConflictErrorJson) == 0x000040, "Wrong size on FAccountLinkConflictErrorJson");
static_assert(offsetof(FAccountLinkConflictErrorJson, ErrorCode) == 0x000000, "Member 'FAccountLinkConflictErrorJson::ErrorCode' has a wrong offset!");
static_assert(offsetof(FAccountLinkConflictErrorJson, ErrorMessage) == 0x000010, "Member 'FAccountLinkConflictErrorJson::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FAccountLinkConflictErrorJson, MessageVariables) == 0x000020, "Member 'FAccountLinkConflictErrorJson::MessageVariables' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2TokenPermission
// 0x0018 (0x0018 - 0x0000)
struct FOauth2TokenPermission final
{
public:
	class FString                                 Resource;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOauth2TokenPermission) == 0x000008, "Wrong alignment on FOauth2TokenPermission");
static_assert(sizeof(FOauth2TokenPermission) == 0x000018, "Wrong size on FOauth2TokenPermission");
static_assert(offsetof(FOauth2TokenPermission, Resource) == 0x000000, "Member 'FOauth2TokenPermission::Resource' has a wrong offset!");
static_assert(offsetof(FOauth2TokenPermission, Action) == 0x000010, "Member 'FOauth2TokenPermission::Action' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserRecentPlayerGetResult
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSessionBrowserRecentPlayerGetResult final
{
public:
	TArray<struct FAccelByteModelsSessionBrowserRecentPlayerData> Data;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserRecentPlayerGetResult) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserRecentPlayerGetResult");
static_assert(sizeof(FAccelByteModelsSessionBrowserRecentPlayerGetResult) == 0x000010, "Wrong size on FAccelByteModelsSessionBrowserRecentPlayerGetResult");
static_assert(offsetof(FAccelByteModelsSessionBrowserRecentPlayerGetResult, Data) == 0x000000, "Member 'FAccelByteModelsSessionBrowserRecentPlayerGetResult::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsWalletInfo final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Balance;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BalanceOrigin;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsTimeLimitedBalance> TimeLimitedBalances;                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalPermanentBalance;                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalTimeLimitedBalance;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsWalletInfo) == 0x000008, "Wrong alignment on FAccelByteModelsWalletInfo");
static_assert(sizeof(FAccelByteModelsWalletInfo) == 0x0000A0, "Wrong size on FAccelByteModelsWalletInfo");
static_assert(offsetof(FAccelByteModelsWalletInfo, Id) == 0x000000, "Member 'FAccelByteModelsWalletInfo::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsWalletInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, UserId) == 0x000020, "Member 'FAccelByteModelsWalletInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, CurrencyCode) == 0x000030, "Member 'FAccelByteModelsWalletInfo::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, CurrencySymbol) == 0x000040, "Member 'FAccelByteModelsWalletInfo::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, Balance) == 0x000050, "Member 'FAccelByteModelsWalletInfo::Balance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, BalanceOrigin) == 0x000058, "Member 'FAccelByteModelsWalletInfo::BalanceOrigin' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, TimeLimitedBalances) == 0x000068, "Member 'FAccelByteModelsWalletInfo::TimeLimitedBalances' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, CreatedAt) == 0x000078, "Member 'FAccelByteModelsWalletInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, UpdatedAt) == 0x000080, "Member 'FAccelByteModelsWalletInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, TotalPermanentBalance) == 0x000088, "Member 'FAccelByteModelsWalletInfo::TotalPermanentBalance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, TotalTimeLimitedBalance) == 0x000090, "Member 'FAccelByteModelsWalletInfo::TotalTimeLimitedBalance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, Status) == 0x000098, "Member 'FAccelByteModelsWalletInfo::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletInfoResponse
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsWalletInfoResponse final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Balance;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsWalletInfo>     WalletInfos;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          WalletStatus;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Id;                                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsWalletInfoResponse) == 0x000008, "Wrong alignment on FAccelByteModelsWalletInfoResponse");
static_assert(sizeof(FAccelByteModelsWalletInfoResponse) == 0x000070, "Wrong size on FAccelByteModelsWalletInfoResponse");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, Namespace) == 0x000000, "Member 'FAccelByteModelsWalletInfoResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, UserId) == 0x000010, "Member 'FAccelByteModelsWalletInfoResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, CurrencyCode) == 0x000020, "Member 'FAccelByteModelsWalletInfoResponse::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, CurrencySymbol) == 0x000030, "Member 'FAccelByteModelsWalletInfoResponse::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, Balance) == 0x000040, "Member 'FAccelByteModelsWalletInfoResponse::Balance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, WalletInfos) == 0x000048, "Member 'FAccelByteModelsWalletInfoResponse::WalletInfos' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, WalletStatus) == 0x000058, "Member 'FAccelByteModelsWalletInfoResponse::WalletStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, Status) == 0x000059, "Member 'FAccelByteModelsWalletInfoResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfoResponse, Id) == 0x000060, "Member 'FAccelByteModelsWalletInfoResponse::Id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalStatItemValueResponse
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsGlobalStatItemValueResponse final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalStatItemValueResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalStatItemValueResponse");
static_assert(sizeof(FAccelByteModelsGlobalStatItemValueResponse) == 0x000058, "Wrong size on FAccelByteModelsGlobalStatItemValueResponse");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, StatCode) == 0x000000, "Member 'FAccelByteModelsGlobalStatItemValueResponse::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, StatName) == 0x000010, "Member 'FAccelByteModelsGlobalStatItemValueResponse::StatName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, Namespace) == 0x000020, "Member 'FAccelByteModelsGlobalStatItemValueResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, Value) == 0x000030, "Member 'FAccelByteModelsGlobalStatItemValueResponse::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, Tags) == 0x000038, "Member 'FAccelByteModelsGlobalStatItemValueResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, CreatedAt) == 0x000048, "Member 'FAccelByteModelsGlobalStatItemValueResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGlobalStatItemValueResponse, UpdatedAt) == 0x000050, "Member 'FAccelByteModelsGlobalStatItemValueResponse::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatItemValueResponse
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsStatItemValueResponse final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 statName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatItemValueResponse) == 0x000008, "Wrong alignment on FAccelByteModelsStatItemValueResponse");
static_assert(sizeof(FAccelByteModelsStatItemValueResponse) == 0x000088, "Wrong size on FAccelByteModelsStatItemValueResponse");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, StatCode) == 0x000000, "Member 'FAccelByteModelsStatItemValueResponse::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, statName) == 0x000010, "Member 'FAccelByteModelsStatItemValueResponse::statName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, Namespace) == 0x000020, "Member 'FAccelByteModelsStatItemValueResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, Value) == 0x000030, "Member 'FAccelByteModelsStatItemValueResponse::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, Tags) == 0x000038, "Member 'FAccelByteModelsStatItemValueResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, CreatedAt) == 0x000048, "Member 'FAccelByteModelsStatItemValueResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, UpdatedAt) == 0x000050, "Member 'FAccelByteModelsStatItemValueResponse::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, UserId) == 0x000058, "Member 'FAccelByteModelsStatItemValueResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatItemValueResponse, AdditionalData) == 0x000068, "Member 'FAccelByteModelsStatItemValueResponse::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload");
static_assert(sizeof(FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload) == 0x000028, "Wrong size on FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPublicPlayerRecordGetOtherUserKeysPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicGameProfileInfo
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPublicGameProfileInfo final
{
public:
	class FString                                 profileId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 profileName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 avatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicGameProfileInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPublicGameProfileInfo");
static_assert(sizeof(FAccelByteModelsPublicGameProfileInfo) == 0x000040, "Wrong size on FAccelByteModelsPublicGameProfileInfo");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, profileId) == 0x000000, "Member 'FAccelByteModelsPublicGameProfileInfo::profileId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicGameProfileInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, profileName) == 0x000020, "Member 'FAccelByteModelsPublicGameProfileInfo::profileName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, avatarUrl) == 0x000030, "Member 'FAccelByteModelsPublicGameProfileInfo::avatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardGetLeaderboardsPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsLeaderboardGetLeaderboardsPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardGetLeaderboardsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardGetLeaderboardsPayload");
static_assert(sizeof(FAccelByteModelsLeaderboardGetLeaderboardsPayload) == 0x000028, "Wrong size on FAccelByteModelsLeaderboardGetLeaderboardsPayload");
static_assert(offsetof(FAccelByteModelsLeaderboardGetLeaderboardsPayload, UserId) == 0x000018, "Member 'FAccelByteModelsLeaderboardGetLeaderboardsPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCSearchContentsPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCSearchContentsPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCSearchContentsResponse> Data;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCSearchContentsPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCSearchContentsPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCSearchContentsPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCSearchContentsPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCSearchContentsPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCSearchContentsPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Ban
// 0x0030 (0x0030 - 0x0000)
struct FBan final
{
public:
	class FString                                 Ban;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BanId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBan) == 0x000008, "Wrong alignment on FBan");
static_assert(sizeof(FBan) == 0x000030, "Wrong size on FBan");
static_assert(offsetof(FBan, Ban) == 0x000000, "Member 'FBan::Ban' has a wrong offset!");
static_assert(offsetof(FBan, BanId) == 0x000010, "Member 'FBan::BanId' has a wrong offset!");
static_assert(offsetof(FBan, EndDate) == 0x000020, "Member 'FBan::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Permission
// 0x0040 (0x0040 - 0x0000)
struct FPermission final
{
public:
	int32                                         Action;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Resource;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchedAction;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SchedCron;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SchedRange;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermission) == 0x000008, "Wrong alignment on FPermission");
static_assert(sizeof(FPermission) == 0x000040, "Wrong size on FPermission");
static_assert(offsetof(FPermission, Action) == 0x000000, "Member 'FPermission::Action' has a wrong offset!");
static_assert(offsetof(FPermission, Resource) == 0x000008, "Member 'FPermission::Resource' has a wrong offset!");
static_assert(offsetof(FPermission, SchedAction) == 0x000018, "Member 'FPermission::SchedAction' has a wrong offset!");
static_assert(offsetof(FPermission, SchedCron) == 0x000020, "Member 'FPermission::SchedCron' has a wrong offset!");
static_assert(offsetof(FPermission, SchedRange) == 0x000030, "Member 'FPermission::SchedRange' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.NamespaceRole
// 0x0020 (0x0020 - 0x0000)
struct FNamespaceRole final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamespaceRole) == 0x000008, "Wrong alignment on FNamespaceRole");
static_assert(sizeof(FNamespaceRole) == 0x000020, "Wrong size on FNamespaceRole");
static_assert(offsetof(FNamespaceRole, Namespace) == 0x000000, "Member 'FNamespaceRole::Namespace' has a wrong offset!");
static_assert(offsetof(FNamespaceRole, RoleId) == 0x000010, "Member 'FNamespaceRole::RoleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountUserData
// 0x01A0 (0x01A0 - 0x0000)
struct FAccountUserData final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBan>                           Bans;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmailVerified;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastEnabledChangedTime;                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginId;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPermission>                    Permissions;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PhoneVerified;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeletionDate;                                      // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeletionStatus;                                    // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastDateOfBirthChangedTime;                        // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamespaceRole>                 NamespaceRoles;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NewEmailAddress;                                   // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldEmailAddress;                                   // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhoneNumber;                                       // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformAvatarUrl;                                 // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformDisplayName;                               // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountUserData) == 0x000008, "Wrong alignment on FAccountUserData");
static_assert(sizeof(FAccountUserData) == 0x0001A0, "Wrong size on FAccountUserData");
static_assert(offsetof(FAccountUserData, AuthType) == 0x000000, "Member 'FAccountUserData::AuthType' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Bans) == 0x000010, "Member 'FAccountUserData::Bans' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Country) == 0x000020, "Member 'FAccountUserData::Country' has a wrong offset!");
static_assert(offsetof(FAccountUserData, CreatedAt) == 0x000030, "Member 'FAccountUserData::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccountUserData, DateOfBirth) == 0x000040, "Member 'FAccountUserData::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccountUserData, DisplayName) == 0x000050, "Member 'FAccountUserData::DisplayName' has a wrong offset!");
static_assert(offsetof(FAccountUserData, EmailVerified) == 0x000060, "Member 'FAccountUserData::EmailVerified' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Enabled) == 0x000061, "Member 'FAccountUserData::Enabled' has a wrong offset!");
static_assert(offsetof(FAccountUserData, LastEnabledChangedTime) == 0x000068, "Member 'FAccountUserData::LastEnabledChangedTime' has a wrong offset!");
static_assert(offsetof(FAccountUserData, LoginId) == 0x000078, "Member 'FAccountUserData::LoginId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Namespace) == 0x000088, "Member 'FAccountUserData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Permissions) == 0x000098, "Member 'FAccountUserData::Permissions' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PhoneVerified) == 0x0000A8, "Member 'FAccountUserData::PhoneVerified' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PlatformId) == 0x0000B0, "Member 'FAccountUserData::PlatformId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PlatformUserId) == 0x0000C0, "Member 'FAccountUserData::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Roles) == 0x0000D0, "Member 'FAccountUserData::Roles' has a wrong offset!");
static_assert(offsetof(FAccountUserData, UserId) == 0x0000E0, "Member 'FAccountUserData::UserId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Username) == 0x0000F0, "Member 'FAccountUserData::Username' has a wrong offset!");
static_assert(offsetof(FAccountUserData, EmailAddress) == 0x000100, "Member 'FAccountUserData::EmailAddress' has a wrong offset!");
static_assert(offsetof(FAccountUserData, AvatarUrl) == 0x000110, "Member 'FAccountUserData::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccountUserData, DeletionDate) == 0x000120, "Member 'FAccountUserData::DeletionDate' has a wrong offset!");
static_assert(offsetof(FAccountUserData, DeletionStatus) == 0x000130, "Member 'FAccountUserData::DeletionStatus' has a wrong offset!");
static_assert(offsetof(FAccountUserData, LastDateOfBirthChangedTime) == 0x000138, "Member 'FAccountUserData::LastDateOfBirthChangedTime' has a wrong offset!");
static_assert(offsetof(FAccountUserData, NamespaceRoles) == 0x000140, "Member 'FAccountUserData::NamespaceRoles' has a wrong offset!");
static_assert(offsetof(FAccountUserData, NewEmailAddress) == 0x000150, "Member 'FAccountUserData::NewEmailAddress' has a wrong offset!");
static_assert(offsetof(FAccountUserData, OldEmailAddress) == 0x000160, "Member 'FAccountUserData::OldEmailAddress' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PhoneNumber) == 0x000170, "Member 'FAccountUserData::PhoneNumber' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PlatformAvatarUrl) == 0x000180, "Member 'FAccountUserData::PlatformAvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PlatformDisplayName) == 0x000190, "Member 'FAccountUserData::PlatformDisplayName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAgreementDocument
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsAgreementDocument final
{
public:
	class FString                                 LocalizedPolicyVersionId;                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyVersionId;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAgreementDocument) == 0x000008, "Wrong alignment on FAccelByteModelsAgreementDocument");
static_assert(sizeof(FAccelByteModelsAgreementDocument) == 0x000030, "Wrong size on FAccelByteModelsAgreementDocument");
static_assert(offsetof(FAccelByteModelsAgreementDocument, LocalizedPolicyVersionId) == 0x000000, "Member 'FAccelByteModelsAgreementDocument::LocalizedPolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAgreementDocument, PolicyVersionId) == 0x000010, "Member 'FAccelByteModelsAgreementDocument::PolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAgreementDocument, PolicyId) == 0x000020, "Member 'FAccelByteModelsAgreementDocument::PolicyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserAgreementAcceptedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsUserAgreementAcceptedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	TArray<struct FAccelByteModelsAgreementDocument> AgreementDocuments;                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserAgreementAcceptedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserAgreementAcceptedPayload");
static_assert(sizeof(FAccelByteModelsUserAgreementAcceptedPayload) == 0x000028, "Wrong size on FAccelByteModelsUserAgreementAcceptedPayload");
static_assert(offsetof(FAccelByteModelsUserAgreementAcceptedPayload, AgreementDocuments) == 0x000018, "Member 'FAccelByteModelsUserAgreementAcceptedPayload::AgreementDocuments' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCResponse
// 0x0110 (0x0110 - 0x0000)
struct FAccelByteModelsUGCResponse final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Preview;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x00F0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCResponse");
static_assert(sizeof(FAccelByteModelsUGCResponse) == 0x000110, "Wrong size on FAccelByteModelsUGCResponse");
static_assert(offsetof(FAccelByteModelsUGCResponse, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCResponse::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, ContentType) == 0x000010, "Member 'FAccelByteModelsUGCResponse::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, CreatedTime) == 0x000020, "Member 'FAccelByteModelsUGCResponse::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, CreatorName) == 0x000028, "Member 'FAccelByteModelsUGCResponse::CreatorName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, FileExtension) == 0x000038, "Member 'FAccelByteModelsUGCResponse::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Id) == 0x000048, "Member 'FAccelByteModelsUGCResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, IsOfficial) == 0x000058, "Member 'FAccelByteModelsUGCResponse::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Name) == 0x000060, "Member 'FAccelByteModelsUGCResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Namespace) == 0x000070, "Member 'FAccelByteModelsUGCResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, PayloadUrl) == 0x000080, "Member 'FAccelByteModelsUGCResponse::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Preview) == 0x000090, "Member 'FAccelByteModelsUGCResponse::Preview' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, ShareCode) == 0x0000A0, "Member 'FAccelByteModelsUGCResponse::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, SubType) == 0x0000B0, "Member 'FAccelByteModelsUGCResponse::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Tags) == 0x0000C0, "Member 'FAccelByteModelsUGCResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Type) == 0x0000D0, "Member 'FAccelByteModelsUGCResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, UserId) == 0x0000E0, "Member 'FAccelByteModelsUGCResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, CustomAttributes) == 0x0000F0, "Member 'FAccelByteModelsUGCResponse::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSetSessionAttributesResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsSetSessionAttributesResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsSetSessionAttributesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSetSessionAttributesResponse");
static_assert(sizeof(FAccelByteModelsSetSessionAttributesResponse) == 0x000030, "Wrong size on FAccelByteModelsSetSessionAttributesResponse");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsBulkStatItemOperationResultResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsBulkStatItemOperationResultResponse final
{
public:
	TArray<struct FAccelByteModelsBulkStatItemOperationResult> Content;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsBulkStatItemOperationResultResponse) == 0x000008, "Wrong alignment on FArrayModelsBulkStatItemOperationResultResponse");
static_assert(sizeof(FArrayModelsBulkStatItemOperationResultResponse) == 0x000010, "Wrong size on FArrayModelsBulkStatItemOperationResultResponse");
static_assert(offsetof(FArrayModelsBulkStatItemOperationResultResponse, Content) == 0x000000, "Member 'FArrayModelsBulkStatItemOperationResultResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCCreatorState
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsUGCCreatorState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCCreatorState) == 0x000008, "Wrong alignment on FAccelByteModelsUGCCreatorState");
static_assert(sizeof(FAccelByteModelsUGCCreatorState) == 0x000018, "Wrong size on FAccelByteModelsUGCCreatorState");
static_assert(offsetof(FAccelByteModelsUGCCreatorState, State) == 0x000000, "Member 'FAccelByteModelsUGCCreatorState::State' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreatorState, UserId) == 0x000008, "Member 'FAccelByteModelsUGCCreatorState::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCContentResponse
// 0x0170 (0x0170 - 0x0000)
struct FAccelByteModelsUGCContentResponse final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCCreatorState        CreatorFollowState;                                // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownloadCount;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileExtension;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Groups;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LikeCount;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCCreatorState        LikeState;                                         // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PreviewURL;                                        // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCScreenshot>  Screenshots;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedTime;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0150(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCContentResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCContentResponse");
static_assert(sizeof(FAccelByteModelsUGCContentResponse) == 0x000170, "Wrong size on FAccelByteModelsUGCContentResponse");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCContentResponse::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CreatedTime) == 0x000010, "Member 'FAccelByteModelsUGCContentResponse::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CreatorFollowState) == 0x000018, "Member 'FAccelByteModelsUGCContentResponse::CreatorFollowState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CreatorName) == 0x000030, "Member 'FAccelByteModelsUGCContentResponse::CreatorName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, DownloadCount) == 0x000040, "Member 'FAccelByteModelsUGCContentResponse::DownloadCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, FileExtension) == 0x000048, "Member 'FAccelByteModelsUGCContentResponse::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Groups) == 0x000058, "Member 'FAccelByteModelsUGCContentResponse::Groups' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Id) == 0x000068, "Member 'FAccelByteModelsUGCContentResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, IsHidden) == 0x000078, "Member 'FAccelByteModelsUGCContentResponse::IsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, IsOfficial) == 0x000079, "Member 'FAccelByteModelsUGCContentResponse::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, LikeCount) == 0x00007C, "Member 'FAccelByteModelsUGCContentResponse::LikeCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, LikeState) == 0x000080, "Member 'FAccelByteModelsUGCContentResponse::LikeState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Name) == 0x000098, "Member 'FAccelByteModelsUGCContentResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Namespace) == 0x0000A8, "Member 'FAccelByteModelsUGCContentResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Payload) == 0x0000B8, "Member 'FAccelByteModelsUGCContentResponse::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, PayloadUrl) == 0x0000C8, "Member 'FAccelByteModelsUGCContentResponse::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, PreviewURL) == 0x0000D8, "Member 'FAccelByteModelsUGCContentResponse::PreviewURL' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Screenshots) == 0x0000E8, "Member 'FAccelByteModelsUGCContentResponse::Screenshots' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, ShareCode) == 0x0000F8, "Member 'FAccelByteModelsUGCContentResponse::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, SubType) == 0x000108, "Member 'FAccelByteModelsUGCContentResponse::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Tags) == 0x000118, "Member 'FAccelByteModelsUGCContentResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Type) == 0x000128, "Member 'FAccelByteModelsUGCContentResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, UserId) == 0x000138, "Member 'FAccelByteModelsUGCContentResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, UpdatedTime) == 0x000148, "Member 'FAccelByteModelsUGCContentResponse::UpdatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CustomAttributes) == 0x000150, "Member 'FAccelByteModelsUGCContentResponse::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderSummary
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsOrderSummary final
{
public:
	struct FAccelByteModelsOrderCurrencySummary   Currency;                                          // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Ext;                                               // 0x0040(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Free;                                              // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsOrderSummary) == 0x000008, "Wrong alignment on FAccelByteModelsOrderSummary");
static_assert(sizeof(FAccelByteModelsOrderSummary) == 0x000068, "Wrong size on FAccelByteModelsOrderSummary");
static_assert(offsetof(FAccelByteModelsOrderSummary, Currency) == 0x000000, "Member 'FAccelByteModelsOrderSummary::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderSummary, Ext) == 0x000040, "Member 'FAccelByteModelsOrderSummary::Ext' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderSummary, Free) == 0x000060, "Member 'FAccelByteModelsOrderSummary::Free' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulfillmentRequest
// 0x0130 (0x0130 - 0x0000)
struct FAccelByteModelsFulfillmentRequest final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderNo;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemSource                          Source;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsOrderSummary           Order;                                             // 0x0070(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              StartDate;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelBytePlatformRewardOrigin                Origin;                                            // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Metadata;                                          // 0x00F0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     OverrideBundleItemQty;                             // 0x0110(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulfillmentRequest) == 0x000008, "Wrong alignment on FAccelByteModelsFulfillmentRequest");
static_assert(sizeof(FAccelByteModelsFulfillmentRequest) == 0x000130, "Wrong size on FAccelByteModelsFulfillmentRequest");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, ItemId) == 0x000000, "Member 'FAccelByteModelsFulfillmentRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Quantity) == 0x000010, "Member 'FAccelByteModelsFulfillmentRequest::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, OrderNo) == 0x000018, "Member 'FAccelByteModelsFulfillmentRequest::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Source) == 0x000028, "Member 'FAccelByteModelsFulfillmentRequest::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Region) == 0x000030, "Member 'FAccelByteModelsFulfillmentRequest::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Language) == 0x000040, "Member 'FAccelByteModelsFulfillmentRequest::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, StoreId) == 0x000050, "Member 'FAccelByteModelsFulfillmentRequest::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, ItemSku) == 0x000060, "Member 'FAccelByteModelsFulfillmentRequest::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Order) == 0x000070, "Member 'FAccelByteModelsFulfillmentRequest::Order' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, StartDate) == 0x0000D8, "Member 'FAccelByteModelsFulfillmentRequest::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, EndDate) == 0x0000E0, "Member 'FAccelByteModelsFulfillmentRequest::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Duration) == 0x0000E8, "Member 'FAccelByteModelsFulfillmentRequest::Duration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Origin) == 0x0000EC, "Member 'FAccelByteModelsFulfillmentRequest::Origin' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Metadata) == 0x0000F0, "Member 'FAccelByteModelsFulfillmentRequest::Metadata' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, OverrideBundleItemQty) == 0x000110, "Member 'FAccelByteModelsFulfillmentRequest::OverrideBundleItemQty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTagsPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCTagsPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCTagResponse> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTagsPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTagsPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCTagsPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCTagsPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCTagsPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCTagsPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTagsPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCTagsPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatCycleItemGetListCyclePayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsStatCycleItemGetListCyclePayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatCycleItemGetListCyclePayload) == 0x000008, "Wrong alignment on FAccelByteModelsStatCycleItemGetListCyclePayload");
static_assert(sizeof(FAccelByteModelsStatCycleItemGetListCyclePayload) == 0x000028, "Wrong size on FAccelByteModelsStatCycleItemGetListCyclePayload");
static_assert(offsetof(FAccelByteModelsStatCycleItemGetListCyclePayload, UserId) == 0x000018, "Member 'FAccelByteModelsStatCycleItemGetListCyclePayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCChannelResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUGCChannelResponse final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCChannelResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCChannelResponse");
static_assert(sizeof(FAccelByteModelsUGCChannelResponse) == 0x000040, "Wrong size on FAccelByteModelsUGCChannelResponse");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, Id) == 0x000000, "Member 'FAccelByteModelsUGCChannelResponse::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, Name) == 0x000010, "Member 'FAccelByteModelsUGCChannelResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, Namespace) == 0x000020, "Member 'FAccelByteModelsUGCChannelResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, UserId) == 0x000030, "Member 'FAccelByteModelsUGCChannelResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMultipleServicePSNDLCSync
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMultipleServicePSNDLCSync final
{
public:
	TArray<int32>                                 ServiceLabel;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMultipleServicePSNDLCSync) == 0x000008, "Wrong alignment on FAccelByteModelsMultipleServicePSNDLCSync");
static_assert(sizeof(FAccelByteModelsMultipleServicePSNDLCSync) == 0x000010, "Wrong size on FAccelByteModelsMultipleServicePSNDLCSync");
static_assert(offsetof(FAccelByteModelsMultipleServicePSNDLCSync, ServiceLabel) == 0x000000, "Member 'FAccelByteModelsMultipleServicePSNDLCSync::ServiceLabel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsClaimedGlobalAchievements
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsClaimedGlobalAchievements final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AchievedAt;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsClaimedGlobalAchievements) == 0x000008, "Wrong alignment on FAccelByteModelsClaimedGlobalAchievements");
static_assert(sizeof(FAccelByteModelsClaimedGlobalAchievements) == 0x000018, "Wrong size on FAccelByteModelsClaimedGlobalAchievements");
static_assert(offsetof(FAccelByteModelsClaimedGlobalAchievements, AchievementCode) == 0x000000, "Member 'FAccelByteModelsClaimedGlobalAchievements::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsClaimedGlobalAchievements, AchievedAt) == 0x000010, "Member 'FAccelByteModelsClaimedGlobalAchievements::AchievedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupMemberByGroupIdPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupMemberByGroupIdPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupMemberByGroupIdPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupMemberByGroupIdPayload");
static_assert(sizeof(FAccelByteModelsGroupMemberByGroupIdPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupMemberByGroupIdPayload");
static_assert(offsetof(FAccelByteModelsGroupMemberByGroupIdPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupMemberByGroupIdPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberByGroupIdPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupMemberByGroupIdPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PlatformUserIdMap
// 0x0030 (0x0030 - 0x0000)
struct FPlatformUserIdMap final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformUserIdMap) == 0x000008, "Wrong alignment on FPlatformUserIdMap");
static_assert(sizeof(FPlatformUserIdMap) == 0x000030, "Wrong size on FPlatformUserIdMap");
static_assert(offsetof(FPlatformUserIdMap, UserId) == 0x000000, "Member 'FPlatformUserIdMap::UserId' has a wrong offset!");
static_assert(offsetof(FPlatformUserIdMap, PlatformUserId) == 0x000010, "Member 'FPlatformUserIdMap::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FPlatformUserIdMap, PlatformId) == 0x000020, "Member 'FPlatformUserIdMap::PlatformId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecordCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGameRecordCreatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameRecordCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecordCreatedPayload");
static_assert(sizeof(FAccelByteModelsGameRecordCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsGameRecordCreatedPayload");
static_assert(offsetof(FAccelByteModelsGameRecordCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGameRecordCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecordCreatedPayload, Key) == 0x000028, "Member 'FAccelByteModelsGameRecordCreatedPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCChannelsPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCChannelsPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCChannelResponse> Data;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCChannelsPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCChannelsPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCChannelsPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCChannelsPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCChannelsPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCChannelsPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelsPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCChannelsPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.accelByteUserPlatformInfoData
// 0x0050 (0x0050 - 0x0000)
struct FaccelByteUserPlatformInfoData final
{
public:
	class FString                                 userId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 username;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 avatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUserPlatformInfo> platformInfos;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaccelByteUserPlatformInfoData) == 0x000008, "Wrong alignment on FaccelByteUserPlatformInfoData");
static_assert(sizeof(FaccelByteUserPlatformInfoData) == 0x000050, "Wrong size on FaccelByteUserPlatformInfoData");
static_assert(offsetof(FaccelByteUserPlatformInfoData, userId) == 0x000000, "Member 'FaccelByteUserPlatformInfoData::userId' has a wrong offset!");
static_assert(offsetof(FaccelByteUserPlatformInfoData, displayName) == 0x000010, "Member 'FaccelByteUserPlatformInfoData::displayName' has a wrong offset!");
static_assert(offsetof(FaccelByteUserPlatformInfoData, username) == 0x000020, "Member 'FaccelByteUserPlatformInfoData::username' has a wrong offset!");
static_assert(offsetof(FaccelByteUserPlatformInfoData, avatarUrl) == 0x000030, "Member 'FaccelByteUserPlatformInfoData::avatarUrl' has a wrong offset!");
static_assert(offsetof(FaccelByteUserPlatformInfoData, platformInfos) == 0x000040, "Member 'FaccelByteUserPlatformInfoData::platformInfos' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2CreateTicketErrorDetails
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2CreateTicketErrorDetails final
{
public:
	class FString                                 TicketID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2CreateTicketErrorDetails) == 0x000008, "Wrong alignment on FAccelByteModelsV2CreateTicketErrorDetails");
static_assert(sizeof(FAccelByteModelsV2CreateTicketErrorDetails) == 0x000010, "Wrong size on FAccelByteModelsV2CreateTicketErrorDetails");
static_assert(offsetof(FAccelByteModelsV2CreateTicketErrorDetails, TicketID) == 0x000000, "Member 'FAccelByteModelsV2CreateTicketErrorDetails::TicketID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ErrorCreateMatchmakingTicketV2
// 0x0038 (0x0038 - 0x0000)
struct FErrorCreateMatchmakingTicketV2 final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExistingTicketID;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2CreateTicketErrorDetails MessageVariables;                              // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorCreateMatchmakingTicketV2) == 0x000008, "Wrong alignment on FErrorCreateMatchmakingTicketV2");
static_assert(sizeof(FErrorCreateMatchmakingTicketV2) == 0x000038, "Wrong size on FErrorCreateMatchmakingTicketV2");
static_assert(offsetof(FErrorCreateMatchmakingTicketV2, ErrorCode) == 0x000000, "Member 'FErrorCreateMatchmakingTicketV2::ErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorCreateMatchmakingTicketV2, ErrorMessage) == 0x000008, "Member 'FErrorCreateMatchmakingTicketV2::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FErrorCreateMatchmakingTicketV2, ExistingTicketID) == 0x000018, "Member 'FErrorCreateMatchmakingTicketV2::ExistingTicketID' has a wrong offset!");
static_assert(offsetof(FErrorCreateMatchmakingTicketV2, MessageVariables) == 0x000028, "Member 'FErrorCreateMatchmakingTicketV2::MessageVariables' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateLikeStatusToContentResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsUGCUpdateLikeStatusToContentResponse final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LikeStatus;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUGCUpdateLikeStatusToContentResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateLikeStatusToContentResponse");
static_assert(sizeof(FAccelByteModelsUGCUpdateLikeStatusToContentResponse) == 0x000018, "Wrong size on FAccelByteModelsUGCUpdateLikeStatusToContentResponse");
static_assert(offsetof(FAccelByteModelsUGCUpdateLikeStatusToContentResponse, ContentId) == 0x000000, "Member 'FAccelByteModelsUGCUpdateLikeStatusToContentResponse::ContentId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateLikeStatusToContentResponse, LikeStatus) == 0x000010, "Member 'FAccelByteModelsUGCUpdateLikeStatusToContentResponse::LikeStatus' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardGetUsersRankingsPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsLeaderboardGetUsersRankingsPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TargetUserIds;                                     // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardGetUsersRankingsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardGetUsersRankingsPayload");
static_assert(sizeof(FAccelByteModelsLeaderboardGetUsersRankingsPayload) == 0x000048, "Wrong size on FAccelByteModelsLeaderboardGetUsersRankingsPayload");
static_assert(offsetof(FAccelByteModelsLeaderboardGetUsersRankingsPayload, LeaderboardCode) == 0x000018, "Member 'FAccelByteModelsLeaderboardGetUsersRankingsPayload::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardGetUsersRankingsPayload, UserId) == 0x000028, "Member 'FAccelByteModelsLeaderboardGetUsersRankingsPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardGetUsersRankingsPayload, TargetUserIds) == 0x000038, "Member 'FAccelByteModelsLeaderboardGetUsersRankingsPayload::TargetUserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2DisconnectedPayload
// 0x0018 (0x0030 - 0x0018)
struct FAccelByteModelsChatV2DisconnectedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusCode;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatV2DisconnectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2DisconnectedPayload");
static_assert(sizeof(FAccelByteModelsChatV2DisconnectedPayload) == 0x000030, "Wrong size on FAccelByteModelsChatV2DisconnectedPayload");
static_assert(offsetof(FAccelByteModelsChatV2DisconnectedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2DisconnectedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2DisconnectedPayload, StatusCode) == 0x000028, "Member 'FAccelByteModelsChatV2DisconnectedPayload::StatusCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateFollowStatusToUserResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsUGCUpdateFollowStatusToUserResponse final
{
public:
	bool                                          FollowStatus;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUpdateFollowStatusToUserResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateFollowStatusToUserResponse");
static_assert(sizeof(FAccelByteModelsUGCUpdateFollowStatusToUserResponse) == 0x000018, "Wrong size on FAccelByteModelsUGCUpdateFollowStatusToUserResponse");
static_assert(offsetof(FAccelByteModelsUGCUpdateFollowStatusToUserResponse, FollowStatus) == 0x000000, "Member 'FAccelByteModelsUGCUpdateFollowStatusToUserResponse::FollowStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateFollowStatusToUserResponse, UserId) == 0x000008, "Member 'FAccelByteModelsUGCUpdateFollowStatusToUserResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionUserKickedEvent
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2GameSessionUserKickedEvent final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionUserKickedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionUserKickedEvent");
static_assert(sizeof(FAccelByteModelsV2GameSessionUserKickedEvent) == 0x000010, "Wrong size on FAccelByteModelsV2GameSessionUserKickedEvent");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserKickedEvent, SessionID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionUserKickedEvent::SessionID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardGetRankingsPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsLeaderboardGetRankingsPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardGetRankingsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardGetRankingsPayload");
static_assert(sizeof(FAccelByteModelsLeaderboardGetRankingsPayload) == 0x000038, "Wrong size on FAccelByteModelsLeaderboardGetRankingsPayload");
static_assert(offsetof(FAccelByteModelsLeaderboardGetRankingsPayload, LeaderboardCode) == 0x000018, "Member 'FAccelByteModelsLeaderboardGetRankingsPayload::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardGetRankingsPayload, UserId) == 0x000028, "Member 'FAccelByteModelsLeaderboardGetRankingsPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCSearchContentsPagingResponseV2
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCSearchContentsPagingResponseV2 final
{
public:
	TArray<struct FAccelByteModelsUGCContentResponseV2> Data;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCSearchContentsPagingResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCSearchContentsPagingResponseV2");
static_assert(sizeof(FAccelByteModelsUGCSearchContentsPagingResponseV2) == 0x000050, "Wrong size on FAccelByteModelsUGCSearchContentsPagingResponseV2");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsPagingResponseV2, Data) == 0x000000, "Member 'FAccelByteModelsUGCSearchContentsPagingResponseV2::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsPagingResponseV2, Paging) == 0x000010, "Member 'FAccelByteModelsUGCSearchContentsPagingResponseV2::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateScreenshotV2
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUGCUpdateScreenshotV2 final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenshotId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUpdateScreenshotV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateScreenshotV2");
static_assert(sizeof(FAccelByteModelsUGCUpdateScreenshotV2) == 0x000020, "Wrong size on FAccelByteModelsUGCUpdateScreenshotV2");
static_assert(offsetof(FAccelByteModelsUGCUpdateScreenshotV2, Description) == 0x000000, "Member 'FAccelByteModelsUGCUpdateScreenshotV2::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateScreenshotV2, ScreenshotId) == 0x000010, "Member 'FAccelByteModelsUGCUpdateScreenshotV2::ScreenshotId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateScreenshotsV2
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCUpdateScreenshotsV2 final
{
public:
	TArray<struct FAccelByteModelsUGCUpdateScreenshotV2> Screenshots;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUpdateScreenshotsV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateScreenshotsV2");
static_assert(sizeof(FAccelByteModelsUGCUpdateScreenshotsV2) == 0x000010, "Wrong size on FAccelByteModelsUGCUpdateScreenshotsV2");
static_assert(offsetof(FAccelByteModelsUGCUpdateScreenshotsV2, Screenshots) == 0x000000, "Member 'FAccelByteModelsUGCUpdateScreenshotsV2::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionUserRejectedEvent
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsV2GameSessionUserRejectedEvent final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RejectedID;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionUserRejectedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionUserRejectedEvent");
static_assert(sizeof(FAccelByteModelsV2GameSessionUserRejectedEvent) == 0x000030, "Wrong size on FAccelByteModelsV2GameSessionUserRejectedEvent");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserRejectedEvent, SessionID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionUserRejectedEvent::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserRejectedEvent, Members) == 0x000010, "Member 'FAccelByteModelsV2GameSessionUserRejectedEvent::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserRejectedEvent, RejectedID) == 0x000020, "Member 'FAccelByteModelsV2GameSessionUserRejectedEvent::RejectedID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCContentLikerV2
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUGCContentLikerV2 final
{
public:
	class FString                                 ContentId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LikedBy;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCContentLikerV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCContentLikerV2");
static_assert(sizeof(FAccelByteModelsUGCContentLikerV2) == 0x000038, "Wrong size on FAccelByteModelsUGCContentLikerV2");
static_assert(offsetof(FAccelByteModelsUGCContentLikerV2, ContentId) == 0x000000, "Member 'FAccelByteModelsUGCContentLikerV2::ContentId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentLikerV2, CreatedTime) == 0x000010, "Member 'FAccelByteModelsUGCContentLikerV2::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentLikerV2, LikedBy) == 0x000018, "Member 'FAccelByteModelsUGCContentLikerV2::LikedBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentLikerV2, Namespace) == 0x000028, "Member 'FAccelByteModelsUGCContentLikerV2::Namespace' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetPaginatedContentLikerResponseV2
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCGetPaginatedContentLikerResponseV2 final
{
public:
	TArray<struct FAccelByteModelsUGCContentLikerV2> Data;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGetPaginatedContentLikerResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetPaginatedContentLikerResponseV2");
static_assert(sizeof(FAccelByteModelsUGCGetPaginatedContentLikerResponseV2) == 0x000050, "Wrong size on FAccelByteModelsUGCGetPaginatedContentLikerResponseV2");
static_assert(offsetof(FAccelByteModelsUGCGetPaginatedContentLikerResponseV2, Data) == 0x000000, "Member 'FAccelByteModelsUGCGetPaginatedContentLikerResponseV2::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetPaginatedContentLikerResponseV2, Paging) == 0x000010, "Member 'FAccelByteModelsUGCGetPaginatedContentLikerResponseV2::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionNotificationMessage
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsSessionNotificationMessage final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Topic;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SentAt;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionNotificationMessage) == 0x000008, "Wrong alignment on FAccelByteModelsSessionNotificationMessage");
static_assert(sizeof(FAccelByteModelsSessionNotificationMessage) == 0x000038, "Wrong size on FAccelByteModelsSessionNotificationMessage");
static_assert(offsetof(FAccelByteModelsSessionNotificationMessage, Type) == 0x000000, "Member 'FAccelByteModelsSessionNotificationMessage::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionNotificationMessage, Topic) == 0x000010, "Member 'FAccelByteModelsSessionNotificationMessage::Topic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionNotificationMessage, Payload) == 0x000020, "Member 'FAccelByteModelsSessionNotificationMessage::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionNotificationMessage, SentAt) == 0x000030, "Member 'FAccelByteModelsSessionNotificationMessage::SentAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateContentFileLocationResponseV2
// 0x0118 (0x0118 - 0x0000)
struct FAccelByteModelsUGCUpdateContentFileLocationResponseV2 final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileLocation;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentNamespace;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedTime;                                       // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateContentFileLocationResponseV2");
static_assert(sizeof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2) == 0x000118, "Wrong size on FAccelByteModelsUGCUpdateContentFileLocationResponseV2");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, ContentType) == 0x000010, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, CreatedTime) == 0x000020, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, CustomAttributes) == 0x000028, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, FileExtension) == 0x000048, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, FileLocation) == 0x000058, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::FileLocation' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, Id) == 0x000068, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, IsHidden) == 0x000078, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::IsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, IsOfficial) == 0x000079, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, Name) == 0x000080, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, Namespace) == 0x000090, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, ParentNamespace) == 0x0000A0, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::ParentNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, PayloadUrl) == 0x0000B0, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, ShareCode) == 0x0000C0, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, SubType) == 0x0000D0, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, Tags) == 0x0000E0, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, Type) == 0x0000F0, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, UpdatedTime) == 0x000100, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::UpdatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationResponseV2, UserId) == 0x000108, "Member 'FAccelByteModelsUGCUpdateContentFileLocationResponseV2::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2QueryPartiesRequest
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsV2QueryPartiesRequest final
{
public:
	class FString                                 AttributeKey;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttributeValue;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderID;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberID;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionMemberStatus               MemberStatus;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionJoinability                JoinType;                                          // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartyID;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderBy;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Order;                                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2QueryPartiesRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2QueryPartiesRequest");
static_assert(sizeof(FAccelByteModelsV2QueryPartiesRequest) == 0x000078, "Wrong size on FAccelByteModelsV2QueryPartiesRequest");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, AttributeKey) == 0x000000, "Member 'FAccelByteModelsV2QueryPartiesRequest::AttributeKey' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, AttributeValue) == 0x000010, "Member 'FAccelByteModelsV2QueryPartiesRequest::AttributeValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, LeaderID) == 0x000020, "Member 'FAccelByteModelsV2QueryPartiesRequest::LeaderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, MemberID) == 0x000030, "Member 'FAccelByteModelsV2QueryPartiesRequest::MemberID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, MemberStatus) == 0x000040, "Member 'FAccelByteModelsV2QueryPartiesRequest::MemberStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, JoinType) == 0x000041, "Member 'FAccelByteModelsV2QueryPartiesRequest::JoinType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, PartyID) == 0x000048, "Member 'FAccelByteModelsV2QueryPartiesRequest::PartyID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, OrderBy) == 0x000058, "Member 'FAccelByteModelsV2QueryPartiesRequest::OrderBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesRequest, Order) == 0x000068, "Member 'FAccelByteModelsV2QueryPartiesRequest::Order' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterResponse
// 0x0080 (0x0080 - 0x0000)
struct FRegisterResponse final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthType;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterResponse) == 0x000008, "Wrong alignment on FRegisterResponse");
static_assert(sizeof(FRegisterResponse) == 0x000080, "Wrong size on FRegisterResponse");
static_assert(offsetof(FRegisterResponse, Namespace) == 0x000000, "Member 'FRegisterResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, UserId) == 0x000010, "Member 'FRegisterResponse::UserId' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, AuthType) == 0x000020, "Member 'FRegisterResponse::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, DisplayName) == 0x000030, "Member 'FRegisterResponse::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, EmailAddress) == 0x000040, "Member 'FRegisterResponse::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, Country) == 0x000050, "Member 'FRegisterResponse::Country' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, DateOfBirth) == 0x000060, "Member 'FRegisterResponse::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, Username) == 0x000070, "Member 'FRegisterResponse::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFriendRequestSentPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsFriendRequestSentPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 SenderId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverId;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFriendRequestSentPayload) == 0x000008, "Wrong alignment on FAccelByteModelsFriendRequestSentPayload");
static_assert(sizeof(FAccelByteModelsFriendRequestSentPayload) == 0x000038, "Wrong size on FAccelByteModelsFriendRequestSentPayload");
static_assert(offsetof(FAccelByteModelsFriendRequestSentPayload, SenderId) == 0x000018, "Member 'FAccelByteModelsFriendRequestSentPayload::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFriendRequestSentPayload, ReceiverId) == 0x000028, "Member 'FAccelByteModelsFriendRequestSentPayload::ReceiverId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFriendRequestAcceptedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsFriendRequestAcceptedPayload final : public FAccelByteModelsFriendRequestSentPayload
{
};
static_assert(alignof(FAccelByteModelsFriendRequestAcceptedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsFriendRequestAcceptedPayload");
static_assert(sizeof(FAccelByteModelsFriendRequestAcceptedPayload) == 0x000038, "Wrong size on FAccelByteModelsFriendRequestAcceptedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserBannedNotification
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserBannedNotification final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanType                                      Ban;                                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserBannedNotification) == 0x000008, "Wrong alignment on FAccelByteModelsUserBannedNotification");
static_assert(sizeof(FAccelByteModelsUserBannedNotification) == 0x000040, "Wrong size on FAccelByteModelsUserBannedNotification");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, UserId) == 0x000000, "Member 'FAccelByteModelsUserBannedNotification::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Namespace) == 0x000010, "Member 'FAccelByteModelsUserBannedNotification::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Ban) == 0x000020, "Member 'FAccelByteModelsUserBannedNotification::Ban' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, EndDate) == 0x000028, "Member 'FAccelByteModelsUserBannedNotification::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Reason) == 0x000038, "Member 'FAccelByteModelsUserBannedNotification::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Enable) == 0x000039, "Member 'FAccelByteModelsUserBannedNotification::Enable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUploadContentURLRequestV2
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUploadContentURLRequestV2 final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUploadContentURLRequestV2) == 0x000008, "Wrong alignment on FAccelByteModelsUploadContentURLRequestV2");
static_assert(sizeof(FAccelByteModelsUploadContentURLRequestV2) == 0x000020, "Wrong size on FAccelByteModelsUploadContentURLRequestV2");
static_assert(offsetof(FAccelByteModelsUploadContentURLRequestV2, ContentType) == 0x000000, "Member 'FAccelByteModelsUploadContentURLRequestV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUploadContentURLRequestV2, FileExtension) == 0x000010, "Member 'FAccelByteModelsUploadContentURLRequestV2::FileExtension' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartySetLimitRequest
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsPartySetLimitRequest final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartySetLimitRequest) == 0x000004, "Wrong alignment on FAccelByteModelsPartySetLimitRequest");
static_assert(sizeof(FAccelByteModelsPartySetLimitRequest) == 0x000004, "Wrong size on FAccelByteModelsPartySetLimitRequest");
static_assert(offsetof(FAccelByteModelsPartySetLimitRequest, Limit) == 0x000000, "Member 'FAccelByteModelsPartySetLimitRequest::Limit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PlatformLink
// 0x0090 (0x0090 - 0x0000)
struct FPlatformLink final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkedAt;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginNamespace;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountGroup;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformLink) == 0x000008, "Wrong alignment on FPlatformLink");
static_assert(sizeof(FPlatformLink) == 0x000090, "Wrong size on FPlatformLink");
static_assert(offsetof(FPlatformLink, DisplayName) == 0x000000, "Member 'FPlatformLink::DisplayName' has a wrong offset!");
static_assert(offsetof(FPlatformLink, EmailAddress) == 0x000010, "Member 'FPlatformLink::EmailAddress' has a wrong offset!");
static_assert(offsetof(FPlatformLink, LinkedAt) == 0x000020, "Member 'FPlatformLink::LinkedAt' has a wrong offset!");
static_assert(offsetof(FPlatformLink, Namespace) == 0x000030, "Member 'FPlatformLink::Namespace' has a wrong offset!");
static_assert(offsetof(FPlatformLink, OriginNamespace) == 0x000040, "Member 'FPlatformLink::OriginNamespace' has a wrong offset!");
static_assert(offsetof(FPlatformLink, PlatformId) == 0x000050, "Member 'FPlatformLink::PlatformId' has a wrong offset!");
static_assert(offsetof(FPlatformLink, PlatformUserId) == 0x000060, "Member 'FPlatformLink::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FPlatformLink, UserId) == 0x000070, "Member 'FPlatformLink::UserId' has a wrong offset!");
static_assert(offsetof(FPlatformLink, AccountGroup) == 0x000080, "Member 'FPlatformLink::AccountGroup' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PagedPlatformLinks
// 0x0050 (0x0050 - 0x0000)
struct FPagedPlatformLinks final
{
public:
	TArray<struct FPlatformLink>                  Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPagedPlatformLinks) == 0x000008, "Wrong alignment on FPagedPlatformLinks");
static_assert(sizeof(FPagedPlatformLinks) == 0x000050, "Wrong size on FPagedPlatformLinks");
static_assert(offsetof(FPagedPlatformLinks, Data) == 0x000000, "Member 'FPagedPlatformLinks::Data' has a wrong offset!");
static_assert(offsetof(FPagedPlatformLinks, Paging) == 0x000010, "Member 'FPagedPlatformLinks::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.VerificationCodeRequest
// 0x0028 (0x0028 - 0x0000)
struct FVerificationCodeRequest final
{
public:
	EVerificationContext                          Context;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LanguageTag;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerificationCodeRequest) == 0x000008, "Wrong alignment on FVerificationCodeRequest");
static_assert(sizeof(FVerificationCodeRequest) == 0x000028, "Wrong size on FVerificationCodeRequest");
static_assert(offsetof(FVerificationCodeRequest, Context) == 0x000000, "Member 'FVerificationCodeRequest::Context' has a wrong offset!");
static_assert(offsetof(FVerificationCodeRequest, LanguageTag) == 0x000008, "Member 'FVerificationCodeRequest::LanguageTag' has a wrong offset!");
static_assert(offsetof(FVerificationCodeRequest, EmailAddress) == 0x000018, "Member 'FVerificationCodeRequest::EmailAddress' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFriendRequestCancelledPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsFriendRequestCancelledPayload final : public FAccelByteModelsFriendRequestSentPayload
{
};
static_assert(alignof(FAccelByteModelsFriendRequestCancelledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsFriendRequestCancelledPayload");
static_assert(sizeof(FAccelByteModelsFriendRequestCancelledPayload) == 0x000038, "Wrong size on FAccelByteModelsFriendRequestCancelledPayload");

// ScriptStruct AccelByteUe4Sdk.SimpleUserData
// 0x0040 (0x0040 - 0x0000)
struct FSimpleUserData final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleUserData) == 0x000008, "Wrong alignment on FSimpleUserData");
static_assert(sizeof(FSimpleUserData) == 0x000040, "Wrong size on FSimpleUserData");
static_assert(offsetof(FSimpleUserData, Namespace) == 0x000000, "Member 'FSimpleUserData::Namespace' has a wrong offset!");
static_assert(offsetof(FSimpleUserData, UserId) == 0x000010, "Member 'FSimpleUserData::UserId' has a wrong offset!");
static_assert(offsetof(FSimpleUserData, DisplayName) == 0x000020, "Member 'FSimpleUserData::DisplayName' has a wrong offset!");
static_assert(offsetof(FSimpleUserData, Username) == 0x000030, "Member 'FSimpleUserData::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BulkPlatformUserIdResponse
// 0x0010 (0x0010 - 0x0000)
struct FBulkPlatformUserIdResponse final
{
public:
	TArray<struct FPlatformUserIdMap>             UserIdPlatforms;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulkPlatformUserIdResponse) == 0x000008, "Wrong alignment on FBulkPlatformUserIdResponse");
static_assert(sizeof(FBulkPlatformUserIdResponse) == 0x000010, "Wrong size on FBulkPlatformUserIdResponse");
static_assert(offsetof(FBulkPlatformUserIdResponse, UserIdPlatforms) == 0x000000, "Member 'FBulkPlatformUserIdResponse::UserIdPlatforms' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BaseUserInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FBaseUserInfo final
{
public:
	class FString                                 AvatarUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PlatformUserIds;                                   // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublisherAvatarUrl;                                // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseUserInfo) == 0x000008, "Wrong alignment on FBaseUserInfo");
static_assert(sizeof(FBaseUserInfo) == 0x0000A0, "Wrong size on FBaseUserInfo");
static_assert(offsetof(FBaseUserInfo, AvatarUrl) == 0x000000, "Member 'FBaseUserInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, DisplayName) == 0x000010, "Member 'FBaseUserInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, PlatformUserIds) == 0x000020, "Member 'FBaseUserInfo::PlatformUserIds' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, UserId) == 0x000070, "Member 'FBaseUserInfo::UserId' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, PublisherAvatarUrl) == 0x000080, "Member 'FBaseUserInfo::PublisherAvatarUrl' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, Username) == 0x000090, "Member 'FBaseUserInfo::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListBulkUserInfo
// 0x0010 (0x0010 - 0x0000)
struct FListBulkUserInfo final
{
public:
	TArray<struct FBaseUserInfo>                  Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListBulkUserInfo) == 0x000008, "Wrong alignment on FListBulkUserInfo");
static_assert(sizeof(FListBulkUserInfo) == 0x000010, "Wrong size on FListBulkUserInfo");
static_assert(offsetof(FListBulkUserInfo, Data) == 0x000000, "Member 'FListBulkUserInfo::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAddUserIntoSessionRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsAddUserIntoSessionRequest final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Party_id;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAddUserIntoSessionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsAddUserIntoSessionRequest");
static_assert(sizeof(FAccelByteModelsAddUserIntoSessionRequest) == 0x000020, "Wrong size on FAccelByteModelsAddUserIntoSessionRequest");
static_assert(offsetof(FAccelByteModelsAddUserIntoSessionRequest, User_id) == 0x000000, "Member 'FAccelByteModelsAddUserIntoSessionRequest::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAddUserIntoSessionRequest, Party_id) == 0x000010, "Member 'FAccelByteModelsAddUserIntoSessionRequest::Party_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordDeletedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordDeletedPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordDeletedPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordDeletedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordDeletedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordDeletedPayload, Key) == 0x000028, "Member 'FAccelByteModelsPlayerBinaryRecordDeletedPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.CountryInfo
// 0x0040 (0x0040 - 0x0000)
struct FCountryInfo final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 City;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCountryInfo) == 0x000008, "Wrong alignment on FCountryInfo");
static_assert(sizeof(FCountryInfo) == 0x000040, "Wrong size on FCountryInfo");
static_assert(offsetof(FCountryInfo, CountryCode) == 0x000000, "Member 'FCountryInfo::CountryCode' has a wrong offset!");
static_assert(offsetof(FCountryInfo, CountryName) == 0x000010, "Member 'FCountryInfo::CountryName' has a wrong offset!");
static_assert(offsetof(FCountryInfo, State) == 0x000020, "Member 'FCountryInfo::State' has a wrong offset!");
static_assert(offsetof(FCountryInfo, City) == 0x000030, "Member 'FCountryInfo::City' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSBackfillProposalRejectedPayload
// 0x0000 (0x0088 - 0x0088)
struct FAccelByteModelsDSBackfillProposalRejectedPayload final : public FAccelByteModelsDSBackfillProposalReceivedPayload
{
};
static_assert(alignof(FAccelByteModelsDSBackfillProposalRejectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSBackfillProposalRejectedPayload");
static_assert(sizeof(FAccelByteModelsDSBackfillProposalRejectedPayload) == 0x000088, "Wrong size on FAccelByteModelsDSBackfillProposalRejectedPayload");

// ScriptStruct AccelByteUe4Sdk.HeadlessAccount
// 0x0040 (0x0040 - 0x0000)
struct FHeadlessAccount final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LinkedGames;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeadlessAccount) == 0x000008, "Wrong alignment on FHeadlessAccount");
static_assert(sizeof(FHeadlessAccount) == 0x000040, "Wrong size on FHeadlessAccount");
static_assert(offsetof(FHeadlessAccount, DisplayName) == 0x000000, "Member 'FHeadlessAccount::DisplayName' has a wrong offset!");
static_assert(offsetof(FHeadlessAccount, Email) == 0x000010, "Member 'FHeadlessAccount::Email' has a wrong offset!");
static_assert(offsetof(FHeadlessAccount, LinkedGames) == 0x000020, "Member 'FHeadlessAccount::LinkedGames' has a wrong offset!");
static_assert(offsetof(FHeadlessAccount, UserName) == 0x000030, "Member 'FHeadlessAccount::UserName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerCreateSessionRequest
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsServerCreateSessionRequest final
{
public:
	class FString                                 Client_version;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Configuration;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_mode;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerCreateSessionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsServerCreateSessionRequest");
static_assert(sizeof(FAccelByteModelsServerCreateSessionRequest) == 0x000090, "Wrong size on FAccelByteModelsServerCreateSessionRequest");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Client_version) == 0x000000, "Member 'FAccelByteModelsServerCreateSessionRequest::Client_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Configuration) == 0x000010, "Member 'FAccelByteModelsServerCreateSessionRequest::Configuration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Deployment) == 0x000020, "Member 'FAccelByteModelsServerCreateSessionRequest::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Game_mode) == 0x000030, "Member 'FAccelByteModelsServerCreateSessionRequest::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Namespace) == 0x000040, "Member 'FAccelByteModelsServerCreateSessionRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Pod_name) == 0x000050, "Member 'FAccelByteModelsServerCreateSessionRequest::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Region) == 0x000060, "Member 'FAccelByteModelsServerCreateSessionRequest::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Session_id) == 0x000070, "Member 'FAccelByteModelsServerCreateSessionRequest::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Matching_allies) == 0x000080, "Member 'FAccelByteModelsServerCreateSessionRequest::Matching_allies' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRefreshTokenResponse
// 0x0000 (0x0030 - 0x0030)
struct FAccelByteModelsRefreshTokenResponse final : public FAccelByteModelsLobbyBaseResponse
{
};
static_assert(alignof(FAccelByteModelsRefreshTokenResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRefreshTokenResponse");
static_assert(sizeof(FAccelByteModelsRefreshTokenResponse) == 0x000030, "Wrong size on FAccelByteModelsRefreshTokenResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCPreviewMetadata
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUGCPreviewMetadata final
{
public:
	class FString                                 PreviewContentType;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewFileExtension;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCPreviewMetadata) == 0x000008, "Wrong alignment on FAccelByteModelsUGCPreviewMetadata");
static_assert(sizeof(FAccelByteModelsUGCPreviewMetadata) == 0x000020, "Wrong size on FAccelByteModelsUGCPreviewMetadata");
static_assert(offsetof(FAccelByteModelsUGCPreviewMetadata, PreviewContentType) == 0x000000, "Member 'FAccelByteModelsUGCPreviewMetadata::PreviewContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCPreviewMetadata, PreviewFileExtension) == 0x000010, "Member 'FAccelByteModelsUGCPreviewMetadata::PreviewFileExtension' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDisconnectNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsDisconnectNotif final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDisconnectNotif) == 0x000008, "Wrong alignment on FAccelByteModelsDisconnectNotif");
static_assert(sizeof(FAccelByteModelsDisconnectNotif) == 0x000010, "Wrong size on FAccelByteModelsDisconnectNotif");
static_assert(offsetof(FAccelByteModelsDisconnectNotif, Message) == 0x000000, "Member 'FAccelByteModelsDisconnectNotif::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnershipItemIds
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsEntitlementOwnershipItemIds final
{
public:
	bool                                          Owned;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnershipItemIds) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnershipItemIds");
static_assert(sizeof(FAccelByteModelsEntitlementOwnershipItemIds) == 0x000018, "Wrong size on FAccelByteModelsEntitlementOwnershipItemIds");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipItemIds, Owned) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnershipItemIds::Owned' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipItemIds, ItemId) == 0x000008, "Member 'FAccelByteModelsEntitlementOwnershipItemIds::ItemId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSlot
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsSlot final
{
public:
	class FString                                 Checksum;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateAccessed;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateCreated;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateModified;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MimeType;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalName;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotId;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0088(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoredName;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSlot) == 0x000008, "Wrong alignment on FAccelByteModelsSlot");
static_assert(sizeof(FAccelByteModelsSlot) == 0x0000D0, "Wrong size on FAccelByteModelsSlot");
static_assert(offsetof(FAccelByteModelsSlot, Checksum) == 0x000000, "Member 'FAccelByteModelsSlot::Checksum' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, CustomAttribute) == 0x000010, "Member 'FAccelByteModelsSlot::CustomAttribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, DateAccessed) == 0x000020, "Member 'FAccelByteModelsSlot::DateAccessed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, DateCreated) == 0x000028, "Member 'FAccelByteModelsSlot::DateCreated' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, DateModified) == 0x000030, "Member 'FAccelByteModelsSlot::DateModified' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Label) == 0x000038, "Member 'FAccelByteModelsSlot::Label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, MimeType) == 0x000048, "Member 'FAccelByteModelsSlot::MimeType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Namespace) == 0x000058, "Member 'FAccelByteModelsSlot::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, OriginalName) == 0x000068, "Member 'FAccelByteModelsSlot::OriginalName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, SlotId) == 0x000078, "Member 'FAccelByteModelsSlot::SlotId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Status) == 0x000088, "Member 'FAccelByteModelsSlot::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, StoredName) == 0x000098, "Member 'FAccelByteModelsSlot::StoredName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Tags) == 0x0000A8, "Member 'FAccelByteModelsSlot::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, UserId) == 0x0000B8, "Member 'FAccelByteModelsSlot::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Size) == 0x0000C8, "Member 'FAccelByteModelsSlot::Size' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStoreOpenedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsStoreOpenedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 StoreId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreName;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStoreOpenedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsStoreOpenedPayload");
static_assert(sizeof(FAccelByteModelsStoreOpenedPayload) == 0x000048, "Wrong size on FAccelByteModelsStoreOpenedPayload");
static_assert(offsetof(FAccelByteModelsStoreOpenedPayload, StoreId) == 0x000018, "Member 'FAccelByteModelsStoreOpenedPayload::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStoreOpenedPayload, StoreName) == 0x000028, "Member 'FAccelByteModelsStoreOpenedPayload::StoreName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStoreOpenedPayload, Category) == 0x000038, "Member 'FAccelByteModelsStoreOpenedPayload::Category' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicGameProfile
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPublicGameProfile final
{
public:
	TArray<struct FAccelByteModelsPublicGameProfileInfo> gameProfiles;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 userId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicGameProfile) == 0x000008, "Wrong alignment on FAccelByteModelsPublicGameProfile");
static_assert(sizeof(FAccelByteModelsPublicGameProfile) == 0x000020, "Wrong size on FAccelByteModelsPublicGameProfile");
static_assert(offsetof(FAccelByteModelsPublicGameProfile, gameProfiles) == 0x000000, "Member 'FAccelByteModelsPublicGameProfile::gameProfiles' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfile, userId) == 0x000010, "Member 'FAccelByteModelsPublicGameProfile::userId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupCustomRuleUpdatedPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsGroupCustomRuleUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     GroupRules;                                        // 0x0038(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupCustomRuleUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupCustomRuleUpdatedPayload");
static_assert(sizeof(FAccelByteModelsGroupCustomRuleUpdatedPayload) == 0x000058, "Wrong size on FAccelByteModelsGroupCustomRuleUpdatedPayload");
static_assert(offsetof(FAccelByteModelsGroupCustomRuleUpdatedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupCustomRuleUpdatedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCustomRuleUpdatedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupCustomRuleUpdatedPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCustomRuleUpdatedPayload, GroupRules) == 0x000038, "Member 'FAccelByteModelsGroupCustomRuleUpdatedPayload::GroupRules' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameProfile
// 0x00C0 (0x00C0 - 0x0000)
struct FAccelByteModelsGameProfile final
{
public:
	class FString                                 profileId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 userId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 profileName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 avatarUrl;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 label;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         tags;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            attributes;                                        // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameProfile) == 0x000008, "Wrong alignment on FAccelByteModelsGameProfile");
static_assert(sizeof(FAccelByteModelsGameProfile) == 0x0000C0, "Wrong size on FAccelByteModelsGameProfile");
static_assert(offsetof(FAccelByteModelsGameProfile, profileId) == 0x000000, "Member 'FAccelByteModelsGameProfile::profileId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, userId) == 0x000010, "Member 'FAccelByteModelsGameProfile::userId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, Namespace) == 0x000020, "Member 'FAccelByteModelsGameProfile::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, profileName) == 0x000030, "Member 'FAccelByteModelsGameProfile::profileName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, avatarUrl) == 0x000040, "Member 'FAccelByteModelsGameProfile::avatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, label) == 0x000050, "Member 'FAccelByteModelsGameProfile::label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, tags) == 0x000060, "Member 'FAccelByteModelsGameProfile::tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, attributes) == 0x000070, "Member 'FAccelByteModelsGameProfile::attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameProfileRequest
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsGameProfileRequest final
{
public:
	TMap<class FString, class FString>            attributes;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 avatarUrl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 label;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 profileName;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         tags;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameProfileRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGameProfileRequest");
static_assert(sizeof(FAccelByteModelsGameProfileRequest) == 0x000090, "Wrong size on FAccelByteModelsGameProfileRequest");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, attributes) == 0x000000, "Member 'FAccelByteModelsGameProfileRequest::attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, avatarUrl) == 0x000050, "Member 'FAccelByteModelsGameProfileRequest::avatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, label) == 0x000060, "Member 'FAccelByteModelsGameProfileRequest::label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, profileName) == 0x000070, "Member 'FAccelByteModelsGameProfileRequest::profileName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, tags) == 0x000080, "Member 'FAccelByteModelsGameProfileRequest::tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2TokenBan
// 0x0030 (0x0030 - 0x0000)
struct FOauth2TokenBan final
{
public:
	class FString                                 Ban;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetedNamespace;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOauth2TokenBan) == 0x000008, "Wrong alignment on FOauth2TokenBan");
static_assert(sizeof(FOauth2TokenBan) == 0x000030, "Wrong size on FOauth2TokenBan");
static_assert(offsetof(FOauth2TokenBan, Ban) == 0x000000, "Member 'FOauth2TokenBan::Ban' has a wrong offset!");
static_assert(offsetof(FOauth2TokenBan, TargetedNamespace) == 0x000010, "Member 'FOauth2TokenBan::TargetedNamespace' has a wrong offset!");
static_assert(offsetof(FOauth2TokenBan, EndDate) == 0x000020, "Member 'FOauth2TokenBan::EndDate' has a wrong offset!");
static_assert(offsetof(FOauth2TokenBan, Enabled) == 0x000028, "Member 'FOauth2TokenBan::Enabled' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameProfileAttribute
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGameProfileAttribute final
{
public:
	class FString                                 name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameProfileAttribute) == 0x000008, "Wrong alignment on FAccelByteModelsGameProfileAttribute");
static_assert(sizeof(FAccelByteModelsGameProfileAttribute) == 0x000020, "Wrong size on FAccelByteModelsGameProfileAttribute");
static_assert(offsetof(FAccelByteModelsGameProfileAttribute, name) == 0x000000, "Member 'FAccelByteModelsGameProfileAttribute::name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileAttribute, value) == 0x000010, "Member 'FAccelByteModelsGameProfileAttribute::value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupUpdatable
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsGroupUpdatable
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGroupType                           GroupType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GroupDescription;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupIcon;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupUpdatable) == 0x000008, "Wrong alignment on FAccelByteModelsGroupUpdatable");
static_assert(sizeof(FAccelByteModelsGroupUpdatable) == 0x000068, "Wrong size on FAccelByteModelsGroupUpdatable");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupName) == 0x000000, "Member 'FAccelByteModelsGroupUpdatable::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupRegion) == 0x000010, "Member 'FAccelByteModelsGroupUpdatable::GroupRegion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupType) == 0x000020, "Member 'FAccelByteModelsGroupUpdatable::GroupType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, CustomAttributes) == 0x000028, "Member 'FAccelByteModelsGroupUpdatable::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupDescription) == 0x000048, "Member 'FAccelByteModelsGroupUpdatable::GroupDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupIcon) == 0x000058, "Member 'FAccelByteModelsGroupUpdatable::GroupIcon' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryTopicRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatQueryTopicRequest final
{
public:
	class FString                                 Keyword;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatQueryTopicRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryTopicRequest");
static_assert(sizeof(FAccelByteModelsChatQueryTopicRequest) == 0x000018, "Wrong size on FAccelByteModelsChatQueryTopicRequest");
static_assert(offsetof(FAccelByteModelsChatQueryTopicRequest, Keyword) == 0x000000, "Member 'FAccelByteModelsChatQueryTopicRequest::Keyword' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryTopicRequest, Offset) == 0x000010, "Member 'FAccelByteModelsChatQueryTopicRequest::Offset' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryTopicRequest, Limit) == 0x000014, "Member 'FAccelByteModelsChatQueryTopicRequest::Limit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreateGroupRequest
// 0x0048 (0x00B0 - 0x0068)
struct FAccelByteModelsCreateGroupRequest final : public FAccelByteModelsGroupUpdatable
{
public:
	class FString                                 ConfigurationCode;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaxMember;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsGroupRules             GroupRules;                                        // 0x0080(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreateGroupRequest) == 0x000008, "Wrong alignment on FAccelByteModelsCreateGroupRequest");
static_assert(sizeof(FAccelByteModelsCreateGroupRequest) == 0x0000B0, "Wrong size on FAccelByteModelsCreateGroupRequest");
static_assert(offsetof(FAccelByteModelsCreateGroupRequest, ConfigurationCode) == 0x000068, "Member 'FAccelByteModelsCreateGroupRequest::ConfigurationCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateGroupRequest, GroupMaxMember) == 0x000078, "Member 'FAccelByteModelsCreateGroupRequest::GroupMaxMember' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateGroupRequest, GroupRules) == 0x000080, "Member 'FAccelByteModelsCreateGroupRequest::GroupRules' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateGroupCustomAttributesRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUpdateGroupCustomAttributesRequest final
{
public:
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateGroupCustomAttributesRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateGroupCustomAttributesRequest");
static_assert(sizeof(FAccelByteModelsUpdateGroupCustomAttributesRequest) == 0x000020, "Wrong size on FAccelByteModelsUpdateGroupCustomAttributesRequest");
static_assert(offsetof(FAccelByteModelsUpdateGroupCustomAttributesRequest, CustomAttributes) == 0x000000, "Member 'FAccelByteModelsUpdateGroupCustomAttributesRequest::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateGroupPredefinedRuleRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUpdateGroupPredefinedRuleRequest final
{
public:
	TArray<struct FAccelByteModelsRuleInformation> RuleDetail;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateGroupPredefinedRuleRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateGroupPredefinedRuleRequest");
static_assert(sizeof(FAccelByteModelsUpdateGroupPredefinedRuleRequest) == 0x000010, "Wrong size on FAccelByteModelsUpdateGroupPredefinedRuleRequest");
static_assert(offsetof(FAccelByteModelsUpdateGroupPredefinedRuleRequest, RuleDetail) == 0x000000, "Member 'FAccelByteModelsUpdateGroupPredefinedRuleRequest::RuleDetail' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordGetRecordPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordGetRecordPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordGetRecordPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordGetRecordPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordGetRecordPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordGetRecordPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetRecordPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordGetRecordPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetRecordPayload, Key) == 0x000028, "Member 'FAccelByteModelsPlayerBinaryRecordGetRecordPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemCriteria
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsItemCriteria final
{
public:
	class FString                                 StoreId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSubCategoryItem;                            // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SortBy;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemCriteria) == 0x000008, "Wrong alignment on FAccelByteModelsItemCriteria");
static_assert(sizeof(FAccelByteModelsItemCriteria) == 0x000090, "Wrong size on FAccelByteModelsItemCriteria");
static_assert(offsetof(FAccelByteModelsItemCriteria, StoreId) == 0x000000, "Member 'FAccelByteModelsItemCriteria::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, ItemType) == 0x000010, "Member 'FAccelByteModelsItemCriteria::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, AppType) == 0x000011, "Member 'FAccelByteModelsItemCriteria::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Region) == 0x000018, "Member 'FAccelByteModelsItemCriteria::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Language) == 0x000028, "Member 'FAccelByteModelsItemCriteria::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, CategoryPath) == 0x000038, "Member 'FAccelByteModelsItemCriteria::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, IncludeSubCategoryItem) == 0x000048, "Member 'FAccelByteModelsItemCriteria::IncludeSubCategoryItem' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, BaseAppId) == 0x000050, "Member 'FAccelByteModelsItemCriteria::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Tags) == 0x000060, "Member 'FAccelByteModelsItemCriteria::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Features) == 0x000070, "Member 'FAccelByteModelsItemCriteria::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, SortBy) == 0x000080, "Member 'FAccelByteModelsItemCriteria::SortBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQuestStartedPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsQuestStartedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 QuestName;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestID;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestType;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestDifficulty;                                   // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQuestStartedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsQuestStartedPayload");
static_assert(sizeof(FAccelByteModelsQuestStartedPayload) == 0x000058, "Wrong size on FAccelByteModelsQuestStartedPayload");
static_assert(offsetof(FAccelByteModelsQuestStartedPayload, QuestName) == 0x000018, "Member 'FAccelByteModelsQuestStartedPayload::QuestName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestStartedPayload, QuestID) == 0x000028, "Member 'FAccelByteModelsQuestStartedPayload::QuestID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestStartedPayload, QuestType) == 0x000038, "Member 'FAccelByteModelsQuestStartedPayload::QuestType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQuestStartedPayload, QuestDifficulty) == 0x000048, "Member 'FAccelByteModelsQuestStartedPayload::QuestDifficulty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterRequestv3
// 0x0080 (0x0080 - 0x0000)
struct FRegisterRequestv3 final
{
public:
	TArray<struct FAcceptedPolicies>              AcceptedPolicies;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 AuthType;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterRequestv3) == 0x000008, "Wrong alignment on FRegisterRequestv3");
static_assert(sizeof(FRegisterRequestv3) == 0x000080, "Wrong size on FRegisterRequestv3");
static_assert(offsetof(FRegisterRequestv3, AcceptedPolicies) == 0x000000, "Member 'FRegisterRequestv3::AcceptedPolicies' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, AuthType) == 0x000010, "Member 'FRegisterRequestv3::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, DisplayName) == 0x000020, "Member 'FRegisterRequestv3::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, EmailAddress) == 0x000030, "Member 'FRegisterRequestv3::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, Username) == 0x000040, "Member 'FRegisterRequestv3::Username' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, Password) == 0x000050, "Member 'FRegisterRequestv3::Password' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, Country) == 0x000060, "Member 'FRegisterRequestv3::Country' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, DateOfBirth) == 0x000070, "Member 'FRegisterRequestv3::DateOfBirth' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileInfo
// 0x0110 (0x0110 - 0x0000)
struct FAccelByteModelsUserProfileInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirstName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ZipCode;                                           // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicId;                                          // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     PrivateCustomAttributes;                           // 0x00F0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileInfo");
static_assert(sizeof(FAccelByteModelsUserProfileInfo) == 0x000110, "Wrong size on FAccelByteModelsUserProfileInfo");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, UserId) == 0x000000, "Member 'FAccelByteModelsUserProfileInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsUserProfileInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, FirstName) == 0x000020, "Member 'FAccelByteModelsUserProfileInfo::FirstName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, LastName) == 0x000030, "Member 'FAccelByteModelsUserProfileInfo::LastName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, AvatarSmallUrl) == 0x000040, "Member 'FAccelByteModelsUserProfileInfo::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, AvatarUrl) == 0x000050, "Member 'FAccelByteModelsUserProfileInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, AvatarLargeUrl) == 0x000060, "Member 'FAccelByteModelsUserProfileInfo::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Status) == 0x000070, "Member 'FAccelByteModelsUserProfileInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Language) == 0x000080, "Member 'FAccelByteModelsUserProfileInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, DateOfBirth) == 0x000090, "Member 'FAccelByteModelsUserProfileInfo::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Timezone) == 0x0000A0, "Member 'FAccelByteModelsUserProfileInfo::Timezone' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, CustomAttributes) == 0x0000B0, "Member 'FAccelByteModelsUserProfileInfo::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, ZipCode) == 0x0000D0, "Member 'FAccelByteModelsUserProfileInfo::ZipCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, PublicId) == 0x0000E0, "Member 'FAccelByteModelsUserProfileInfo::PublicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, PrivateCustomAttributes) == 0x0000F0, "Member 'FAccelByteModelsUserProfileInfo::PrivateCustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileCreateRequest
// 0x00C0 (0x00C0 - 0x0000)
struct FAccelByteModelsUserProfileCreateRequest final
{
public:
	class FString                                 FirstName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0080(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     PrivateCustomAttributes;                           // 0x00A0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileCreateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileCreateRequest");
static_assert(sizeof(FAccelByteModelsUserProfileCreateRequest) == 0x0000C0, "Wrong size on FAccelByteModelsUserProfileCreateRequest");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, FirstName) == 0x000000, "Member 'FAccelByteModelsUserProfileCreateRequest::FirstName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, LastName) == 0x000010, "Member 'FAccelByteModelsUserProfileCreateRequest::LastName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, Language) == 0x000020, "Member 'FAccelByteModelsUserProfileCreateRequest::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, AvatarSmallUrl) == 0x000030, "Member 'FAccelByteModelsUserProfileCreateRequest::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, AvatarUrl) == 0x000040, "Member 'FAccelByteModelsUserProfileCreateRequest::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, AvatarLargeUrl) == 0x000050, "Member 'FAccelByteModelsUserProfileCreateRequest::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, Timezone) == 0x000060, "Member 'FAccelByteModelsUserProfileCreateRequest::Timezone' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, DateOfBirth) == 0x000070, "Member 'FAccelByteModelsUserProfileCreateRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, CustomAttributes) == 0x000080, "Member 'FAccelByteModelsUserProfileCreateRequest::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, PrivateCustomAttributes) == 0x0000A0, "Member 'FAccelByteModelsUserProfileCreateRequest::PrivateCustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UnblockPlayerRequest
// 0x0010 (0x0010 - 0x0000)
struct FUnblockPlayerRequest final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnblockPlayerRequest) == 0x000008, "Wrong alignment on FUnblockPlayerRequest");
static_assert(sizeof(FUnblockPlayerRequest) == 0x000010, "Wrong size on FUnblockPlayerRequest");
static_assert(offsetof(FUnblockPlayerRequest, UserID) == 0x000000, "Member 'FUnblockPlayerRequest::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileUploadURLResult
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserProfileUploadURLResult final
{
public:
	class FString                                 Url;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessUrl;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileUploadURLResult) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileUploadURLResult");
static_assert(sizeof(FAccelByteModelsUserProfileUploadURLResult) == 0x000040, "Wrong size on FAccelByteModelsUserProfileUploadURLResult");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, Url) == 0x000000, "Member 'FAccelByteModelsUserProfileUploadURLResult::Url' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, AccessUrl) == 0x000010, "Member 'FAccelByteModelsUserProfileUploadURLResult::AccessUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, Method) == 0x000020, "Member 'FAccelByteModelsUserProfileUploadURLResult::Method' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, ContentType) == 0x000030, "Member 'FAccelByteModelsUserProfileUploadURLResult::ContentType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatCycleConfig
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsStatCycleConfig final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteCycle                               CycleType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResetTime;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetDay;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetDate;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetMonth;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonPeriod;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentVersion;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              NextReset;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatCycleConfig) == 0x000008, "Wrong alignment on FAccelByteModelsStatCycleConfig");
static_assert(sizeof(FAccelByteModelsStatCycleConfig) == 0x0000A8, "Wrong size on FAccelByteModelsStatCycleConfig");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, Id) == 0x000000, "Member 'FAccelByteModelsStatCycleConfig::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, Namespace) == 0x000010, "Member 'FAccelByteModelsStatCycleConfig::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, CycleType) == 0x000020, "Member 'FAccelByteModelsStatCycleConfig::CycleType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, Name) == 0x000028, "Member 'FAccelByteModelsStatCycleConfig::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, Description) == 0x000038, "Member 'FAccelByteModelsStatCycleConfig::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, ResetTime) == 0x000048, "Member 'FAccelByteModelsStatCycleConfig::ResetTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, ResetDay) == 0x000058, "Member 'FAccelByteModelsStatCycleConfig::ResetDay' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, ResetDate) == 0x00005C, "Member 'FAccelByteModelsStatCycleConfig::ResetDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, ResetMonth) == 0x000060, "Member 'FAccelByteModelsStatCycleConfig::ResetMonth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, SeasonPeriod) == 0x000064, "Member 'FAccelByteModelsStatCycleConfig::SeasonPeriod' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, CurrentVersion) == 0x000068, "Member 'FAccelByteModelsStatCycleConfig::CurrentVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, Status) == 0x000070, "Member 'FAccelByteModelsStatCycleConfig::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, NextReset) == 0x000080, "Member 'FAccelByteModelsStatCycleConfig::NextReset' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, Start) == 0x000088, "Member 'FAccelByteModelsStatCycleConfig::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, End) == 0x000090, "Member 'FAccelByteModelsStatCycleConfig::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, CreatedAt) == 0x000098, "Member 'FAccelByteModelsStatCycleConfig::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfig, UpdatedAt) == 0x0000A0, "Member 'FAccelByteModelsStatCycleConfig::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileUpdateRequest
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsUserProfileUpdateRequest final
{
public:
	class FString                                 FirstName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZipCode;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     PrivateCustomAttributes;                           // 0x0090(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x00B0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileUpdateRequest");
static_assert(sizeof(FAccelByteModelsUserProfileUpdateRequest) == 0x0000D0, "Wrong size on FAccelByteModelsUserProfileUpdateRequest");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, FirstName) == 0x000000, "Member 'FAccelByteModelsUserProfileUpdateRequest::FirstName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, LastName) == 0x000010, "Member 'FAccelByteModelsUserProfileUpdateRequest::LastName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, AvatarSmallUrl) == 0x000020, "Member 'FAccelByteModelsUserProfileUpdateRequest::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, AvatarUrl) == 0x000030, "Member 'FAccelByteModelsUserProfileUpdateRequest::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, AvatarLargeUrl) == 0x000040, "Member 'FAccelByteModelsUserProfileUpdateRequest::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, Language) == 0x000050, "Member 'FAccelByteModelsUserProfileUpdateRequest::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, Timezone) == 0x000060, "Member 'FAccelByteModelsUserProfileUpdateRequest::Timezone' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, DateOfBirth) == 0x000070, "Member 'FAccelByteModelsUserProfileUpdateRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, ZipCode) == 0x000080, "Member 'FAccelByteModelsUserProfileUpdateRequest::ZipCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, PrivateCustomAttributes) == 0x000090, "Member 'FAccelByteModelsUserProfileUpdateRequest::PrivateCustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, CustomAttributes) == 0x0000B0, "Member 'FAccelByteModelsUserProfileUpdateRequest::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BlockPlayerRequest
// 0x0010 (0x0010 - 0x0000)
struct FBlockPlayerRequest final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockPlayerRequest) == 0x000008, "Wrong alignment on FBlockPlayerRequest");
static_assert(sizeof(FBlockPlayerRequest) == 0x000010, "Wrong size on FBlockPlayerRequest");
static_assert(offsetof(FBlockPlayerRequest, UserID) == 0x000000, "Member 'FBlockPlayerRequest::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderInfoPaymentUrl
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsOrderInfoPaymentUrl final
{
public:
	class FString                                 PaymentProvider;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentUrl;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentToken;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentType;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderInfoPaymentUrl) == 0x000008, "Wrong alignment on FAccelByteModelsOrderInfoPaymentUrl");
static_assert(sizeof(FAccelByteModelsOrderInfoPaymentUrl) == 0x000050, "Wrong size on FAccelByteModelsOrderInfoPaymentUrl");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentProvider) == 0x000000, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentProvider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentUrl) == 0x000010, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentToken) == 0x000020, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, ReturnUrl) == 0x000030, "Member 'FAccelByteModelsOrderInfoPaymentUrl::ReturnUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentType) == 0x000040, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetReadyConsentRequest
// 0x0010 (0x0010 - 0x0000)
struct FSetReadyConsentRequest final
{
public:
	class FString                                 matchId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetReadyConsentRequest) == 0x000008, "Wrong alignment on FSetReadyConsentRequest");
static_assert(sizeof(FSetReadyConsentRequest) == 0x000010, "Wrong size on FSetReadyConsentRequest");
static_assert(offsetof(FSetReadyConsentRequest, matchId) == 0x000000, "Member 'FSetReadyConsentRequest::matchId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.StartMatchmakingRequest
// 0x0010 (0x0010 - 0x0000)
struct FStartMatchmakingRequest final
{
public:
	class FString                                 gameMode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartMatchmakingRequest) == 0x000008, "Wrong alignment on FStartMatchmakingRequest");
static_assert(sizeof(FStartMatchmakingRequest) == 0x000010, "Wrong size on FStartMatchmakingRequest");
static_assert(offsetof(FStartMatchmakingRequest, gameMode) == 0x000000, "Member 'FStartMatchmakingRequest::gameMode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendChannelMessageRequest
// 0x0010 (0x0010 - 0x0000)
struct FSendChannelMessageRequest final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendChannelMessageRequest) == 0x000008, "Wrong alignment on FSendChannelMessageRequest");
static_assert(sizeof(FSendChannelMessageRequest) == 0x000010, "Wrong size on FSendChannelMessageRequest");
static_assert(offsetof(FSendChannelMessageRequest, Message) == 0x000000, "Member 'FSendChannelMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendPartyMessageRequest
// 0x0010 (0x0010 - 0x0000)
struct FSendPartyMessageRequest final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendPartyMessageRequest) == 0x000008, "Wrong alignment on FSendPartyMessageRequest");
static_assert(sizeof(FSendPartyMessageRequest) == 0x000010, "Wrong size on FSendPartyMessageRequest");
static_assert(offsetof(FSendPartyMessageRequest, Message) == 0x000000, "Member 'FSendPartyMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendPrivateMessageRequest
// 0x0020 (0x0020 - 0x0000)
struct FSendPrivateMessageRequest final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendPrivateMessageRequest) == 0x000008, "Wrong alignment on FSendPrivateMessageRequest");
static_assert(sizeof(FSendPrivateMessageRequest) == 0x000020, "Wrong size on FSendPrivateMessageRequest");
static_assert(offsetof(FSendPrivateMessageRequest, UserID) == 0x000000, "Member 'FSendPrivateMessageRequest::UserID' has a wrong offset!");
static_assert(offsetof(FSendPrivateMessageRequest, Message) == 0x000010, "Member 'FSendPrivateMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreditUserWalletRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsCreditUserWalletRequest final
{
public:
	int64                                         Amount;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteCreditUserWalletSource              Source;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteWalletTable                         Origin;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsCreditUserWalletRequest) == 0x000008, "Wrong alignment on FAccelByteModelsCreditUserWalletRequest");
static_assert(sizeof(FAccelByteModelsCreditUserWalletRequest) == 0x000028, "Wrong size on FAccelByteModelsCreditUserWalletRequest");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Amount) == 0x000000, "Member 'FAccelByteModelsCreditUserWalletRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Source) == 0x000008, "Member 'FAccelByteModelsCreditUserWalletRequest::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Reason) == 0x000010, "Member 'FAccelByteModelsCreditUserWalletRequest::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Origin) == 0x000020, "Member 'FAccelByteModelsCreditUserWalletRequest::Origin' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.WritePartyStorageRequest
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FWritePartyStorageRequest final
{
public:
	class FString                                 partyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetryAttempt;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4C];                                      // 0x0014(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWritePartyStorageRequest) == 0x000010, "Wrong alignment on FWritePartyStorageRequest");
static_assert(sizeof(FWritePartyStorageRequest) == 0x000060, "Wrong size on FWritePartyStorageRequest");
static_assert(offsetof(FWritePartyStorageRequest, partyId) == 0x000000, "Member 'FWritePartyStorageRequest::partyId' has a wrong offset!");
static_assert(offsetof(FWritePartyStorageRequest, RetryAttempt) == 0x000010, "Member 'FWritePartyStorageRequest::RetryAttempt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyJoinRequest
// 0x0020 (0x0020 - 0x0000)
struct FPartyJoinRequest final
{
public:
	class FString                                 partyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 invitationToken;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyJoinRequest) == 0x000008, "Wrong alignment on FPartyJoinRequest");
static_assert(sizeof(FPartyJoinRequest) == 0x000020, "Wrong size on FPartyJoinRequest");
static_assert(offsetof(FPartyJoinRequest, partyID) == 0x000000, "Member 'FPartyJoinRequest::partyID' has a wrong offset!");
static_assert(offsetof(FPartyJoinRequest, invitationToken) == 0x000010, "Member 'FPartyJoinRequest::invitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayStationDLCSync
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsPlayStationDLCSync final
{
public:
	int32                                         ServiceLabel;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayStationDLCSync) == 0x000004, "Wrong alignment on FAccelByteModelsPlayStationDLCSync");
static_assert(sizeof(FAccelByteModelsPlayStationDLCSync) == 0x000004, "Wrong size on FAccelByteModelsPlayStationDLCSync");
static_assert(offsetof(FAccelByteModelsPlayStationDLCSync, ServiceLabel) == 0x000000, "Member 'FAccelByteModelsPlayStationDLCSync::ServiceLabel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyInviteRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyInviteRequest final
{
public:
	class FString                                 friendID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyInviteRequest) == 0x000008, "Wrong alignment on FPartyInviteRequest");
static_assert(sizeof(FPartyInviteRequest) == 0x000010, "Wrong size on FPartyInviteRequest");
static_assert(offsetof(FPartyInviteRequest, friendID) == 0x000000, "Member 'FPartyInviteRequest::friendID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BulkGetUserPresenceRequest
// 0x0018 (0x0018 - 0x0000)
struct FBulkGetUserPresenceRequest final
{
public:
	bool                                          bCountOnly;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         UserIds;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulkGetUserPresenceRequest) == 0x000008, "Wrong alignment on FBulkGetUserPresenceRequest");
static_assert(sizeof(FBulkGetUserPresenceRequest) == 0x000018, "Wrong size on FBulkGetUserPresenceRequest");
static_assert(offsetof(FBulkGetUserPresenceRequest, bCountOnly) == 0x000000, "Member 'FBulkGetUserPresenceRequest::bCountOnly' has a wrong offset!");
static_assert(offsetof(FBulkGetUserPresenceRequest, UserIds) == 0x000008, "Member 'FBulkGetUserPresenceRequest::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOwnershipToken
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsOwnershipToken final
{
public:
	class FString                                 OwnershipToken;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOwnershipToken) == 0x000008, "Wrong alignment on FAccelByteModelsOwnershipToken");
static_assert(sizeof(FAccelByteModelsOwnershipToken) == 0x000010, "Wrong size on FAccelByteModelsOwnershipToken");
static_assert(offsetof(FAccelByteModelsOwnershipToken, OwnershipToken) == 0x000000, "Member 'FAccelByteModelsOwnershipToken::OwnershipToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelBytePresenceStatus
// 0x0018 (0x0018 - 0x0000)
struct FAccelBytePresenceStatus final
{
public:
	EAvailability                                 Availability;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelBytePresenceStatus) == 0x000008, "Wrong alignment on FAccelBytePresenceStatus");
static_assert(sizeof(FAccelBytePresenceStatus) == 0x000018, "Wrong size on FAccelBytePresenceStatus");
static_assert(offsetof(FAccelBytePresenceStatus, Availability) == 0x000000, "Member 'FAccelBytePresenceStatus::Availability' has a wrong offset!");
static_assert(offsetof(FAccelBytePresenceStatus, Activity) == 0x000008, "Member 'FAccelBytePresenceStatus::Activity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetSessionAttributeRequest
// 0x0010 (0x0010 - 0x0000)
struct FGetSessionAttributeRequest final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetSessionAttributeRequest) == 0x000008, "Wrong alignment on FGetSessionAttributeRequest");
static_assert(sizeof(FGetSessionAttributeRequest) == 0x000010, "Wrong size on FGetSessionAttributeRequest");
static_assert(offsetof(FGetSessionAttributeRequest, Key) == 0x000000, "Member 'FGetSessionAttributeRequest::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendSignalingMessageRequest
// 0x0020 (0x0020 - 0x0000)
struct FSendSignalingMessageRequest final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendSignalingMessageRequest) == 0x000008, "Wrong alignment on FSendSignalingMessageRequest");
static_assert(sizeof(FSendSignalingMessageRequest) == 0x000020, "Wrong size on FSendSignalingMessageRequest");
static_assert(offsetof(FSendSignalingMessageRequest, UserID) == 0x000000, "Member 'FSendSignalingMessageRequest::UserID' has a wrong offset!");
static_assert(offsetof(FSendSignalingMessageRequest, Message) == 0x000010, "Member 'FSendSignalingMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RequestDSModel
// 0x0060 (0x0060 - 0x0000)
struct FRequestDSModel final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestDSModel) == 0x000008, "Wrong alignment on FRequestDSModel");
static_assert(sizeof(FRequestDSModel) == 0x000060, "Wrong size on FRequestDSModel");
static_assert(offsetof(FRequestDSModel, SessionID) == 0x000000, "Member 'FRequestDSModel::SessionID' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, GameMode) == 0x000010, "Member 'FRequestDSModel::GameMode' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, ClientVersion) == 0x000020, "Member 'FRequestDSModel::ClientVersion' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, Region) == 0x000030, "Member 'FRequestDSModel::Region' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, Deployment) == 0x000040, "Member 'FRequestDSModel::Deployment' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, ServerName) == 0x000050, "Member 'FRequestDSModel::ServerName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnershipDetails
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsEntitlementOwnershipDetails final
{
public:
	TArray<struct FAccelByteModelsEntitlementOwnershipDetail> Entitlements;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnershipDetails) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnershipDetails");
static_assert(sizeof(FAccelByteModelsEntitlementOwnershipDetails) == 0x000010, "Wrong size on FAccelByteModelsEntitlementOwnershipDetails");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetails, Entitlements) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnershipDetails::Entitlements' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetRetryParametersRequest
// 0x000C (0x000C - 0x0000)
struct FSetRetryParametersRequest final
{
public:
	int32                                         NewTotalTimeout;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewBackoffDelay;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMaxDelay;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetRetryParametersRequest) == 0x000004, "Wrong alignment on FSetRetryParametersRequest");
static_assert(sizeof(FSetRetryParametersRequest) == 0x00000C, "Wrong size on FSetRetryParametersRequest");
static_assert(offsetof(FSetRetryParametersRequest, NewTotalTimeout) == 0x000000, "Member 'FSetRetryParametersRequest::NewTotalTimeout' has a wrong offset!");
static_assert(offsetof(FSetRetryParametersRequest, NewBackoffDelay) == 0x000004, "Member 'FSetRetryParametersRequest::NewBackoffDelay' has a wrong offset!");
static_assert(offsetof(FSetRetryParametersRequest, NewMaxDelay) == 0x000008, "Member 'FSetRetryParametersRequest::NewMaxDelay' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RefreshTokenRequest
// 0x0010 (0x0010 - 0x0000)
struct FRefreshTokenRequest final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRefreshTokenRequest) == 0x000008, "Wrong alignment on FRefreshTokenRequest");
static_assert(sizeof(FRefreshTokenRequest) == 0x000010, "Wrong size on FRefreshTokenRequest");
static_assert(offsetof(FRefreshTokenRequest, AccessToken) == 0x000000, "Member 'FRefreshTokenRequest::AccessToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnbanGroupChatRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUnbanGroupChatRequest final
{
public:
	TArray<class FString>                         UserIDs;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnbanGroupChatRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUnbanGroupChatRequest");
static_assert(sizeof(FAccelByteModelsUnbanGroupChatRequest) == 0x000010, "Wrong size on FAccelByteModelsUnbanGroupChatRequest");
static_assert(offsetof(FAccelByteModelsUnbanGroupChatRequest, UserIDs) == 0x000000, "Member 'FAccelByteModelsUnbanGroupChatRequest::UserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStackableEntitlementInfo
// 0x02F0 (0x02F0 - 0x0000)
struct FAccelByteModelsStackableEntitlementInfo final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    Clazz;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     Type;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementStatus                   Status;                                            // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppId;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sku;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementSource                   Source;                                            // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistributedQuantity;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetNamespace;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsEntitlementItemSnapshot ItemSnapshot;                                     // 0x00C0(0x01E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              GrantedAt;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackedUseCount;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackedQuantity;                                   // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStackableEntitlementInfo) == 0x000008, "Wrong alignment on FAccelByteModelsStackableEntitlementInfo");
static_assert(sizeof(FAccelByteModelsStackableEntitlementInfo) == 0x0002F0, "Wrong size on FAccelByteModelsStackableEntitlementInfo");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Id) == 0x000000, "Member 'FAccelByteModelsStackableEntitlementInfo::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsStackableEntitlementInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Clazz) == 0x000020, "Member 'FAccelByteModelsStackableEntitlementInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Type) == 0x000021, "Member 'FAccelByteModelsStackableEntitlementInfo::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Status) == 0x000022, "Member 'FAccelByteModelsStackableEntitlementInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, AppId) == 0x000028, "Member 'FAccelByteModelsStackableEntitlementInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, AppType) == 0x000038, "Member 'FAccelByteModelsStackableEntitlementInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Sku) == 0x000040, "Member 'FAccelByteModelsStackableEntitlementInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, UserId) == 0x000050, "Member 'FAccelByteModelsStackableEntitlementInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ItemId) == 0x000060, "Member 'FAccelByteModelsStackableEntitlementInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, GrantedCode) == 0x000070, "Member 'FAccelByteModelsStackableEntitlementInfo::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ItemNamespace) == 0x000080, "Member 'FAccelByteModelsStackableEntitlementInfo::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Name) == 0x000090, "Member 'FAccelByteModelsStackableEntitlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, UseCount) == 0x0000A0, "Member 'FAccelByteModelsStackableEntitlementInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Quantity) == 0x0000A4, "Member 'FAccelByteModelsStackableEntitlementInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Source) == 0x0000A8, "Member 'FAccelByteModelsStackableEntitlementInfo::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, DistributedQuantity) == 0x0000AC, "Member 'FAccelByteModelsStackableEntitlementInfo::DistributedQuantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, TargetNamespace) == 0x0000B0, "Member 'FAccelByteModelsStackableEntitlementInfo::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ItemSnapshot) == 0x0000C0, "Member 'FAccelByteModelsStackableEntitlementInfo::ItemSnapshot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, StartDate) == 0x0002A8, "Member 'FAccelByteModelsStackableEntitlementInfo::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, EndDate) == 0x0002B8, "Member 'FAccelByteModelsStackableEntitlementInfo::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Stackable) == 0x0002C8, "Member 'FAccelByteModelsStackableEntitlementInfo::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, GrantedAt) == 0x0002D0, "Member 'FAccelByteModelsStackableEntitlementInfo::GrantedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, CreatedAt) == 0x0002D8, "Member 'FAccelByteModelsStackableEntitlementInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, UpdatedAt) == 0x0002E0, "Member 'FAccelByteModelsStackableEntitlementInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, StackedUseCount) == 0x0002E8, "Member 'FAccelByteModelsStackableEntitlementInfo::StackedUseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, StackedQuantity) == 0x0002EC, "Member 'FAccelByteModelsStackableEntitlementInfo::StackedQuantity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBanGroupChatResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBanGroupChatResponse final
{
public:
	TArray<class FString>                         UserIDs;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBanGroupChatResponse) == 0x000008, "Wrong alignment on FAccelByteModelsBanGroupChatResponse");
static_assert(sizeof(FAccelByteModelsBanGroupChatResponse) == 0x000010, "Wrong size on FAccelByteModelsBanGroupChatResponse");
static_assert(offsetof(FAccelByteModelsBanGroupChatResponse, UserIDs) == 0x000000, "Member 'FAccelByteModelsBanGroupChatResponse::UserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatSnapshotResponse
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsChatSnapshotResponse final
{
public:
	class FString                                 ChatId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         JoinedTopics;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSnapshotMessage> Messages;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderId;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatSnapshotResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatSnapshotResponse");
static_assert(sizeof(FAccelByteModelsChatSnapshotResponse) == 0x000078, "Wrong size on FAccelByteModelsChatSnapshotResponse");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, ChatId) == 0x000000, "Member 'FAccelByteModelsChatSnapshotResponse::ChatId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, CreatedAt) == 0x000010, "Member 'FAccelByteModelsChatSnapshotResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, JoinedTopics) == 0x000018, "Member 'FAccelByteModelsChatSnapshotResponse::JoinedTopics' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, Messages) == 0x000028, "Member 'FAccelByteModelsChatSnapshotResponse::Messages' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, Namespace) == 0x000038, "Member 'FAccelByteModelsChatSnapshotResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, SenderId) == 0x000048, "Member 'FAccelByteModelsChatSnapshotResponse::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, TicketId) == 0x000058, "Member 'FAccelByteModelsChatSnapshotResponse::TicketId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatSnapshotResponse, TopicId) == 0x000068, "Member 'FAccelByteModelsChatSnapshotResponse::TopicId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsResourceActionedPayload
// 0x00A0 (0x00B8 - 0x0018)
struct FAccelByteModelsResourceActionedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 ResourceName;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceID;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceCategory;                                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRating;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceSource;                                    // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceLevelRequirement;                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRarity;                                    // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EquipLocation;                                     // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionTarget;                                      // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsResourceActionedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsResourceActionedPayload");
static_assert(sizeof(FAccelByteModelsResourceActionedPayload) == 0x0000B8, "Wrong size on FAccelByteModelsResourceActionedPayload");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceName) == 0x000018, "Member 'FAccelByteModelsResourceActionedPayload::ResourceName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceID) == 0x000028, "Member 'FAccelByteModelsResourceActionedPayload::ResourceID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceCategory) == 0x000038, "Member 'FAccelByteModelsResourceActionedPayload::ResourceCategory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceRating) == 0x000048, "Member 'FAccelByteModelsResourceActionedPayload::ResourceRating' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceSource) == 0x000058, "Member 'FAccelByteModelsResourceActionedPayload::ResourceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceLevelRequirement) == 0x000068, "Member 'FAccelByteModelsResourceActionedPayload::ResourceLevelRequirement' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ResourceRarity) == 0x000078, "Member 'FAccelByteModelsResourceActionedPayload::ResourceRarity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, EquipLocation) == 0x000088, "Member 'FAccelByteModelsResourceActionedPayload::EquipLocation' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ActionName) == 0x000098, "Member 'FAccelByteModelsResourceActionedPayload::ActionName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceActionedPayload, ActionTarget) == 0x0000A8, "Member 'FAccelByteModelsResourceActionedPayload::ActionTarget' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnmuteGroupChatRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUnmuteGroupChatRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnmuteGroupChatRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUnmuteGroupChatRequest");
static_assert(sizeof(FAccelByteModelsUnmuteGroupChatRequest) == 0x000010, "Wrong size on FAccelByteModelsUnmuteGroupChatRequest");
static_assert(offsetof(FAccelByteModelsUnmuteGroupChatRequest, UserId) == 0x000000, "Member 'FAccelByteModelsUnmuteGroupChatRequest::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteGetSystemMessageStatsResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteGetSystemMessageStatsResponse final
{
public:
	struct FDateTime                              OldestUnread;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unread;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteGetSystemMessageStatsResponse) == 0x000008, "Wrong alignment on FAccelByteGetSystemMessageStatsResponse");
static_assert(sizeof(FAccelByteGetSystemMessageStatsResponse) == 0x000010, "Wrong size on FAccelByteGetSystemMessageStatsResponse");
static_assert(offsetof(FAccelByteGetSystemMessageStatsResponse, OldestUnread) == 0x000000, "Member 'FAccelByteGetSystemMessageStatsResponse::OldestUnread' has a wrong offset!");
static_assert(offsetof(FAccelByteGetSystemMessageStatsResponse, Unread) == 0x000008, "Member 'FAccelByteGetSystemMessageStatsResponse::Unread' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQuerySystemMessagesResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsQuerySystemMessagesResponse final
{
public:
	TArray<struct FAccelByteModelsQuerySystemMessagesResponseItem> Data;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQuerySystemMessagesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsQuerySystemMessagesResponse");
static_assert(sizeof(FAccelByteModelsQuerySystemMessagesResponse) == 0x000010, "Wrong size on FAccelByteModelsQuerySystemMessagesResponse");
static_assert(offsetof(FAccelByteModelsQuerySystemMessagesResponse, Data) == 0x000000, "Member 'FAccelByteModelsQuerySystemMessagesResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsResourceSinkedPayload
// 0x0090 (0x00A8 - 0x0018)
struct FAccelByteModelsResourceSinkedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 ResourceName;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceID;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceCategory;                                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRating;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceSource;                                    // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceLevelRequirement;                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRarity;                                    // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SinkAmount;                                        // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SinkedReason;                                      // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsResourceSinkedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsResourceSinkedPayload");
static_assert(sizeof(FAccelByteModelsResourceSinkedPayload) == 0x0000A8, "Wrong size on FAccelByteModelsResourceSinkedPayload");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceName) == 0x000018, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceID) == 0x000028, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceCategory) == 0x000038, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceCategory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceRating) == 0x000048, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceRating' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceSource) == 0x000058, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceLevelRequirement) == 0x000068, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceLevelRequirement' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, ResourceRarity) == 0x000078, "Member 'FAccelByteModelsResourceSinkedPayload::ResourceRarity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, SinkAmount) == 0x000088, "Member 'FAccelByteModelsResourceSinkedPayload::SinkAmount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceSinkedPayload, SinkedReason) == 0x000098, "Member 'FAccelByteModelsResourceSinkedPayload::SinkedReason' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateSystemMessagesResponse
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsUpdateSystemMessagesResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateSystemMessagesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateSystemMessagesResponse");
static_assert(sizeof(FAccelByteModelsUpdateSystemMessagesResponse) == 0x000008, "Wrong size on FAccelByteModelsUpdateSystemMessagesResponse");
static_assert(offsetof(FAccelByteModelsUpdateSystemMessagesResponse, Processed) == 0x000000, "Member 'FAccelByteModelsUpdateSystemMessagesResponse::Processed' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerDeadPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsPlayerDeadPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 DeathTimeStamp;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeathType;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeathCause;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeathLocation;                                     // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerDeadPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerDeadPayload");
static_assert(sizeof(FAccelByteModelsPlayerDeadPayload) == 0x000058, "Wrong size on FAccelByteModelsPlayerDeadPayload");
static_assert(offsetof(FAccelByteModelsPlayerDeadPayload, DeathTimeStamp) == 0x000018, "Member 'FAccelByteModelsPlayerDeadPayload::DeathTimeStamp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerDeadPayload, DeathType) == 0x000028, "Member 'FAccelByteModelsPlayerDeadPayload::DeathType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerDeadPayload, DeathCause) == 0x000038, "Member 'FAccelByteModelsPlayerDeadPayload::DeathCause' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerDeadPayload, DeathLocation) == 0x000048, "Member 'FAccelByteModelsPlayerDeadPayload::DeathLocation' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatUnblockUserResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatUnblockUserResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatUnblockUserResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatUnblockUserResponse");
static_assert(sizeof(FAccelByteModelsChatUnblockUserResponse) == 0x000018, "Wrong size on FAccelByteModelsChatUnblockUserResponse");
static_assert(offsetof(FAccelByteModelsChatUnblockUserResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatUnblockUserResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUnblockUserResponse, UserId) == 0x000008, "Member 'FAccelByteModelsChatUnblockUserResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatBlockUserResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatBlockUserResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatBlockUserResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatBlockUserResponse");
static_assert(sizeof(FAccelByteModelsChatBlockUserResponse) == 0x000018, "Wrong size on FAccelByteModelsChatBlockUserResponse");
static_assert(offsetof(FAccelByteModelsChatBlockUserResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatBlockUserResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatBlockUserResponse, UserId) == 0x000008, "Member 'FAccelByteModelsChatBlockUserResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteLRUHttpStruct
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteLRUHttpStruct final
{
public:
	TArray<class FString>                         RequestHeaders;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ResponseHeaders;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ResponseCode;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestURL;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ResponsePayload;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ExpireTime;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteLRUHttpStruct) == 0x000008, "Wrong alignment on FAccelByteLRUHttpStruct");
static_assert(sizeof(FAccelByteLRUHttpStruct) == 0x000058, "Wrong size on FAccelByteLRUHttpStruct");
static_assert(offsetof(FAccelByteLRUHttpStruct, RequestHeaders) == 0x000000, "Member 'FAccelByteLRUHttpStruct::RequestHeaders' has a wrong offset!");
static_assert(offsetof(FAccelByteLRUHttpStruct, ResponseHeaders) == 0x000010, "Member 'FAccelByteLRUHttpStruct::ResponseHeaders' has a wrong offset!");
static_assert(offsetof(FAccelByteLRUHttpStruct, ResponseCode) == 0x000020, "Member 'FAccelByteLRUHttpStruct::ResponseCode' has a wrong offset!");
static_assert(offsetof(FAccelByteLRUHttpStruct, RequestURL) == 0x000028, "Member 'FAccelByteLRUHttpStruct::RequestURL' has a wrong offset!");
static_assert(offsetof(FAccelByteLRUHttpStruct, ResponsePayload) == 0x000038, "Member 'FAccelByteLRUHttpStruct::ResponsePayload' has a wrong offset!");
static_assert(offsetof(FAccelByteLRUHttpStruct, ExpireTime) == 0x000048, "Member 'FAccelByteLRUHttpStruct::ExpireTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatUserBanUnbanNotif
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsChatUserBanUnbanNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanType                                      Ban;                                               // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatUserBanUnbanNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatUserBanUnbanNotif");
static_assert(sizeof(FAccelByteModelsChatUserBanUnbanNotif) == 0x000040, "Wrong size on FAccelByteModelsChatUserBanUnbanNotif");
static_assert(offsetof(FAccelByteModelsChatUserBanUnbanNotif, UserId) == 0x000000, "Member 'FAccelByteModelsChatUserBanUnbanNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUserBanUnbanNotif, Namespace) == 0x000010, "Member 'FAccelByteModelsChatUserBanUnbanNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUserBanUnbanNotif, Ban) == 0x000020, "Member 'FAccelByteModelsChatUserBanUnbanNotif::Ban' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUserBanUnbanNotif, EndDate) == 0x000028, "Member 'FAccelByteModelsChatUserBanUnbanNotif::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUserBanUnbanNotif, Reason) == 0x000038, "Member 'FAccelByteModelsChatUserBanUnbanNotif::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUserBanUnbanNotif, Enable) == 0x000039, "Member 'FAccelByteModelsChatUserBanUnbanNotif::Enable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatUpdateTopicNotif
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsChatUpdateTopicNotif final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannel;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatUpdateTopicNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatUpdateTopicNotif");
static_assert(sizeof(FAccelByteModelsChatUpdateTopicNotif) == 0x000038, "Wrong size on FAccelByteModelsChatUpdateTopicNotif");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicNotif, Name) == 0x000000, "Member 'FAccelByteModelsChatUpdateTopicNotif::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicNotif, TopicId) == 0x000010, "Member 'FAccelByteModelsChatUpdateTopicNotif::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicNotif, SenderId) == 0x000020, "Member 'FAccelByteModelsChatUpdateTopicNotif::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateTopicNotif, IsChannel) == 0x000030, "Member 'FAccelByteModelsChatUpdateTopicNotif::IsChannel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemGetItemsByCodesPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsUserStatItemGetItemsByCodesPayload final : public FAccelByteModelsUserStatItemCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsUserStatItemGetItemsByCodesPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemGetItemsByCodesPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemGetItemsByCodesPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemGetItemsByCodesPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLoadFriendListWithPlatformResponse
// 0x0050 (0x0080 - 0x0030)
struct FAccelByteModelsLoadFriendListWithPlatformResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<struct FAccelByteModelsLoadFriendWithPlatformData> Data;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0040(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLoadFriendListWithPlatformResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLoadFriendListWithPlatformResponse");
static_assert(sizeof(FAccelByteModelsLoadFriendListWithPlatformResponse) == 0x000080, "Wrong size on FAccelByteModelsLoadFriendListWithPlatformResponse");
static_assert(offsetof(FAccelByteModelsLoadFriendListWithPlatformResponse, Data) == 0x000030, "Member 'FAccelByteModelsLoadFriendListWithPlatformResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoadFriendListWithPlatformResponse, Paging) == 0x000040, "Member 'FAccelByteModelsLoadFriendListWithPlatformResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatUpdateUserTopicNotif
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsChatUpdateUserTopicNotif final
{
public:
	ETopicType                                    Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannel;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatUpdateUserTopicNotif) == 0x000008, "Wrong alignment on FAccelByteModelsChatUpdateUserTopicNotif");
static_assert(sizeof(FAccelByteModelsChatUpdateUserTopicNotif) == 0x000050, "Wrong size on FAccelByteModelsChatUpdateUserTopicNotif");
static_assert(offsetof(FAccelByteModelsChatUpdateUserTopicNotif, Type) == 0x000000, "Member 'FAccelByteModelsChatUpdateUserTopicNotif::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateUserTopicNotif, Name) == 0x000008, "Member 'FAccelByteModelsChatUpdateUserTopicNotif::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateUserTopicNotif, TopicId) == 0x000018, "Member 'FAccelByteModelsChatUpdateUserTopicNotif::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateUserTopicNotif, SenderId) == 0x000028, "Member 'FAccelByteModelsChatUpdateUserTopicNotif::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateUserTopicNotif, UserId) == 0x000038, "Member 'FAccelByteModelsChatUpdateUserTopicNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatUpdateUserTopicNotif, IsChannel) == 0x000048, "Member 'FAccelByteModelsChatUpdateUserTopicNotif::IsChannel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatActionUserTopicResponse
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsChatActionUserTopicResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatActionUserTopicResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatActionUserTopicResponse");
static_assert(sizeof(FAccelByteModelsChatActionUserTopicResponse) == 0x000028, "Wrong size on FAccelByteModelsChatActionUserTopicResponse");
static_assert(offsetof(FAccelByteModelsChatActionUserTopicResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatActionUserTopicResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionUserTopicResponse, TopicId) == 0x000008, "Member 'FAccelByteModelsChatActionUserTopicResponse::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionUserTopicResponse, UserId) == 0x000018, "Member 'FAccelByteModelsChatActionUserTopicResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEmptyRequest
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsEmptyRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsEmptyRequest) == 0x000001, "Wrong alignment on FAccelByteModelsEmptyRequest");
static_assert(sizeof(FAccelByteModelsEmptyRequest) == 0x000001, "Wrong size on FAccelByteModelsEmptyRequest");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatActionCreateTopicServerResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsChatActionCreateTopicServerResponse final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETopicType                                    Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJoinable;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannel;                                         // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatActionCreateTopicServerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatActionCreateTopicServerResponse");
static_assert(sizeof(FAccelByteModelsChatActionCreateTopicServerResponse) == 0x000050, "Wrong size on FAccelByteModelsChatActionCreateTopicServerResponse");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, Namespace) == 0x000000, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, TopicId) == 0x000010, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, Name) == 0x000020, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, Type) == 0x000030, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, IsJoinable) == 0x000031, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::IsJoinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, IsChannel) == 0x000032, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::IsChannel' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, CreatedAt) == 0x000038, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatActionCreateTopicServerResponse, CreatedBy) == 0x000040, "Member 'FAccelByteModelsChatActionCreateTopicServerResponse::CreatedBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatCreateTopicRequest
// 0x00B8 (0x00B8 - 0x0000)
struct FAccelByteModelsChatCreateTopicRequest final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           Members;                                           // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<class FString>                           Admins;                                            // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsJoinable;                                        // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatCreateTopicRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChatCreateTopicRequest");
static_assert(sizeof(FAccelByteModelsChatCreateTopicRequest) == 0x0000B8, "Wrong size on FAccelByteModelsChatCreateTopicRequest");
static_assert(offsetof(FAccelByteModelsChatCreateTopicRequest, Name) == 0x000000, "Member 'FAccelByteModelsChatCreateTopicRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatCreateTopicRequest, Members) == 0x000010, "Member 'FAccelByteModelsChatCreateTopicRequest::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatCreateTopicRequest, Admins) == 0x000060, "Member 'FAccelByteModelsChatCreateTopicRequest::Admins' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatCreateTopicRequest, IsJoinable) == 0x0000B0, "Member 'FAccelByteModelsChatCreateTopicRequest::IsJoinable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserAgreementNotAcceptedPayload
// 0x0000 (0x0028 - 0x0028)
struct FAccelByteModelsUserAgreementNotAcceptedPayload final : public FAccelByteModelsUserAgreementAcceptedPayload
{
};
static_assert(alignof(FAccelByteModelsUserAgreementNotAcceptedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserAgreementNotAcceptedPayload");
static_assert(sizeof(FAccelByteModelsUserAgreementNotAcceptedPayload) == 0x000028, "Wrong size on FAccelByteModelsUserAgreementNotAcceptedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbySessionId
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsLobbySessionId final
{
public:
	class FString                                 LobbySessionID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbySessionId) == 0x000008, "Wrong alignment on FAccelByteModelsLobbySessionId");
static_assert(sizeof(FAccelByteModelsLobbySessionId) == 0x000010, "Wrong size on FAccelByteModelsLobbySessionId");
static_assert(offsetof(FAccelByteModelsLobbySessionId, LobbySessionID) == 0x000000, "Member 'FAccelByteModelsLobbySessionId::LobbySessionID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReadChatNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsReadChatNotif final
{
public:
	TArray<struct FAccelByteModelsChatReadChatData> ReadChat;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReadChatNotif) == 0x000008, "Wrong alignment on FAccelByteModelsReadChatNotif");
static_assert(sizeof(FAccelByteModelsReadChatNotif) == 0x000010, "Wrong size on FAccelByteModelsReadChatNotif");
static_assert(offsetof(FAccelByteModelsReadChatNotif, ReadChat) == 0x000000, "Member 'FAccelByteModelsReadChatNotif::ReadChat' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatReadChatResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatReadChatResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsChatReadChatData> Result;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatReadChatResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatReadChatResponse");
static_assert(sizeof(FAccelByteModelsChatReadChatResponse) == 0x000018, "Wrong size on FAccelByteModelsChatReadChatResponse");
static_assert(offsetof(FAccelByteModelsChatReadChatResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatReadChatResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatReadChatResponse, Result) == 0x000008, "Member 'FAccelByteModelsChatReadChatResponse::Result' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryChatResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatQueryChatResponse final
{
public:
	struct FDateTime                              Processed;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsChatQueryChatData> Data;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatQueryChatResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryChatResponse");
static_assert(sizeof(FAccelByteModelsChatQueryChatResponse) == 0x000018, "Wrong size on FAccelByteModelsChatQueryChatResponse");
static_assert(offsetof(FAccelByteModelsChatQueryChatResponse, Processed) == 0x000000, "Member 'FAccelByteModelsChatQueryChatResponse::Processed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatResponse, Data) == 0x000008, "Member 'FAccelByteModelsChatQueryChatResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatQueryChatRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsChatQueryChatRequest final
{
public:
	class FString                                 TopicId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatQueryChatRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChatQueryChatRequest");
static_assert(sizeof(FAccelByteModelsChatQueryChatRequest) == 0x000018, "Wrong size on FAccelByteModelsChatQueryChatRequest");
static_assert(offsetof(FAccelByteModelsChatQueryChatRequest, TopicId) == 0x000000, "Member 'FAccelByteModelsChatQueryChatRequest::TopicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatQueryChatRequest, Limit) == 0x000010, "Member 'FAccelByteModelsChatQueryChatRequest::Limit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkGetRecordsByKeysRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkGetRecordsByKeysRequest final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkGetRecordsByKeysRequest) == 0x000008, "Wrong alignment on FAccelByteModelsBulkGetRecordsByKeysRequest");
static_assert(sizeof(FAccelByteModelsBulkGetRecordsByKeysRequest) == 0x000010, "Wrong size on FAccelByteModelsBulkGetRecordsByKeysRequest");
static_assert(offsetof(FAccelByteModelsBulkGetRecordsByKeysRequest, Keys) == 0x000000, "Member 'FAccelByteModelsBulkGetRecordsByKeysRequest::Keys' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFreeFormNotificationRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsFreeFormNotificationRequest final
{
public:
	class FString                                 Topic;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFreeFormNotificationRequest) == 0x000008, "Wrong alignment on FAccelByteModelsFreeFormNotificationRequest");
static_assert(sizeof(FAccelByteModelsFreeFormNotificationRequest) == 0x000020, "Wrong size on FAccelByteModelsFreeFormNotificationRequest");
static_assert(offsetof(FAccelByteModelsFreeFormNotificationRequest, Topic) == 0x000000, "Member 'FAccelByteModelsFreeFormNotificationRequest::Topic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFreeFormNotificationRequest, Message) == 0x000010, "Member 'FAccelByteModelsFreeFormNotificationRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedGetAdminUserRecordKeysResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse final
{
public:
	TArray<struct FAccelByteModelsGetAdminUserRecordKeys> Data;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse");
static_assert(sizeof(FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse) == 0x000050, "Wrong size on FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse");
static_assert(offsetof(FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedGetAdminUserRecordKeysResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkGetPlayerRecordSizeRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkGetPlayerRecordSizeRequest final
{
public:
	TArray<struct FAccelByteModelsGetPlayerRecordSizeRequest> Data;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkGetPlayerRecordSizeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsBulkGetPlayerRecordSizeRequest");
static_assert(sizeof(FAccelByteModelsBulkGetPlayerRecordSizeRequest) == 0x000010, "Wrong size on FAccelByteModelsBulkGetPlayerRecordSizeRequest");
static_assert(offsetof(FAccelByteModelsBulkGetPlayerRecordSizeRequest, Data) == 0x000000, "Member 'FAccelByteModelsBulkGetPlayerRecordSizeRequest::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedRecordsKey
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedRecordsKey final
{
public:
	TArray<class FString>                         Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedRecordsKey) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedRecordsKey");
static_assert(sizeof(FAccelByteModelsPaginatedRecordsKey) == 0x000050, "Wrong size on FAccelByteModelsPaginatedRecordsKey");
static_assert(offsetof(FAccelByteModelsPaginatedRecordsKey, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedRecordsKey::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedRecordsKey, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedRecordsKey::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsConcurrentReplaceRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsConcurrentReplaceRequest final
{
public:
	struct FDateTime                              UpdatedAt;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Value;                                             // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsConcurrentReplaceRequest) == 0x000008, "Wrong alignment on FAccelByteModelsConcurrentReplaceRequest");
static_assert(sizeof(FAccelByteModelsConcurrentReplaceRequest) == 0x000028, "Wrong size on FAccelByteModelsConcurrentReplaceRequest");
static_assert(offsetof(FAccelByteModelsConcurrentReplaceRequest, UpdatedAt) == 0x000000, "Member 'FAccelByteModelsConcurrentReplaceRequest::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsConcurrentReplaceRequest, Value) == 0x000008, "Member 'FAccelByteModelsConcurrentReplaceRequest::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChannelMessageRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsChannelMessageRequest final
{
public:
	class FString                                 ChannelSlug;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 payload;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChannelMessageRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChannelMessageRequest");
static_assert(sizeof(FAccelByteModelsChannelMessageRequest) == 0x000020, "Wrong size on FAccelByteModelsChannelMessageRequest");
static_assert(offsetof(FAccelByteModelsChannelMessageRequest, ChannelSlug) == 0x000000, "Member 'FAccelByteModelsChannelMessageRequest::ChannelSlug' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageRequest, payload) == 0x000010, "Member 'FAccelByteModelsChannelMessageRequest::payload' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateMetadataRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUpdateMetadataRequest final
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateMetadataRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateMetadataRequest");
static_assert(sizeof(FAccelByteModelsUpdateMetadataRequest) == 0x000030, "Wrong size on FAccelByteModelsUpdateMetadataRequest");
static_assert(offsetof(FAccelByteModelsUpdateMetadataRequest, Label) == 0x000000, "Member 'FAccelByteModelsUpdateMetadataRequest::Label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateMetadataRequest, Tags) == 0x000010, "Member 'FAccelByteModelsUpdateMetadataRequest::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateMetadataRequest, CustomAttribute) == 0x000020, "Member 'FAccelByteModelsUpdateMetadataRequest::CustomAttribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingCreateBackfillTicketResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse");
static_assert(sizeof(FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse) == 0x000010, "Wrong size on FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse, Id) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingCreateBackfillTicketResponse::Id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchRequest
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsMatchRequest final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_mode;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchRequest) == 0x000008, "Wrong alignment on FAccelByteModelsMatchRequest");
static_assert(sizeof(FAccelByteModelsMatchRequest) == 0x000040, "Wrong size on FAccelByteModelsMatchRequest");
static_assert(offsetof(FAccelByteModelsMatchRequest, Session_id) == 0x000000, "Member 'FAccelByteModelsMatchRequest::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchRequest, Namespace) == 0x000010, "Member 'FAccelByteModelsMatchRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchRequest, Game_mode) == 0x000020, "Member 'FAccelByteModelsMatchRequest::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchRequest, Matching_allies) == 0x000030, "Member 'FAccelByteModelsMatchRequest::Matching_allies' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PlatformUserInformation
// 0x0070 (0x0070 - 0x0000)
struct FPlatformUserInformation final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkedAt;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxUserId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformUserInformation) == 0x000008, "Wrong alignment on FPlatformUserInformation");
static_assert(sizeof(FPlatformUserInformation) == 0x000070, "Wrong size on FPlatformUserInformation");
static_assert(offsetof(FPlatformUserInformation, DisplayName) == 0x000000, "Member 'FPlatformUserInformation::DisplayName' has a wrong offset!");
static_assert(offsetof(FPlatformUserInformation, EmailAddress) == 0x000010, "Member 'FPlatformUserInformation::EmailAddress' has a wrong offset!");
static_assert(offsetof(FPlatformUserInformation, LinkedAt) == 0x000020, "Member 'FPlatformUserInformation::LinkedAt' has a wrong offset!");
static_assert(offsetof(FPlatformUserInformation, Namespace) == 0x000030, "Member 'FPlatformUserInformation::Namespace' has a wrong offset!");
static_assert(offsetof(FPlatformUserInformation, PlatformId) == 0x000040, "Member 'FPlatformUserInformation::PlatformId' has a wrong offset!");
static_assert(offsetof(FPlatformUserInformation, PlatformUserId) == 0x000050, "Member 'FPlatformUserInformation::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FPlatformUserInformation, XboxUserId) == 0x000060, "Member 'FPlatformUserInformation::XboxUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetUserInformationResponse
// 0x0070 (0x0070 - 0x0000)
struct FGetUserInformationResponse final
{
public:
	class FString                                 Country;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EmailAddresses;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PhoneNumber;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlatformUserInformation>       PlatformUsers;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxUserId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetUserInformationResponse) == 0x000008, "Wrong alignment on FGetUserInformationResponse");
static_assert(sizeof(FGetUserInformationResponse) == 0x000070, "Wrong size on FGetUserInformationResponse");
static_assert(offsetof(FGetUserInformationResponse, Country) == 0x000000, "Member 'FGetUserInformationResponse::Country' has a wrong offset!");
static_assert(offsetof(FGetUserInformationResponse, DisplayName) == 0x000010, "Member 'FGetUserInformationResponse::DisplayName' has a wrong offset!");
static_assert(offsetof(FGetUserInformationResponse, EmailAddresses) == 0x000020, "Member 'FGetUserInformationResponse::EmailAddresses' has a wrong offset!");
static_assert(offsetof(FGetUserInformationResponse, PhoneNumber) == 0x000030, "Member 'FGetUserInformationResponse::PhoneNumber' has a wrong offset!");
static_assert(offsetof(FGetUserInformationResponse, PlatformUsers) == 0x000040, "Member 'FGetUserInformationResponse::PlatformUsers' has a wrong offset!");
static_assert(offsetof(FGetUserInformationResponse, Username) == 0x000050, "Member 'FGetUserInformationResponse::Username' has a wrong offset!");
static_assert(offsetof(FGetUserInformationResponse, XboxUserId) == 0x000060, "Member 'FGetUserInformationResponse::XboxUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDeregisterLocalServerRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsDeregisterLocalServerRequest final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDeregisterLocalServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsDeregisterLocalServerRequest");
static_assert(sizeof(FAccelByteModelsDeregisterLocalServerRequest) == 0x000010, "Wrong size on FAccelByteModelsDeregisterLocalServerRequest");
static_assert(offsetof(FAccelByteModelsDeregisterLocalServerRequest, Name) == 0x000000, "Member 'FAccelByteModelsDeregisterLocalServerRequest::Name' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsShutdownServerRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsShutdownServerRequest final
{
public:
	bool                                          Kill_me;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pod_name;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsShutdownServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsShutdownServerRequest");
static_assert(sizeof(FAccelByteModelsShutdownServerRequest) == 0x000028, "Wrong size on FAccelByteModelsShutdownServerRequest");
static_assert(offsetof(FAccelByteModelsShutdownServerRequest, Kill_me) == 0x000000, "Member 'FAccelByteModelsShutdownServerRequest::Kill_me' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsShutdownServerRequest, Pod_name) == 0x000008, "Member 'FAccelByteModelsShutdownServerRequest::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsShutdownServerRequest, Session_id) == 0x000018, "Member 'FAccelByteModelsShutdownServerRequest::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRegisterServerRequest
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsRegisterServerRequest final
{
public:
	class FString                                 Game_version;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Provider;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_attribute;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRegisterServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsRegisterServerRequest");
static_assert(sizeof(FAccelByteModelsRegisterServerRequest) == 0x000058, "Wrong size on FAccelByteModelsRegisterServerRequest");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Game_version) == 0x000000, "Member 'FAccelByteModelsRegisterServerRequest::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Ip) == 0x000010, "Member 'FAccelByteModelsRegisterServerRequest::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Pod_name) == 0x000020, "Member 'FAccelByteModelsRegisterServerRequest::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Port) == 0x000030, "Member 'FAccelByteModelsRegisterServerRequest::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Provider) == 0x000038, "Member 'FAccelByteModelsRegisterServerRequest::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Custom_attribute) == 0x000048, "Member 'FAccelByteModelsRegisterServerRequest::Custom_attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserOrdersRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUserOrdersRequest final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteOrderStatus                         Status;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserOrdersRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUserOrdersRequest");
static_assert(sizeof(FAccelByteModelsUserOrdersRequest) == 0x000020, "Wrong size on FAccelByteModelsUserOrdersRequest");
static_assert(offsetof(FAccelByteModelsUserOrdersRequest, ItemId) == 0x000000, "Member 'FAccelByteModelsUserOrdersRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserOrdersRequest, Status) == 0x000010, "Member 'FAccelByteModelsUserOrdersRequest::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserOrdersRequest, Offset) == 0x000014, "Member 'FAccelByteModelsUserOrdersRequest::Offset' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserOrdersRequest, Limit) == 0x000018, "Member 'FAccelByteModelsUserOrdersRequest::Limit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPriceDetail
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPriceDetail final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Owned;                                             // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPriceDetail) == 0x000008, "Wrong alignment on FAccelByteModelsPriceDetail");
static_assert(sizeof(FAccelByteModelsPriceDetail) == 0x000040, "Wrong size on FAccelByteModelsPriceDetail");
static_assert(offsetof(FAccelByteModelsPriceDetail, Price) == 0x000000, "Member 'FAccelByteModelsPriceDetail::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPriceDetail, DiscountedPrice) == 0x000004, "Member 'FAccelByteModelsPriceDetail::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPriceDetail, ItemId) == 0x000008, "Member 'FAccelByteModelsPriceDetail::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPriceDetail, ItemSku) == 0x000018, "Member 'FAccelByteModelsPriceDetail::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPriceDetail, Quantity) == 0x000028, "Member 'FAccelByteModelsPriceDetail::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPriceDetail, Owned) == 0x00002C, "Member 'FAccelByteModelsPriceDetail::Owned' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPriceDetail, ItemName) == 0x000030, "Member 'FAccelByteModelsPriceDetail::ItemName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEstimatedPrice
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsEstimatedPrice final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyNamespace;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsPriceDetail>    PriceDetails;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEstimatedPrice) == 0x000008, "Wrong alignment on FAccelByteModelsEstimatedPrice");
static_assert(sizeof(FAccelByteModelsEstimatedPrice) == 0x000038, "Wrong size on FAccelByteModelsEstimatedPrice");
static_assert(offsetof(FAccelByteModelsEstimatedPrice, CurrencyCode) == 0x000000, "Member 'FAccelByteModelsEstimatedPrice::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEstimatedPrice, CurrencyNamespace) == 0x000010, "Member 'FAccelByteModelsEstimatedPrice::CurrencyNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEstimatedPrice, Price) == 0x000020, "Member 'FAccelByteModelsEstimatedPrice::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEstimatedPrice, DiscountedPrice) == 0x000024, "Member 'FAccelByteModelsEstimatedPrice::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEstimatedPrice, PriceDetails) == 0x000028, "Member 'FAccelByteModelsEstimatedPrice::PriceDetails' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEstimatedPrices
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsEstimatedPrices final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsEstimatedPrice> EstimatedPrices;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEstimatedPrices) == 0x000008, "Wrong alignment on FAccelByteModelsEstimatedPrices");
static_assert(sizeof(FAccelByteModelsEstimatedPrices) == 0x000030, "Wrong size on FAccelByteModelsEstimatedPrices");
static_assert(offsetof(FAccelByteModelsEstimatedPrices, ItemId) == 0x000000, "Member 'FAccelByteModelsEstimatedPrices::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEstimatedPrices, Region) == 0x000010, "Member 'FAccelByteModelsEstimatedPrices::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEstimatedPrices, EstimatedPrices) == 0x000020, "Member 'FAccelByteModelsEstimatedPrices::EstimatedPrices' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSellItemEntitlementInfo
// 0x0358 (0x0358 - 0x0000)
struct FAccelByteModelsSellItemEntitlementInfo final
{
public:
	class FString                                 RequestId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplayed;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsCreditSummary>  CreditSummaries;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsEntitlementInfo        EntitlementInfo;                                   // 0x0028(0x0330)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSellItemEntitlementInfo) == 0x000008, "Wrong alignment on FAccelByteModelsSellItemEntitlementInfo");
static_assert(sizeof(FAccelByteModelsSellItemEntitlementInfo) == 0x000358, "Wrong size on FAccelByteModelsSellItemEntitlementInfo");
static_assert(offsetof(FAccelByteModelsSellItemEntitlementInfo, RequestId) == 0x000000, "Member 'FAccelByteModelsSellItemEntitlementInfo::RequestId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSellItemEntitlementInfo, bReplayed) == 0x000010, "Member 'FAccelByteModelsSellItemEntitlementInfo::bReplayed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSellItemEntitlementInfo, CreditSummaries) == 0x000018, "Member 'FAccelByteModelsSellItemEntitlementInfo::CreditSummaries' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSellItemEntitlementInfo, EntitlementInfo) == 0x000028, "Member 'FAccelByteModelsSellItemEntitlementInfo::EntitlementInfo' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSellUserEntitlementRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsSellUserEntitlementRequest final
{
public:
	int32                                         UseCount;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSellUserEntitlementRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSellUserEntitlementRequest");
static_assert(sizeof(FAccelByteModelsSellUserEntitlementRequest) == 0x000018, "Wrong size on FAccelByteModelsSellUserEntitlementRequest");
static_assert(offsetof(FAccelByteModelsSellUserEntitlementRequest, UseCount) == 0x000000, "Member 'FAccelByteModelsSellUserEntitlementRequest::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSellUserEntitlementRequest, RequestId) == 0x000008, "Member 'FAccelByteModelsSellUserEntitlementRequest::RequestId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemInfoV2
// 0x0258 (0x0258 - 0x0000)
struct FAccelByteModelsItemInfoV2 final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppType;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonType                          SeasonType;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     EntitlementType;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryPath;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailUrl;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Localizations;                                     // 0x00B8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Listable;                                          // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Purchasable;                                       // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSectionExclusive;                                 // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetNamespace;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCurrencyCode;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetItemId;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RegionData;                                        // 0x0110(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemRecurring          Recurring;                                         // 0x0130(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ItemQty;                                           // 0x0150(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         BoundItemIds;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCountPerUser;                                   // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Clazz;                                             // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Ext;                                               // 0x01B8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 BoothName;                                         // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelItemPurchaseCondition   PurchaseCondition;                                 // 0x0200(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelItemOptionBoxConfig     OptionBoxConfig;                                   // 0x0210(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemLootBoxConfig      LootBoxConfig;                                     // 0x0220(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSellable;                                         // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sellable;                                          // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsItemSaleConfig         SaleConfig;                                        // 0x0240(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemInfoV2) == 0x000008, "Wrong alignment on FAccelByteModelsItemInfoV2");
static_assert(sizeof(FAccelByteModelsItemInfoV2) == 0x000258, "Wrong size on FAccelByteModelsItemInfoV2");
static_assert(offsetof(FAccelByteModelsItemInfoV2, ItemId) == 0x000000, "Member 'FAccelByteModelsItemInfoV2::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, AppId) == 0x000010, "Member 'FAccelByteModelsItemInfoV2::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, AppType) == 0x000020, "Member 'FAccelByteModelsItemInfoV2::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, SeasonType) == 0x000030, "Member 'FAccelByteModelsItemInfoV2::SeasonType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, BaseAppId) == 0x000038, "Member 'FAccelByteModelsItemInfoV2::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Namespace) == 0x000048, "Member 'FAccelByteModelsItemInfoV2::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Sku) == 0x000058, "Member 'FAccelByteModelsItemInfoV2::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Name) == 0x000068, "Member 'FAccelByteModelsItemInfoV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, EntitlementType) == 0x000078, "Member 'FAccelByteModelsItemInfoV2::EntitlementType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, UseCount) == 0x00007C, "Member 'FAccelByteModelsItemInfoV2::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Stackable) == 0x000080, "Member 'FAccelByteModelsItemInfoV2::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, CategoryPath) == 0x000088, "Member 'FAccelByteModelsItemInfoV2::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Images) == 0x000098, "Member 'FAccelByteModelsItemInfoV2::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, ThumbnailUrl) == 0x0000A8, "Member 'FAccelByteModelsItemInfoV2::ThumbnailUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Localizations) == 0x0000B8, "Member 'FAccelByteModelsItemInfoV2::Localizations' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Status) == 0x0000D8, "Member 'FAccelByteModelsItemInfoV2::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Listable) == 0x0000D9, "Member 'FAccelByteModelsItemInfoV2::Listable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Purchasable) == 0x0000DA, "Member 'FAccelByteModelsItemInfoV2::Purchasable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, bSectionExclusive) == 0x0000DB, "Member 'FAccelByteModelsItemInfoV2::bSectionExclusive' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, ItemType) == 0x0000DC, "Member 'FAccelByteModelsItemInfoV2::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, TargetNamespace) == 0x0000E0, "Member 'FAccelByteModelsItemInfoV2::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, TargetCurrencyCode) == 0x0000F0, "Member 'FAccelByteModelsItemInfoV2::TargetCurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, TargetItemId) == 0x000100, "Member 'FAccelByteModelsItemInfoV2::TargetItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, RegionData) == 0x000110, "Member 'FAccelByteModelsItemInfoV2::RegionData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Recurring) == 0x000130, "Member 'FAccelByteModelsItemInfoV2::Recurring' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, ItemIds) == 0x000140, "Member 'FAccelByteModelsItemInfoV2::ItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, ItemQty) == 0x000150, "Member 'FAccelByteModelsItemInfoV2::ItemQty' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, BoundItemIds) == 0x000170, "Member 'FAccelByteModelsItemInfoV2::BoundItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Tags) == 0x000180, "Member 'FAccelByteModelsItemInfoV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Features) == 0x000190, "Member 'FAccelByteModelsItemInfoV2::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, MaxCountPerUser) == 0x0001A0, "Member 'FAccelByteModelsItemInfoV2::MaxCountPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, MaxCount) == 0x0001A4, "Member 'FAccelByteModelsItemInfoV2::MaxCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Clazz) == 0x0001A8, "Member 'FAccelByteModelsItemInfoV2::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Ext) == 0x0001B8, "Member 'FAccelByteModelsItemInfoV2::Ext' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, BoothName) == 0x0001D8, "Member 'FAccelByteModelsItemInfoV2::BoothName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, DisplayOrder) == 0x0001E8, "Member 'FAccelByteModelsItemInfoV2::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, CreatedAt) == 0x0001F0, "Member 'FAccelByteModelsItemInfoV2::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, UpdatedAt) == 0x0001F8, "Member 'FAccelByteModelsItemInfoV2::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, PurchaseCondition) == 0x000200, "Member 'FAccelByteModelsItemInfoV2::PurchaseCondition' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, OptionBoxConfig) == 0x000210, "Member 'FAccelByteModelsItemInfoV2::OptionBoxConfig' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, LootBoxConfig) == 0x000220, "Member 'FAccelByteModelsItemInfoV2::LootBoxConfig' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, bSellable) == 0x000238, "Member 'FAccelByteModelsItemInfoV2::bSellable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, Sellable) == 0x000239, "Member 'FAccelByteModelsItemInfoV2::Sellable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfoV2, SaleConfig) == 0x000240, "Member 'FAccelByteModelsItemInfoV2::SaleConfig' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemPagingSlicedResultV2
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsItemPagingSlicedResultV2 final
{
public:
	TArray<struct FAccelByteModelsItemInfoV2>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemPagingSlicedResultV2) == 0x000008, "Wrong alignment on FAccelByteModelsItemPagingSlicedResultV2");
static_assert(sizeof(FAccelByteModelsItemPagingSlicedResultV2) == 0x000050, "Wrong size on FAccelByteModelsItemPagingSlicedResultV2");
static_assert(offsetof(FAccelByteModelsItemPagingSlicedResultV2, Data) == 0x000000, "Member 'FAccelByteModelsItemPagingSlicedResultV2::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemPagingSlicedResultV2, Paging) == 0x000010, "Member 'FAccelByteModelsItemPagingSlicedResultV2::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatInfo
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsStatInfo final
{
public:
	class FString                                 CreatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncrementOnly;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Maximum;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetAsGlobal;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticSetBy                      SetBy;                                             // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatCode;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticStatus                     Status;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UpdatedAt;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CycleIds;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatInfo) == 0x000008, "Wrong alignment on FAccelByteModelsStatInfo");
static_assert(sizeof(FAccelByteModelsStatInfo) == 0x000098, "Wrong size on FAccelByteModelsStatInfo");
static_assert(offsetof(FAccelByteModelsStatInfo, CreatedAt) == 0x000000, "Member 'FAccelByteModelsStatInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, DefaultValue) == 0x000010, "Member 'FAccelByteModelsStatInfo::DefaultValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Description) == 0x000018, "Member 'FAccelByteModelsStatInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, IncrementOnly) == 0x000028, "Member 'FAccelByteModelsStatInfo::IncrementOnly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Maximum) == 0x00002C, "Member 'FAccelByteModelsStatInfo::Maximum' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Minimum) == 0x000030, "Member 'FAccelByteModelsStatInfo::Minimum' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Name) == 0x000038, "Member 'FAccelByteModelsStatInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Namespace) == 0x000048, "Member 'FAccelByteModelsStatInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, SetAsGlobal) == 0x000058, "Member 'FAccelByteModelsStatInfo::SetAsGlobal' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, SetBy) == 0x000059, "Member 'FAccelByteModelsStatInfo::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, StatCode) == 0x000060, "Member 'FAccelByteModelsStatInfo::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Status) == 0x000070, "Member 'FAccelByteModelsStatInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, UpdatedAt) == 0x000078, "Member 'FAccelByteModelsStatInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, CycleIds) == 0x000088, "Member 'FAccelByteModelsStatInfo::CycleIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMultipleServicePSNIAPSync
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsMultipleServicePSNIAPSync final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ServiceLabel;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMultipleServicePSNIAPSync) == 0x000008, "Wrong alignment on FAccelByteModelsMultipleServicePSNIAPSync");
static_assert(sizeof(FAccelByteModelsMultipleServicePSNIAPSync) == 0x000038, "Wrong size on FAccelByteModelsMultipleServicePSNIAPSync");
static_assert(offsetof(FAccelByteModelsMultipleServicePSNIAPSync, ProductId) == 0x000000, "Member 'FAccelByteModelsMultipleServicePSNIAPSync::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePSNIAPSync, Price) == 0x000010, "Member 'FAccelByteModelsMultipleServicePSNIAPSync::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePSNIAPSync, CurrencyCode) == 0x000018, "Member 'FAccelByteModelsMultipleServicePSNIAPSync::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultipleServicePSNIAPSync, ServiceLabel) == 0x000028, "Member 'FAccelByteModelsMultipleServicePSNIAPSync::ServiceLabel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PlayerAttributesPlatform
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2PlayerAttributesPlatform final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PlayerAttributesPlatform) == 0x000008, "Wrong alignment on FAccelByteModelsV2PlayerAttributesPlatform");
static_assert(sizeof(FAccelByteModelsV2PlayerAttributesPlatform) == 0x000020, "Wrong size on FAccelByteModelsV2PlayerAttributesPlatform");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributesPlatform, Name) == 0x000000, "Member 'FAccelByteModelsV2PlayerAttributesPlatform::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributesPlatform, UserID) == 0x000010, "Member 'FAccelByteModelsV2PlayerAttributesPlatform::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformSyncMobileApple
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsPlatformSyncMobileApple final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptData;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExcludeOldTransactions;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformSyncMobileApple) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformSyncMobileApple");
static_assert(sizeof(FAccelByteModelsPlatformSyncMobileApple) == 0x000058, "Wrong size on FAccelByteModelsPlatformSyncMobileApple");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, ProductId) == 0x000000, "Member 'FAccelByteModelsPlatformSyncMobileApple::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, TransactionId) == 0x000010, "Member 'FAccelByteModelsPlatformSyncMobileApple::TransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, ReceiptData) == 0x000020, "Member 'FAccelByteModelsPlatformSyncMobileApple::ReceiptData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, ExcludeOldTransactions) == 0x000030, "Member 'FAccelByteModelsPlatformSyncMobileApple::ExcludeOldTransactions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, Region) == 0x000038, "Member 'FAccelByteModelsPlatformSyncMobileApple::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, Language) == 0x000048, "Member 'FAccelByteModelsPlatformSyncMobileApple::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCBulkGetContentByShareCodeRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCBulkGetContentByShareCodeRequest final
{
public:
	TArray<class FString>                         ShareCodes;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCBulkGetContentByShareCodeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCBulkGetContentByShareCodeRequest");
static_assert(sizeof(FAccelByteModelsUGCBulkGetContentByShareCodeRequest) == 0x000010, "Wrong size on FAccelByteModelsUGCBulkGetContentByShareCodeRequest");
static_assert(offsetof(FAccelByteModelsUGCBulkGetContentByShareCodeRequest, ShareCodes) == 0x000000, "Member 'FAccelByteModelsUGCBulkGetContentByShareCodeRequest::ShareCodes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementGrant
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsEntitlementGrant final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementSource                   Source;                                            // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementGrant) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementGrant");
static_assert(sizeof(FAccelByteModelsEntitlementGrant) == 0x000058, "Wrong size on FAccelByteModelsEntitlementGrant");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, ItemId) == 0x000000, "Member 'FAccelByteModelsEntitlementGrant::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, GrantedCode) == 0x000010, "Member 'FAccelByteModelsEntitlementGrant::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, ItemNamespace) == 0x000020, "Member 'FAccelByteModelsEntitlementGrant::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Quantity) == 0x000030, "Member 'FAccelByteModelsEntitlementGrant::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Source) == 0x000034, "Member 'FAccelByteModelsEntitlementGrant::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Region) == 0x000038, "Member 'FAccelByteModelsEntitlementGrant::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Language) == 0x000048, "Member 'FAccelByteModelsEntitlementGrant::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkGetItemsBySkus
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsBulkGetItemsBySkus final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkGetItemsBySkus) == 0x000008, "Wrong alignment on FAccelByteModelsBulkGetItemsBySkus");
static_assert(sizeof(FAccelByteModelsBulkGetItemsBySkus) == 0x000020, "Wrong size on FAccelByteModelsBulkGetItemsBySkus");
static_assert(offsetof(FAccelByteModelsBulkGetItemsBySkus, Sku) == 0x000000, "Member 'FAccelByteModelsBulkGetItemsBySkus::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkGetItemsBySkus, ItemId) == 0x000010, "Member 'FAccelByteModelsBulkGetItemsBySkus::ItemId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ErrorOAuthInfo
// 0x0100 (0x0100 - 0x0000)
struct FErrorOAuthInfo final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error_description;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error_uri;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mfa_token;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Factors;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Default_factor;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkingToken;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientId;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserBan                               UserBan;                                           // 0x00B8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     MessageVariables;                                  // 0x00E0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorOAuthInfo) == 0x000008, "Wrong alignment on FErrorOAuthInfo");
static_assert(sizeof(FErrorOAuthInfo) == 0x000100, "Wrong size on FErrorOAuthInfo");
static_assert(offsetof(FErrorOAuthInfo, ErrorCode) == 0x000000, "Member 'FErrorOAuthInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, ErrorMessage) == 0x000008, "Member 'FErrorOAuthInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Error) == 0x000018, "Member 'FErrorOAuthInfo::Error' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Error_description) == 0x000028, "Member 'FErrorOAuthInfo::Error_description' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Error_uri) == 0x000038, "Member 'FErrorOAuthInfo::Error_uri' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Mfa_token) == 0x000048, "Member 'FErrorOAuthInfo::Mfa_token' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Factors) == 0x000058, "Member 'FErrorOAuthInfo::Factors' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Default_factor) == 0x000068, "Member 'FErrorOAuthInfo::Default_factor' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, Email) == 0x000078, "Member 'FErrorOAuthInfo::Email' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, PlatformId) == 0x000088, "Member 'FErrorOAuthInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, LinkingToken) == 0x000098, "Member 'FErrorOAuthInfo::LinkingToken' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, ClientId) == 0x0000A8, "Member 'FErrorOAuthInfo::ClientId' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, UserBan) == 0x0000B8, "Member 'FErrorOAuthInfo::UserBan' has a wrong offset!");
static_assert(offsetof(FErrorOAuthInfo, MessageVariables) == 0x0000E0, "Member 'FErrorOAuthInfo::MessageVariables' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UserDataResponse
// 0x0040 (0x0040 - 0x0000)
struct FUserDataResponse final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserDataResponse) == 0x000008, "Wrong alignment on FUserDataResponse");
static_assert(sizeof(FUserDataResponse) == 0x000040, "Wrong size on FUserDataResponse");
static_assert(offsetof(FUserDataResponse, DisplayName) == 0x000000, "Member 'FUserDataResponse::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserDataResponse, EmailAddress) == 0x000010, "Member 'FUserDataResponse::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUserDataResponse, Namespace) == 0x000020, "Member 'FUserDataResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FUserDataResponse, UserId) == 0x000030, "Member 'FUserDataResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListUserDataResponse
// 0x0010 (0x0010 - 0x0000)
struct FListUserDataResponse final
{
public:
	TArray<struct FUserDataResponse>              Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListUserDataResponse) == 0x000008, "Wrong alignment on FListUserDataResponse");
static_assert(sizeof(FListUserDataResponse) == 0x000010, "Wrong size on FListUserDataResponse");
static_assert(offsetof(FListUserDataResponse, Data) == 0x000000, "Member 'FListUserDataResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ErrorInfo
// 0x0040 (0x0040 - 0x0000)
struct FErrorInfo final
{
public:
	int32                                         NumericErrorCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorInfo) == 0x000008, "Wrong alignment on FErrorInfo");
static_assert(sizeof(FErrorInfo) == 0x000040, "Wrong size on FErrorInfo");
static_assert(offsetof(FErrorInfo, NumericErrorCode) == 0x000000, "Member 'FErrorInfo::NumericErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorInfo, ErrorCode) == 0x000004, "Member 'FErrorInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorInfo, Code) == 0x000008, "Member 'FErrorInfo::Code' has a wrong offset!");
static_assert(offsetof(FErrorInfo, ErrorMessage) == 0x000010, "Member 'FErrorInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FErrorInfo, Message) == 0x000020, "Member 'FErrorInfo::Message' has a wrong offset!");
static_assert(offsetof(FErrorInfo, Error) == 0x000030, "Member 'FErrorInfo::Error' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardCollectedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsRewardCollectedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 RewardName;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardType;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardAmount;                                      // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardCollectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsRewardCollectedPayload");
static_assert(sizeof(FAccelByteModelsRewardCollectedPayload) == 0x000048, "Wrong size on FAccelByteModelsRewardCollectedPayload");
static_assert(offsetof(FAccelByteModelsRewardCollectedPayload, RewardName) == 0x000018, "Member 'FAccelByteModelsRewardCollectedPayload::RewardName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCollectedPayload, RewardType) == 0x000028, "Member 'FAccelByteModelsRewardCollectedPayload::RewardType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCollectedPayload, RewardAmount) == 0x000038, "Member 'FAccelByteModelsRewardCollectedPayload::RewardAmount' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerLeveledPayload
// 0x0050 (0x0068 - 0x0018)
struct FAccelByteModelsPlayerLeveledPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 LevelStatus;                                       // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelID;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelDifficulty;                                   // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelSubject;                                      // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerLeveledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerLeveledPayload");
static_assert(sizeof(FAccelByteModelsPlayerLeveledPayload) == 0x000068, "Wrong size on FAccelByteModelsPlayerLeveledPayload");
static_assert(offsetof(FAccelByteModelsPlayerLeveledPayload, LevelStatus) == 0x000018, "Member 'FAccelByteModelsPlayerLeveledPayload::LevelStatus' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerLeveledPayload, LevelID) == 0x000028, "Member 'FAccelByteModelsPlayerLeveledPayload::LevelID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerLeveledPayload, LevelName) == 0x000038, "Member 'FAccelByteModelsPlayerLeveledPayload::LevelName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerLeveledPayload, LevelDifficulty) == 0x000048, "Member 'FAccelByteModelsPlayerLeveledPayload::LevelDifficulty' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerLeveledPayload, LevelSubject) == 0x000058, "Member 'FAccelByteModelsPlayerLeveledPayload::LevelSubject' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsResourceUpgradedPayload
// 0x00A0 (0x00B8 - 0x0018)
struct FAccelByteModelsResourceUpgradedPayload final : public FAccelByteModelsGameStandardEvent
{
public:
	class FString                                 ResourceName;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceID;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceCategory;                                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRating;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceSource;                                    // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceLevelRequirement;                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceRarity;                                    // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradeType;                                       // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradeSource;                                     // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradeLevel;                                      // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsResourceUpgradedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsResourceUpgradedPayload");
static_assert(sizeof(FAccelByteModelsResourceUpgradedPayload) == 0x0000B8, "Wrong size on FAccelByteModelsResourceUpgradedPayload");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceName) == 0x000018, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceID) == 0x000028, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceCategory) == 0x000038, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceCategory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceRating) == 0x000048, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceRating' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceSource) == 0x000058, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceLevelRequirement) == 0x000068, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceLevelRequirement' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, ResourceRarity) == 0x000078, "Member 'FAccelByteModelsResourceUpgradedPayload::ResourceRarity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, UpgradeType) == 0x000088, "Member 'FAccelByteModelsResourceUpgradedPayload::UpgradeType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, UpgradeSource) == 0x000098, "Member 'FAccelByteModelsResourceUpgradedPayload::UpgradeSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsResourceUpgradedPayload, UpgradeLevel) == 0x0000A8, "Member 'FAccelByteModelsResourceUpgradedPayload::UpgradeLevel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGDPRSubmitAccountDeletionResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGDPRSubmitAccountDeletionResponse final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGDPRSubmitAccountDeletionResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGDPRSubmitAccountDeletionResponse");
static_assert(sizeof(FAccelByteModelsGDPRSubmitAccountDeletionResponse) == 0x000020, "Wrong size on FAccelByteModelsGDPRSubmitAccountDeletionResponse");
static_assert(offsetof(FAccelByteModelsGDPRSubmitAccountDeletionResponse, Namespace) == 0x000000, "Member 'FAccelByteModelsGDPRSubmitAccountDeletionResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGDPRSubmitAccountDeletionResponse, UserID) == 0x000010, "Member 'FAccelByteModelsGDPRSubmitAccountDeletionResponse::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Time
// 0x0008 (0x0008 - 0x0000)
struct FTime final
{
public:
	struct FDateTime                              CurrentTime;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTime) == 0x000008, "Wrong alignment on FTime");
static_assert(sizeof(FTime) == 0x000008, "Wrong size on FTime");
static_assert(offsetof(FTime, CurrentTime) == 0x000000, "Member 'FTime::CurrentTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSyncThirdPartyFriendsResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsSyncThirdPartyFriendsResponse final
{
public:
	class FString                                 Detail;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSyncThirdPartyFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSyncThirdPartyFriendsResponse");
static_assert(sizeof(FAccelByteModelsSyncThirdPartyFriendsResponse) == 0x000030, "Wrong size on FAccelByteModelsSyncThirdPartyFriendsResponse");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendsResponse, Detail) == 0x000000, "Member 'FAccelByteModelsSyncThirdPartyFriendsResponse::Detail' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendsResponse, PlatformId) == 0x000010, "Member 'FAccelByteModelsSyncThirdPartyFriendsResponse::PlatformId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendsResponse, Status) == 0x000020, "Member 'FAccelByteModelsSyncThirdPartyFriendsResponse::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsUserProfileCreatedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	struct FJsonObjectWrapper                     UpdatedFields;                                     // 0x0018(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileCreatedPayload");
static_assert(sizeof(FAccelByteModelsUserProfileCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserProfileCreatedPayload");
static_assert(offsetof(FAccelByteModelsUserProfileCreatedPayload, UpdatedFields) == 0x000018, "Member 'FAccelByteModelsUserProfileCreatedPayload::UpdatedFields' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSyncThirdPartyFriendInfo
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsSyncThirdPartyFriendInfo final
{
public:
	bool                                          IsLogin;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformToken;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PsnEnv;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSyncThirdPartyFriendInfo) == 0x000008, "Wrong alignment on FAccelByteModelsSyncThirdPartyFriendInfo");
static_assert(sizeof(FAccelByteModelsSyncThirdPartyFriendInfo) == 0x000038, "Wrong size on FAccelByteModelsSyncThirdPartyFriendInfo");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendInfo, IsLogin) == 0x000000, "Member 'FAccelByteModelsSyncThirdPartyFriendInfo::IsLogin' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendInfo, PlatformId) == 0x000008, "Member 'FAccelByteModelsSyncThirdPartyFriendInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendInfo, PlatformToken) == 0x000018, "Member 'FAccelByteModelsSyncThirdPartyFriendInfo::PlatformToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendInfo, PsnEnv) == 0x000028, "Member 'FAccelByteModelsSyncThirdPartyFriendInfo::PsnEnv' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSyncThirdPartyFriendsRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSyncThirdPartyFriendsRequest final
{
public:
	TArray<struct FAccelByteModelsSyncThirdPartyFriendInfo> FriendSyncDetails;                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSyncThirdPartyFriendsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSyncThirdPartyFriendsRequest");
static_assert(sizeof(FAccelByteModelsSyncThirdPartyFriendsRequest) == 0x000010, "Wrong size on FAccelByteModelsSyncThirdPartyFriendsRequest");
static_assert(offsetof(FAccelByteModelsSyncThirdPartyFriendsRequest, FriendSyncDetails) == 0x000000, "Member 'FAccelByteModelsSyncThirdPartyFriendsRequest::FriendSyncDetails' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UpgradeUserRequest
// 0x0018 (0x0018 - 0x0000)
struct FUpgradeUserRequest final
{
public:
	class FString                                 Temporary_session_id;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expires_in;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpgradeUserRequest) == 0x000008, "Wrong alignment on FUpgradeUserRequest");
static_assert(sizeof(FUpgradeUserRequest) == 0x000018, "Wrong size on FUpgradeUserRequest");
static_assert(offsetof(FUpgradeUserRequest, Temporary_session_id) == 0x000000, "Member 'FUpgradeUserRequest::Temporary_session_id' has a wrong offset!");
static_assert(offsetof(FUpgradeUserRequest, Expires_in) == 0x000010, "Member 'FUpgradeUserRequest::Expires_in' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ResetPasswordRequest
// 0x0030 (0x0030 - 0x0000)
struct FResetPasswordRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPassword;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResetPasswordRequest) == 0x000008, "Wrong alignment on FResetPasswordRequest");
static_assert(sizeof(FResetPasswordRequest) == 0x000030, "Wrong size on FResetPasswordRequest");
static_assert(offsetof(FResetPasswordRequest, Code) == 0x000000, "Member 'FResetPasswordRequest::Code' has a wrong offset!");
static_assert(offsetof(FResetPasswordRequest, EmailAddress) == 0x000010, "Member 'FResetPasswordRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FResetPasswordRequest, NewPassword) == 0x000020, "Member 'FResetPasswordRequest::NewPassword' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSetSessionAttributeRequest
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsSetSessionAttributeRequest final
{
public:
	TMap<class FString, class FString>            Attributes;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSetSessionAttributeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSetSessionAttributeRequest");
static_assert(sizeof(FAccelByteModelsSetSessionAttributeRequest) == 0x000050, "Wrong size on FAccelByteModelsSetSessionAttributeRequest");
static_assert(offsetof(FAccelByteModelsSetSessionAttributeRequest, Attributes) == 0x000000, "Member 'FAccelByteModelsSetSessionAttributeRequest::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTurnServer
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsTurnServer final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Qos_port;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last_update;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Current_time;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTurnServer) == 0x000008, "Wrong alignment on FAccelByteModelsTurnServer");
static_assert(sizeof(FAccelByteModelsTurnServer) == 0x000050, "Wrong size on FAccelByteModelsTurnServer");
static_assert(offsetof(FAccelByteModelsTurnServer, Ip) == 0x000000, "Member 'FAccelByteModelsTurnServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Port) == 0x000010, "Member 'FAccelByteModelsTurnServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Qos_port) == 0x000014, "Member 'FAccelByteModelsTurnServer::Qos_port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Region) == 0x000018, "Member 'FAccelByteModelsTurnServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Status) == 0x000028, "Member 'FAccelByteModelsTurnServer::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Last_update) == 0x000038, "Member 'FAccelByteModelsTurnServer::Last_update' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Current_time) == 0x000048, "Member 'FAccelByteModelsTurnServer::Current_time' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkFriendsRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkFriendsRequest final
{
public:
	TArray<class FString>                         FriendIds;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkFriendsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsBulkFriendsRequest");
static_assert(sizeof(FAccelByteModelsBulkFriendsRequest) == 0x000010, "Wrong size on FAccelByteModelsBulkFriendsRequest");
static_assert(offsetof(FAccelByteModelsBulkFriendsRequest, FriendIds) == 0x000000, "Member 'FAccelByteModelsBulkFriendsRequest::FriendIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListIncomingFriendsWithTimeResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsListIncomingFriendsWithTimeResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<struct FAccelByteModelsFriendRequestData> Data;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListIncomingFriendsWithTimeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListIncomingFriendsWithTimeResponse");
static_assert(sizeof(FAccelByteModelsListIncomingFriendsWithTimeResponse) == 0x000040, "Wrong size on FAccelByteModelsListIncomingFriendsWithTimeResponse");
static_assert(offsetof(FAccelByteModelsListIncomingFriendsWithTimeResponse, Data) == 0x000030, "Member 'FAccelByteModelsListIncomingFriendsWithTimeResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGroups
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsUGCGroups final
{
public:
	TArray<class FString>                         Contents;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGroups) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGroups");
static_assert(sizeof(FAccelByteModelsUGCGroups) == 0x000058, "Wrong size on FAccelByteModelsUGCGroups");
static_assert(offsetof(FAccelByteModelsUGCGroups, Contents) == 0x000000, "Member 'FAccelByteModelsUGCGroups::Contents' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGroups, CreatedAt) == 0x000010, "Member 'FAccelByteModelsUGCGroups::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGroups, Id) == 0x000018, "Member 'FAccelByteModelsUGCGroups::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGroups, Name) == 0x000028, "Member 'FAccelByteModelsUGCGroups::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGroups, Namespace) == 0x000038, "Member 'FAccelByteModelsUGCGroups::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGroups, UserId) == 0x000048, "Member 'FAccelByteModelsUGCGroups::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetGroupsResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCGetGroupsResponse final
{
public:
	TArray<struct FAccelByteModelsUGCGroups>      Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGetGroupsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetGroupsResponse");
static_assert(sizeof(FAccelByteModelsUGCGetGroupsResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCGetGroupsResponse");
static_assert(offsetof(FAccelByteModelsUGCGetGroupsResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCGetGroupsResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCGetGroupsResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCGetGroupsResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListOutgoingFriendsWithTimeResponse
// 0x0010 (0x0040 - 0x0030)
struct FAccelByteModelsListOutgoingFriendsWithTimeResponse final : public FAccelByteModelsLobbyBaseResponse
{
public:
	TArray<struct FAccelByteModelsFriendRequestData> Data;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListOutgoingFriendsWithTimeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListOutgoingFriendsWithTimeResponse");
static_assert(sizeof(FAccelByteModelsListOutgoingFriendsWithTimeResponse) == 0x000040, "Wrong size on FAccelByteModelsListOutgoingFriendsWithTimeResponse");
static_assert(offsetof(FAccelByteModelsListOutgoingFriendsWithTimeResponse, Data) == 0x000030, "Member 'FAccelByteModelsListOutgoingFriendsWithTimeResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsKickNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsKickNotice final
{
public:
	class FString                                 LeaderId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsKickNotice) == 0x000008, "Wrong alignment on FAccelByteModelsKickNotice");
static_assert(sizeof(FAccelByteModelsKickNotice) == 0x000040, "Wrong size on FAccelByteModelsKickNotice");
static_assert(offsetof(FAccelByteModelsKickNotice, LeaderId) == 0x000000, "Member 'FAccelByteModelsKickNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickNotice, Leader) == 0x000010, "Member 'FAccelByteModelsKickNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickNotice, UserId) == 0x000020, "Member 'FAccelByteModelsKickNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickNotice, PartyId) == 0x000030, "Member 'FAccelByteModelsKickNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingMetrics
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsV2MatchmakingMetrics final
{
public:
	int32                                         QueueTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingMetrics) == 0x000004, "Wrong alignment on FAccelByteModelsV2MatchmakingMetrics");
static_assert(sizeof(FAccelByteModelsV2MatchmakingMetrics) == 0x000004, "Wrong size on FAccelByteModelsV2MatchmakingMetrics");
static_assert(offsetof(FAccelByteModelsV2MatchmakingMetrics, QueueTime) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingMetrics::QueueTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingBackfillProposalNotif
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsV2MatchmakingBackfillProposalNotif final
{
public:
	class FString                                 BackfillTicketID;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProposalID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchSessionID;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2GameSessionTeam> ProposedTeams;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2MatchmakingTicket> AddedTickets;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingBackfillProposalNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingBackfillProposalNotif");
static_assert(sizeof(FAccelByteModelsV2MatchmakingBackfillProposalNotif) == 0x000060, "Wrong size on FAccelByteModelsV2MatchmakingBackfillProposalNotif");
static_assert(offsetof(FAccelByteModelsV2MatchmakingBackfillProposalNotif, BackfillTicketID) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingBackfillProposalNotif::BackfillTicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingBackfillProposalNotif, ProposalID) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingBackfillProposalNotif::ProposalID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingBackfillProposalNotif, MatchPool) == 0x000020, "Member 'FAccelByteModelsV2MatchmakingBackfillProposalNotif::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingBackfillProposalNotif, MatchSessionID) == 0x000030, "Member 'FAccelByteModelsV2MatchmakingBackfillProposalNotif::MatchSessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingBackfillProposalNotif, ProposedTeams) == 0x000040, "Member 'FAccelByteModelsV2MatchmakingBackfillProposalNotif::ProposedTeams' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingBackfillProposalNotif, AddedTickets) == 0x000050, "Member 'FAccelByteModelsV2MatchmakingBackfillProposalNotif::AddedTickets' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingExpiredNotif
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsV2MatchmakingExpiredNotif final
{
public:
	class FString                                 TicketID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingExpiredNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingExpiredNotif");
static_assert(sizeof(FAccelByteModelsV2MatchmakingExpiredNotif) == 0x000038, "Wrong size on FAccelByteModelsV2MatchmakingExpiredNotif");
static_assert(offsetof(FAccelByteModelsV2MatchmakingExpiredNotif, TicketID) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingExpiredNotif::TicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingExpiredNotif, Namespace) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingExpiredNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingExpiredNotif, CreatedAt) == 0x000020, "Member 'FAccelByteModelsV2MatchmakingExpiredNotif::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingExpiredNotif, MatchPool) == 0x000028, "Member 'FAccelByteModelsV2MatchmakingExpiredNotif::MatchPool' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingGetTicketDetailsResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsV2MatchmakingGetTicketDetailsResponse final
{
public:
	bool                                          MatchFound;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingGetTicketDetailsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingGetTicketDetailsResponse");
static_assert(sizeof(FAccelByteModelsV2MatchmakingGetTicketDetailsResponse) == 0x000018, "Wrong size on FAccelByteModelsV2MatchmakingGetTicketDetailsResponse");
static_assert(offsetof(FAccelByteModelsV2MatchmakingGetTicketDetailsResponse, MatchFound) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingGetTicketDetailsResponse::MatchFound' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingGetTicketDetailsResponse, SessionId) == 0x000008, "Member 'FAccelByteModelsV2MatchmakingGetTicketDetailsResponse::SessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingCreateTicketResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsV2MatchmakingCreateTicketResponse final
{
public:
	class FString                                 MatchTicketId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueueTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2MatchmakingCreateTicketResponse) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingCreateTicketResponse");
static_assert(sizeof(FAccelByteModelsV2MatchmakingCreateTicketResponse) == 0x000018, "Wrong size on FAccelByteModelsV2MatchmakingCreateTicketResponse");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateTicketResponse, MatchTicketId) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingCreateTicketResponse::MatchTicketId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateTicketResponse, QueueTime) == 0x000010, "Member 'FAccelByteModelsV2MatchmakingCreateTicketResponse::QueueTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchmakingCreateTicketRequest
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsV2MatchmakingCreateTicketRequest final
{
public:
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    Latencies;                                         // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2MatchmakingCreateTicketRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchmakingCreateTicketRequest");
static_assert(sizeof(FAccelByteModelsV2MatchmakingCreateTicketRequest) == 0x000090, "Wrong size on FAccelByteModelsV2MatchmakingCreateTicketRequest");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateTicketRequest, Attributes) == 0x000000, "Member 'FAccelByteModelsV2MatchmakingCreateTicketRequest::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateTicketRequest, Latencies) == 0x000020, "Member 'FAccelByteModelsV2MatchmakingCreateTicketRequest::Latencies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateTicketRequest, MatchPool) == 0x000070, "Member 'FAccelByteModelsV2MatchmakingCreateTicketRequest::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchmakingCreateTicketRequest, SessionId) == 0x000080, "Member 'FAccelByteModelsV2MatchmakingCreateTicketRequest::SessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDequeueRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsDequeueRequest final
{
public:
	class FString                                 Match_id;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDequeueRequest) == 0x000008, "Wrong alignment on FAccelByteModelsDequeueRequest");
static_assert(sizeof(FAccelByteModelsDequeueRequest) == 0x000010, "Wrong size on FAccelByteModelsDequeueRequest");
static_assert(offsetof(FAccelByteModelsDequeueRequest, Match_id) == 0x000000, "Member 'FAccelByteModelsDequeueRequest::Match_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecordUpdatedPayload
// 0x0050 (0x0068 - 0x0018)
struct FAccelByteModelsGameRecordUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetBy;                                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Strategy;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Value;                                             // 0x0048(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameRecordUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecordUpdatedPayload");
static_assert(sizeof(FAccelByteModelsGameRecordUpdatedPayload) == 0x000068, "Wrong size on FAccelByteModelsGameRecordUpdatedPayload");
static_assert(offsetof(FAccelByteModelsGameRecordUpdatedPayload, Key) == 0x000018, "Member 'FAccelByteModelsGameRecordUpdatedPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecordUpdatedPayload, SetBy) == 0x000028, "Member 'FAccelByteModelsGameRecordUpdatedPayload::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecordUpdatedPayload, Strategy) == 0x000038, "Member 'FAccelByteModelsGameRecordUpdatedPayload::Strategy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecordUpdatedPayload, Value) == 0x000048, "Member 'FAccelByteModelsGameRecordUpdatedPayload::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2MatchTicketOptionalParams
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsV2MatchTicketOptionalParams final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2MatchTicketOptionalParams) == 0x000008, "Wrong alignment on FAccelByteModelsV2MatchTicketOptionalParams");
static_assert(sizeof(FAccelByteModelsV2MatchTicketOptionalParams) == 0x000040, "Wrong size on FAccelByteModelsV2MatchTicketOptionalParams");
static_assert(offsetof(FAccelByteModelsV2MatchTicketOptionalParams, SessionId) == 0x000000, "Member 'FAccelByteModelsV2MatchTicketOptionalParams::SessionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2MatchTicketOptionalParams, Attributes) == 0x000010, "Member 'FAccelByteModelsV2MatchTicketOptionalParams::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.StatsDMetric
// 0x0030 (0x0030 - 0x0000)
struct FStatsDMetric final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsDMetric) == 0x000008, "Wrong alignment on FStatsDMetric");
static_assert(sizeof(FStatsDMetric) == 0x000030, "Wrong size on FStatsDMetric");
static_assert(offsetof(FStatsDMetric, Name) == 0x000000, "Member 'FStatsDMetric::Name' has a wrong offset!");
static_assert(offsetof(FStatsDMetric, Value) == 0x000010, "Member 'FStatsDMetric::Value' has a wrong offset!");
static_assert(offsetof(FStatsDMetric, Tags) == 0x000020, "Member 'FStatsDMetric::Tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RefreshInfo
// 0x0018 (0x0018 - 0x0000)
struct FRefreshInfo final
{
public:
	class FString                                 RefreshToken;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expiration;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRefreshInfo) == 0x000008, "Wrong alignment on FRefreshInfo");
static_assert(sizeof(FRefreshInfo) == 0x000018, "Wrong size on FRefreshInfo");
static_assert(offsetof(FRefreshInfo, RefreshToken) == 0x000000, "Member 'FRefreshInfo::RefreshToken' has a wrong offset!");
static_assert(offsetof(FRefreshInfo, Expiration) == 0x000010, "Member 'FRefreshInfo::Expiration' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2Session
// 0x0028 (0x0028 - 0x0000)
struct FOauth2Session final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expires_in;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Refresh_id;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOauth2Session) == 0x000008, "Wrong alignment on FOauth2Session");
static_assert(sizeof(FOauth2Session) == 0x000028, "Wrong size on FOauth2Session");
static_assert(offsetof(FOauth2Session, Session_id) == 0x000000, "Member 'FOauth2Session::Session_id' has a wrong offset!");
static_assert(offsetof(FOauth2Session, Expires_in) == 0x000010, "Member 'FOauth2Session::Expires_in' has a wrong offset!");
static_assert(offsetof(FOauth2Session, Refresh_id) == 0x000018, "Member 'FOauth2Session::Refresh_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerRecordUpdatedPayload
// 0x0068 (0x0080 - 0x0018)
struct FAccelByteModelsPlayerRecordUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPublic;                                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetBy;                                             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Strategy;                                          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Value;                                             // 0x0060(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerRecordUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerRecordUpdatedPayload");
static_assert(sizeof(FAccelByteModelsPlayerRecordUpdatedPayload) == 0x000080, "Wrong size on FAccelByteModelsPlayerRecordUpdatedPayload");
static_assert(offsetof(FAccelByteModelsPlayerRecordUpdatedPayload, Key) == 0x000018, "Member 'FAccelByteModelsPlayerRecordUpdatedPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordUpdatedPayload, IsPublic) == 0x000028, "Member 'FAccelByteModelsPlayerRecordUpdatedPayload::IsPublic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordUpdatedPayload, UserId) == 0x000030, "Member 'FAccelByteModelsPlayerRecordUpdatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordUpdatedPayload, SetBy) == 0x000040, "Member 'FAccelByteModelsPlayerRecordUpdatedPayload::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordUpdatedPayload, Strategy) == 0x000050, "Member 'FAccelByteModelsPlayerRecordUpdatedPayload::Strategy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordUpdatedPayload, Value) == 0x000060, "Member 'FAccelByteModelsPlayerRecordUpdatedPayload::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2Token
// 0x00D0 (0x00D0 - 0x0000)
struct FOauth2Token final
{
public:
	class FString                                 Access_token;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Auth_Trust_Id;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Refresh_token;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token_type;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Expires_in;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Refresh_expires_in;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_comply;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOauth2TokenPermission>         Permissions;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FOauth2TokenBan>                Bans;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 User_id;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Display_name;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform_id;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform_user_id;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOauth2Token) == 0x000008, "Wrong alignment on FOauth2Token");
static_assert(sizeof(FOauth2Token) == 0x0000D0, "Wrong size on FOauth2Token");
static_assert(offsetof(FOauth2Token, Access_token) == 0x000000, "Member 'FOauth2Token::Access_token' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Auth_Trust_Id) == 0x000010, "Member 'FOauth2Token::Auth_Trust_Id' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Refresh_token) == 0x000020, "Member 'FOauth2Token::Refresh_token' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Token_type) == 0x000030, "Member 'FOauth2Token::Token_type' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Expires_in) == 0x000040, "Member 'FOauth2Token::Expires_in' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Refresh_expires_in) == 0x000044, "Member 'FOauth2Token::Refresh_expires_in' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Is_comply) == 0x000048, "Member 'FOauth2Token::Is_comply' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Permissions) == 0x000050, "Member 'FOauth2Token::Permissions' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Roles) == 0x000060, "Member 'FOauth2Token::Roles' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Bans) == 0x000070, "Member 'FOauth2Token::Bans' has a wrong offset!");
static_assert(offsetof(FOauth2Token, User_id) == 0x000080, "Member 'FOauth2Token::User_id' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Display_name) == 0x000090, "Member 'FOauth2Token::Display_name' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Namespace) == 0x0000A0, "Member 'FOauth2Token::Namespace' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Platform_id) == 0x0000B0, "Member 'FOauth2Token::Platform_id' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Platform_user_id) == 0x0000C0, "Member 'FOauth2Token::Platform_user_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPlayerRecordGetRecordPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPublicPlayerRecordGetRecordPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicPlayerRecordGetRecordPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPlayerRecordGetRecordPayload");
static_assert(sizeof(FAccelByteModelsPublicPlayerRecordGetRecordPayload) == 0x000038, "Wrong size on FAccelByteModelsPublicPlayerRecordGetRecordPayload");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordGetRecordPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPublicPlayerRecordGetRecordPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordGetRecordPayload, Key) == 0x000028, "Member 'FAccelByteModelsPublicPlayerRecordGetRecordPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardGetAllRewardPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsRewardGetAllRewardPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTopic;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardGetAllRewardPayload) == 0x000008, "Wrong alignment on FAccelByteModelsRewardGetAllRewardPayload");
static_assert(sizeof(FAccelByteModelsRewardGetAllRewardPayload) == 0x000038, "Wrong size on FAccelByteModelsRewardGetAllRewardPayload");
static_assert(offsetof(FAccelByteModelsRewardGetAllRewardPayload, UserId) == 0x000018, "Member 'FAccelByteModelsRewardGetAllRewardPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardGetAllRewardPayload, EventTopic) == 0x000028, "Member 'FAccelByteModelsRewardGetAllRewardPayload::EventTopic' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardGetRewardByIdPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsRewardGetRewardByIdPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardId;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardGetRewardByIdPayload) == 0x000008, "Wrong alignment on FAccelByteModelsRewardGetRewardByIdPayload");
static_assert(sizeof(FAccelByteModelsRewardGetRewardByIdPayload) == 0x000038, "Wrong size on FAccelByteModelsRewardGetRewardByIdPayload");
static_assert(offsetof(FAccelByteModelsRewardGetRewardByIdPayload, UserId) == 0x000018, "Member 'FAccelByteModelsRewardGetRewardByIdPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardGetRewardByIdPayload, RewardId) == 0x000028, "Member 'FAccelByteModelsRewardGetRewardByIdPayload::RewardId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardGetRewardByCodePayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsRewardGetRewardByCodePayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardCode;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardGetRewardByCodePayload) == 0x000008, "Wrong alignment on FAccelByteModelsRewardGetRewardByCodePayload");
static_assert(sizeof(FAccelByteModelsRewardGetRewardByCodePayload) == 0x000038, "Wrong size on FAccelByteModelsRewardGetRewardByCodePayload");
static_assert(offsetof(FAccelByteModelsRewardGetRewardByCodePayload, UserId) == 0x000018, "Member 'FAccelByteModelsRewardGetRewardByCodePayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardGetRewardByCodePayload, RewardCode) == 0x000028, "Member 'FAccelByteModelsRewardGetRewardByCodePayload::RewardCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload");
static_assert(sizeof(FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload) == 0x000028, "Wrong size on FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload");
static_assert(offsetof(FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload, UserId) == 0x000018, "Member 'FAccelByteModelsSeasonPassGetUserCurrentSeasonDataPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload");
static_assert(sizeof(FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload) == 0x000038, "Wrong size on FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload");
static_assert(offsetof(FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload, UserId) == 0x000018, "Member 'FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload, SeasonId) == 0x000028, "Member 'FAccelByteModelsSeasonPassGetUserSpecificSeasonDataPayload::SeasonId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassGetCurrentSeasonPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsSeasonPassGetCurrentSeasonPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassGetCurrentSeasonPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassGetCurrentSeasonPayload");
static_assert(sizeof(FAccelByteModelsSeasonPassGetCurrentSeasonPayload) == 0x000038, "Wrong size on FAccelByteModelsSeasonPassGetCurrentSeasonPayload");
static_assert(offsetof(FAccelByteModelsSeasonPassGetCurrentSeasonPayload, UserId) == 0x000018, "Member 'FAccelByteModelsSeasonPassGetCurrentSeasonPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassGetCurrentSeasonPayload, Language) == 0x000028, "Member 'FAccelByteModelsSeasonPassGetCurrentSeasonPayload::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassBulkRewardClaimedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsSeasonPassBulkRewardClaimedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassBulkRewardClaimedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassBulkRewardClaimedPayload");
static_assert(sizeof(FAccelByteModelsSeasonPassBulkRewardClaimedPayload) == 0x000028, "Wrong size on FAccelByteModelsSeasonPassBulkRewardClaimedPayload");
static_assert(offsetof(FAccelByteModelsSeasonPassBulkRewardClaimedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsSeasonPassBulkRewardClaimedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassClaimRewardPayload
// 0x0038 (0x0050 - 0x0018)
struct FAccelByteModelsSeasonPassClaimRewardPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PassCode;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierIndex;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardCode;                                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassClaimRewardPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassClaimRewardPayload");
static_assert(sizeof(FAccelByteModelsSeasonPassClaimRewardPayload) == 0x000050, "Wrong size on FAccelByteModelsSeasonPassClaimRewardPayload");
static_assert(offsetof(FAccelByteModelsSeasonPassClaimRewardPayload, UserId) == 0x000018, "Member 'FAccelByteModelsSeasonPassClaimRewardPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassClaimRewardPayload, PassCode) == 0x000028, "Member 'FAccelByteModelsSeasonPassClaimRewardPayload::PassCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassClaimRewardPayload, TierIndex) == 0x000038, "Member 'FAccelByteModelsSeasonPassClaimRewardPayload::TierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassClaimRewardPayload, RewardCode) == 0x000040, "Member 'FAccelByteModelsSeasonPassClaimRewardPayload::RewardCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardGetRankingByCycleIdPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsLeaderboardGetRankingByCycleIdPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 LeaderboardCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CycleId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardGetRankingByCycleIdPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardGetRankingByCycleIdPayload");
static_assert(sizeof(FAccelByteModelsLeaderboardGetRankingByCycleIdPayload) == 0x000048, "Wrong size on FAccelByteModelsLeaderboardGetRankingByCycleIdPayload");
static_assert(offsetof(FAccelByteModelsLeaderboardGetRankingByCycleIdPayload, LeaderboardCode) == 0x000018, "Member 'FAccelByteModelsLeaderboardGetRankingByCycleIdPayload::LeaderboardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardGetRankingByCycleIdPayload, CycleId) == 0x000028, "Member 'FAccelByteModelsLeaderboardGetRankingByCycleIdPayload::CycleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardGetRankingByCycleIdPayload, UserId) == 0x000038, "Member 'FAccelByteModelsLeaderboardGetRankingByCycleIdPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementGetTagsPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsAchievementGetTagsPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Name;                                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementGetTagsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementGetTagsPayload");
static_assert(sizeof(FAccelByteModelsAchievementGetTagsPayload) == 0x000028, "Wrong size on FAccelByteModelsAchievementGetTagsPayload");
static_assert(offsetof(FAccelByteModelsAchievementGetTagsPayload, Name) == 0x000018, "Member 'FAccelByteModelsAchievementGetTagsPayload::Name' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalAchievementClaimPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsGlobalAchievementClaimPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 AchievementCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalAchievementClaimPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalAchievementClaimPayload");
static_assert(sizeof(FAccelByteModelsGlobalAchievementClaimPayload) == 0x000028, "Wrong size on FAccelByteModelsGlobalAchievementClaimPayload");
static_assert(offsetof(FAccelByteModelsGlobalAchievementClaimPayload, AchievementCode) == 0x000018, "Member 'FAccelByteModelsGlobalAchievementClaimPayload::AchievementCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalAchievementGetContributedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsGlobalAchievementGetContributedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 AchievementCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalAchievementGetContributedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalAchievementGetContributedPayload");
static_assert(sizeof(FAccelByteModelsGlobalAchievementGetContributedPayload) == 0x000028, "Wrong size on FAccelByteModelsGlobalAchievementGetContributedPayload");
static_assert(offsetof(FAccelByteModelsGlobalAchievementGetContributedPayload, AchievementCode) == 0x000018, "Member 'FAccelByteModelsGlobalAchievementGetContributedPayload::AchievementCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionUserJoinedEvent
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2GameSessionUserJoinedEvent final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionUserJoinedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionUserJoinedEvent");
static_assert(sizeof(FAccelByteModelsV2GameSessionUserJoinedEvent) == 0x000020, "Wrong size on FAccelByteModelsV2GameSessionUserJoinedEvent");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserJoinedEvent, SessionID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionUserJoinedEvent::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserJoinedEvent, Members) == 0x000010, "Member 'FAccelByteModelsV2GameSessionUserJoinedEvent::Members' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGlobalAchievementGetContributorsPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsGlobalAchievementGetContributorsPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 AchievementCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGlobalAchievementGetContributorsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGlobalAchievementGetContributorsPayload");
static_assert(sizeof(FAccelByteModelsGlobalAchievementGetContributorsPayload) == 0x000028, "Wrong size on FAccelByteModelsGlobalAchievementGetContributorsPayload");
static_assert(offsetof(FAccelByteModelsGlobalAchievementGetContributorsPayload, AchievementCode) == 0x000018, "Member 'FAccelByteModelsGlobalAchievementGetContributorsPayload::AchievementCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementGetUsersPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsAchievementGetUsersPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementGetUsersPayload) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementGetUsersPayload");
static_assert(sizeof(FAccelByteModelsAchievementGetUsersPayload) == 0x000028, "Wrong size on FAccelByteModelsAchievementGetUsersPayload");
static_assert(offsetof(FAccelByteModelsAchievementGetUsersPayload, UserId) == 0x000018, "Member 'FAccelByteModelsAchievementGetUsersPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementGetSpecificPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsAchievementGetSpecificPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 AchievementCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementGetSpecificPayload) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementGetSpecificPayload");
static_assert(sizeof(FAccelByteModelsAchievementGetSpecificPayload) == 0x000028, "Wrong size on FAccelByteModelsAchievementGetSpecificPayload");
static_assert(offsetof(FAccelByteModelsAchievementGetSpecificPayload, AchievementCode) == 0x000018, "Member 'FAccelByteModelsAchievementGetSpecificPayload::AchievementCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyUserRejectedEvent
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsV2PartyUserRejectedEvent final
{
public:
	class FString                                 PartyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RejectedID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyUserRejectedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyUserRejectedEvent");
static_assert(sizeof(FAccelByteModelsV2PartyUserRejectedEvent) == 0x000030, "Wrong size on FAccelByteModelsV2PartyUserRejectedEvent");
static_assert(offsetof(FAccelByteModelsV2PartyUserRejectedEvent, PartyID) == 0x000000, "Member 'FAccelByteModelsV2PartyUserRejectedEvent::PartyID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUserRejectedEvent, RejectedID) == 0x000010, "Member 'FAccelByteModelsV2PartyUserRejectedEvent::RejectedID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUserRejectedEvent, Members) == 0x000020, "Member 'FAccelByteModelsV2PartyUserRejectedEvent::Members' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementsGetAllPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsAchievementsGetAllPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementsGetAllPayload) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementsGetAllPayload");
static_assert(sizeof(FAccelByteModelsAchievementsGetAllPayload) == 0x000028, "Wrong size on FAccelByteModelsAchievementsGetAllPayload");
static_assert(offsetof(FAccelByteModelsAchievementsGetAllPayload, UserId) == 0x000018, "Member 'FAccelByteModelsAchievementsGetAllPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementUnlockedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsAchievementUnlockedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 AchievementCode;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementUnlockedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementUnlockedPayload");
static_assert(sizeof(FAccelByteModelsAchievementUnlockedPayload) == 0x000028, "Wrong size on FAccelByteModelsAchievementUnlockedPayload");
static_assert(offsetof(FAccelByteModelsAchievementUnlockedPayload, AchievementCode) == 0x000018, "Member 'FAccelByteModelsAchievementUnlockedPayload::AchievementCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupMemberRoleDeletedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupMemberRoleDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedUserId;                                     // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupMemberRoleDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupMemberRoleDeletedPayload");
static_assert(sizeof(FAccelByteModelsGroupMemberRoleDeletedPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupMemberRoleDeletedPayload");
static_assert(offsetof(FAccelByteModelsGroupMemberRoleDeletedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupMemberRoleDeletedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberRoleDeletedPayload, MemberRoleId) == 0x000028, "Member 'FAccelByteModelsGroupMemberRoleDeletedPayload::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberRoleDeletedPayload, UpdatedUserId) == 0x000038, "Member 'FAccelByteModelsGroupMemberRoleDeletedPayload::UpdatedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPluginInfo
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPluginInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPluginInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPluginInfo");
static_assert(sizeof(FAccelByteModelsPluginInfo) == 0x000020, "Wrong size on FAccelByteModelsPluginInfo");
static_assert(offsetof(FAccelByteModelsPluginInfo, Name) == 0x000000, "Member 'FAccelByteModelsPluginInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPluginInfo, Version) == 0x000010, "Member 'FAccelByteModelsPluginInfo::Version' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupMemberRoleUpdatedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupMemberRoleUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedUserId;                                     // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupMemberRoleUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupMemberRoleUpdatedPayload");
static_assert(sizeof(FAccelByteModelsGroupMemberRoleUpdatedPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupMemberRoleUpdatedPayload");
static_assert(offsetof(FAccelByteModelsGroupMemberRoleUpdatedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupMemberRoleUpdatedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberRoleUpdatedPayload, MemberRoleId) == 0x000028, "Member 'FAccelByteModelsGroupMemberRoleUpdatedPayload::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMemberRoleUpdatedPayload, UpdatedUserId) == 0x000038, "Member 'FAccelByteModelsGroupMemberRoleUpdatedPayload::UpdatedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupJoinRequestListPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupJoinRequestListPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupJoinRequestListPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupJoinRequestListPayload");
static_assert(sizeof(FAccelByteModelsGroupJoinRequestListPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupJoinRequestListPayload");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestListPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupJoinRequestListPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestListPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupJoinRequestListPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupJoinRequestCanceledPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupJoinRequestCanceledPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupJoinRequestCanceledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupJoinRequestCanceledPayload");
static_assert(sizeof(FAccelByteModelsGroupJoinRequestCanceledPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupJoinRequestCanceledPayload");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestCanceledPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupJoinRequestCanceledPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestCanceledPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupJoinRequestCanceledPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonItem
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReasonItem final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonItem) == 0x000008, "Wrong alignment on FAccelByteModelsReasonItem");
static_assert(sizeof(FAccelByteModelsReasonItem) == 0x000020, "Wrong size on FAccelByteModelsReasonItem");
static_assert(offsetof(FAccelByteModelsReasonItem, Title) == 0x000000, "Member 'FAccelByteModelsReasonItem::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonItem, Description) == 0x000010, "Member 'FAccelByteModelsReasonItem::Description' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonsResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsReasonsResponse final
{
public:
	TArray<struct FAccelByteModelsReasonItem>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReasonsResponse");
static_assert(sizeof(FAccelByteModelsReasonsResponse) == 0x000050, "Wrong size on FAccelByteModelsReasonsResponse");
static_assert(offsetof(FAccelByteModelsReasonsResponse, Data) == 0x000000, "Member 'FAccelByteModelsReasonsResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonsResponse, Paging) == 0x000010, "Member 'FAccelByteModelsReasonsResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupJoinRequestRejectedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupJoinRequestRejectedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RejectedUserId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupJoinRequestRejectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupJoinRequestRejectedPayload");
static_assert(sizeof(FAccelByteModelsGroupJoinRequestRejectedPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupJoinRequestRejectedPayload");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestRejectedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupJoinRequestRejectedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestRejectedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupJoinRequestRejectedPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinRequestRejectedPayload, RejectedUserId) == 0x000038, "Member 'FAccelByteModelsGroupJoinRequestRejectedPayload::RejectedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupGetInvitationListPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsGroupGetInvitationListPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupGetInvitationListPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupGetInvitationListPayload");
static_assert(sizeof(FAccelByteModelsGroupGetInvitationListPayload) == 0x000028, "Wrong size on FAccelByteModelsGroupGetInvitationListPayload");
static_assert(offsetof(FAccelByteModelsGroupGetInvitationListPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGroupGetInvitationListPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInviteCanceledPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupInviteCanceledPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CanceledUserId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupInviteCanceledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInviteCanceledPayload");
static_assert(sizeof(FAccelByteModelsGroupInviteCanceledPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupInviteCanceledPayload");
static_assert(offsetof(FAccelByteModelsGroupInviteCanceledPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupInviteCanceledPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInviteCanceledPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupInviteCanceledPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInviteCanceledPayload, CanceledUserId) == 0x000038, "Member 'FAccelByteModelsGroupInviteCanceledPayload::CanceledUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitDataBase
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsReportingSubmitDataBase
{
public:
	EAccelByteReportingCategory                   Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectId;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectType;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtensionCategory;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitDataBase) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitDataBase");
static_assert(sizeof(FAccelByteModelsReportingSubmitDataBase) == 0x000068, "Wrong size on FAccelByteModelsReportingSubmitDataBase");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, Category) == 0x000000, "Member 'FAccelByteModelsReportingSubmitDataBase::Category' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, Comment) == 0x000008, "Member 'FAccelByteModelsReportingSubmitDataBase::Comment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, ObjectId) == 0x000018, "Member 'FAccelByteModelsReportingSubmitDataBase::ObjectId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, ObjectType) == 0x000028, "Member 'FAccelByteModelsReportingSubmitDataBase::ObjectType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, Reason) == 0x000038, "Member 'FAccelByteModelsReportingSubmitDataBase::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, UserID) == 0x000048, "Member 'FAccelByteModelsReportingSubmitDataBase::UserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataBase, ExtensionCategory) == 0x000058, "Member 'FAccelByteModelsReportingSubmitDataBase::ExtensionCategory' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitDataChatRequest
// 0x0020 (0x0088 - 0x0068)
struct FAccelByteModelsReportingSubmitDataChatRequest final : public FAccelByteModelsReportingSubmitDataBase
{
public:
	struct FAccelByteModelsReportingAdditionalInfoChat AdditionalInfo;                               // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitDataChatRequest) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitDataChatRequest");
static_assert(sizeof(FAccelByteModelsReportingSubmitDataChatRequest) == 0x000088, "Wrong size on FAccelByteModelsReportingSubmitDataChatRequest");
static_assert(offsetof(FAccelByteModelsReportingSubmitDataChatRequest, AdditionalInfo) == 0x000068, "Member 'FAccelByteModelsReportingSubmitDataChatRequest::AdditionalInfo' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInviteRejectedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupInviteRejectedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupInviteRejectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInviteRejectedPayload");
static_assert(sizeof(FAccelByteModelsGroupInviteRejectedPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupInviteRejectedPayload");
static_assert(offsetof(FAccelByteModelsGroupInviteRejectedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupInviteRejectedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInviteRejectedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupInviteRejectedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInviteAcceptedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupInviteAcceptedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupInviteAcceptedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInviteAcceptedPayload");
static_assert(sizeof(FAccelByteModelsGroupInviteAcceptedPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupInviteAcceptedPayload");
static_assert(offsetof(FAccelByteModelsGroupInviteAcceptedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupInviteAcceptedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInviteAcceptedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupInviteAcceptedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupJoinedPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupJoinedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupJoinedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupJoinedPayload");
static_assert(sizeof(FAccelByteModelsGroupJoinedPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupJoinedPayload");
static_assert(offsetof(FAccelByteModelsGroupJoinedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupJoinedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinedPayload, Status) == 0x000028, "Member 'FAccelByteModelsGroupJoinedPayload::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupJoinedPayload, UserId) == 0x000038, "Member 'FAccelByteModelsGroupJoinedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupFindPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsGroupFindPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupFindPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupFindPayload");
static_assert(sizeof(FAccelByteModelsGroupFindPayload) == 0x000048, "Wrong size on FAccelByteModelsGroupFindPayload");
static_assert(offsetof(FAccelByteModelsGroupFindPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGroupFindPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupFindPayload, GroupName) == 0x000028, "Member 'FAccelByteModelsGroupFindPayload::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupFindPayload, GroupRegion) == 0x000038, "Member 'FAccelByteModelsGroupFindPayload::GroupRegion' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemInspectOpenedPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsItemInspectOpenedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 ItemId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemInspectOpenedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsItemInspectOpenedPayload");
static_assert(sizeof(FAccelByteModelsItemInspectOpenedPayload) == 0x000058, "Wrong size on FAccelByteModelsItemInspectOpenedPayload");
static_assert(offsetof(FAccelByteModelsItemInspectOpenedPayload, ItemId) == 0x000018, "Member 'FAccelByteModelsItemInspectOpenedPayload::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInspectOpenedPayload, ItemNamespace) == 0x000028, "Member 'FAccelByteModelsItemInspectOpenedPayload::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInspectOpenedPayload, StoreId) == 0x000038, "Member 'FAccelByteModelsItemInspectOpenedPayload::StoreId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInspectOpenedPayload, Language) == 0x000048, "Member 'FAccelByteModelsItemInspectOpenedPayload::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemInspectClosedPayload
// 0x0000 (0x0058 - 0x0058)
struct FAccelByteModelsItemInspectClosedPayload final : public FAccelByteModelsItemInspectOpenedPayload
{
};
static_assert(alignof(FAccelByteModelsItemInspectClosedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsItemInspectClosedPayload");
static_assert(sizeof(FAccelByteModelsItemInspectClosedPayload) == 0x000058, "Wrong size on FAccelByteModelsItemInspectClosedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInformationPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupInformationPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupInformationPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInformationPayload");
static_assert(sizeof(FAccelByteModelsGroupInformationPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupInformationPayload");
static_assert(offsetof(FAccelByteModelsGroupInformationPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupInformationPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformationPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGroupInformationPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupPredefinedRuleDeletedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupPredefinedRuleDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupPredefinedRuleDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupPredefinedRuleDeletedPayload");
static_assert(sizeof(FAccelByteModelsGroupPredefinedRuleDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupPredefinedRuleDeletedPayload");
static_assert(offsetof(FAccelByteModelsGroupPredefinedRuleDeletedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupPredefinedRuleDeletedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupPredefinedRuleDeletedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupPredefinedRuleDeletedPayload::AdminUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupPredefinedRuleUpdatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGroupPredefinedRuleUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupPredefinedRuleUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupPredefinedRuleUpdatedPayload");
static_assert(sizeof(FAccelByteModelsGroupPredefinedRuleUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsGroupPredefinedRuleUpdatedPayload");
static_assert(offsetof(FAccelByteModelsGroupPredefinedRuleUpdatedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupPredefinedRuleUpdatedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupPredefinedRuleUpdatedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupPredefinedRuleUpdatedPayload::AdminUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupCustomAttributesUpdatedPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsGroupCustomAttributesUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminUserId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0038(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupCustomAttributesUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupCustomAttributesUpdatedPayload");
static_assert(sizeof(FAccelByteModelsGroupCustomAttributesUpdatedPayload) == 0x000058, "Wrong size on FAccelByteModelsGroupCustomAttributesUpdatedPayload");
static_assert(offsetof(FAccelByteModelsGroupCustomAttributesUpdatedPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsGroupCustomAttributesUpdatedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCustomAttributesUpdatedPayload, AdminUserId) == 0x000028, "Member 'FAccelByteModelsGroupCustomAttributesUpdatedPayload::AdminUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCustomAttributesUpdatedPayload, CustomAttributes) == 0x000038, "Member 'FAccelByteModelsGroupCustomAttributesUpdatedPayload::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupUpdatedPayload
// 0x0048 (0x0060 - 0x0018)
struct FAccelByteModelsGroupUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 ConfigurationCode;                                 // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaxMember;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupName;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupUpdatedPayload");
static_assert(sizeof(FAccelByteModelsGroupUpdatedPayload) == 0x000060, "Wrong size on FAccelByteModelsGroupUpdatedPayload");
static_assert(offsetof(FAccelByteModelsGroupUpdatedPayload, ConfigurationCode) == 0x000018, "Member 'FAccelByteModelsGroupUpdatedPayload::ConfigurationCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatedPayload, GroupId) == 0x000028, "Member 'FAccelByteModelsGroupUpdatedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatedPayload, GroupMaxMember) == 0x000038, "Member 'FAccelByteModelsGroupUpdatedPayload::GroupMaxMember' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatedPayload, GroupName) == 0x000040, "Member 'FAccelByteModelsGroupUpdatedPayload::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatedPayload, GroupRegion) == 0x000050, "Member 'FAccelByteModelsGroupUpdatedPayload::GroupRegion' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupCreatedPayload
// 0x0048 (0x0060 - 0x0018)
struct FAccelByteModelsGroupCreatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 ConfigurationCode;                                 // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaxMember;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupName;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGroupCreatedPayload");
static_assert(sizeof(FAccelByteModelsGroupCreatedPayload) == 0x000060, "Wrong size on FAccelByteModelsGroupCreatedPayload");
static_assert(offsetof(FAccelByteModelsGroupCreatedPayload, ConfigurationCode) == 0x000018, "Member 'FAccelByteModelsGroupCreatedPayload::ConfigurationCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCreatedPayload, GroupId) == 0x000028, "Member 'FAccelByteModelsGroupCreatedPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCreatedPayload, GroupMaxMember) == 0x000038, "Member 'FAccelByteModelsGroupCreatedPayload::GroupMaxMember' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCreatedPayload, GroupName) == 0x000040, "Member 'FAccelByteModelsGroupCreatedPayload::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupCreatedPayload, GroupRegion) == 0x000050, "Member 'FAccelByteModelsGroupCreatedPayload::GroupRegion' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModeratorId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatId;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload");
static_assert(sizeof(FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload) == 0x000048, "Wrong size on FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload, ModeratorId) == 0x000028, "Member 'FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload::ModeratorId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload, ChatId) == 0x000038, "Member 'FAccelByteModelsChatV2GroupChatModeratorDeleteGroupChatPayload::ChatId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordRecordUpdatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload, Key) == 0x000028, "Member 'FAccelByteModelsPlayerBinaryRecordRecordUpdatedPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModeratorId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnbannedUserId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload");
static_assert(sizeof(FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload) == 0x000048, "Wrong size on FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload, ModeratorId) == 0x000028, "Member 'FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload::ModeratorId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload, UnbannedUserId) == 0x000038, "Member 'FAccelByteModelsChatV2GroupChatModeratorUnbannedUserPayload::UnbannedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2GroupChatModeratorBannedUserPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModeratorId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannedUserId;                                      // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload");
static_assert(sizeof(FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload) == 0x000048, "Wrong size on FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload, ModeratorId) == 0x000028, "Member 'FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload::ModeratorId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload, BannedUserId) == 0x000038, "Member 'FAccelByteModelsChatV2GroupChatModeratorBannedUserPayload::BannedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModeratorId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnmutedUserId;                                     // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload");
static_assert(sizeof(FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload) == 0x000048, "Wrong size on FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload, ModeratorId) == 0x000028, "Member 'FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload::ModeratorId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload, UnmutedUserId) == 0x000038, "Member 'FAccelByteModelsChatV2GroupChatModeratorUnmutedUserPayload::UnmutedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2GroupChatModeratorMutedUserPayload
// 0x0030 (0x0048 - 0x0018)
struct FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 GroupId;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModeratorId;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MutedUserId;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload");
static_assert(sizeof(FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload) == 0x000048, "Wrong size on FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload, GroupId) == 0x000018, "Member 'FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload::GroupId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload, ModeratorId) == 0x000028, "Member 'FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload::ModeratorId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload, MutedUserId) == 0x000038, "Member 'FAccelByteModelsChatV2GroupChatModeratorMutedUserPayload::MutedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordGetRecordsPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsPlayerBinaryRecordGetRecordsPayload final : public FAccelByteModelsPlayerRecordGetRecordsPayload
{
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordGetRecordsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordGetRecordsPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordGetRecordsPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordGetRecordsPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2UserUnblockedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsChatV2UserUnblockedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnblockedUserId;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2UserUnblockedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2UserUnblockedPayload");
static_assert(sizeof(FAccelByteModelsChatV2UserUnblockedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2UserUnblockedPayload");
static_assert(offsetof(FAccelByteModelsChatV2UserUnblockedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2UserUnblockedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2UserUnblockedPayload, UnblockedUserId) == 0x000028, "Member 'FAccelByteModelsChatV2UserUnblockedPayload::UnblockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2TopicDeletedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsChatV2TopicDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2TopicDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2TopicDeletedPayload");
static_assert(sizeof(FAccelByteModelsChatV2TopicDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2TopicDeletedPayload");
static_assert(offsetof(FAccelByteModelsChatV2TopicDeletedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2TopicDeletedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2TopicDeletedPayload, TopicId) == 0x000028, "Member 'FAccelByteModelsChatV2TopicDeletedPayload::TopicId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2TopicUpdatedPayload
// 0x0028 (0x0040 - 0x0018)
struct FAccelByteModelsChatV2TopicUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannel;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatV2TopicUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2TopicUpdatedPayload");
static_assert(sizeof(FAccelByteModelsChatV2TopicUpdatedPayload) == 0x000040, "Wrong size on FAccelByteModelsChatV2TopicUpdatedPayload");
static_assert(offsetof(FAccelByteModelsChatV2TopicUpdatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2TopicUpdatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2TopicUpdatedPayload, Name) == 0x000028, "Member 'FAccelByteModelsChatV2TopicUpdatedPayload::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2TopicUpdatedPayload, IsChannel) == 0x000038, "Member 'FAccelByteModelsChatV2TopicUpdatedPayload::IsChannel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionInvitePlatformRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2SessionInvitePlatformRequest final
{
public:
	class FString                                 PlatformID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionInvitePlatformRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionInvitePlatformRequest");
static_assert(sizeof(FAccelByteModelsV2SessionInvitePlatformRequest) == 0x000020, "Wrong size on FAccelByteModelsV2SessionInvitePlatformRequest");
static_assert(offsetof(FAccelByteModelsV2SessionInvitePlatformRequest, PlatformID) == 0x000000, "Member 'FAccelByteModelsV2SessionInvitePlatformRequest::PlatformID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionInvitePlatformRequest, UserID) == 0x000010, "Member 'FAccelByteModelsV2SessionInvitePlatformRequest::UserID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2TopicJoinedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsChatV2TopicJoinedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TopicId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2TopicJoinedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2TopicJoinedPayload");
static_assert(sizeof(FAccelByteModelsChatV2TopicJoinedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2TopicJoinedPayload");
static_assert(offsetof(FAccelByteModelsChatV2TopicJoinedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2TopicJoinedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2TopicJoinedPayload, TopicId) == 0x000028, "Member 'FAccelByteModelsChatV2TopicJoinedPayload::TopicId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2TopicUserRemovedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsChatV2TopicUserRemovedPayload final : public FAccelByteModelsChatV2TopicJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsChatV2TopicUserRemovedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2TopicUserRemovedPayload");
static_assert(sizeof(FAccelByteModelsChatV2TopicUserRemovedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2TopicUserRemovedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2TopicUserAddedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsChatV2TopicUserAddedPayload final : public FAccelByteModelsChatV2TopicJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsChatV2TopicUserAddedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2TopicUserAddedPayload");
static_assert(sizeof(FAccelByteModelsChatV2TopicUserAddedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2TopicUserAddedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2TopicQuitPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsChatV2TopicQuitPayload final : public FAccelByteModelsChatV2TopicJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsChatV2TopicQuitPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2TopicQuitPayload");
static_assert(sizeof(FAccelByteModelsChatV2TopicQuitPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2TopicQuitPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2DSSessionReadyRequest
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsV2DSSessionReadyRequest final
{
public:
	bool                                          Ready;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2DSSessionReadyRequest) == 0x000001, "Wrong alignment on FAccelByteModelsV2DSSessionReadyRequest");
static_assert(sizeof(FAccelByteModelsV2DSSessionReadyRequest) == 0x000001, "Wrong size on FAccelByteModelsV2DSSessionReadyRequest");
static_assert(offsetof(FAccelByteModelsV2DSSessionReadyRequest, Ready) == 0x000000, "Member 'FAccelByteModelsV2DSSessionReadyRequest::Ready' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2GroupTopicCreatedPayload
// 0x00C8 (0x00E0 - 0x0018)
struct FAccelByteModelsChatV2GroupTopicCreatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           Members;                                           // 0x0038(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FString>                           Admins;                                            // 0x0088(0x0050)(NativeAccessSpecifierPublic)
	bool                                          IsJoinable;                                        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsChatV2GroupTopicCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2GroupTopicCreatedPayload");
static_assert(sizeof(FAccelByteModelsChatV2GroupTopicCreatedPayload) == 0x0000E0, "Wrong size on FAccelByteModelsChatV2GroupTopicCreatedPayload");
static_assert(offsetof(FAccelByteModelsChatV2GroupTopicCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2GroupTopicCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupTopicCreatedPayload, Name) == 0x000028, "Member 'FAccelByteModelsChatV2GroupTopicCreatedPayload::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupTopicCreatedPayload, Members) == 0x000038, "Member 'FAccelByteModelsChatV2GroupTopicCreatedPayload::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupTopicCreatedPayload, Admins) == 0x000088, "Member 'FAccelByteModelsChatV2GroupTopicCreatedPayload::Admins' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2GroupTopicCreatedPayload, IsJoinable) == 0x0000D8, "Member 'FAccelByteModelsChatV2GroupTopicCreatedPayload::IsJoinable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChatV2PersonalTopicCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsChatV2PersonalTopicCreatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetUserId;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChatV2PersonalTopicCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsChatV2PersonalTopicCreatedPayload");
static_assert(sizeof(FAccelByteModelsChatV2PersonalTopicCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsChatV2PersonalTopicCreatedPayload");
static_assert(offsetof(FAccelByteModelsChatV2PersonalTopicCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsChatV2PersonalTopicCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChatV2PersonalTopicCreatedPayload, TargetUserId) == 0x000028, "Member 'FAccelByteModelsChatV2PersonalTopicCreatedPayload::TargetUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionLeaderPromotionRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2GameSessionLeaderPromotionRequest final
{
public:
	class FString                                 LeaderID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionLeaderPromotionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionLeaderPromotionRequest");
static_assert(sizeof(FAccelByteModelsV2GameSessionLeaderPromotionRequest) == 0x000010, "Wrong size on FAccelByteModelsV2GameSessionLeaderPromotionRequest");
static_assert(offsetof(FAccelByteModelsV2GameSessionLeaderPromotionRequest, LeaderID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionLeaderPromotionRequest::LeaderID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserUnbannedPayload
// 0x0018 (0x0030 - 0x0018)
struct FAccelByteModelsUserUnbannedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanType                                      BanType;                                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserUnbannedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserUnbannedPayload");
static_assert(sizeof(FAccelByteModelsUserUnbannedPayload) == 0x000030, "Wrong size on FAccelByteModelsUserUnbannedPayload");
static_assert(offsetof(FAccelByteModelsUserUnbannedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsUserUnbannedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserUnbannedPayload, BanType) == 0x000028, "Member 'FAccelByteModelsUserUnbannedPayload::BanType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserPresenceStatusUpdatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsUserPresenceStatusUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserPresenceStatusUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserPresenceStatusUpdatedPayload");
static_assert(sizeof(FAccelByteModelsUserPresenceStatusUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserPresenceStatusUpdatedPayload");
static_assert(offsetof(FAccelByteModelsUserPresenceStatusUpdatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsUserPresenceStatusUpdatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPresenceStatusUpdatedPayload, Status) == 0x000028, "Member 'FAccelByteModelsUserPresenceStatusUpdatedPayload::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserUnblockedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsUserUnblockedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 SenderId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverId;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserUnblockedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserUnblockedPayload");
static_assert(sizeof(FAccelByteModelsUserUnblockedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserUnblockedPayload");
static_assert(offsetof(FAccelByteModelsUserUnblockedPayload, SenderId) == 0x000018, "Member 'FAccelByteModelsUserUnblockedPayload::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserUnblockedPayload, ReceiverId) == 0x000028, "Member 'FAccelByteModelsUserUnblockedPayload::ReceiverId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PlayerAttributes
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsV2PlayerAttributes final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentPlatform;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Data;                                              // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayEnabled;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsV2PlayerAttributesPlatform> Platforms;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PlayerAttributes) == 0x000008, "Wrong alignment on FAccelByteModelsV2PlayerAttributes");
static_assert(sizeof(FAccelByteModelsV2PlayerAttributes) == 0x000058, "Wrong size on FAccelByteModelsV2PlayerAttributes");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributes, UserID) == 0x000000, "Member 'FAccelByteModelsV2PlayerAttributes::UserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributes, CurrentPlatform) == 0x000010, "Member 'FAccelByteModelsV2PlayerAttributes::CurrentPlatform' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributes, Data) == 0x000020, "Member 'FAccelByteModelsV2PlayerAttributes::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributes, CrossplayEnabled) == 0x000040, "Member 'FAccelByteModelsV2PlayerAttributes::CrossplayEnabled' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PlayerAttributes, Platforms) == 0x000048, "Member 'FAccelByteModelsV2PlayerAttributes::Platforms' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserBlockedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsUserBlockedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 SenderId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiverId;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserBlockedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserBlockedPayload");
static_assert(sizeof(FAccelByteModelsUserBlockedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserBlockedPayload");
static_assert(offsetof(FAccelByteModelsUserBlockedPayload, SenderId) == 0x000018, "Member 'FAccelByteModelsUserBlockedPayload::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBlockedPayload, ReceiverId) == 0x000028, "Member 'FAccelByteModelsUserBlockedPayload::ReceiverId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFriendUnfriendedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsFriendUnfriendedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 SenderId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendId;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFriendUnfriendedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsFriendUnfriendedPayload");
static_assert(sizeof(FAccelByteModelsFriendUnfriendedPayload) == 0x000038, "Wrong size on FAccelByteModelsFriendUnfriendedPayload");
static_assert(offsetof(FAccelByteModelsFriendUnfriendedPayload, SenderId) == 0x000018, "Member 'FAccelByteModelsFriendUnfriendedPayload::SenderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFriendUnfriendedPayload, FriendId) == 0x000028, "Member 'FAccelByteModelsFriendUnfriendedPayload::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetContentBulkRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCGetContentBulkRequest final
{
public:
	TArray<class FString>                         ContentIds;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGetContentBulkRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetContentBulkRequest");
static_assert(sizeof(FAccelByteModelsUGCGetContentBulkRequest) == 0x000010, "Wrong size on FAccelByteModelsUGCGetContentBulkRequest");
static_assert(offsetof(FAccelByteModelsUGCGetContentBulkRequest, ContentIds) == 0x000000, "Member 'FAccelByteModelsUGCGetContentBulkRequest::ContentIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFriendRequestRejectedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsFriendRequestRejectedPayload final : public FAccelByteModelsFriendRequestSentPayload
{
};
static_assert(alignof(FAccelByteModelsFriendRequestRejectedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsFriendRequestRejectedPayload");
static_assert(sizeof(FAccelByteModelsFriendRequestRejectedPayload) == 0x000038, "Wrong size on FAccelByteModelsFriendRequestRejectedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSUnregisteredPayload
// 0x0000 (0x0028 - 0x0028)
struct FAccelByteModelsDSUnregisteredPayload final : public FAccelByteModelsDSRegisteredPayload
{
};
static_assert(alignof(FAccelByteModelsDSUnregisteredPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSUnregisteredPayload");
static_assert(sizeof(FAccelByteModelsDSUnregisteredPayload) == 0x000028, "Wrong size on FAccelByteModelsDSUnregisteredPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCRequest
// 0x00B0 (0x00B0 - 0x0000)
struct FAccelByteModelsUGCRequest
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Preview;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0070(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCPreviewMetadata     PreviewMetadata;                                   // 0x0090(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCRequest");
static_assert(sizeof(FAccelByteModelsUGCRequest) == 0x0000B0, "Wrong size on FAccelByteModelsUGCRequest");
static_assert(offsetof(FAccelByteModelsUGCRequest, ContentType) == 0x000000, "Member 'FAccelByteModelsUGCRequest::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, FileExtension) == 0x000010, "Member 'FAccelByteModelsUGCRequest::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Name) == 0x000020, "Member 'FAccelByteModelsUGCRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Preview) == 0x000030, "Member 'FAccelByteModelsUGCRequest::Preview' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Type) == 0x000040, "Member 'FAccelByteModelsUGCRequest::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, SubType) == 0x000050, "Member 'FAccelByteModelsUGCRequest::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Tags) == 0x000060, "Member 'FAccelByteModelsUGCRequest::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, CustomAttributes) == 0x000070, "Member 'FAccelByteModelsUGCRequest::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, PreviewMetadata) == 0x000090, "Member 'FAccelByteModelsUGCRequest::PreviewMetadata' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateRequest
// 0x0008 (0x00B8 - 0x00B0)
struct FAccelByteModelsUGCUpdateRequest final : public FAccelByteModelsUGCRequest
{
public:
	bool                                          UpdateContentFile;                                 // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUGCUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateRequest");
static_assert(sizeof(FAccelByteModelsUGCUpdateRequest) == 0x0000B8, "Wrong size on FAccelByteModelsUGCUpdateRequest");
static_assert(offsetof(FAccelByteModelsUGCUpdateRequest, UpdateContentFile) == 0x0000B0, "Member 'FAccelByteModelsUGCUpdateRequest::UpdateContentFile' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMemberChangedNotifReceivedPayload
// 0x0030 (0x0058 - 0x0028)
struct FAccelByteModelsDSMemberChangedNotifReceivedPayload final : public FAccelByteModelsDSRegisteredPayload
{
public:
	class FString                                 GameSessionId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2GameSessionTeam> Teams;                                          // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMemberChangedNotifReceivedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSMemberChangedNotifReceivedPayload");
static_assert(sizeof(FAccelByteModelsDSMemberChangedNotifReceivedPayload) == 0x000058, "Wrong size on FAccelByteModelsDSMemberChangedNotifReceivedPayload");
static_assert(offsetof(FAccelByteModelsDSMemberChangedNotifReceivedPayload, GameSessionId) == 0x000028, "Member 'FAccelByteModelsDSMemberChangedNotifReceivedPayload::GameSessionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMemberChangedNotifReceivedPayload, Members) == 0x000038, "Member 'FAccelByteModelsDSMemberChangedNotifReceivedPayload::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMemberChangedNotifReceivedPayload, Teams) == 0x000048, "Member 'FAccelByteModelsDSMemberChangedNotifReceivedPayload::Teams' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSClaimedPayload
// 0x0010 (0x0038 - 0x0028)
struct FAccelByteModelsDSClaimedPayload final : public FAccelByteModelsDSRegisteredPayload
{
public:
	class FString                                 GameSessionId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSClaimedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsDSClaimedPayload");
static_assert(sizeof(FAccelByteModelsDSClaimedPayload) == 0x000038, "Wrong size on FAccelByteModelsDSClaimedPayload");
static_assert(offsetof(FAccelByteModelsDSClaimedPayload, GameSessionId) == 0x000028, "Member 'FAccelByteModelsDSClaimedPayload::GameSessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2MatchmakingCanceledPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV2MatchmakingCanceledPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchTicketId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV2MatchmakingCanceledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2MatchmakingCanceledPayload");
static_assert(sizeof(FAccelByteModelsMPV2MatchmakingCanceledPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2MatchmakingCanceledPayload");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingCanceledPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV2MatchmakingCanceledPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingCanceledPayload, MatchTicketId) == 0x000028, "Member 'FAccelByteModelsMPV2MatchmakingCanceledPayload::MatchTicketId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2MatchmakingStartedPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsMPV2MatchmakingStartedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchTicketId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartySessionId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV2MatchmakingStartedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2MatchmakingStartedPayload");
static_assert(sizeof(FAccelByteModelsMPV2MatchmakingStartedPayload) == 0x000058, "Wrong size on FAccelByteModelsMPV2MatchmakingStartedPayload");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingStartedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV2MatchmakingStartedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingStartedPayload, MatchTicketId) == 0x000028, "Member 'FAccelByteModelsMPV2MatchmakingStartedPayload::MatchTicketId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingStartedPayload, PartySessionId) == 0x000038, "Member 'FAccelByteModelsMPV2MatchmakingStartedPayload::PartySessionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingStartedPayload, MatchPool) == 0x000048, "Member 'FAccelByteModelsMPV2MatchmakingStartedPayload::MatchPool' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PaginatedPartyQueryResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsV2PaginatedPartyQueryResult final
{
public:
	TArray<struct FAccelByteModelsV2PartySession> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PaginatedPartyQueryResult) == 0x000008, "Wrong alignment on FAccelByteModelsV2PaginatedPartyQueryResult");
static_assert(sizeof(FAccelByteModelsV2PaginatedPartyQueryResult) == 0x000050, "Wrong size on FAccelByteModelsV2PaginatedPartyQueryResult");
static_assert(offsetof(FAccelByteModelsV2PaginatedPartyQueryResult, Data) == 0x000000, "Member 'FAccelByteModelsV2PaginatedPartyQueryResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PaginatedPartyQueryResult, Paging) == 0x000010, "Member 'FAccelByteModelsV2PaginatedPartyQueryResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2MatchmakingRequestedPayload
// 0x0068 (0x0080 - 0x0018)
struct FAccelByteModelsMPV2MatchmakingRequestedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartySessionId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0048(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 MatchTicketId;                                     // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueueTime;                                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMPV2MatchmakingRequestedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2MatchmakingRequestedPayload");
static_assert(sizeof(FAccelByteModelsMPV2MatchmakingRequestedPayload) == 0x000080, "Wrong size on FAccelByteModelsMPV2MatchmakingRequestedPayload");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingRequestedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV2MatchmakingRequestedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingRequestedPayload, MatchPool) == 0x000028, "Member 'FAccelByteModelsMPV2MatchmakingRequestedPayload::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingRequestedPayload, PartySessionId) == 0x000038, "Member 'FAccelByteModelsMPV2MatchmakingRequestedPayload::PartySessionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingRequestedPayload, Attributes) == 0x000048, "Member 'FAccelByteModelsMPV2MatchmakingRequestedPayload::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingRequestedPayload, MatchTicketId) == 0x000068, "Member 'FAccelByteModelsMPV2MatchmakingRequestedPayload::MatchTicketId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2MatchmakingRequestedPayload, QueueTime) == 0x000078, "Member 'FAccelByteModelsMPV2MatchmakingRequestedPayload::QueueTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2PartySessionCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsMPV2PartySessionCreatedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartySessionId;                                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV2PartySessionCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2PartySessionCreatedPayload");
static_assert(sizeof(FAccelByteModelsMPV2PartySessionCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2PartySessionCreatedPayload");
static_assert(offsetof(FAccelByteModelsMPV2PartySessionCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV2PartySessionCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV2PartySessionCreatedPayload, PartySessionId) == 0x000028, "Member 'FAccelByteModelsMPV2PartySessionCreatedPayload::PartySessionId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2PartySessionKickedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2PartySessionKickedPayload final : public FAccelByteModelsMPV2PartySessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2PartySessionKickedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2PartySessionKickedPayload");
static_assert(sizeof(FAccelByteModelsMPV2PartySessionKickedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2PartySessionKickedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyCreateRequest
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsV2PartyCreateRequest final
{
public:
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteV2SessionJoinability                Joinability;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConfigurationName;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxPlayers;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinPlayers;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InactiveTimeout;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteTimeout;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionConfigurationServerType    Type;                                              // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2PartyCreateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyCreateRequest");
static_assert(sizeof(FAccelByteModelsV2PartyCreateRequest) == 0x000070, "Wrong size on FAccelByteModelsV2PartyCreateRequest");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, Members) == 0x000000, "Member 'FAccelByteModelsV2PartyCreateRequest::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, Attributes) == 0x000010, "Member 'FAccelByteModelsV2PartyCreateRequest::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, Joinability) == 0x000030, "Member 'FAccelByteModelsV2PartyCreateRequest::Joinability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, ConfigurationName) == 0x000038, "Member 'FAccelByteModelsV2PartyCreateRequest::ConfigurationName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, MaxPlayers) == 0x000048, "Member 'FAccelByteModelsV2PartyCreateRequest::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, MinPlayers) == 0x000050, "Member 'FAccelByteModelsV2PartyCreateRequest::MinPlayers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, InactiveTimeout) == 0x000058, "Member 'FAccelByteModelsV2PartyCreateRequest::InactiveTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, InviteTimeout) == 0x000060, "Member 'FAccelByteModelsV2PartyCreateRequest::InviteTimeout' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyCreateRequest, Type) == 0x000068, "Member 'FAccelByteModelsV2PartyCreateRequest::Type' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2PartySessionLeftPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2PartySessionLeftPayload final : public FAccelByteModelsMPV2PartySessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2PartySessionLeftPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2PartySessionLeftPayload");
static_assert(sizeof(FAccelByteModelsMPV2PartySessionLeftPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2PartySessionLeftPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2PartySessionJoinedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2PartySessionJoinedPayload final : public FAccelByteModelsMPV2PartySessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2PartySessionJoinedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2PartySessionJoinedPayload");
static_assert(sizeof(FAccelByteModelsMPV2PartySessionJoinedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2PartySessionJoinedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2PartySessionInvitedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2PartySessionInvitedPayload final : public FAccelByteModelsMPV2PartySessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2PartySessionInvitedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2PartySessionInvitedPayload");
static_assert(sizeof(FAccelByteModelsMPV2PartySessionInvitedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2PartySessionInvitedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionUpdateRequest
// 0x0010 (0x00C8 - 0x00B8)
struct FAccelByteModelsV2GameSessionUpdateRequest final : public FAccelByteModelsV2GameSessionBaseRequest
{
public:
	int64                                         Version;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeEmptyTeams;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2GameSessionUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionUpdateRequest");
static_assert(sizeof(FAccelByteModelsV2GameSessionUpdateRequest) == 0x0000C8, "Wrong size on FAccelByteModelsV2GameSessionUpdateRequest");
static_assert(offsetof(FAccelByteModelsV2GameSessionUpdateRequest, Version) == 0x0000B8, "Member 'FAccelByteModelsV2GameSessionUpdateRequest::Version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionUpdateRequest, bIncludeEmptyTeams) == 0x0000C0, "Member 'FAccelByteModelsV2GameSessionUpdateRequest::bIncludeEmptyTeams' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2GameSessionJoinedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2GameSessionJoinedPayload final : public FAccelByteModelsMPV2GameSessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2GameSessionJoinedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2GameSessionJoinedPayload");
static_assert(sizeof(FAccelByteModelsMPV2GameSessionJoinedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2GameSessionJoinedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV2GameSessionInvitedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV2GameSessionInvitedPayload final : public FAccelByteModelsMPV2GameSessionCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV2GameSessionInvitedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV2GameSessionInvitedPayload");
static_assert(sizeof(FAccelByteModelsMPV2GameSessionInvitedPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV2GameSessionInvitedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatCycleConfigPagingResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsStatCycleConfigPagingResult final
{
public:
	TArray<struct FAccelByteModelsStatCycleConfig> Data;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatCycleConfigPagingResult) == 0x000008, "Wrong alignment on FAccelByteModelsStatCycleConfigPagingResult");
static_assert(sizeof(FAccelByteModelsStatCycleConfigPagingResult) == 0x000050, "Wrong size on FAccelByteModelsStatCycleConfigPagingResult");
static_assert(offsetof(FAccelByteModelsStatCycleConfigPagingResult, Data) == 0x000000, "Member 'FAccelByteModelsStatCycleConfigPagingResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatCycleConfigPagingResult, Paging) == 0x000010, "Member 'FAccelByteModelsStatCycleConfigPagingResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1PartyInvitePayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV1PartyInvitePayload final : public FAccelByteModelsMPV1PartyJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV1PartyInvitePayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1PartyInvitePayload");
static_assert(sizeof(FAccelByteModelsMPV1PartyInvitePayload) == 0x000038, "Wrong size on FAccelByteModelsMPV1PartyInvitePayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1PartyLeavePayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV1PartyLeavePayload final : public FAccelByteModelsMPV1PartyJoinedPayload
{
};
static_assert(alignof(FAccelByteModelsMPV1PartyLeavePayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1PartyLeavePayload");
static_assert(sizeof(FAccelByteModelsMPV1PartyLeavePayload) == 0x000038, "Wrong size on FAccelByteModelsMPV1PartyLeavePayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1MatchmakingRejectMatchPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsMPV1MatchmakingRejectMatchPayload final : public FAccelByteModelsMPV1MatchmakingReadyConsentPayload
{
};
static_assert(alignof(FAccelByteModelsMPV1MatchmakingRejectMatchPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1MatchmakingRejectMatchPayload");
static_assert(sizeof(FAccelByteModelsMPV1MatchmakingRejectMatchPayload) == 0x000038, "Wrong size on FAccelByteModelsMPV1MatchmakingRejectMatchPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMPV1MatchmakingStartedPayload
// 0x00A0 (0x00B8 - 0x0018)
struct FAccelByteModelsMPV1MatchmakingStartedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Latencies;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PartyAttributes;                                   // 0x0068(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMPV1MatchmakingStartedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsMPV1MatchmakingStartedPayload");
static_assert(sizeof(FAccelByteModelsMPV1MatchmakingStartedPayload) == 0x0000B8, "Wrong size on FAccelByteModelsMPV1MatchmakingStartedPayload");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingStartedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsMPV1MatchmakingStartedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingStartedPayload, GameMode) == 0x000028, "Member 'FAccelByteModelsMPV1MatchmakingStartedPayload::GameMode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingStartedPayload, ServerName) == 0x000038, "Member 'FAccelByteModelsMPV1MatchmakingStartedPayload::ServerName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingStartedPayload, ClientVersion) == 0x000048, "Member 'FAccelByteModelsMPV1MatchmakingStartedPayload::ClientVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingStartedPayload, Latencies) == 0x000058, "Member 'FAccelByteModelsMPV1MatchmakingStartedPayload::Latencies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMPV1MatchmakingStartedPayload, PartyAttributes) == 0x000068, "Member 'FAccelByteModelsMPV1MatchmakingStartedPayload::PartyAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaymentSuccededPayload
// 0x0058 (0x0070 - 0x0018)
struct FAccelByteModelsPaymentSuccededPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderNo;                                           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentOrderNo;                                    // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaymentSuccededPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPaymentSuccededPayload");
static_assert(sizeof(FAccelByteModelsPaymentSuccededPayload) == 0x000070, "Wrong size on FAccelByteModelsPaymentSuccededPayload");
static_assert(offsetof(FAccelByteModelsPaymentSuccededPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPaymentSuccededPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaymentSuccededPayload, ItemId) == 0x000028, "Member 'FAccelByteModelsPaymentSuccededPayload::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaymentSuccededPayload, Price) == 0x000038, "Member 'FAccelByteModelsPaymentSuccededPayload::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaymentSuccededPayload, OrderNo) == 0x000040, "Member 'FAccelByteModelsPaymentSuccededPayload::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaymentSuccededPayload, PaymentOrderNo) == 0x000050, "Member 'FAccelByteModelsPaymentSuccededPayload::PaymentOrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaymentSuccededPayload, Status) == 0x000060, "Member 'FAccelByteModelsPaymentSuccededPayload::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaymentFailedPayload
// 0x0000 (0x0070 - 0x0070)
struct FAccelByteModelsPaymentFailedPayload final : public FAccelByteModelsPaymentSuccededPayload
{
};
static_assert(alignof(FAccelByteModelsPaymentFailedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPaymentFailedPayload");
static_assert(sizeof(FAccelByteModelsPaymentFailedPayload) == 0x000070, "Wrong size on FAccelByteModelsPaymentFailedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserJoinSessionRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSessionBrowserJoinSessionRequest final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserJoinSessionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserJoinSessionRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserJoinSessionRequest) == 0x000010, "Wrong size on FAccelByteModelsSessionBrowserJoinSessionRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserJoinSessionRequest, Password) == 0x000000, "Member 'FAccelByteModelsSessionBrowserJoinSessionRequest::Password' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreditSummaryEventPayload
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsCreditSummaryEventPayload final
{
public:
	class FString                                 WalletId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreditSummaryEventPayload) == 0x000008, "Wrong alignment on FAccelByteModelsCreditSummaryEventPayload");
static_assert(sizeof(FAccelByteModelsCreditSummaryEventPayload) == 0x000038, "Wrong size on FAccelByteModelsCreditSummaryEventPayload");
static_assert(offsetof(FAccelByteModelsCreditSummaryEventPayload, WalletId) == 0x000000, "Member 'FAccelByteModelsCreditSummaryEventPayload::WalletId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummaryEventPayload, UserId) == 0x000010, "Member 'FAccelByteModelsCreditSummaryEventPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummaryEventPayload, Amount) == 0x000020, "Member 'FAccelByteModelsCreditSummaryEventPayload::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummaryEventPayload, CurrencyCode) == 0x000028, "Member 'FAccelByteModelsCreditSummaryEventPayload::CurrencyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSubscriptionSummaryEventPayload
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsSubscriptionSummaryEventPayload final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubscribedBy;                                      // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSubscriptionSummaryEventPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSubscriptionSummaryEventPayload");
static_assert(sizeof(FAccelByteModelsSubscriptionSummaryEventPayload) == 0x000060, "Wrong size on FAccelByteModelsSubscriptionSummaryEventPayload");
static_assert(offsetof(FAccelByteModelsSubscriptionSummaryEventPayload, Id) == 0x000000, "Member 'FAccelByteModelsSubscriptionSummaryEventPayload::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummaryEventPayload, UserId) == 0x000010, "Member 'FAccelByteModelsSubscriptionSummaryEventPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummaryEventPayload, ItemId) == 0x000020, "Member 'FAccelByteModelsSubscriptionSummaryEventPayload::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummaryEventPayload, Sku) == 0x000030, "Member 'FAccelByteModelsSubscriptionSummaryEventPayload::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummaryEventPayload, Status) == 0x000040, "Member 'FAccelByteModelsSubscriptionSummaryEventPayload::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSubscriptionSummaryEventPayload, SubscribedBy) == 0x000050, "Member 'FAccelByteModelsSubscriptionSummaryEventPayload::SubscribedBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemFulfilledPayload
// 0x0040 (0x0058 - 0x0018)
struct FAccelByteModelsItemFulfilledPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsEntitlementSummaryEventPayload> EntitlementSummaries;              // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsCreditSummaryEventPayload> CreditSummaries;                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSubscriptionSummaryEventPayload> SubscriptionSummaries;            // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemFulfilledPayload) == 0x000008, "Wrong alignment on FAccelByteModelsItemFulfilledPayload");
static_assert(sizeof(FAccelByteModelsItemFulfilledPayload) == 0x000058, "Wrong size on FAccelByteModelsItemFulfilledPayload");
static_assert(offsetof(FAccelByteModelsItemFulfilledPayload, UserId) == 0x000018, "Member 'FAccelByteModelsItemFulfilledPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemFulfilledPayload, EntitlementSummaries) == 0x000028, "Member 'FAccelByteModelsItemFulfilledPayload::EntitlementSummaries' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemFulfilledPayload, CreditSummaries) == 0x000038, "Member 'FAccelByteModelsItemFulfilledPayload::CreditSummaries' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemFulfilledPayload, SubscriptionSummaries) == 0x000048, "Member 'FAccelByteModelsItemFulfilledPayload::SubscriptionSummaries' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserCurrentPlatform
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUserCurrentPlatform final
{
public:
	class FString                                 userID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 currentPlatform;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserCurrentPlatform) == 0x000008, "Wrong alignment on FAccelByteModelsUserCurrentPlatform");
static_assert(sizeof(FAccelByteModelsUserCurrentPlatform) == 0x000020, "Wrong size on FAccelByteModelsUserCurrentPlatform");
static_assert(offsetof(FAccelByteModelsUserCurrentPlatform, userID) == 0x000000, "Member 'FAccelByteModelsUserCurrentPlatform::userID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserCurrentPlatform, currentPlatform) == 0x000010, "Member 'FAccelByteModelsUserCurrentPlatform::currentPlatform' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserCurrentPlatformResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkUserCurrentPlatformResponse final
{
public:
	TArray<struct FAccelByteModelsUserCurrentPlatform> Data;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserCurrentPlatformResponse) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserCurrentPlatformResponse");
static_assert(sizeof(FAccelByteModelsBulkUserCurrentPlatformResponse) == 0x000010, "Wrong size on FAccelByteModelsBulkUserCurrentPlatformResponse");
static_assert(offsetof(FAccelByteModelsBulkUserCurrentPlatformResponse, Data) == 0x000000, "Member 'FAccelByteModelsBulkUserCurrentPlatformResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCampaignCodeRedeemedPayload
// 0x0010 (0x0068 - 0x0058)
struct FAccelByteModelsCampaignCodeRedeemedPayload final : public FAccelByteModelsItemFulfilledPayload
{
public:
	class FString                                 Code;                                              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCampaignCodeRedeemedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsCampaignCodeRedeemedPayload");
static_assert(sizeof(FAccelByteModelsCampaignCodeRedeemedPayload) == 0x000068, "Wrong size on FAccelByteModelsCampaignCodeRedeemedPayload");
static_assert(offsetof(FAccelByteModelsCampaignCodeRedeemedPayload, Code) == 0x000058, "Member 'FAccelByteModelsCampaignCodeRedeemedPayload::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementGrantedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsEntitlementGrantedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	TArray<struct FAccelByteModelsEntitlementGrantData> Entitlements;                                // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementGrantedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementGrantedPayload");
static_assert(sizeof(FAccelByteModelsEntitlementGrantedPayload) == 0x000028, "Wrong size on FAccelByteModelsEntitlementGrantedPayload");
static_assert(offsetof(FAccelByteModelsEntitlementGrantedPayload, Entitlements) == 0x000018, "Member 'FAccelByteModelsEntitlementGrantedPayload::Entitlements' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCurrencyUpdatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsCurrencyUpdatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 WalletId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCurrencyUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsCurrencyUpdatedPayload");
static_assert(sizeof(FAccelByteModelsCurrencyUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsCurrencyUpdatedPayload");
static_assert(offsetof(FAccelByteModelsCurrencyUpdatedPayload, WalletId) == 0x000018, "Member 'FAccelByteModelsCurrencyUpdatedPayload::WalletId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyUpdatedPayload, CurrencyCode) == 0x000028, "Member 'FAccelByteModelsCurrencyUpdatedPayload::CurrencyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStoreClosedPayload
// 0x0000 (0x0048 - 0x0048)
struct FAccelByteModelsStoreClosedPayload final : public FAccelByteModelsStoreOpenedPayload
{
};
static_assert(alignof(FAccelByteModelsStoreClosedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsStoreClosedPayload");
static_assert(sizeof(FAccelByteModelsStoreClosedPayload) == 0x000048, "Wrong size on FAccelByteModelsStoreClosedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameBinaryRecordGetRecordsByQueryPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Query;                                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload");
static_assert(sizeof(FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload) == 0x000038, "Wrong size on FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload");
static_assert(offsetof(FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload, Query) == 0x000028, "Member 'FAccelByteModelsGameBinaryRecordGetRecordsByQueryPayload::Query' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameBinaryRecordGetRecordsByKeysPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsGameBinaryRecordGetRecordsByKeysPayload final : public FAccelByteModelsPlayerRecordGetRecordsPayload
{
};
static_assert(alignof(FAccelByteModelsGameBinaryRecordGetRecordsByKeysPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameBinaryRecordGetRecordsByKeysPayload");
static_assert(sizeof(FAccelByteModelsGameBinaryRecordGetRecordsByKeysPayload) == 0x000038, "Wrong size on FAccelByteModelsGameBinaryRecordGetRecordsByKeysPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameBinaryRecordGetRecordPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGameBinaryRecordGetRecordPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameBinaryRecordGetRecordPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameBinaryRecordGetRecordPayload");
static_assert(sizeof(FAccelByteModelsGameBinaryRecordGetRecordPayload) == 0x000038, "Wrong size on FAccelByteModelsGameBinaryRecordGetRecordPayload");
static_assert(offsetof(FAccelByteModelsGameBinaryRecordGetRecordPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGameBinaryRecordGetRecordPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameBinaryRecordGetRecordPayload, Key) == 0x000028, "Member 'FAccelByteModelsGameBinaryRecordGetRecordPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordGetAllPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordGetAllPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordGetAllPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordGetAllPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordGetAllPayload) == 0x000028, "Wrong size on FAccelByteModelsPlayerBinaryRecordGetAllPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordGetAllPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordGetAllPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerBinaryRecordCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerBinaryRecordCreatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerBinaryRecordCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerBinaryRecordCreatedPayload");
static_assert(sizeof(FAccelByteModelsPlayerBinaryRecordCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerBinaryRecordCreatedPayload");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordCreatedPayload, UserId) == 0x000018, "Member 'FAccelByteModelsPlayerBinaryRecordCreatedPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerBinaryRecordCreatedPayload, Key) == 0x000028, "Member 'FAccelByteModelsPlayerBinaryRecordCreatedPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecordGetRecordsByKeysPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsGameRecordGetRecordsByKeysPayload final : public FAccelByteModelsPlayerRecordGetRecordsPayload
{
};
static_assert(alignof(FAccelByteModelsGameRecordGetRecordsByKeysPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecordGetRecordsByKeysPayload");
static_assert(sizeof(FAccelByteModelsGameRecordGetRecordsByKeysPayload) == 0x000038, "Wrong size on FAccelByteModelsGameRecordGetRecordsByKeysPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecordGetRecordByKeyPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGameRecordGetRecordByKeyPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 UserId;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameRecordGetRecordByKeyPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecordGetRecordByKeyPayload");
static_assert(sizeof(FAccelByteModelsGameRecordGetRecordByKeyPayload) == 0x000038, "Wrong size on FAccelByteModelsGameRecordGetRecordByKeyPayload");
static_assert(offsetof(FAccelByteModelsGameRecordGetRecordByKeyPayload, UserId) == 0x000018, "Member 'FAccelByteModelsGameRecordGetRecordByKeyPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecordGetRecordByKeyPayload, Key) == 0x000028, "Member 'FAccelByteModelsGameRecordGetRecordByKeyPayload::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecordDeletedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsGameRecordDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameRecordDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecordDeletedPayload");
static_assert(sizeof(FAccelByteModelsGameRecordDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsGameRecordDeletedPayload");
static_assert(offsetof(FAccelByteModelsGameRecordDeletedPayload, Key) == 0x000018, "Member 'FAccelByteModelsGameRecordDeletedPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecordDeletedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsGameRecordDeletedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload");
static_assert(sizeof(FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload) == 0x000038, "Wrong size on FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload, Key) == 0x000018, "Member 'FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload, UserIds) == 0x000028, "Member 'FAccelByteModelsPublicPlayerRecordGetSameRecordsFromUsersPayload::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerRecordDeletedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerRecordDeletedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerRecordDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerRecordDeletedPayload");
static_assert(sizeof(FAccelByteModelsPlayerRecordDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerRecordDeletedPayload");
static_assert(offsetof(FAccelByteModelsPlayerRecordDeletedPayload, Key) == 0x000018, "Member 'FAccelByteModelsPlayerRecordDeletedPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordDeletedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsPlayerRecordDeletedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayerRecordCreatedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsPlayerRecordCreatedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Key;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayerRecordCreatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsPlayerRecordCreatedPayload");
static_assert(sizeof(FAccelByteModelsPlayerRecordCreatedPayload) == 0x000038, "Wrong size on FAccelByteModelsPlayerRecordCreatedPayload");
static_assert(offsetof(FAccelByteModelsPlayerRecordCreatedPayload, Key) == 0x000018, "Member 'FAccelByteModelsPlayerRecordCreatedPayload::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlayerRecordCreatedPayload, UserId) == 0x000028, "Member 'FAccelByteModelsPlayerRecordCreatedPayload::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatCycleItemGetCycleItemsPayload
// 0x0010 (0x0048 - 0x0038)
struct FAccelByteModelsStatCycleItemGetCycleItemsPayload final : public FAccelByteModelsStatCycleItemGetItemListPayload
{
public:
	TArray<class FString>                         StatCodes;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatCycleItemGetCycleItemsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsStatCycleItemGetCycleItemsPayload");
static_assert(sizeof(FAccelByteModelsStatCycleItemGetCycleItemsPayload) == 0x000048, "Wrong size on FAccelByteModelsStatCycleItemGetCycleItemsPayload");
static_assert(offsetof(FAccelByteModelsStatCycleItemGetCycleItemsPayload, StatCodes) == 0x000038, "Member 'FAccelByteModelsStatCycleItemGetCycleItemsPayload::StatCodes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemGetItemsPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsUserStatItemGetItemsPayload final : public FAccelByteModelsUserStatItemCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsUserStatItemGetItemsPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemGetItemsPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemGetItemsPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemGetItemsPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemGetSameItemsFromUsersPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 StatCode;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload");
static_assert(offsetof(FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload, StatCode) == 0x000018, "Member 'FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload, UserIds) == 0x000028, "Member 'FAccelByteModelsUserStatItemGetSameItemsFromUsersPayload::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemResetPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsUserStatItemResetPayload final : public FAccelByteModelsUserStatItemCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsUserStatItemResetPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemResetPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemResetPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemResetPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemDeletedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsUserStatItemDeletedPayload final : public FAccelByteModelsUserStatItemCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsUserStatItemDeletedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemDeletedPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemDeletedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemDeletedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemUpdatedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsUserStatItemUpdatedPayload final : public FAccelByteModelsUserStatItemCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsUserStatItemUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemUpdatedPayload");
static_assert(sizeof(FAccelByteModelsUserStatItemUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserStatItemUpdatedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileUpdatedPayload
// 0x0000 (0x0038 - 0x0038)
struct FAccelByteModelsUserProfileUpdatedPayload final : public FAccelByteModelsUserProfileCreatedPayload
{
};
static_assert(alignof(FAccelByteModelsUserProfileUpdatedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileUpdatedPayload");
static_assert(sizeof(FAccelByteModelsUserProfileUpdatedPayload) == 0x000038, "Wrong size on FAccelByteModelsUserProfileUpdatedPayload");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLoginFailedPayload
// 0x0020 (0x0038 - 0x0018)
struct FAccelByteModelsLoginFailedPayload : public FAccelByteModelsPredefinedEvent
{
public:
	class FString                                 Namespace;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLoginFailedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLoginFailedPayload");
static_assert(sizeof(FAccelByteModelsLoginFailedPayload) == 0x000038, "Wrong size on FAccelByteModelsLoginFailedPayload");
static_assert(offsetof(FAccelByteModelsLoginFailedPayload, Namespace) == 0x000018, "Member 'FAccelByteModelsLoginFailedPayload::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoginFailedPayload, PlatformId) == 0x000028, "Member 'FAccelByteModelsLoginFailedPayload::PlatformId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLoginSuccededPayload
// 0x0030 (0x0068 - 0x0038)
struct FAccelByteModelsLoginSuccededPayload final : public FAccelByteModelsLoginFailedPayload
{
public:
	class FString                                 UserId;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceId;                                          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLoginSuccededPayload) == 0x000008, "Wrong alignment on FAccelByteModelsLoginSuccededPayload");
static_assert(sizeof(FAccelByteModelsLoginSuccededPayload) == 0x000068, "Wrong size on FAccelByteModelsLoginSuccededPayload");
static_assert(offsetof(FAccelByteModelsLoginSuccededPayload, UserId) == 0x000038, "Member 'FAccelByteModelsLoginSuccededPayload::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoginSuccededPayload, PlatformUserId) == 0x000048, "Member 'FAccelByteModelsLoginSuccededPayload::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoginSuccededPayload, DeviceId) == 0x000058, "Member 'FAccelByteModelsLoginSuccededPayload::DeviceId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSDKInitializedPayload
// 0x0010 (0x0028 - 0x0018)
struct FAccelByteModelsSDKInitializedPayload final : public FAccelByteModelsPredefinedEvent
{
public:
	TArray<struct FAccelByteModelsPluginInfo>     Plugins;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSDKInitializedPayload) == 0x000008, "Wrong alignment on FAccelByteModelsSDKInitializedPayload");
static_assert(sizeof(FAccelByteModelsSDKInitializedPayload) == 0x000028, "Wrong size on FAccelByteModelsSDKInitializedPayload");
static_assert(offsetof(FAccelByteModelsSDKInitializedPayload, Plugins) == 0x000018, "Member 'FAccelByteModelsSDKInitializedPayload::Plugins' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelBytePresenceBroadcastEventPayload
// 0x0060 (0x0060 - 0x0000)
struct FAccelBytePresenceBroadcastEventPayload final
{
public:
	class FString                                 Flight_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform_name;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_state;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_context;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Additional_data;                                   // 0x0040(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelBytePresenceBroadcastEventPayload) == 0x000008, "Wrong alignment on FAccelBytePresenceBroadcastEventPayload");
static_assert(sizeof(FAccelBytePresenceBroadcastEventPayload) == 0x000060, "Wrong size on FAccelBytePresenceBroadcastEventPayload");
static_assert(offsetof(FAccelBytePresenceBroadcastEventPayload, Flight_id) == 0x000000, "Member 'FAccelBytePresenceBroadcastEventPayload::Flight_id' has a wrong offset!");
static_assert(offsetof(FAccelBytePresenceBroadcastEventPayload, Platform_name) == 0x000010, "Member 'FAccelBytePresenceBroadcastEventPayload::Platform_name' has a wrong offset!");
static_assert(offsetof(FAccelBytePresenceBroadcastEventPayload, Game_state) == 0x000020, "Member 'FAccelBytePresenceBroadcastEventPayload::Game_state' has a wrong offset!");
static_assert(offsetof(FAccelBytePresenceBroadcastEventPayload, Game_context) == 0x000030, "Member 'FAccelBytePresenceBroadcastEventPayload::Game_context' has a wrong offset!");
static_assert(offsetof(FAccelBytePresenceBroadcastEventPayload, Additional_data) == 0x000040, "Member 'FAccelBytePresenceBroadcastEventPayload::Additional_data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonGroupsResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsReasonGroupsResponse final
{
public:
	TArray<struct FAccelByteModelsReasonGroupsItem> Data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonGroupsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReasonGroupsResponse");
static_assert(sizeof(FAccelByteModelsReasonGroupsResponse) == 0x000050, "Wrong size on FAccelByteModelsReasonGroupsResponse");
static_assert(offsetof(FAccelByteModelsReasonGroupsResponse, Data) == 0x000000, "Member 'FAccelByteModelsReasonGroupsResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonGroupsResponse, Paging) == 0x000010, "Member 'FAccelByteModelsReasonGroupsResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitResponse
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsReportingSubmitResponse final
{
public:
	EAccelByteReportingCategory                   Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Namespace;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectID;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectType;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketID;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateAt;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtensionCategory;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitResponse");
static_assert(sizeof(FAccelByteModelsReportingSubmitResponse) == 0x000098, "Wrong size on FAccelByteModelsReportingSubmitResponse");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, Category) == 0x000000, "Member 'FAccelByteModelsReportingSubmitResponse::Category' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, Namespace) == 0x000008, "Member 'FAccelByteModelsReportingSubmitResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, ObjectID) == 0x000018, "Member 'FAccelByteModelsReportingSubmitResponse::ObjectID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, ObjectType) == 0x000028, "Member 'FAccelByteModelsReportingSubmitResponse::ObjectType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, Status) == 0x000038, "Member 'FAccelByteModelsReportingSubmitResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, TicketID) == 0x000048, "Member 'FAccelByteModelsReportingSubmitResponse::TicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, UpdateAt) == 0x000058, "Member 'FAccelByteModelsReportingSubmitResponse::UpdateAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, UserID) == 0x000068, "Member 'FAccelByteModelsReportingSubmitResponse::UserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, CreatedAt) == 0x000078, "Member 'FAccelByteModelsReportingSubmitResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, ExtensionCategory) == 0x000088, "Member 'FAccelByteModelsReportingSubmitResponse::ExtensionCategory' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitData
// 0x0010 (0x0078 - 0x0068)
struct FAccelByteModelsReportingSubmitData final : public FAccelByteModelsReportingSubmitDataBase
{
public:
	struct FAccelByteModelsReportingAdditionalInfo AdditionalInfo;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitData) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitData");
static_assert(sizeof(FAccelByteModelsReportingSubmitData) == 0x000078, "Wrong size on FAccelByteModelsReportingSubmitData");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, AdditionalInfo) == 0x000068, "Member 'FAccelByteModelsReportingSubmitData::AdditionalInfo' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonPaging
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUserSeasonPaging final
{
public:
	class FString                                 Previous;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserSeasonPaging) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonPaging");
static_assert(sizeof(FAccelByteModelsUserSeasonPaging) == 0x000020, "Wrong size on FAccelByteModelsUserSeasonPaging");
static_assert(offsetof(FAccelByteModelsUserSeasonPaging, Previous) == 0x000000, "Member 'FAccelByteModelsUserSeasonPaging::Previous' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonPaging, Next) == 0x000010, "Member 'FAccelByteModelsUserSeasonPaging::Next' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonExpHistory
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUserSeasonExpHistory final
{
public:
	TArray<struct FAccelByteModelsUserSeasonData> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserSeasonPaging       Paging;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonExpHistory) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonExpHistory");
static_assert(sizeof(FAccelByteModelsUserSeasonExpHistory) == 0x000038, "Wrong size on FAccelByteModelsUserSeasonExpHistory");
static_assert(offsetof(FAccelByteModelsUserSeasonExpHistory, Data) == 0x000000, "Member 'FAccelByteModelsUserSeasonExpHistory::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonExpHistory, Paging) == 0x000010, "Member 'FAccelByteModelsUserSeasonExpHistory::Paging' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonExpHistory, Total) == 0x000030, "Member 'FAccelByteModelsUserSeasonExpHistory::Total' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonClaimRewardResponseJsonWrapper
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsSeasonClaimRewardResponseJsonWrapper final
{
public:
	TMap<int32, struct FJsonObjectWrapper>        ToClaimRewards;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FJsonObjectWrapper>        ClaimingRewards;                                   // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonClaimRewardResponseJsonWrapper");
static_assert(sizeof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper) == 0x0000A0, "Wrong size on FAccelByteModelsSeasonClaimRewardResponseJsonWrapper");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper, ToClaimRewards) == 0x000000, "Member 'FAccelByteModelsSeasonClaimRewardResponseJsonWrapper::ToClaimRewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper, ClaimingRewards) == 0x000050, "Member 'FAccelByteModelsSeasonClaimRewardResponseJsonWrapper::ClaimingRewards' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonClaimRewardRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsSeasonClaimRewardRequest final
{
public:
	class FString                                 PassCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardCode;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonClaimRewardRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonClaimRewardRequest");
static_assert(sizeof(FAccelByteModelsSeasonClaimRewardRequest) == 0x000028, "Wrong size on FAccelByteModelsSeasonClaimRewardRequest");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardRequest, PassCode) == 0x000000, "Member 'FAccelByteModelsSeasonClaimRewardRequest::PassCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardRequest, TierIndex) == 0x000010, "Member 'FAccelByteModelsSeasonClaimRewardRequest::TierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardRequest, RewardCode) == 0x000018, "Member 'FAccelByteModelsSeasonClaimRewardRequest::RewardCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassTierJsonObject
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsSeasonPassTierJsonObject final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Rewards;                                           // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassTierJsonObject) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassTierJsonObject");
static_assert(sizeof(FAccelByteModelsSeasonPassTierJsonObject) == 0x000038, "Wrong size on FAccelByteModelsSeasonPassTierJsonObject");
static_assert(offsetof(FAccelByteModelsSeasonPassTierJsonObject, Id) == 0x000000, "Member 'FAccelByteModelsSeasonPassTierJsonObject::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassTierJsonObject, RequiredExp) == 0x000010, "Member 'FAccelByteModelsSeasonPassTierJsonObject::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassTierJsonObject, Rewards) == 0x000018, "Member 'FAccelByteModelsSeasonPassTierJsonObject::Rewards' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonTierRewardAsJsonObject
// 0x0138 (0x0138 - 0x0000)
struct FAccelByteModelsSeasonTierRewardAsJsonObject final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TierItemId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoClaim;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PassCodes;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassStatus                    Status;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishedAt;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPass>     Passes;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FAccelByteModelsSeasonPassReward> Rewards;                            // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPassTierJsonObject> Tiers;                                   // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonTierRewardAsJsonObject) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonTierRewardAsJsonObject");
static_assert(sizeof(FAccelByteModelsSeasonTierRewardAsJsonObject) == 0x000138, "Wrong size on FAccelByteModelsSeasonTierRewardAsJsonObject");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Title) == 0x000000, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Description) == 0x000010, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Id) == 0x000020, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Namespace) == 0x000030, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Name) == 0x000040, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Start) == 0x000050, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, End) == 0x000058, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, TierItemId) == 0x000060, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::TierItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, AutoClaim) == 0x000070, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::AutoClaim' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Images) == 0x000078, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, PassCodes) == 0x000088, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::PassCodes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Status) == 0x000098, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, PublishedAt) == 0x0000A0, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::PublishedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Language) == 0x0000A8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, CreatedAt) == 0x0000B8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, UpdatedAt) == 0x0000C0, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Passes) == 0x0000C8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Passes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Rewards) == 0x0000D8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Rewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Tiers) == 0x000128, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Tiers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteSeasonPassExcessStrategy
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteSeasonPassExcessStrategy final
{
public:
	EAccelByteSeasonPassStrategyMethod            Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PercentPerExp;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteSeasonPassExcessStrategy) == 0x000008, "Wrong alignment on FAccelByteSeasonPassExcessStrategy");
static_assert(sizeof(FAccelByteSeasonPassExcessStrategy) == 0x000020, "Wrong size on FAccelByteSeasonPassExcessStrategy");
static_assert(offsetof(FAccelByteSeasonPassExcessStrategy, Method) == 0x000000, "Member 'FAccelByteSeasonPassExcessStrategy::Method' has a wrong offset!");
static_assert(offsetof(FAccelByteSeasonPassExcessStrategy, Currency) == 0x000008, "Member 'FAccelByteSeasonPassExcessStrategy::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteSeasonPassExcessStrategy, PercentPerExp) == 0x000018, "Member 'FAccelByteSeasonPassExcessStrategy::PercentPerExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserUpdateRequest
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsSessionBrowserUpdateRequest final
{
public:
	int32                                         Game_current_player;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_max_player;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserUpdateRequest) == 0x000004, "Wrong alignment on FAccelByteModelsSessionBrowserUpdateRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserUpdateRequest) == 0x000008, "Wrong size on FAccelByteModelsSessionBrowserUpdateRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserUpdateRequest, Game_current_player) == 0x000000, "Member 'FAccelByteModelsSessionBrowserUpdateRequest::Game_current_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserUpdateRequest, Game_max_player) == 0x000004, "Member 'FAccelByteModelsSessionBrowserUpdateRequest::Game_max_player' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserCreateRequest
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsSessionBrowserCreateRequest final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_type;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsSessionBrowserGameSetting Game_session_setting;                           // 0x0040(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserCreateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserCreateRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserCreateRequest) == 0x0000A8, "Wrong size on FAccelByteModelsSessionBrowserCreateRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Namespace) == 0x000000, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Session_type) == 0x000010, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Session_type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Username) == 0x000020, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Username' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Game_version) == 0x000030, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Game_session_setting) == 0x000040, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Game_session_setting' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2NativeSessionSyncNotif
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsV2NativeSessionSyncNotif final
{
public:
	class FString                                 PlatformName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformSessionID;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2NativeSessionSyncNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2NativeSessionSyncNotif");
static_assert(sizeof(FAccelByteModelsV2NativeSessionSyncNotif) == 0x000040, "Wrong size on FAccelByteModelsV2NativeSessionSyncNotif");
static_assert(offsetof(FAccelByteModelsV2NativeSessionSyncNotif, PlatformName) == 0x000000, "Member 'FAccelByteModelsV2NativeSessionSyncNotif::PlatformName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2NativeSessionSyncNotif, PlatformSessionID) == 0x000010, "Member 'FAccelByteModelsV2NativeSessionSyncNotif::PlatformSessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2NativeSessionSyncNotif, Namespace) == 0x000020, "Member 'FAccelByteModelsV2NativeSessionSyncNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2NativeSessionSyncNotif, SessionID) == 0x000030, "Member 'FAccelByteModelsV2NativeSessionSyncNotif::SessionID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionRecentPlayers
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2SessionRecentPlayers final
{
public:
	TArray<struct FAccelByteModelsV2SessionRecentPlayer> Data;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionRecentPlayers) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionRecentPlayers");
static_assert(sizeof(FAccelByteModelsV2SessionRecentPlayers) == 0x000010, "Wrong size on FAccelByteModelsV2SessionRecentPlayers");
static_assert(offsetof(FAccelByteModelsV2SessionRecentPlayers, Data) == 0x000000, "Member 'FAccelByteModelsV2SessionRecentPlayers::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionEndedEvent
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsV2GameSessionEndedEvent final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TextChat;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsV2GameSessionEndedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionEndedEvent");
static_assert(sizeof(FAccelByteModelsV2GameSessionEndedEvent) == 0x000018, "Wrong size on FAccelByteModelsV2GameSessionEndedEvent");
static_assert(offsetof(FAccelByteModelsV2GameSessionEndedEvent, SessionID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionEndedEvent::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionEndedEvent, TextChat) == 0x000010, "Member 'FAccelByteModelsV2GameSessionEndedEvent::TextChat' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2SessionStorageChangedEvent
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsV2SessionStorageChangedEvent final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorUserID;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeader;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     StorageChanges;                                    // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2SessionStorageChangedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2SessionStorageChangedEvent");
static_assert(sizeof(FAccelByteModelsV2SessionStorageChangedEvent) == 0x000058, "Wrong size on FAccelByteModelsV2SessionStorageChangedEvent");
static_assert(offsetof(FAccelByteModelsV2SessionStorageChangedEvent, Namespace) == 0x000000, "Member 'FAccelByteModelsV2SessionStorageChangedEvent::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionStorageChangedEvent, SessionID) == 0x000010, "Member 'FAccelByteModelsV2SessionStorageChangedEvent::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionStorageChangedEvent, ActorUserID) == 0x000020, "Member 'FAccelByteModelsV2SessionStorageChangedEvent::ActorUserID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionStorageChangedEvent, IsLeader) == 0x000030, "Member 'FAccelByteModelsV2SessionStorageChangedEvent::IsLeader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2SessionStorageChangedEvent, StorageChanges) == 0x000038, "Member 'FAccelByteModelsV2SessionStorageChangedEvent::StorageChanges' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2ServerQueryGameSessionsRequest
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsV2ServerQueryGameSessionsRequest final
{
public:
	EAccelByteV2GameSessionDsStatus               Status;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2GameSessionDsStatus               StatusV2;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPool;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteV2SessionJoinability                Joinability;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MemberID;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConfigurationName;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FromTime;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ToTime;                                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DsPodName;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSoftDeleted;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPersistent;                                      // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderBy;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Order;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2ServerQueryGameSessionsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2ServerQueryGameSessionsRequest");
static_assert(sizeof(FAccelByteModelsV2ServerQueryGameSessionsRequest) == 0x0000A8, "Wrong size on FAccelByteModelsV2ServerQueryGameSessionsRequest");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, Status) == 0x000000, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, StatusV2) == 0x000001, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::StatusV2' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, SessionID) == 0x000008, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, MatchPool) == 0x000018, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::MatchPool' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, GameMode) == 0x000028, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, Joinability) == 0x000038, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::Joinability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, MemberID) == 0x000040, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::MemberID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, ConfigurationName) == 0x000050, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::ConfigurationName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, FromTime) == 0x000060, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::FromTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, ToTime) == 0x000068, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::ToTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, DsPodName) == 0x000070, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::DsPodName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, IsSoftDeleted) == 0x000080, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::IsSoftDeleted' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, IsPersistent) == 0x000081, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::IsPersistent' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, OrderBy) == 0x000088, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::OrderBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2ServerQueryGameSessionsRequest, Order) == 0x000098, "Member 'FAccelByteModelsV2ServerQueryGameSessionsRequest::Order' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2StorePlayerAttributesRequest
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsV2StorePlayerAttributesRequest final
{
public:
	class FString                                 CurrentPlatform;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Data;                                              // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayEnabled;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsV2PlayerAttributesPlatform> Platforms;                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2StorePlayerAttributesRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2StorePlayerAttributesRequest");
static_assert(sizeof(FAccelByteModelsV2StorePlayerAttributesRequest) == 0x000048, "Wrong size on FAccelByteModelsV2StorePlayerAttributesRequest");
static_assert(offsetof(FAccelByteModelsV2StorePlayerAttributesRequest, CurrentPlatform) == 0x000000, "Member 'FAccelByteModelsV2StorePlayerAttributesRequest::CurrentPlatform' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StorePlayerAttributesRequest, Data) == 0x000010, "Member 'FAccelByteModelsV2StorePlayerAttributesRequest::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StorePlayerAttributesRequest, CrossplayEnabled) == 0x000030, "Member 'FAccelByteModelsV2StorePlayerAttributesRequest::CrossplayEnabled' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2StorePlayerAttributesRequest, Platforms) == 0x000038, "Member 'FAccelByteModelsV2StorePlayerAttributesRequest::Platforms' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2QueryPartiesResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2QueryPartiesResponse final
{
public:
	TArray<struct FAccelByteModelsV2PartySession> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2QueryPartiesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsV2QueryPartiesResponse");
static_assert(sizeof(FAccelByteModelsV2QueryPartiesResponse) == 0x000010, "Wrong size on FAccelByteModelsV2QueryPartiesResponse");
static_assert(offsetof(FAccelByteModelsV2QueryPartiesResponse, Data) == 0x000000, "Member 'FAccelByteModelsV2QueryPartiesResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionMembersChangedEvent
// 0x0330 (0x0330 - 0x0000)
struct FAccelByteModelsV2GameSessionMembersChangedEvent final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 JoinerID;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderID;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2GameSession          Session;                                           // 0x0040(0x02F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionMembersChangedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionMembersChangedEvent");
static_assert(sizeof(FAccelByteModelsV2GameSessionMembersChangedEvent) == 0x000330, "Wrong size on FAccelByteModelsV2GameSessionMembersChangedEvent");
static_assert(offsetof(FAccelByteModelsV2GameSessionMembersChangedEvent, SessionID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionMembersChangedEvent::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionMembersChangedEvent, Members) == 0x000010, "Member 'FAccelByteModelsV2GameSessionMembersChangedEvent::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionMembersChangedEvent, JoinerID) == 0x000020, "Member 'FAccelByteModelsV2GameSessionMembersChangedEvent::JoinerID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionMembersChangedEvent, LeaderID) == 0x000030, "Member 'FAccelByteModelsV2GameSessionMembersChangedEvent::LeaderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionMembersChangedEvent, Session) == 0x000040, "Member 'FAccelByteModelsV2GameSessionMembersChangedEvent::Session' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2GameSessionUserInvitedEvent
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2GameSessionUserInvitedEvent final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2GameSessionUserInvitedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2GameSessionUserInvitedEvent");
static_assert(sizeof(FAccelByteModelsV2GameSessionUserInvitedEvent) == 0x000020, "Wrong size on FAccelByteModelsV2GameSessionUserInvitedEvent");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserInvitedEvent, SessionID) == 0x000000, "Member 'FAccelByteModelsV2GameSessionUserInvitedEvent::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2GameSessionUserInvitedEvent, SenderID) == 0x000010, "Member 'FAccelByteModelsV2GameSessionUserInvitedEvent::SenderID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyUserKickedEvent
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2PartyUserKickedEvent final
{
public:
	class FString                                 PartyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyUserKickedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyUserKickedEvent");
static_assert(sizeof(FAccelByteModelsV2PartyUserKickedEvent) == 0x000010, "Wrong size on FAccelByteModelsV2PartyUserKickedEvent");
static_assert(offsetof(FAccelByteModelsV2PartyUserKickedEvent, PartyID) == 0x000000, "Member 'FAccelByteModelsV2PartyUserKickedEvent::PartyID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyUserJoinedEvent
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2PartyUserJoinedEvent final
{
public:
	class FString                                 PartyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyUserJoinedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyUserJoinedEvent");
static_assert(sizeof(FAccelByteModelsV2PartyUserJoinedEvent) == 0x000020, "Wrong size on FAccelByteModelsV2PartyUserJoinedEvent");
static_assert(offsetof(FAccelByteModelsV2PartyUserJoinedEvent, PartyID) == 0x000000, "Member 'FAccelByteModelsV2PartyUserJoinedEvent::PartyID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUserJoinedEvent, Members) == 0x000010, "Member 'FAccelByteModelsV2PartyUserJoinedEvent::Members' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyMembersChangedEvent
// 0x01C8 (0x01C8 - 0x0000)
struct FAccelByteModelsV2PartyMembersChangedEvent final
{
public:
	class FString                                 PartyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinerID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderID;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsV2SessionUser>  Members;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2PartySession         Session;                                           // 0x0040(0x0188)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyMembersChangedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyMembersChangedEvent");
static_assert(sizeof(FAccelByteModelsV2PartyMembersChangedEvent) == 0x0001C8, "Wrong size on FAccelByteModelsV2PartyMembersChangedEvent");
static_assert(offsetof(FAccelByteModelsV2PartyMembersChangedEvent, PartyID) == 0x000000, "Member 'FAccelByteModelsV2PartyMembersChangedEvent::PartyID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyMembersChangedEvent, JoinerID) == 0x000010, "Member 'FAccelByteModelsV2PartyMembersChangedEvent::JoinerID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyMembersChangedEvent, LeaderID) == 0x000020, "Member 'FAccelByteModelsV2PartyMembersChangedEvent::LeaderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyMembersChangedEvent, Members) == 0x000030, "Member 'FAccelByteModelsV2PartyMembersChangedEvent::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyMembersChangedEvent, Session) == 0x000040, "Member 'FAccelByteModelsV2PartyMembersChangedEvent::Session' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyInvitedEvent
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2PartyInvitedEvent final
{
public:
	class FString                                 SenderID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyInvitedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyInvitedEvent");
static_assert(sizeof(FAccelByteModelsV2PartyInvitedEvent) == 0x000020, "Wrong size on FAccelByteModelsV2PartyInvitedEvent");
static_assert(offsetof(FAccelByteModelsV2PartyInvitedEvent, SenderID) == 0x000000, "Member 'FAccelByteModelsV2PartyInvitedEvent::SenderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyInvitedEvent, PartyID) == 0x000010, "Member 'FAccelByteModelsV2PartyInvitedEvent::PartyID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyUserInvitedEvent
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsV2PartyUserInvitedEvent final
{
public:
	class FString                                 SenderID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyUserInvitedEvent) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyUserInvitedEvent");
static_assert(sizeof(FAccelByteModelsV2PartyUserInvitedEvent) == 0x000020, "Wrong size on FAccelByteModelsV2PartyUserInvitedEvent");
static_assert(offsetof(FAccelByteModelsV2PartyUserInvitedEvent, SenderID) == 0x000000, "Member 'FAccelByteModelsV2PartyUserInvitedEvent::SenderID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2PartyUserInvitedEvent, PartyID) == 0x000010, "Member 'FAccelByteModelsV2PartyUserInvitedEvent::PartyID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2PartyLeaderPromotionRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsV2PartyLeaderPromotionRequest final
{
public:
	class FString                                 LeaderID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2PartyLeaderPromotionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsV2PartyLeaderPromotionRequest");
static_assert(sizeof(FAccelByteModelsV2PartyLeaderPromotionRequest) == 0x000010, "Wrong size on FAccelByteModelsV2PartyLeaderPromotionRequest");
static_assert(offsetof(FAccelByteModelsV2PartyLeaderPromotionRequest, LeaderID) == 0x000000, "Member 'FAccelByteModelsV2PartyLeaderPromotionRequest::LeaderID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsV2DSStatusChangedNotif
// 0x0438 (0x0438 - 0x0000)
struct FAccelByteModelsV2DSStatusChangedNotif final
{
public:
	struct FAccelByteModelsServerInfo             GameServer;                                        // 0x0000(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsV2GameSession          Session;                                           // 0x0148(0x02F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsV2DSStatusChangedNotif) == 0x000008, "Wrong alignment on FAccelByteModelsV2DSStatusChangedNotif");
static_assert(sizeof(FAccelByteModelsV2DSStatusChangedNotif) == 0x000438, "Wrong size on FAccelByteModelsV2DSStatusChangedNotif");
static_assert(offsetof(FAccelByteModelsV2DSStatusChangedNotif, GameServer) == 0x000000, "Member 'FAccelByteModelsV2DSStatusChangedNotif::GameServer' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2DSStatusChangedNotif, SessionID) == 0x000128, "Member 'FAccelByteModelsV2DSStatusChangedNotif::SessionID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2DSStatusChangedNotif, Error) == 0x000138, "Member 'FAccelByteModelsV2DSStatusChangedNotif::Error' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsV2DSStatusChangedNotif, Session) == 0x000148, "Member 'FAccelByteModelsV2DSStatusChangedNotif::Session' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMultipleStatSortBy
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMultipleStatSortBy final
{
public:
	TArray<EAccelByteStatisticSortBy>             SortBy;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMultipleStatSortBy) == 0x000008, "Wrong alignment on FAccelByteModelsMultipleStatSortBy");
static_assert(sizeof(FAccelByteModelsMultipleStatSortBy) == 0x000010, "Wrong size on FAccelByteModelsMultipleStatSortBy");
static_assert(offsetof(FAccelByteModelsMultipleStatSortBy, SortBy) == 0x000000, "Member 'FAccelByteModelsMultipleStatSortBy::SortBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatCycleItemPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUserStatCycleItemPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsUserStatCycleItemInfo> Data;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatCycleItemPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatCycleItemPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsUserStatCycleItemPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsUserStatCycleItemPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsUserStatCycleItemPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatCycleItemPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsUserStatCycleItemPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateUserStatItemValueResponse
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsUpdateUserStatItemValueResponse final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateUserStatItemValueResponse) == 0x000004, "Wrong alignment on FAccelByteModelsUpdateUserStatItemValueResponse");
static_assert(sizeof(FAccelByteModelsUpdateUserStatItemValueResponse) == 0x000004, "Wrong size on FAccelByteModelsUpdateUserStatItemValueResponse");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemValueResponse, CurrentValue) == 0x000000, "Member 'FAccelByteModelsUpdateUserStatItemValueResponse::CurrentValue' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicUpdateUserStatItem
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsPublicUpdateUserStatItem final
{
public:
	EAccelByteStatisticUpdateStrategy             UpdateStrategy;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicUpdateUserStatItem) == 0x000008, "Wrong alignment on FAccelByteModelsPublicUpdateUserStatItem");
static_assert(sizeof(FAccelByteModelsPublicUpdateUserStatItem) == 0x000028, "Wrong size on FAccelByteModelsPublicUpdateUserStatItem");
static_assert(offsetof(FAccelByteModelsPublicUpdateUserStatItem, UpdateStrategy) == 0x000000, "Member 'FAccelByteModelsPublicUpdateUserStatItem::UpdateStrategy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUpdateUserStatItem, Value) == 0x000004, "Member 'FAccelByteModelsPublicUpdateUserStatItem::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUpdateUserStatItem, AdditionalData) == 0x000008, "Member 'FAccelByteModelsPublicUpdateUserStatItem::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateUserStatItemsResponse
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsUpdateUserStatItemsResponse final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Details;                                           // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateUserStatItemsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateUserStatItemsResponse");
static_assert(sizeof(FAccelByteModelsUpdateUserStatItemsResponse) == 0x000048, "Wrong size on FAccelByteModelsUpdateUserStatItemsResponse");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemsResponse, Success) == 0x000000, "Member 'FAccelByteModelsUpdateUserStatItemsResponse::Success' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemsResponse, StatCode) == 0x000008, "Member 'FAccelByteModelsUpdateUserStatItemsResponse::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemsResponse, Details) == 0x000018, "Member 'FAccelByteModelsUpdateUserStatItemsResponse::Details' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItemsResponse, UserId) == 0x000038, "Member 'FAccelByteModelsUpdateUserStatItemsResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateUserStatItem
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsUpdateUserStatItem final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalKey;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticUpdateStrategy             UpdateStrategy;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     AdditionalData;                                    // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateUserStatItem) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateUserStatItem");
static_assert(sizeof(FAccelByteModelsUpdateUserStatItem) == 0x000058, "Wrong size on FAccelByteModelsUpdateUserStatItem");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItem, UserId) == 0x000000, "Member 'FAccelByteModelsUpdateUserStatItem::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItem, AdditionalKey) == 0x000010, "Member 'FAccelByteModelsUpdateUserStatItem::AdditionalKey' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItem, StatCode) == 0x000020, "Member 'FAccelByteModelsUpdateUserStatItem::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItem, UpdateStrategy) == 0x000030, "Member 'FAccelByteModelsUpdateUserStatItem::UpdateStrategy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItem, Value) == 0x000034, "Member 'FAccelByteModelsUpdateUserStatItem::Value' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateUserStatItem, AdditionalData) == 0x000038, "Member 'FAccelByteModelsUpdateUserStatItem::AdditionalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkStatItemCreate
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkStatItemCreate final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkStatItemCreate) == 0x000008, "Wrong alignment on FAccelByteModelsBulkStatItemCreate");
static_assert(sizeof(FAccelByteModelsBulkStatItemCreate) == 0x000010, "Wrong size on FAccelByteModelsBulkStatItemCreate");
static_assert(offsetof(FAccelByteModelsBulkStatItemCreate, StatCode) == 0x000000, "Member 'FAccelByteModelsBulkStatItemCreate::StatCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserStatItemInc
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsBulkUserStatItemInc final
{
public:
	float                                         inc;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 userId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 statCode;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserStatItemInc) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserStatItemInc");
static_assert(sizeof(FAccelByteModelsBulkUserStatItemInc) == 0x000028, "Wrong size on FAccelByteModelsBulkUserStatItemInc");
static_assert(offsetof(FAccelByteModelsBulkUserStatItemInc, inc) == 0x000000, "Member 'FAccelByteModelsBulkUserStatItemInc::inc' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatItemInc, userId) == 0x000008, "Member 'FAccelByteModelsBulkUserStatItemInc::userId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatItemInc, statCode) == 0x000018, "Member 'FAccelByteModelsBulkUserStatItemInc::statCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatItemIncResult
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsStatItemIncResult final
{
public:
	float                                         currentValue;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatItemIncResult) == 0x000004, "Wrong alignment on FAccelByteModelsStatItemIncResult");
static_assert(sizeof(FAccelByteModelsStatItemIncResult) == 0x000004, "Wrong size on FAccelByteModelsStatItemIncResult");
static_assert(offsetof(FAccelByteModelsStatItemIncResult, currentValue) == 0x000000, "Member 'FAccelByteModelsStatItemIncResult::currentValue' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTurnManagerMetric
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsTurnManagerMetric final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTurnManagerMetric) == 0x000008, "Wrong alignment on FAccelByteModelsTurnManagerMetric");
static_assert(sizeof(FAccelByteModelsTurnManagerMetric) == 0x000020, "Wrong size on FAccelByteModelsTurnManagerMetric");
static_assert(offsetof(FAccelByteModelsTurnManagerMetric, Region) == 0x000000, "Member 'FAccelByteModelsTurnManagerMetric::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnManagerMetric, Type) == 0x000010, "Member 'FAccelByteModelsTurnManagerMetric::Type' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTurnServerList
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsTurnServerList final
{
public:
	TArray<struct FAccelByteModelsTurnServer>     Servers;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTurnServerList) == 0x000008, "Wrong alignment on FAccelByteModelsTurnServerList");
static_assert(sizeof(FAccelByteModelsTurnServerList) == 0x000010, "Wrong size on FAccelByteModelsTurnServerList");
static_assert(offsetof(FAccelByteModelsTurnServerList, Servers) == 0x000000, "Member 'FAccelByteModelsTurnServerList::Servers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUpdateContentFileLocationRequestV2
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUGCUpdateContentFileLocationRequestV2 final
{
public:
	class FString                                 FileExtension;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileLocation;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUpdateContentFileLocationRequestV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUpdateContentFileLocationRequestV2");
static_assert(sizeof(FAccelByteModelsUGCUpdateContentFileLocationRequestV2) == 0x000020, "Wrong size on FAccelByteModelsUGCUpdateContentFileLocationRequestV2");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationRequestV2, FileExtension) == 0x000000, "Member 'FAccelByteModelsUGCUpdateContentFileLocationRequestV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUpdateContentFileLocationRequestV2, FileLocation) == 0x000010, "Member 'FAccelByteModelsUGCUpdateContentFileLocationRequestV2::FileLocation' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsModifyUGCRequestV2
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsModifyUGCRequestV2 final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0040(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsModifyUGCRequestV2) == 0x000008, "Wrong alignment on FAccelByteModelsModifyUGCRequestV2");
static_assert(sizeof(FAccelByteModelsModifyUGCRequestV2) == 0x000060, "Wrong size on FAccelByteModelsModifyUGCRequestV2");
static_assert(offsetof(FAccelByteModelsModifyUGCRequestV2, Name) == 0x000000, "Member 'FAccelByteModelsModifyUGCRequestV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsModifyUGCRequestV2, Type) == 0x000010, "Member 'FAccelByteModelsModifyUGCRequestV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsModifyUGCRequestV2, SubType) == 0x000020, "Member 'FAccelByteModelsModifyUGCRequestV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsModifyUGCRequestV2, Tags) == 0x000030, "Member 'FAccelByteModelsModifyUGCRequestV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsModifyUGCRequestV2, CustomAttributes) == 0x000040, "Member 'FAccelByteModelsModifyUGCRequestV2::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreateUGCRequestV2
// 0x0080 (0x0080 - 0x0000)
struct FAccelByteModelsCreateUGCRequestV2 final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0060(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreateUGCRequestV2) == 0x000008, "Wrong alignment on FAccelByteModelsCreateUGCRequestV2");
static_assert(sizeof(FAccelByteModelsCreateUGCRequestV2) == 0x000080, "Wrong size on FAccelByteModelsCreateUGCRequestV2");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, ContentType) == 0x000000, "Member 'FAccelByteModelsCreateUGCRequestV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, FileExtension) == 0x000010, "Member 'FAccelByteModelsCreateUGCRequestV2::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, Name) == 0x000020, "Member 'FAccelByteModelsCreateUGCRequestV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, Type) == 0x000030, "Member 'FAccelByteModelsCreateUGCRequestV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, SubType) == 0x000040, "Member 'FAccelByteModelsCreateUGCRequestV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, Tags) == 0x000050, "Member 'FAccelByteModelsCreateUGCRequestV2::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateUGCRequestV2, CustomAttributes) == 0x000060, "Member 'FAccelByteModelsCreateUGCRequestV2::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCFollowedUsersResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCFollowedUsersResponse final
{
public:
	TArray<struct FAccelByteModelsUGCGetListFollowersResponse> Data;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCFollowedUsersResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCFollowedUsersResponse");
static_assert(sizeof(FAccelByteModelsUGCFollowedUsersResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCFollowedUsersResponse");
static_assert(offsetof(FAccelByteModelsUGCFollowedUsersResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCFollowedUsersResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCFollowedUsersResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCFollowedUsersResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCGetFollowedContentResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCGetFollowedContentResponse final
{
public:
	TArray<struct FAccelByteModelScreenshots>     Screenshots;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCGetFollowedContentResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCGetFollowedContentResponse");
static_assert(sizeof(FAccelByteModelsUGCGetFollowedContentResponse) == 0x000010, "Wrong size on FAccelByteModelsUGCGetFollowedContentResponse");
static_assert(offsetof(FAccelByteModelsUGCGetFollowedContentResponse, Screenshots) == 0x000000, "Member 'FAccelByteModelsUGCGetFollowedContentResponse::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCFilterRequestV2
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUGCFilterRequestV2 final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCFilterRequestV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCFilterRequestV2");
static_assert(sizeof(FAccelByteModelsUGCFilterRequestV2) == 0x000040, "Wrong size on FAccelByteModelsUGCFilterRequestV2");
static_assert(offsetof(FAccelByteModelsUGCFilterRequestV2, Name) == 0x000000, "Member 'FAccelByteModelsUGCFilterRequestV2::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCFilterRequestV2, Type) == 0x000010, "Member 'FAccelByteModelsUGCFilterRequestV2::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCFilterRequestV2, SubType) == 0x000020, "Member 'FAccelByteModelsUGCFilterRequestV2::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCFilterRequestV2, Tags) == 0x000030, "Member 'FAccelByteModelsUGCFilterRequestV2::Tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUploadScreenshotV2
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUGCUploadScreenshotV2 final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUploadScreenshotV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUploadScreenshotV2");
static_assert(sizeof(FAccelByteModelsUGCUploadScreenshotV2) == 0x000030, "Wrong size on FAccelByteModelsUGCUploadScreenshotV2");
static_assert(offsetof(FAccelByteModelsUGCUploadScreenshotV2, ContentType) == 0x000000, "Member 'FAccelByteModelsUGCUploadScreenshotV2::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUploadScreenshotV2, Description) == 0x000010, "Member 'FAccelByteModelsUGCUploadScreenshotV2::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCUploadScreenshotV2, FileExtension) == 0x000020, "Member 'FAccelByteModelsUGCUploadScreenshotV2::FileExtension' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCUploadScreenshotsRequestV2
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCUploadScreenshotsRequestV2 final
{
public:
	TArray<struct FAccelByteModelsUGCUploadScreenshotV2> Screenshots;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCUploadScreenshotsRequestV2) == 0x000008, "Wrong alignment on FAccelByteModelsUGCUploadScreenshotsRequestV2");
static_assert(sizeof(FAccelByteModelsUGCUploadScreenshotsRequestV2) == 0x000010, "Wrong size on FAccelByteModelsUGCUploadScreenshotsRequestV2");
static_assert(offsetof(FAccelByteModelsUGCUploadScreenshotsRequestV2, Screenshots) == 0x000000, "Member 'FAccelByteModelsUGCUploadScreenshotsRequestV2::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCScreenshotRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUGCScreenshotRequest final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCScreenshotRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCScreenshotRequest");
static_assert(sizeof(FAccelByteModelsUGCScreenshotRequest) == 0x000030, "Wrong size on FAccelByteModelsUGCScreenshotRequest");
static_assert(offsetof(FAccelByteModelsUGCScreenshotRequest, ContentType) == 0x000000, "Member 'FAccelByteModelsUGCScreenshotRequest::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshotRequest, Description) == 0x000010, "Member 'FAccelByteModelsUGCScreenshotRequest::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCScreenshotRequest, FileExtension) == 0x000020, "Member 'FAccelByteModelsUGCScreenshotRequest::FileExtension' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ContentRequest
// 0x0030 (0x0030 - 0x0000)
struct FContentRequest final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentRequest) == 0x000008, "Wrong alignment on FContentRequest");
static_assert(sizeof(FContentRequest) == 0x000030, "Wrong size on FContentRequest");
static_assert(offsetof(FContentRequest, ContentType) == 0x000000, "Member 'FContentRequest::ContentType' has a wrong offset!");
static_assert(offsetof(FContentRequest, Description) == 0x000010, "Member 'FContentRequest::Description' has a wrong offset!");
static_assert(offsetof(FContentRequest, FileExtension) == 0x000020, "Member 'FContentRequest::FileExtension' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCContentPageResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCContentPageResponse final
{
public:
	TArray<struct FAccelByteModelsUGCContentResponse> Data;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCContentPageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCContentPageResponse");
static_assert(sizeof(FAccelByteModelsUGCContentPageResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCContentPageResponse");
static_assert(offsetof(FAccelByteModelsUGCContentPageResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCContentPageResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentPageResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCContentPageResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCSearchContentsRequest
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsUGCSearchContentsRequest final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Creator;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtype;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsOfficial;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHidden;                                         // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUgcSortBy                           SortBy;                                            // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteUgcOrderBy                          OrderBy;                                           // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUGCSearchContentsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCSearchContentsRequest");
static_assert(sizeof(FAccelByteModelsUGCSearchContentsRequest) == 0x000070, "Wrong size on FAccelByteModelsUGCSearchContentsRequest");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, Name) == 0x000000, "Member 'FAccelByteModelsUGCSearchContentsRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, Creator) == 0x000010, "Member 'FAccelByteModelsUGCSearchContentsRequest::Creator' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, Type) == 0x000020, "Member 'FAccelByteModelsUGCSearchContentsRequest::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, Subtype) == 0x000030, "Member 'FAccelByteModelsUGCSearchContentsRequest::Subtype' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, Tags) == 0x000040, "Member 'FAccelByteModelsUGCSearchContentsRequest::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, bIsOfficial) == 0x000050, "Member 'FAccelByteModelsUGCSearchContentsRequest::bIsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, bIsHidden) == 0x000051, "Member 'FAccelByteModelsUGCSearchContentsRequest::bIsHidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, UserId) == 0x000058, "Member 'FAccelByteModelsUGCSearchContentsRequest::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, SortBy) == 0x000068, "Member 'FAccelByteModelsUGCSearchContentsRequest::SortBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCSearchContentsRequest, OrderBy) == 0x000069, "Member 'FAccelByteModelsUGCSearchContentsRequest::OrderBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCModifyContentShareCodeRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCModifyContentShareCodeRequest final
{
public:
	class FString                                 ShareCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCModifyContentShareCodeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCModifyContentShareCodeRequest");
static_assert(sizeof(FAccelByteModelsUGCModifyContentShareCodeRequest) == 0x000010, "Wrong size on FAccelByteModelsUGCModifyContentShareCodeRequest");
static_assert(offsetof(FAccelByteModelsUGCModifyContentShareCodeRequest, ShareCode) == 0x000000, "Member 'FAccelByteModelsUGCModifyContentShareCodeRequest::ShareCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.accelByteBulkGetUsersPlatformInfoResponse
// 0x0010 (0x0010 - 0x0000)
struct FaccelByteBulkGetUsersPlatformInfoResponse final
{
public:
	TArray<struct FaccelByteUserPlatformInfoData> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaccelByteBulkGetUsersPlatformInfoResponse) == 0x000008, "Wrong alignment on FaccelByteBulkGetUsersPlatformInfoResponse");
static_assert(sizeof(FaccelByteBulkGetUsersPlatformInfoResponse) == 0x000010, "Wrong size on FaccelByteBulkGetUsersPlatformInfoResponse");
static_assert(offsetof(FaccelByteBulkGetUsersPlatformInfoResponse, Data) == 0x000000, "Member 'FaccelByteBulkGetUsersPlatformInfoResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ThirdPartyPlatformTokenData
// 0x0028 (0x0028 - 0x0000)
struct FThirdPartyPlatformTokenData final
{
public:
	class FString                                 Platform_token;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Platform_token_expires_at;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sand_box_id;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThirdPartyPlatformTokenData) == 0x000008, "Wrong alignment on FThirdPartyPlatformTokenData");
static_assert(sizeof(FThirdPartyPlatformTokenData) == 0x000028, "Wrong size on FThirdPartyPlatformTokenData");
static_assert(offsetof(FThirdPartyPlatformTokenData, Platform_token) == 0x000000, "Member 'FThirdPartyPlatformTokenData::Platform_token' has a wrong offset!");
static_assert(offsetof(FThirdPartyPlatformTokenData, Platform_token_expires_at) == 0x000010, "Member 'FThirdPartyPlatformTokenData::Platform_token_expires_at' has a wrong offset!");
static_assert(offsetof(FThirdPartyPlatformTokenData, Sand_box_id) == 0x000018, "Member 'FThirdPartyPlatformTokenData::Sand_box_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ConflictLinkHeadlessAccountResult
// 0x00A0 (0x00A0 - 0x0000)
struct FConflictLinkHeadlessAccountResult final
{
public:
	struct FHeadlessAccount                       CurrentAccount;                                    // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHeadlessAccount                       HeadlessAccount;                                   // 0x0040(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bPlatformAlreadyLinked;                            // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatformLinkConflict;                             // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConflictLinkHeadlessAccountResult) == 0x000008, "Wrong alignment on FConflictLinkHeadlessAccountResult");
static_assert(sizeof(FConflictLinkHeadlessAccountResult) == 0x0000A0, "Wrong size on FConflictLinkHeadlessAccountResult");
static_assert(offsetof(FConflictLinkHeadlessAccountResult, CurrentAccount) == 0x000000, "Member 'FConflictLinkHeadlessAccountResult::CurrentAccount' has a wrong offset!");
static_assert(offsetof(FConflictLinkHeadlessAccountResult, HeadlessAccount) == 0x000040, "Member 'FConflictLinkHeadlessAccountResult::HeadlessAccount' has a wrong offset!");
static_assert(offsetof(FConflictLinkHeadlessAccountResult, bPlatformAlreadyLinked) == 0x000080, "Member 'FConflictLinkHeadlessAccountResult::bPlatformAlreadyLinked' has a wrong offset!");
static_assert(offsetof(FConflictLinkHeadlessAccountResult, PlatformId) == 0x000088, "Member 'FConflictLinkHeadlessAccountResult::PlatformId' has a wrong offset!");
static_assert(offsetof(FConflictLinkHeadlessAccountResult, bPlatformLinkConflict) == 0x000098, "Member 'FConflictLinkHeadlessAccountResult::bPlatformLinkConflict' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.LinkHeadlessAccountRequest
// 0x0020 (0x0020 - 0x0000)
struct FLinkHeadlessAccountRequest final
{
public:
	TArray<class FString>                         ChosenNamespaces;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OneTimeLinkCode;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkHeadlessAccountRequest) == 0x000008, "Wrong alignment on FLinkHeadlessAccountRequest");
static_assert(sizeof(FLinkHeadlessAccountRequest) == 0x000020, "Wrong size on FLinkHeadlessAccountRequest");
static_assert(offsetof(FLinkHeadlessAccountRequest, ChosenNamespaces) == 0x000000, "Member 'FLinkHeadlessAccountRequest::ChosenNamespaces' has a wrong offset!");
static_assert(offsetof(FLinkHeadlessAccountRequest, OneTimeLinkCode) == 0x000010, "Member 'FLinkHeadlessAccountRequest::OneTimeLinkCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetPublisherUserResponse
// 0x0020 (0x0020 - 0x0000)
struct FGetPublisherUserResponse final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPublisherUserResponse) == 0x000008, "Wrong alignment on FGetPublisherUserResponse");
static_assert(sizeof(FGetPublisherUserResponse) == 0x000020, "Wrong size on FGetPublisherUserResponse");
static_assert(offsetof(FGetPublisherUserResponse, Namespace) == 0x000000, "Member 'FGetPublisherUserResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FGetPublisherUserResponse, UserId) == 0x000010, "Member 'FGetPublisherUserResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BanUserRequest
// 0x0030 (0x0030 - 0x0000)
struct FBanUserRequest final
{
public:
	EBanType                                      Ban;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipNotif;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBanUserRequest) == 0x000008, "Wrong alignment on FBanUserRequest");
static_assert(sizeof(FBanUserRequest) == 0x000030, "Wrong size on FBanUserRequest");
static_assert(offsetof(FBanUserRequest, Ban) == 0x000000, "Member 'FBanUserRequest::Ban' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, Comment) == 0x000008, "Member 'FBanUserRequest::Comment' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, EndDate) == 0x000018, "Member 'FBanUserRequest::EndDate' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, Reason) == 0x000028, "Member 'FBanUserRequest::Reason' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, SkipNotif) == 0x000029, "Member 'FBanUserRequest::SkipNotif' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.User2FaSecretKey
// 0x0020 (0x0020 - 0x0000)
struct FUser2FaSecretKey final
{
public:
	class FString                                 SecretKey;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uri;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUser2FaSecretKey) == 0x000008, "Wrong alignment on FUser2FaSecretKey");
static_assert(sizeof(FUser2FaSecretKey) == 0x000020, "Wrong size on FUser2FaSecretKey");
static_assert(offsetof(FUser2FaSecretKey, SecretKey) == 0x000000, "Member 'FUser2FaSecretKey::SecretKey' has a wrong offset!");
static_assert(offsetof(FUser2FaSecretKey, Uri) == 0x000010, "Member 'FUser2FaSecretKey::Uri' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.User2FaBackupCode
// 0x0028 (0x0028 - 0x0000)
struct FUser2FaBackupCode final
{
public:
	int64                                         GeneratedAt;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InvalidCodes;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValidCodes;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUser2FaBackupCode) == 0x000008, "Wrong alignment on FUser2FaBackupCode");
static_assert(sizeof(FUser2FaBackupCode) == 0x000028, "Wrong size on FUser2FaBackupCode");
static_assert(offsetof(FUser2FaBackupCode, GeneratedAt) == 0x000000, "Member 'FUser2FaBackupCode::GeneratedAt' has a wrong offset!");
static_assert(offsetof(FUser2FaBackupCode, InvalidCodes) == 0x000008, "Member 'FUser2FaBackupCode::InvalidCodes' has a wrong offset!");
static_assert(offsetof(FUser2FaBackupCode, ValidCodes) == 0x000018, "Member 'FUser2FaBackupCode::ValidCodes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UserOtherPlatformInfo
// 0x0198 (0x0198 - 0x0000)
struct FUserOtherPlatformInfo final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBan>                           Bans;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeletionStatus;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmailVerified;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastDateOfBirthChangedTime;                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastEnabledChangedTime;                            // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamespaceRole>                 NamespaceRoles;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NewEmailAddress;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldEmailAddress;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPermission>                    Permissions;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PhoneNumber;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhoneVerified;                                     // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformDisplayName;                               // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeletionDate;                                      // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformAvatarUrl;                                 // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserOtherPlatformInfo) == 0x000008, "Wrong alignment on FUserOtherPlatformInfo");
static_assert(sizeof(FUserOtherPlatformInfo) == 0x000198, "Wrong size on FUserOtherPlatformInfo");
static_assert(offsetof(FUserOtherPlatformInfo, AuthType) == 0x000000, "Member 'FUserOtherPlatformInfo::AuthType' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Bans) == 0x000010, "Member 'FUserOtherPlatformInfo::Bans' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Country) == 0x000020, "Member 'FUserOtherPlatformInfo::Country' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, CreatedAt) == 0x000030, "Member 'FUserOtherPlatformInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DateOfBirth) == 0x000040, "Member 'FUserOtherPlatformInfo::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DeletionStatus) == 0x000050, "Member 'FUserOtherPlatformInfo::DeletionStatus' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DisplayName) == 0x000058, "Member 'FUserOtherPlatformInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, EmailAddress) == 0x000068, "Member 'FUserOtherPlatformInfo::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, EmailVerified) == 0x000078, "Member 'FUserOtherPlatformInfo::EmailVerified' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Enabled) == 0x000079, "Member 'FUserOtherPlatformInfo::Enabled' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, LastDateOfBirthChangedTime) == 0x000080, "Member 'FUserOtherPlatformInfo::LastDateOfBirthChangedTime' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, LastEnabledChangedTime) == 0x000090, "Member 'FUserOtherPlatformInfo::LastEnabledChangedTime' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Namespace) == 0x0000A0, "Member 'FUserOtherPlatformInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, NamespaceRoles) == 0x0000B0, "Member 'FUserOtherPlatformInfo::NamespaceRoles' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, NewEmailAddress) == 0x0000C0, "Member 'FUserOtherPlatformInfo::NewEmailAddress' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, OldEmailAddress) == 0x0000D0, "Member 'FUserOtherPlatformInfo::OldEmailAddress' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Permissions) == 0x0000E0, "Member 'FUserOtherPlatformInfo::Permissions' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PhoneNumber) == 0x0000F0, "Member 'FUserOtherPlatformInfo::PhoneNumber' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PhoneVerified) == 0x000100, "Member 'FUserOtherPlatformInfo::PhoneVerified' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformDisplayName) == 0x000108, "Member 'FUserOtherPlatformInfo::PlatformDisplayName' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformId) == 0x000118, "Member 'FUserOtherPlatformInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformUserId) == 0x000128, "Member 'FUserOtherPlatformInfo::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Roles) == 0x000138, "Member 'FUserOtherPlatformInfo::Roles' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, UserId) == 0x000148, "Member 'FUserOtherPlatformInfo::UserId' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Username) == 0x000158, "Member 'FUserOtherPlatformInfo::Username' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, AvatarUrl) == 0x000168, "Member 'FUserOtherPlatformInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DeletionDate) == 0x000178, "Member 'FUserOtherPlatformInfo::DeletionDate' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformAvatarUrl) == 0x000188, "Member 'FUserOtherPlatformInfo::PlatformAvatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PagedUserOtherPlatformInfo
// 0x0058 (0x0058 - 0x0000)
struct FPagedUserOtherPlatformInfo final
{
public:
	TArray<struct FUserOtherPlatformInfo>         Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TotalData;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPagedUserOtherPlatformInfo) == 0x000008, "Wrong alignment on FPagedUserOtherPlatformInfo");
static_assert(sizeof(FPagedUserOtherPlatformInfo) == 0x000058, "Wrong size on FPagedUserOtherPlatformInfo");
static_assert(offsetof(FPagedUserOtherPlatformInfo, Data) == 0x000000, "Member 'FPagedUserOtherPlatformInfo::Data' has a wrong offset!");
static_assert(offsetof(FPagedUserOtherPlatformInfo, Paging) == 0x000010, "Member 'FPagedUserOtherPlatformInfo::Paging' has a wrong offset!");
static_assert(offsetof(FPagedUserOtherPlatformInfo, TotalData) == 0x000050, "Member 'FPagedUserOtherPlatformInfo::TotalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.JsonWebTokenResponse
// 0x0020 (0x0020 - 0x0000)
struct FJsonWebTokenResponse final
{
public:
	class FString                                 Jwt_token;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonWebTokenResponse) == 0x000008, "Wrong alignment on FJsonWebTokenResponse");
static_assert(sizeof(FJsonWebTokenResponse) == 0x000020, "Wrong size on FJsonWebTokenResponse");
static_assert(offsetof(FJsonWebTokenResponse, Jwt_token) == 0x000000, "Member 'FJsonWebTokenResponse::Jwt_token' has a wrong offset!");
static_assert(offsetof(FJsonWebTokenResponse, Session_id) == 0x000010, "Member 'FJsonWebTokenResponse::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.LinkPlatformAccountRequest
// 0x0020 (0x0020 - 0x0000)
struct FLinkPlatformAccountRequest final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkPlatformAccountRequest) == 0x000008, "Wrong alignment on FLinkPlatformAccountRequest");
static_assert(sizeof(FLinkPlatformAccountRequest) == 0x000020, "Wrong size on FLinkPlatformAccountRequest");
static_assert(offsetof(FLinkPlatformAccountRequest, PlatformId) == 0x000000, "Member 'FLinkPlatformAccountRequest::PlatformId' has a wrong offset!");
static_assert(offsetof(FLinkPlatformAccountRequest, PlatformUserId) == 0x000010, "Member 'FLinkPlatformAccountRequest::PlatformUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BulkPlatformUserIdRequest
// 0x0010 (0x0010 - 0x0000)
struct FBulkPlatformUserIdRequest final
{
public:
	TArray<class FString>                         PlatformUserIDs;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulkPlatformUserIdRequest) == 0x000008, "Wrong alignment on FBulkPlatformUserIdRequest");
static_assert(sizeof(FBulkPlatformUserIdRequest) == 0x000010, "Wrong size on FBulkPlatformUserIdRequest");
static_assert(offsetof(FBulkPlatformUserIdRequest, PlatformUserIDs) == 0x000000, "Member 'FBulkPlatformUserIdRequest::PlatformUserIDs' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UserUpdateRequest
// 0x0070 (0x0070 - 0x0000)
struct FUserUpdateRequest final
{
public:
	class FString                                 Country;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LanguageTag;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserUpdateRequest) == 0x000008, "Wrong alignment on FUserUpdateRequest");
static_assert(sizeof(FUserUpdateRequest) == 0x000070, "Wrong size on FUserUpdateRequest");
static_assert(offsetof(FUserUpdateRequest, Country) == 0x000000, "Member 'FUserUpdateRequest::Country' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, DateOfBirth) == 0x000010, "Member 'FUserUpdateRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, DisplayName) == 0x000020, "Member 'FUserUpdateRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, EmailAddress) == 0x000030, "Member 'FUserUpdateRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, LanguageTag) == 0x000040, "Member 'FUserUpdateRequest::LanguageTag' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, Username) == 0x000050, "Member 'FUserUpdateRequest::Username' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, AvatarUrl) == 0x000060, "Member 'FUserUpdateRequest::AvatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterRequest
// 0x0060 (0x0060 - 0x0000)
struct FRegisterRequest final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterRequest) == 0x000008, "Wrong alignment on FRegisterRequest");
static_assert(sizeof(FRegisterRequest) == 0x000060, "Wrong size on FRegisterRequest");
static_assert(offsetof(FRegisterRequest, AuthType) == 0x000000, "Member 'FRegisterRequest::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, DisplayName) == 0x000010, "Member 'FRegisterRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, EmailAddress) == 0x000020, "Member 'FRegisterRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, Password) == 0x000030, "Member 'FRegisterRequest::Password' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, Country) == 0x000040, "Member 'FRegisterRequest::Country' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, DateOfBirth) == 0x000050, "Member 'FRegisterRequest::DateOfBirth' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicUserProfileInfo
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsPublicUserProfileInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PublicId;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeZone;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicUserProfileInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPublicUserProfileInfo");
static_assert(sizeof(FAccelByteModelsPublicUserProfileInfo) == 0x000090, "Wrong size on FAccelByteModelsPublicUserProfileInfo");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, UserId) == 0x000000, "Member 'FAccelByteModelsPublicUserProfileInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicUserProfileInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, AvatarSmallUrl) == 0x000020, "Member 'FAccelByteModelsPublicUserProfileInfo::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, AvatarUrl) == 0x000030, "Member 'FAccelByteModelsPublicUserProfileInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, AvatarLargeUrl) == 0x000040, "Member 'FAccelByteModelsPublicUserProfileInfo::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, CustomAttributes) == 0x000050, "Member 'FAccelByteModelsPublicUserProfileInfo::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, PublicId) == 0x000070, "Member 'FAccelByteModelsPublicUserProfileInfo::PublicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, TimeZone) == 0x000080, "Member 'FAccelByteModelsPublicUserProfileInfo::TimeZone' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPubIp
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPubIp final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPubIp) == 0x000008, "Wrong alignment on FAccelByteModelsPubIp");
static_assert(sizeof(FAccelByteModelsPubIp) == 0x000010, "Wrong size on FAccelByteModelsPubIp");
static_assert(offsetof(FAccelByteModelsPubIp, Ip) == 0x000000, "Member 'FAccelByteModelsPubIp::Ip' has a wrong offset!");

}

