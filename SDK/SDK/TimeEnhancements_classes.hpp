#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimeEnhancements

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "TimeEnhancements_structs.hpp"


namespace SDK
{

// Class TimeEnhancements.CurveFloatDelegateTimer
// 0x0038 (0x0070 - 0x0038)
class UCurveFloatDelegateTimer final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const class UCurveFloatDelegateTimer* CurveFloatTimer, float CurveElapsedTime, float CurveTimeSinceLast, float CurveValue, float CurveTime)> CurveEvalTick; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class UCurveFloatDelegateTimer* CurveFloatTimer, float CurveElapsedTime, float CurveTimeSinceLast, float CurveValue, float CurveTime)> CurveFinished; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCurveFloatDelegateTimer* CreateCurveFloatDelegateTimer(class UObject* WorldContextObject, float Period, float DelayToFirstExecution, const class UCurveFloat* Curve, bool bLoops, float CurveDuration);
	static void DestroyCurveFloatDelegateTimer(class UCurveFloatDelegateTimer* Object);

	void FireCurveEvalTick(const class UDelegateTimer* Timer, float ElapsedTime, float TimeSinceLast);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurveFloatDelegateTimer">();
	}
	static class UCurveFloatDelegateTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveFloatDelegateTimer>();
	}
};
static_assert(alignof(UCurveFloatDelegateTimer) == 0x000008, "Wrong alignment on UCurveFloatDelegateTimer");
static_assert(sizeof(UCurveFloatDelegateTimer) == 0x000070, "Wrong size on UCurveFloatDelegateTimer");
static_assert(offsetof(UCurveFloatDelegateTimer, CurveEvalTick) == 0x000038, "Member 'UCurveFloatDelegateTimer::CurveEvalTick' has a wrong offset!");
static_assert(offsetof(UCurveFloatDelegateTimer, CurveFinished) == 0x000048, "Member 'UCurveFloatDelegateTimer::CurveFinished' has a wrong offset!");

// Class TimeEnhancements.DelegateTimer
// 0x0030 (0x0068 - 0x0038)
class UDelegateTimer final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const class UDelegateTimer* Timer, float ElapsedTime, float TimeSinceLast)> TickExec; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeStart;                                         // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeFirstExecution;                                // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeLastExecution;                                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDelegateTimer* CreateDelegateTimer(class UObject* WorldContextObject, float Period, float DelayToFirstExecution);
	static void DestroyDelegateTimer(class UDelegateTimer* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelegateTimer">();
	}
	static class UDelegateTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelegateTimer>();
	}
};
static_assert(alignof(UDelegateTimer) == 0x000008, "Wrong alignment on UDelegateTimer");
static_assert(sizeof(UDelegateTimer) == 0x000068, "Wrong size on UDelegateTimer");
static_assert(offsetof(UDelegateTimer, TickExec) == 0x000038, "Member 'UDelegateTimer::TickExec' has a wrong offset!");
static_assert(offsetof(UDelegateTimer, TimeStart) == 0x000048, "Member 'UDelegateTimer::TimeStart' has a wrong offset!");
static_assert(offsetof(UDelegateTimer, TimeFirstExecution) == 0x000050, "Member 'UDelegateTimer::TimeFirstExecution' has a wrong offset!");
static_assert(offsetof(UDelegateTimer, TimeLastExecution) == 0x000058, "Member 'UDelegateTimer::TimeLastExecution' has a wrong offset!");

// Class TimeEnhancements.FiniteStateMachineComponent
// 0x0038 (0x00F8 - 0x00C0)
class UFiniteStateMachineComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class UFiniteStateMachineComponent* FSM, class FName State, EFiniteStateMachineStateEvent StateEvent)> StateEvent; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   InitialState;                                      // 0x00D0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   State;                                             // 0x00DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LocalState;                                        // 0x00E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_State();
	void SetLocalState(class FName NewState);
	void SetState(class FName NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FiniteStateMachineComponent">();
	}
	static class UFiniteStateMachineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFiniteStateMachineComponent>();
	}
};
static_assert(alignof(UFiniteStateMachineComponent) == 0x000008, "Wrong alignment on UFiniteStateMachineComponent");
static_assert(sizeof(UFiniteStateMachineComponent) == 0x0000F8, "Wrong size on UFiniteStateMachineComponent");
static_assert(offsetof(UFiniteStateMachineComponent, StateEvent) == 0x0000C0, "Member 'UFiniteStateMachineComponent::StateEvent' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachineComponent, InitialState) == 0x0000D0, "Member 'UFiniteStateMachineComponent::InitialState' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachineComponent, State) == 0x0000DC, "Member 'UFiniteStateMachineComponent::State' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachineComponent, LocalState) == 0x0000E8, "Member 'UFiniteStateMachineComponent::LocalState' has a wrong offset!");

// Class TimeEnhancements.TimeEnhancementsBPLibrary
// 0x0000 (0x0030 - 0x0030)
class UTimeEnhancementsBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float SixtyFramesPerSecondFrameDuration();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeEnhancementsBPLibrary">();
	}
	static class UTimeEnhancementsBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeEnhancementsBPLibrary>();
	}
};
static_assert(alignof(UTimeEnhancementsBPLibrary) == 0x000008, "Wrong alignment on UTimeEnhancementsBPLibrary");
static_assert(sizeof(UTimeEnhancementsBPLibrary) == 0x000030, "Wrong size on UTimeEnhancementsBPLibrary");

}

