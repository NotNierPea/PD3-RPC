#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ComputerBase

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function WBP_ComputerBase.WBP_ComputerBase_C.ExecuteUbergraph_WBP_ComputerBase
// 0x0158 (0x0158 - 0x0000)
struct WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_main;                           // 0x0008(0x0018)()
	class FText                                   K2Node_CustomEvent_secondary;                      // 0x0020(0x0018)(ConstParm)
	class FText                                   K2Node_CustomEvent_additional;                     // 0x0038(0x0018)()
	struct FSBZHackableDisplayText                K2Node_CustomEvent_NewDisplayText;                 // 0x0050(0x0060)()
	struct FSBZHackableDisplayText                K2Node_CustomEvent_DisplayText;                    // 0x00B0(0x0060)()
	class FText                                   K2Node_CustomEvent_InText_1;                       // 0x0110(0x0018)()
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0128(0x0018)()
	int32                                         K2Node_CustomEvent_progress;                       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_codes;                          // 0x0148(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase");
static_assert(sizeof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase) == 0x000158, "Wrong size on WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, EntryPoint) == 0x000000, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_main) == 0x000008, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_main' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_secondary) == 0x000020, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_secondary' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_additional) == 0x000038, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_additional' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_NewDisplayText) == 0x000050, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_NewDisplayText' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_DisplayText) == 0x0000B0, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_DisplayText' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_InText_1) == 0x000110, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_InText_1' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_InText) == 0x000128, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_progress) == 0x000140, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_progress' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase, K2Node_CustomEvent_codes) == 0x000148, "Member 'WBP_ComputerBase_C_ExecuteUbergraph_WBP_ComputerBase::K2Node_CustomEvent_codes' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.updateInformation
// 0x0048 (0x0048 - 0x0000)
struct WBP_ComputerBase_C_updateInformation final
{
public:
	class FText                                   main;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   secondary;                                         // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   additional;                                        // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_ComputerBase_C_updateInformation) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_updateInformation");
static_assert(sizeof(WBP_ComputerBase_C_updateInformation) == 0x000048, "Wrong size on WBP_ComputerBase_C_updateInformation");
static_assert(offsetof(WBP_ComputerBase_C_updateInformation, main) == 0x000000, "Member 'WBP_ComputerBase_C_updateInformation::main' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_updateInformation, secondary) == 0x000018, "Member 'WBP_ComputerBase_C_updateInformation::secondary' has a wrong offset!");
static_assert(offsetof(WBP_ComputerBase_C_updateInformation, additional) == 0x000030, "Member 'WBP_ComputerBase_C_updateInformation::additional' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.updateKeypadPossibleCodes
// 0x0010 (0x0010 - 0x0000)
struct WBP_ComputerBase_C_updateKeypadPossibleCodes final
{
public:
	TArray<int32>                                 codes;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_ComputerBase_C_updateKeypadPossibleCodes) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_updateKeypadPossibleCodes");
static_assert(sizeof(WBP_ComputerBase_C_updateKeypadPossibleCodes) == 0x000010, "Wrong size on WBP_ComputerBase_C_updateKeypadPossibleCodes");
static_assert(offsetof(WBP_ComputerBase_C_updateKeypadPossibleCodes, codes) == 0x000000, "Member 'WBP_ComputerBase_C_updateKeypadPossibleCodes::codes' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.updateHackingProgress
// 0x0004 (0x0004 - 0x0000)
struct WBP_ComputerBase_C_updateHackingProgress final
{
public:
	int32                                         progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ComputerBase_C_updateHackingProgress) == 0x000004, "Wrong alignment on WBP_ComputerBase_C_updateHackingProgress");
static_assert(sizeof(WBP_ComputerBase_C_updateHackingProgress) == 0x000004, "Wrong size on WBP_ComputerBase_C_updateHackingProgress");
static_assert(offsetof(WBP_ComputerBase_C_updateHackingProgress, progress) == 0x000000, "Member 'WBP_ComputerBase_C_updateHackingProgress::progress' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.updateHackingTimerProcessName
// 0x0018 (0x0018 - 0x0000)
struct WBP_ComputerBase_C_updateHackingTimerProcessName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_ComputerBase_C_updateHackingTimerProcessName) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_updateHackingTimerProcessName");
static_assert(sizeof(WBP_ComputerBase_C_updateHackingTimerProcessName) == 0x000018, "Wrong size on WBP_ComputerBase_C_updateHackingTimerProcessName");
static_assert(offsetof(WBP_ComputerBase_C_updateHackingTimerProcessName, InText) == 0x000000, "Member 'WBP_ComputerBase_C_updateHackingTimerProcessName::InText' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.UpdateSuccessText
// 0x0018 (0x0018 - 0x0000)
struct WBP_ComputerBase_C_UpdateSuccessText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_ComputerBase_C_UpdateSuccessText) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_UpdateSuccessText");
static_assert(sizeof(WBP_ComputerBase_C_UpdateSuccessText) == 0x000018, "Wrong size on WBP_ComputerBase_C_UpdateSuccessText");
static_assert(offsetof(WBP_ComputerBase_C_UpdateSuccessText, InText) == 0x000000, "Member 'WBP_ComputerBase_C_UpdateSuccessText::InText' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.UpdateEmailDisplayText
// 0x0060 (0x0060 - 0x0000)
struct WBP_ComputerBase_C_UpdateEmailDisplayText final
{
public:
	struct FSBZHackableDisplayText                DisplayText;                                       // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_ComputerBase_C_UpdateEmailDisplayText) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_UpdateEmailDisplayText");
static_assert(sizeof(WBP_ComputerBase_C_UpdateEmailDisplayText) == 0x000060, "Wrong size on WBP_ComputerBase_C_UpdateEmailDisplayText");
static_assert(offsetof(WBP_ComputerBase_C_UpdateEmailDisplayText, DisplayText) == 0x000000, "Member 'WBP_ComputerBase_C_UpdateEmailDisplayText::DisplayText' has a wrong offset!");

// Function WBP_ComputerBase.WBP_ComputerBase_C.UpdateUnlockDisplayText
// 0x0060 (0x0060 - 0x0000)
struct WBP_ComputerBase_C_UpdateUnlockDisplayText final
{
public:
	struct FSBZHackableDisplayText                NewDisplayText;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_ComputerBase_C_UpdateUnlockDisplayText) == 0x000008, "Wrong alignment on WBP_ComputerBase_C_UpdateUnlockDisplayText");
static_assert(sizeof(WBP_ComputerBase_C_UpdateUnlockDisplayText) == 0x000060, "Wrong size on WBP_ComputerBase_C_UpdateUnlockDisplayText");
static_assert(offsetof(WBP_ComputerBase_C_UpdateUnlockDisplayText, NewDisplayText) == 0x000000, "Member 'WBP_ComputerBase_C_UpdateUnlockDisplayText::NewDisplayText' has a wrong offset!");

}

