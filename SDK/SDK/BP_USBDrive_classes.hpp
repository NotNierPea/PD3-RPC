#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_USBDrive

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_USBDrive.BP_USBDrive_C
// 0x0068 (0x0358 - 0x02F0)
class ABP_USBDrive_C final : public ASBZReplicatedIntStateActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USBZInteractableComponent*              SBZInteractableGhost;                              // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ghostmesh;                                         // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZOutlineComponent*                   SBZOutline;                                        // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZInteractableComponent*              SBZInteractable;                                   // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   USB;                                               // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              USB_Taken;                                         // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              USB_Plugged_In;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PlugIn;                                            // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_USBDrive(int32 EntryPoint);
	void Enabled(bool Enabled_0);
	void OnStateChanged(int32 OldState, int32 NewState, bool bDoCosmetics);
	void PaintingTaken();
	void BndEvt__BP_USBDrive_SBZInteractableGhost_K2Node_ComponentBoundEvent_1_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void BndEvt__BP_USBDrive_SBZInteractable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_USBDrive_C">();
	}
	static class ABP_USBDrive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_USBDrive_C>();
	}
};
static_assert(alignof(ABP_USBDrive_C) == 0x000008, "Wrong alignment on ABP_USBDrive_C");
static_assert(sizeof(ABP_USBDrive_C) == 0x000358, "Wrong size on ABP_USBDrive_C");
static_assert(offsetof(ABP_USBDrive_C, UberGraphFrame) == 0x0002F0, "Member 'ABP_USBDrive_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, SBZInteractableGhost) == 0x0002F8, "Member 'ABP_USBDrive_C::SBZInteractableGhost' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, Ghostmesh) == 0x000300, "Member 'ABP_USBDrive_C::Ghostmesh' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, Box) == 0x000308, "Member 'ABP_USBDrive_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, SBZOutline) == 0x000310, "Member 'ABP_USBDrive_C::SBZOutline' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, SBZInteractable) == 0x000318, "Member 'ABP_USBDrive_C::SBZInteractable' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, USB) == 0x000320, "Member 'ABP_USBDrive_C::USB' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, DefaultSceneRoot) == 0x000328, "Member 'ABP_USBDrive_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, USB_Taken) == 0x000330, "Member 'ABP_USBDrive_C::USB_Taken' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, USB_Plugged_In) == 0x000340, "Member 'ABP_USBDrive_C::USB_Plugged_In' has a wrong offset!");
static_assert(offsetof(ABP_USBDrive_C, PlugIn) == 0x000350, "Member 'ABP_USBDrive_C::PlugIn' has a wrong offset!");

}

