#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModLoaderManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"
#include "UDS_ModActorStruct_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ModLoaderManager.ModLoaderManager_C
// 0x0268 (0x04F8 - 0x0290)
class UModLoaderManager_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FARFilter                              Filter;                                            // 0x0298(0x00F0)(Edit, BlueprintVisible)
	TArray<struct FAssetData>                     Out_Asset_Data;                                    // 0x0388(0x0010)(Edit, BlueprintVisible)
	TArray<class UObject*>                        PersistentMods;                                    // 0x0398(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         PersistentModClasses;                              // 0x03A8(0x0010)(Edit, BlueprintVisible)
	TArray<class UPD3HeistDataAsset*>             Heists;                                            // 0x03B8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FUDS_ModActorStruct>            ImmediateSpawnModActorStructs;                     // 0x03C8(0x0010)(Edit, BlueprintVisible)
	class UPD3_GameInstance_C*                    GameInstance;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FUDS_ModActorStruct>            ModActorStructs;                                   // 0x03E0(0x0010)(Edit, BlueprintVisible)
	TArray<class UPDA_ModMeta_C*>                 ParsedModData;                                     // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<class UPDA_ModMeta_C*>                 UnparsedModData;                                   // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AModActorBase_C*>                LoadedModActors;                                   // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<struct FUDS_ModActorStruct>            HeistStartModActorStructs;                         // 0x0420(0x0010)(Edit, BlueprintVisible)
	class FString                                 Version;                                           // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnHeistStart;                                      // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnWaitReturnToMenu;                                // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnGameStartEntered;                                // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UClass*>                         MLExtensionClasses;                                // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UObject*>                        MLExtensions;                                      // 0x0480(0x0010)(Edit, BlueprintVisible)
	class UBP_MLPrimarySave_C*                    MLPrimarySave;                                     // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         MLSaveSlots;                                       // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBP_MLSaveGame_Base_C*>          MLChildSaves;                                      // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 MLSavePath;                                        // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SaveSlotLimit;                                     // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MLChildSave_C*                      DefaultChildSave;                                  // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnJobOveriewReady;                                 // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnJobOverviewComplete;                             // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_ModLoaderManager(int32 EntryPoint);
	void InitMods();
	void DoBinds();
	void OnWaitReturnToMenuEvent();
	void OnGameStartEnteredEvent();
	void OnHeistStartEvent(EBlackScreenTransitionType BlackScreenTransitionType);
	void OnJobOverviewReadyEvent();
	void HeistStateChangedEvent(EPD3HeistState OldState, EPD3HeistState NewState);
	void AddPersistentMods();
	void AddHeists();
	void GetAllData(class UPDA_ModMeta_C* CurrentAsset);
	void ParseModActorStructs();
	void SpawnModMenu(bool FirstSpawnOfMenu, class UWBP_ActorSpawner_C** Return);
	void EnsureAllParsed();
	void PrintToModLoader(const class FString& Print);
	void ShowDebugHeistSelection();
	void PreInitExtensions();
	void InitExtensions();
	void LoadPrimaryMLSave();
	void CreateNewMLSave();
	void LoadMLChildSaves();
	void CreateMLChildSave(const class FString& SaveSlot);
	void AddPersWidgetsToVP();
	void SetMMGroup();
	void PostInitPersistent();
	void PostInitExtensions();
	void AddMLButton();
	void SetupUI();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ModLoaderManager_C">();
	}
	static class UModLoaderManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModLoaderManager_C>();
	}
};
static_assert(alignof(UModLoaderManager_C) == 0x000008, "Wrong alignment on UModLoaderManager_C");
static_assert(sizeof(UModLoaderManager_C) == 0x0004F8, "Wrong size on UModLoaderManager_C");
static_assert(offsetof(UModLoaderManager_C, UberGraphFrame) == 0x000290, "Member 'UModLoaderManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, Filter) == 0x000298, "Member 'UModLoaderManager_C::Filter' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, Out_Asset_Data) == 0x000388, "Member 'UModLoaderManager_C::Out_Asset_Data' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, PersistentMods) == 0x000398, "Member 'UModLoaderManager_C::PersistentMods' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, PersistentModClasses) == 0x0003A8, "Member 'UModLoaderManager_C::PersistentModClasses' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, Heists) == 0x0003B8, "Member 'UModLoaderManager_C::Heists' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, ImmediateSpawnModActorStructs) == 0x0003C8, "Member 'UModLoaderManager_C::ImmediateSpawnModActorStructs' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, GameInstance) == 0x0003D8, "Member 'UModLoaderManager_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, ModActorStructs) == 0x0003E0, "Member 'UModLoaderManager_C::ModActorStructs' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, ParsedModData) == 0x0003F0, "Member 'UModLoaderManager_C::ParsedModData' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, UnparsedModData) == 0x000400, "Member 'UModLoaderManager_C::UnparsedModData' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, LoadedModActors) == 0x000410, "Member 'UModLoaderManager_C::LoadedModActors' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, HeistStartModActorStructs) == 0x000420, "Member 'UModLoaderManager_C::HeistStartModActorStructs' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, Version) == 0x000430, "Member 'UModLoaderManager_C::Version' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, OnHeistStart) == 0x000440, "Member 'UModLoaderManager_C::OnHeistStart' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, OnWaitReturnToMenu) == 0x000450, "Member 'UModLoaderManager_C::OnWaitReturnToMenu' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, OnGameStartEntered) == 0x000460, "Member 'UModLoaderManager_C::OnGameStartEntered' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, MLExtensionClasses) == 0x000470, "Member 'UModLoaderManager_C::MLExtensionClasses' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, MLExtensions) == 0x000480, "Member 'UModLoaderManager_C::MLExtensions' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, MLPrimarySave) == 0x000490, "Member 'UModLoaderManager_C::MLPrimarySave' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, MLSaveSlots) == 0x000498, "Member 'UModLoaderManager_C::MLSaveSlots' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, MLChildSaves) == 0x0004A8, "Member 'UModLoaderManager_C::MLChildSaves' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, MLSavePath) == 0x0004B8, "Member 'UModLoaderManager_C::MLSavePath' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, SaveSlotLimit) == 0x0004C8, "Member 'UModLoaderManager_C::SaveSlotLimit' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, DefaultChildSave) == 0x0004D0, "Member 'UModLoaderManager_C::DefaultChildSave' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, OnJobOveriewReady) == 0x0004D8, "Member 'UModLoaderManager_C::OnJobOveriewReady' has a wrong offset!");
static_assert(offsetof(UModLoaderManager_C, OnJobOverviewComplete) == 0x0004E8, "Member 'UModLoaderManager_C::OnJobOverviewComplete' has a wrong offset!");

}

