#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_PreplanningItemVisuals

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.ExecuteUbergraph_WBP_UI_PreplanningItemVisuals
// 0x0030 (0x0030 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	const class USBZInventoryBaseData*            K2Node_Event_NewItem;                              // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USBZPreplanningAssetData*               K2Node_DynamicCast_AsSBZPreplanning_Asset_Data;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           K2Node_Event_OutLoadedSprite;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals) == 0x000030, "Wrong size on WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, EntryPoint) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, Temp_bool_Variable) == 0x000004, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, Temp_byte_Variable) == 0x000005, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, K2Node_Event_NewItem) == 0x000008, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::K2Node_Event_NewItem' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, K2Node_DynamicCast_AsSBZPreplanning_Asset_Data) == 0x000010, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::K2Node_DynamicCast_AsSBZPreplanning_Asset_Data' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, K2Node_Event_OutLoadedSprite) == 0x000020, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::K2Node_Event_OutLoadedSprite' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, K2Node_Event_IsDesignTime) == 0x000028, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals, K2Node_Select_Default) == 0x000029, "Member 'WBP_UI_PreplanningItemVisuals_C_ExecuteUbergraph_WBP_UI_PreplanningItemVisuals::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_PreConstruct");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_PreConstruct) == 0x000001, "Wrong size on WBP_UI_PreplanningItemVisuals_C_PreConstruct");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.SpriteLoaded
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_SpriteLoaded final
{
public:
	class UPaperSprite*                           OutLoadedSprite;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_SpriteLoaded) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_SpriteLoaded");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_SpriteLoaded) == 0x000008, "Wrong size on WBP_UI_PreplanningItemVisuals_C_SpriteLoaded");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SpriteLoaded, OutLoadedSprite) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_SpriteLoaded::OutLoadedSprite' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.ItemInitialized
// 0x0008 (0x0008 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_ItemInitialized final
{
public:
	const class USBZInventoryBaseData*            NewItem;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_ItemInitialized) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_ItemInitialized");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_ItemInitialized) == 0x000008, "Wrong size on WBP_UI_PreplanningItemVisuals_C_ItemInitialized");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_ItemInitialized, NewItem) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_ItemInitialized::NewItem' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.SetDisplayName
// 0x0060 (0x0060 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_SetDisplayName final
{
public:
	class USBZPreplanningAssetData*               InPrePlanningAsset;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDisplayName_OutDisplayName;            // 0x0008(0x0018)()
	bool                                          CallFunc_GetDisplayName_OutHasText;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0028)()
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_SetDisplayName");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName) == 0x000060, "Wrong size on WBP_UI_PreplanningItemVisuals_C_SetDisplayName");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName, InPrePlanningAsset) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_SetDisplayName::InPrePlanningAsset' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName, CallFunc_GetDisplayName_OutDisplayName) == 0x000008, "Member 'WBP_UI_PreplanningItemVisuals_C_SetDisplayName::CallFunc_GetDisplayName_OutDisplayName' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName, CallFunc_GetDisplayName_OutHasText) == 0x000020, "Member 'WBP_UI_PreplanningItemVisuals_C_SetDisplayName::CallFunc_GetDisplayName_OutHasText' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName, CallFunc_SelectColor_ReturnValue) == 0x000024, "Member 'WBP_UI_PreplanningItemVisuals_C_SetDisplayName::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetDisplayName, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'WBP_UI_PreplanningItemVisuals_C_SetDisplayName::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.SetIcon
// 0x0020 (0x0020 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_SetIcon final
{
public:
	class UPaperSprite*                           InDisplayIcon;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_SetIcon) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_SetIcon");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_SetIcon) == 0x000020, "Wrong size on WBP_UI_PreplanningItemVisuals_C_SetIcon");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetIcon, InDisplayIcon) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_SetIcon::InDisplayIcon' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_UI_PreplanningItemVisuals_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_SetIcon, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput) == 0x000010, "Member 'WBP_UI_PreplanningItemVisuals_C_SetIcon::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.InitializeItemVisuals
// 0x0020 (0x0020 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals final
{
public:
	class USBZPreplanningAssetData*               InPreplanningItem;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals) == 0x000020, "Wrong size on WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals, InPreplanningItem) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals::InPreplanningItem' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000008, "Member 'WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals, K2Node_DynamicCast_AsPaper_Sprite) == 0x000010, "Member 'WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals::K2Node_DynamicCast_AsPaper_Sprite' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_UI_PreplanningItemVisuals_C_InitializeItemVisuals::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_UI_PreplanningItemVisuals.WBP_UI_PreplanningItemVisuals_C.OnFocus
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_UI_PreplanningItemVisuals_C_OnFocus final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZColorStyle*                         Temp_object_Variable;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0068(0x0028)()
	class USBZColorStyle*                         Temp_object_Variable_1;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZColorStyle*                         K2Node_Select_Default_1;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UI_PreplanningItemVisuals_C_OnFocus) == 0x000008, "Wrong alignment on WBP_UI_PreplanningItemVisuals_C_OnFocus");
static_assert(sizeof(WBP_UI_PreplanningItemVisuals_C_OnFocus) == 0x0000B8, "Wrong size on WBP_UI_PreplanningItemVisuals_C_OnFocus");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, IsFocused) == 0x000000, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_struct_Variable) == 0x000004, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_struct_Variable_1) == 0x000014, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_bool_Variable) == 0x000024, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_struct_Variable_2) == 0x000028, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_struct_Variable_3) == 0x000038, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_bool_Variable_1) == 0x000048, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, K2Node_Select_Default) == 0x00004C, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_object_Variable) == 0x000060, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, K2Node_MakeStruct_SlateColor) == 0x000068, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_object_Variable_1) == 0x000090, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, Temp_bool_Variable_2) == 0x000098, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, K2Node_Select_Default_1) == 0x0000A0, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UI_PreplanningItemVisuals_C_OnFocus, K2Node_Select_Default_2) == 0x0000A8, "Member 'WBP_UI_PreplanningItemVisuals_C_OnFocus::K2Node_Select_Default_2' has a wrong offset!");

}

