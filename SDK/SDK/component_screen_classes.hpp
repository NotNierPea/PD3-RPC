#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: component_screen

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass component_screen.component_screen_C
// 0x0088 (0x0148 - 0x00C0)
class Ucomponent_screen_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   meshes;                                            // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Intensity;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Reach;                                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Spread;                                      // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Angle;                                       // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Screens_plays_movie;                               // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          swap_offest_by_position;                           // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Swap_period;                                       // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         sub_texture_part_used_start_range;                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         sub_texture_part_used_end_range;                   // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         resolution;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         intensity_screen;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         banding_visibility;                                // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         banding_refresh_rate;                              // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of__vertical_slides_in_the_texture;         // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of__horizontal_slides_in_the_texture;       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Pixel_type;                                        // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         H_;                                                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mode_RGB;                                          // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Fully_destructable;                             // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_OFF;                                            // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roughness_Multiplier;                              // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specularity;                                       // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diffuse_color;                                     // 0x011C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Side_Attenuation;                                  // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBinkMediaPlayer*                       source_bink_media_player;                          // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_taken;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USBZCosmeticDestructionComponent*       SBZCosmeticDestruction;                            // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_component_screen(int32 EntryPoint);
	void setSide_Attenuation(float Side_Attenuation_0);
	void setSpecularity(float Specularity_0);
	void setRoughness_Multiplier(float Roughness_Multiplier_0);
	void H__0(float Param_H__0);
	void setNumber_of__horizontal_slides_in_the_texture(float Number_of__horizontal_slides_in_the_texture_0);
	void setNumber_of__vertical_slides_in_the_texture(float Number_of__vertical_slides_in_the_texture_0);
	void setBanding_refresh_rate(float banding_refresh_rate_0);
	void setBanding_visibility(float banding_visibility_0);
	void setIntensity_screen(float intensity_screen_0);
	void setSwap_period(float Swap_period_0);
	void setLight_Angle(float Light_Angle_0);
	void setLight_Spread(float Light_Spread_0);
	void setLight_Reach(float Light_Reach_0);
	void setLight_Intensity(float Light_Intensity_0);
	void setPixel_type(int32 Pixel_type_0);
	void setResolution(int32 resolution_0);
	void setSub_texture_part_used_end_range(int32 sub_texture_part_used_end_range_0);
	void setSub_texture_part_used_start_range(int32 sub_texture_part_used_start_range_0);
	void setIs_OFF(bool Is_OFF_0);
	void setIs_Fully_destructable(bool Is_Fully_destructable_0);
	void setMode_RGB(bool Mode_RGB_0);
	void setSwap_offest_by_position(bool swap_offest_by_position_0);
	void setScreenPlaysMovie(bool Screens_plays_movie_0);
	void setSource_bink_media_player(class UBinkMediaPlayer* source_bink_media_player_0);
	void setDiffuse_color(const struct FLinearColor& Diffuse_color_0);
	void ReceiveBeginPlay();
	void setup(class UStaticMeshComponent* meshes_0, class USBZCosmeticDestructionComponent* SBZCosmeticDestruction_0);
	void onDestructionHit(ESBZCosmeticDestructionType Type, const struct FSBZCosmeticDestructionContext& HitContext);
	void setDamageState(int32 damage);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"component_screen_C">();
	}
	static class Ucomponent_screen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Ucomponent_screen_C>();
	}
};
static_assert(alignof(Ucomponent_screen_C) == 0x000008, "Wrong alignment on Ucomponent_screen_C");
static_assert(sizeof(Ucomponent_screen_C) == 0x000148, "Wrong size on Ucomponent_screen_C");
static_assert(offsetof(Ucomponent_screen_C, UberGraphFrame) == 0x0000C0, "Member 'Ucomponent_screen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, meshes) == 0x0000C8, "Member 'Ucomponent_screen_C::meshes' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Light_Intensity) == 0x0000D0, "Member 'Ucomponent_screen_C::Light_Intensity' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Light_Reach) == 0x0000D4, "Member 'Ucomponent_screen_C::Light_Reach' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Light_Spread) == 0x0000D8, "Member 'Ucomponent_screen_C::Light_Spread' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Light_Angle) == 0x0000DC, "Member 'Ucomponent_screen_C::Light_Angle' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Screens_plays_movie) == 0x0000E0, "Member 'Ucomponent_screen_C::Screens_plays_movie' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, swap_offest_by_position) == 0x0000E1, "Member 'Ucomponent_screen_C::swap_offest_by_position' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Swap_period) == 0x0000E4, "Member 'Ucomponent_screen_C::Swap_period' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, sub_texture_part_used_start_range) == 0x0000E8, "Member 'Ucomponent_screen_C::sub_texture_part_used_start_range' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, sub_texture_part_used_end_range) == 0x0000EC, "Member 'Ucomponent_screen_C::sub_texture_part_used_end_range' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, resolution) == 0x0000F0, "Member 'Ucomponent_screen_C::resolution' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, intensity_screen) == 0x0000F4, "Member 'Ucomponent_screen_C::intensity_screen' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, banding_visibility) == 0x0000F8, "Member 'Ucomponent_screen_C::banding_visibility' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, banding_refresh_rate) == 0x0000FC, "Member 'Ucomponent_screen_C::banding_refresh_rate' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Number_of__vertical_slides_in_the_texture) == 0x000100, "Member 'Ucomponent_screen_C::Number_of__vertical_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Number_of__horizontal_slides_in_the_texture) == 0x000104, "Member 'Ucomponent_screen_C::Number_of__horizontal_slides_in_the_texture' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Pixel_type) == 0x000108, "Member 'Ucomponent_screen_C::Pixel_type' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, H_) == 0x00010C, "Member 'Ucomponent_screen_C::H_' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Mode_RGB) == 0x000110, "Member 'Ucomponent_screen_C::Mode_RGB' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Is_Fully_destructable) == 0x000111, "Member 'Ucomponent_screen_C::Is_Fully_destructable' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Is_OFF) == 0x000112, "Member 'Ucomponent_screen_C::Is_OFF' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Roughness_Multiplier) == 0x000114, "Member 'Ucomponent_screen_C::Roughness_Multiplier' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Specularity) == 0x000118, "Member 'Ucomponent_screen_C::Specularity' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Diffuse_color) == 0x00011C, "Member 'Ucomponent_screen_C::Diffuse_color' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Side_Attenuation) == 0x00012C, "Member 'Ucomponent_screen_C::Side_Attenuation' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, source_bink_media_player) == 0x000130, "Member 'Ucomponent_screen_C::source_bink_media_player' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, Damage_taken) == 0x000138, "Member 'Ucomponent_screen_C::Damage_taken' has a wrong offset!");
static_assert(offsetof(Ucomponent_screen_C, SBZCosmeticDestruction) == 0x000140, "Member 'Ucomponent_screen_C::SBZCosmeticDestruction' has a wrong offset!");

}

