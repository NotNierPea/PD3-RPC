#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccelByteCustomization

#include "Basic.hpp"

#include "AccelByteUe4Sdk_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AccelByteCustomization.EServerChallengeSortBy
// NumValues: 0x000A
enum class EServerChallengeSortBy : uint8
{
	NONE                                     = 0,
	NAME_ASC                                 = 1,
	NAME_DESC                                = 2,
	ORDER_ASC                                = 3,
	ORDER_DESC                               = 4,
	TAGS_ASC                                 = 5,
	TAGS_DESC                                = 6,
	CREATED_ASC                              = 7,
	CREATED_DESC                             = 8,
	EServerChallengeSortBy_MAX               = 9,
};

// Enum AccelByteCustomization.EChallengeSortBy
// NumValues: 0x000A
enum class EChallengeSortBy : uint8
{
	NONE                                     = 0,
	NAME_ASC                                 = 1,
	NAME_DESC                                = 2,
	ORDER_ASC                                = 3,
	ORDER_DESC                               = 4,
	TAGS_ASC                                 = 5,
	TAGS_DESC                                = 6,
	STATUS_ASC                               = 7,
	STATUS_DESC                              = 8,
	EChallengeSortBy_MAX                     = 9,
};

// Enum AccelByteCustomization.EChallengeStatus
// NumValues: 0x0005
enum class EChallengeStatus : uint8
{
	INIT                                     = 0,
	INPROGRESS                               = 1,
	COMPLETED                                = 2,
	UNAVAILABLE                              = 3,
	EChallengeStatus_MAX                     = 4,
};

// ScriptStruct AccelByteCustomization.PlayerRecordProgressSummary
// 0x0018 (0x0018 - 0x0000)
struct FPlayerRecordProgressSummary final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerRecordProgressSummary) == 0x000008, "Wrong alignment on FPlayerRecordProgressSummary");
static_assert(sizeof(FPlayerRecordProgressSummary) == 0x000018, "Wrong size on FPlayerRecordProgressSummary");
static_assert(offsetof(FPlayerRecordProgressSummary, Status) == 0x000000, "Member 'FPlayerRecordProgressSummary::Status' has a wrong offset!");
static_assert(offsetof(FPlayerRecordProgressSummary, Total) == 0x000010, "Member 'FPlayerRecordProgressSummary::Total' has a wrong offset!");

// ScriptStruct AccelByteCustomization.PlayerRecordSummaryData
// 0x0048 (0x0048 - 0x0000)
struct FPlayerRecordSummaryData final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerRecordProgressSummary>   ProgressSummary;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerRecordSummaryData) == 0x000008, "Wrong alignment on FPlayerRecordSummaryData");
static_assert(sizeof(FPlayerRecordSummaryData) == 0x000048, "Wrong size on FPlayerRecordSummaryData");
static_assert(offsetof(FPlayerRecordSummaryData, Namespace) == 0x000000, "Member 'FPlayerRecordSummaryData::Namespace' has a wrong offset!");
static_assert(offsetof(FPlayerRecordSummaryData, UserId) == 0x000010, "Member 'FPlayerRecordSummaryData::UserId' has a wrong offset!");
static_assert(offsetof(FPlayerRecordSummaryData, Tag) == 0x000020, "Member 'FPlayerRecordSummaryData::Tag' has a wrong offset!");
static_assert(offsetof(FPlayerRecordSummaryData, Total) == 0x000030, "Member 'FPlayerRecordSummaryData::Total' has a wrong offset!");
static_assert(offsetof(FPlayerRecordSummaryData, ProgressSummary) == 0x000038, "Member 'FPlayerRecordSummaryData::ProgressSummary' has a wrong offset!");

// ScriptStruct AccelByteCustomization.PlayerRecordSummary
// 0x0050 (0x0050 - 0x0000)
struct FPlayerRecordSummary final
{
public:
	TArray<struct FPlayerRecordSummaryData>       Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerRecordSummary) == 0x000008, "Wrong alignment on FPlayerRecordSummary");
static_assert(sizeof(FPlayerRecordSummary) == 0x000050, "Wrong size on FPlayerRecordSummary");
static_assert(offsetof(FPlayerRecordSummary, Data) == 0x000000, "Member 'FPlayerRecordSummary::Data' has a wrong offset!");
static_assert(offsetof(FPlayerRecordSummary, Paging) == 0x000010, "Member 'FPlayerRecordSummary::Paging' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeErrorResponse
// 0x0038 (0x0038 - 0x0000)
struct FChallengeErrorResponse final
{
public:
	TArray<class FString>                         Details;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraceId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeErrorResponse) == 0x000008, "Wrong alignment on FChallengeErrorResponse");
static_assert(sizeof(FChallengeErrorResponse) == 0x000038, "Wrong size on FChallengeErrorResponse");
static_assert(offsetof(FChallengeErrorResponse, Details) == 0x000000, "Member 'FChallengeErrorResponse::Details' has a wrong offset!");
static_assert(offsetof(FChallengeErrorResponse, ErrorCode) == 0x000010, "Member 'FChallengeErrorResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FChallengeErrorResponse, ErrorMessage) == 0x000018, "Member 'FChallengeErrorResponse::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FChallengeErrorResponse, TraceId) == 0x000028, "Member 'FChallengeErrorResponse::TraceId' has a wrong offset!");

// ScriptStruct AccelByteCustomization.CompleteChallenge
// 0x0050 (0x0050 - 0x0000)
struct FCompleteChallenge final
{
public:
	struct FChallengeErrorResponse                Error;                                             // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompleteChallenge) == 0x000008, "Wrong alignment on FCompleteChallenge");
static_assert(sizeof(FCompleteChallenge) == 0x000050, "Wrong size on FCompleteChallenge");
static_assert(offsetof(FCompleteChallenge, Error) == 0x000000, "Member 'FCompleteChallenge::Error' has a wrong offset!");
static_assert(offsetof(FCompleteChallenge, Success) == 0x000038, "Member 'FCompleteChallenge::Success' has a wrong offset!");
static_assert(offsetof(FCompleteChallenge, UserId) == 0x000040, "Member 'FCompleteChallenge::UserId' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeStat
// 0x0018 (0x0018 - 0x0000)
struct FChallengeStat final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeStat) == 0x000008, "Wrong alignment on FChallengeStat");
static_assert(sizeof(FChallengeStat) == 0x000018, "Wrong size on FChallengeStat");
static_assert(offsetof(FChallengeStat, StatCode) == 0x000000, "Member 'FChallengeStat::StatCode' has a wrong offset!");
static_assert(offsetof(FChallengeStat, Value) == 0x000010, "Member 'FChallengeStat::Value' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeObjectives
// 0x0010 (0x0010 - 0x0000)
struct FChallengeObjectives final
{
public:
	TArray<struct FChallengeStat>                 Stats;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeObjectives) == 0x000008, "Wrong alignment on FChallengeObjectives");
static_assert(sizeof(FChallengeObjectives) == 0x000010, "Wrong size on FChallengeObjectives");
static_assert(offsetof(FChallengeObjectives, Stats) == 0x000000, "Member 'FChallengeObjectives::Stats' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ItemDetails
// 0x0018 (0x0018 - 0x0000)
struct FItemDetails final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemDetails) == 0x000008, "Wrong alignment on FItemDetails");
static_assert(sizeof(FItemDetails) == 0x000018, "Wrong size on FItemDetails");
static_assert(offsetof(FItemDetails, ItemId) == 0x000000, "Member 'FItemDetails::ItemId' has a wrong offset!");
static_assert(offsetof(FItemDetails, Quantity) == 0x000010, "Member 'FItemDetails::Quantity' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengePrerequisites
// 0x0030 (0x0030 - 0x0000)
struct FChallengePrerequisites final
{
public:
	TArray<class FString>                         CompletedChallengeIds;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChallengeStat>                 Stats;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemDetails>                   Items;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengePrerequisites) == 0x000008, "Wrong alignment on FChallengePrerequisites");
static_assert(sizeof(FChallengePrerequisites) == 0x000030, "Wrong size on FChallengePrerequisites");
static_assert(offsetof(FChallengePrerequisites, CompletedChallengeIds) == 0x000000, "Member 'FChallengePrerequisites::CompletedChallengeIds' has a wrong offset!");
static_assert(offsetof(FChallengePrerequisites, Stats) == 0x000010, "Member 'FChallengePrerequisites::Stats' has a wrong offset!");
static_assert(offsetof(FChallengePrerequisites, Items) == 0x000020, "Member 'FChallengePrerequisites::Items' has a wrong offset!");

// ScriptStruct AccelByteCustomization.RewardItemDetails
// 0x0028 (0x0028 - 0x0000)
struct FRewardItemDetails final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardItemDetails) == 0x000008, "Wrong alignment on FRewardItemDetails");
static_assert(sizeof(FRewardItemDetails) == 0x000028, "Wrong size on FRewardItemDetails");
static_assert(offsetof(FRewardItemDetails, Sku) == 0x000000, "Member 'FRewardItemDetails::Sku' has a wrong offset!");
static_assert(offsetof(FRewardItemDetails, ItemId) == 0x000010, "Member 'FRewardItemDetails::ItemId' has a wrong offset!");
static_assert(offsetof(FRewardItemDetails, Quantity) == 0x000020, "Member 'FRewardItemDetails::Quantity' has a wrong offset!");
static_assert(offsetof(FRewardItemDetails, IsActive) == 0x000024, "Member 'FRewardItemDetails::IsActive' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeReward
// 0x0030 (0x0030 - 0x0000)
struct FChallengeReward final
{
public:
	TArray<struct FChallengeStat>                 Stats;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRewardItemDetails>             Items;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RewardId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeReward) == 0x000008, "Wrong alignment on FChallengeReward");
static_assert(sizeof(FChallengeReward) == 0x000030, "Wrong size on FChallengeReward");
static_assert(offsetof(FChallengeReward, Stats) == 0x000000, "Member 'FChallengeReward::Stats' has a wrong offset!");
static_assert(offsetof(FChallengeReward, Items) == 0x000010, "Member 'FChallengeReward::Items' has a wrong offset!");
static_assert(offsetof(FChallengeReward, RewardId) == 0x000020, "Member 'FChallengeReward::RewardId' has a wrong offset!");

// ScriptStruct AccelByteCustomization.RecordChallengeResponseBody
// 0x00F0 (0x00F0 - 0x0000)
struct FRecordChallengeResponseBody final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChallengeObjectives                   Objective;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         OrderNo;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengePrerequisites                Prerequisite;                                      // 0x0070(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChallengeReward                       Reward;                                            // 0x00A0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecordChallengeResponseBody) == 0x000008, "Wrong alignment on FRecordChallengeResponseBody");
static_assert(sizeof(FRecordChallengeResponseBody) == 0x0000F0, "Wrong size on FRecordChallengeResponseBody");
static_assert(offsetof(FRecordChallengeResponseBody, ChallengeId) == 0x000000, "Member 'FRecordChallengeResponseBody::ChallengeId' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, CreatedAt) == 0x000010, "Member 'FRecordChallengeResponseBody::CreatedAt' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Description) == 0x000020, "Member 'FRecordChallengeResponseBody::Description' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, IsActive) == 0x000030, "Member 'FRecordChallengeResponseBody::IsActive' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Name) == 0x000038, "Member 'FRecordChallengeResponseBody::Name' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Namespace) == 0x000048, "Member 'FRecordChallengeResponseBody::Namespace' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Objective) == 0x000058, "Member 'FRecordChallengeResponseBody::Objective' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, OrderNo) == 0x000068, "Member 'FRecordChallengeResponseBody::OrderNo' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Prerequisite) == 0x000070, "Member 'FRecordChallengeResponseBody::Prerequisite' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Reward) == 0x0000A0, "Member 'FRecordChallengeResponseBody::Reward' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, Tags) == 0x0000D0, "Member 'FRecordChallengeResponseBody::Tags' has a wrong offset!");
static_assert(offsetof(FRecordChallengeResponseBody, UpdatedAt) == 0x0000E0, "Member 'FRecordChallengeResponseBody::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeResponseBody
// 0x0050 (0x0050 - 0x0000)
struct FChallengeResponseBody final
{
public:
	class FString                                 challengeId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 challengeName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChallengeReward                       reward;                                            // 0x0020(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeResponseBody) == 0x000008, "Wrong alignment on FChallengeResponseBody");
static_assert(sizeof(FChallengeResponseBody) == 0x000050, "Wrong size on FChallengeResponseBody");
static_assert(offsetof(FChallengeResponseBody, challengeId) == 0x000000, "Member 'FChallengeResponseBody::challengeId' has a wrong offset!");
static_assert(offsetof(FChallengeResponseBody, challengeName) == 0x000010, "Member 'FChallengeResponseBody::challengeName' has a wrong offset!");
static_assert(offsetof(FChallengeResponseBody, reward) == 0x000020, "Member 'FChallengeResponseBody::reward' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeNotifPayload
// 0x0050 (0x0050 - 0x0000)
struct FChallengeNotifPayload final
{
public:
	class FString                                 challengeId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 challengeName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChallengeReward                       reward;                                            // 0x0020(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeNotifPayload) == 0x000008, "Wrong alignment on FChallengeNotifPayload");
static_assert(sizeof(FChallengeNotifPayload) == 0x000050, "Wrong size on FChallengeNotifPayload");
static_assert(offsetof(FChallengeNotifPayload, challengeId) == 0x000000, "Member 'FChallengeNotifPayload::challengeId' has a wrong offset!");
static_assert(offsetof(FChallengeNotifPayload, challengeName) == 0x000010, "Member 'FChallengeNotifPayload::challengeName' has a wrong offset!");
static_assert(offsetof(FChallengeNotifPayload, reward) == 0x000020, "Member 'FChallengeNotifPayload::reward' has a wrong offset!");

// ScriptStruct AccelByteCustomization.PlayerEligibilityResponse
// 0x0001 (0x0001 - 0x0000)
struct FPlayerEligibilityResponse final
{
public:
	bool                                          IsComply;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerEligibilityResponse) == 0x000001, "Wrong alignment on FPlayerEligibilityResponse");
static_assert(sizeof(FPlayerEligibilityResponse) == 0x000001, "Wrong size on FPlayerEligibilityResponse");
static_assert(offsetof(FPlayerEligibilityResponse, IsComply) == 0x000000, "Member 'FPlayerEligibilityResponse::IsComply' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeConfiguration
// 0x00E8 (0x00E8 - 0x0000)
struct FChallengeConfiguration final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChallengePrerequisites                Prerequisite;                                      // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChallengeObjectives                   Objective;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChallengeReward                       Reward;                                            // 0x00A0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrderNo;                                           // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeConfiguration) == 0x000008, "Wrong alignment on FChallengeConfiguration");
static_assert(sizeof(FChallengeConfiguration) == 0x0000E8, "Wrong size on FChallengeConfiguration");
static_assert(offsetof(FChallengeConfiguration, ChallengeId) == 0x000000, "Member 'FChallengeConfiguration::ChallengeId' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Namespace) == 0x000010, "Member 'FChallengeConfiguration::Namespace' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, CreatedAt) == 0x000020, "Member 'FChallengeConfiguration::CreatedAt' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, UpdatedAt) == 0x000030, "Member 'FChallengeConfiguration::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Name) == 0x000040, "Member 'FChallengeConfiguration::Name' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Description) == 0x000050, "Member 'FChallengeConfiguration::Description' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Prerequisite) == 0x000060, "Member 'FChallengeConfiguration::Prerequisite' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Objective) == 0x000090, "Member 'FChallengeConfiguration::Objective' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Reward) == 0x0000A0, "Member 'FChallengeConfiguration::Reward' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, Tags) == 0x0000D0, "Member 'FChallengeConfiguration::Tags' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, IsActive) == 0x0000E0, "Member 'FChallengeConfiguration::IsActive' has a wrong offset!");
static_assert(offsetof(FChallengeConfiguration, OrderNo) == 0x0000E4, "Member 'FChallengeConfiguration::OrderNo' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeProgressStat
// 0x0018 (0x0018 - 0x0000)
struct FChallengeProgressStat final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeProgressStat) == 0x000008, "Wrong alignment on FChallengeProgressStat");
static_assert(sizeof(FChallengeProgressStat) == 0x000018, "Wrong size on FChallengeProgressStat");
static_assert(offsetof(FChallengeProgressStat, StatCode) == 0x000000, "Member 'FChallengeProgressStat::StatCode' has a wrong offset!");
static_assert(offsetof(FChallengeProgressStat, CurrentValue) == 0x000010, "Member 'FChallengeProgressStat::CurrentValue' has a wrong offset!");
static_assert(offsetof(FChallengeProgressStat, TargetValue) == 0x000014, "Member 'FChallengeProgressStat::TargetValue' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeProgressItem
// 0x0018 (0x0018 - 0x0000)
struct FChallengeProgressItem final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentQuantity;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetQuantity;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeProgressItem) == 0x000008, "Wrong alignment on FChallengeProgressItem");
static_assert(sizeof(FChallengeProgressItem) == 0x000018, "Wrong size on FChallengeProgressItem");
static_assert(offsetof(FChallengeProgressItem, ItemID) == 0x000000, "Member 'FChallengeProgressItem::ItemID' has a wrong offset!");
static_assert(offsetof(FChallengeProgressItem, CurrentQuantity) == 0x000010, "Member 'FChallengeProgressItem::CurrentQuantity' has a wrong offset!");
static_assert(offsetof(FChallengeProgressItem, TargetQuantity) == 0x000014, "Member 'FChallengeProgressItem::TargetQuantity' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeProgressPrerequisite
// 0x0030 (0x0030 - 0x0000)
struct FChallengeProgressPrerequisite final
{
public:
	TArray<struct FChallengeProgressStat>         Stats;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChallengeProgressItem>         Items;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeProgressPrerequisite) == 0x000008, "Wrong alignment on FChallengeProgressPrerequisite");
static_assert(sizeof(FChallengeProgressPrerequisite) == 0x000030, "Wrong size on FChallengeProgressPrerequisite");
static_assert(offsetof(FChallengeProgressPrerequisite, Stats) == 0x000000, "Member 'FChallengeProgressPrerequisite::Stats' has a wrong offset!");
static_assert(offsetof(FChallengeProgressPrerequisite, Items) == 0x000010, "Member 'FChallengeProgressPrerequisite::Items' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeProgressObjective
// 0x0010 (0x0010 - 0x0000)
struct FChallengeProgressObjective final
{
public:
	TArray<struct FChallengeProgressStat>         Stats;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeProgressObjective) == 0x000008, "Wrong alignment on FChallengeProgressObjective");
static_assert(sizeof(FChallengeProgressObjective) == 0x000010, "Wrong size on FChallengeProgressObjective");
static_assert(offsetof(FChallengeProgressObjective, Stats) == 0x000000, "Member 'FChallengeProgressObjective::Stats' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ChallengeProgress
// 0x0040 (0x0040 - 0x0000)
struct FChallengeProgress final
{
public:
	struct FChallengeProgressPrerequisite         Prerequisite;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChallengeProgressObjective            Objective;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeProgress) == 0x000008, "Wrong alignment on FChallengeProgress");
static_assert(sizeof(FChallengeProgress) == 0x000040, "Wrong size on FChallengeProgress");
static_assert(offsetof(FChallengeProgress, Prerequisite) == 0x000000, "Member 'FChallengeProgress::Prerequisite' has a wrong offset!");
static_assert(offsetof(FChallengeProgress, Objective) == 0x000030, "Member 'FChallengeProgress::Objective' has a wrong offset!");

// ScriptStruct AccelByteCustomization.UserChallengeRecord
// 0x0170 (0x0170 - 0x0000)
struct FUserChallengeRecord final
{
public:
	class FString                                 RecordId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChallengeConfiguration                Challenge;                                         // 0x0020(0x00E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChallengeProgress                     Progress;                                          // 0x0108(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeStatus                              Status;                                            // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Namespace;                                         // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserChallengeRecord) == 0x000008, "Wrong alignment on FUserChallengeRecord");
static_assert(sizeof(FUserChallengeRecord) == 0x000170, "Wrong size on FUserChallengeRecord");
static_assert(offsetof(FUserChallengeRecord, RecordId) == 0x000000, "Member 'FUserChallengeRecord::RecordId' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, UserId) == 0x000010, "Member 'FUserChallengeRecord::UserId' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, Challenge) == 0x000020, "Member 'FUserChallengeRecord::Challenge' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, Progress) == 0x000108, "Member 'FUserChallengeRecord::Progress' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, UpdatedAt) == 0x000148, "Member 'FUserChallengeRecord::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, Status) == 0x000158, "Member 'FUserChallengeRecord::Status' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, IsActive) == 0x000159, "Member 'FUserChallengeRecord::IsActive' has a wrong offset!");
static_assert(offsetof(FUserChallengeRecord, Namespace) == 0x000160, "Member 'FUserChallengeRecord::Namespace' has a wrong offset!");

// ScriptStruct AccelByteCustomization.RetrieveChallengeRecordSpecificUserResponse
// 0x0050 (0x0050 - 0x0000)
struct FRetrieveChallengeRecordSpecificUserResponse final
{
public:
	TArray<struct FUserChallengeRecord>           Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRetrieveChallengeRecordSpecificUserResponse) == 0x000008, "Wrong alignment on FRetrieveChallengeRecordSpecificUserResponse");
static_assert(sizeof(FRetrieveChallengeRecordSpecificUserResponse) == 0x000050, "Wrong size on FRetrieveChallengeRecordSpecificUserResponse");
static_assert(offsetof(FRetrieveChallengeRecordSpecificUserResponse, Data) == 0x000000, "Member 'FRetrieveChallengeRecordSpecificUserResponse::Data' has a wrong offset!");
static_assert(offsetof(FRetrieveChallengeRecordSpecificUserResponse, Paging) == 0x000010, "Member 'FRetrieveChallengeRecordSpecificUserResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteCustomization.RetrieveAllChallengesResponse
// 0x0050 (0x0050 - 0x0000)
struct FRetrieveAllChallengesResponse final
{
public:
	TArray<struct FChallengeConfiguration>        Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRetrieveAllChallengesResponse) == 0x000008, "Wrong alignment on FRetrieveAllChallengesResponse");
static_assert(sizeof(FRetrieveAllChallengesResponse) == 0x000050, "Wrong size on FRetrieveAllChallengesResponse");
static_assert(offsetof(FRetrieveAllChallengesResponse, Data) == 0x000000, "Member 'FRetrieveAllChallengesResponse::Data' has a wrong offset!");
static_assert(offsetof(FRetrieveAllChallengesResponse, Paging) == 0x000010, "Member 'FRetrieveAllChallengesResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteCustomization.ProgressCompletedChallenge
// 0x0018 (0x0018 - 0x0000)
struct FProgressCompletedChallenge final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompleted;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProgressCompletedChallenge) == 0x000008, "Wrong alignment on FProgressCompletedChallenge");
static_assert(sizeof(FProgressCompletedChallenge) == 0x000018, "Wrong size on FProgressCompletedChallenge");
static_assert(offsetof(FProgressCompletedChallenge, ChallengeId) == 0x000000, "Member 'FProgressCompletedChallenge::ChallengeId' has a wrong offset!");
static_assert(offsetof(FProgressCompletedChallenge, IsCompleted) == 0x000010, "Member 'FProgressCompletedChallenge::IsCompleted' has a wrong offset!");

// ScriptStruct AccelByteCustomization.AccelByteGetPodConfigResponse
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteGetPodConfigResponse final
{
public:
	int32                                         Cpu_limit;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              createdAt;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         mem_limit;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifiedBy;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteGetPodConfigResponse) == 0x000008, "Wrong alignment on FAccelByteGetPodConfigResponse");
static_assert(sizeof(FAccelByteGetPodConfigResponse) == 0x000060, "Wrong size on FAccelByteGetPodConfigResponse");
static_assert(offsetof(FAccelByteGetPodConfigResponse, Cpu_limit) == 0x000000, "Member 'FAccelByteGetPodConfigResponse::Cpu_limit' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, createdAt) == 0x000008, "Member 'FAccelByteGetPodConfigResponse::createdAt' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, mem_limit) == 0x000010, "Member 'FAccelByteGetPodConfigResponse::mem_limit' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, ModifiedBy) == 0x000018, "Member 'FAccelByteGetPodConfigResponse::ModifiedBy' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, Name) == 0x000028, "Member 'FAccelByteGetPodConfigResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, Namespace) == 0x000038, "Member 'FAccelByteGetPodConfigResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, Params) == 0x000048, "Member 'FAccelByteGetPodConfigResponse::Params' has a wrong offset!");
static_assert(offsetof(FAccelByteGetPodConfigResponse, UpdatedAt) == 0x000058, "Member 'FAccelByteGetPodConfigResponse::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteCustomization.AccelByteGetLowestPodSpecResponse
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteGetLowestPodSpecResponse final
{
public:
	int32                                         Cpu;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mem;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteGetLowestPodSpecResponse) == 0x000004, "Wrong alignment on FAccelByteGetLowestPodSpecResponse");
static_assert(sizeof(FAccelByteGetLowestPodSpecResponse) == 0x000008, "Wrong size on FAccelByteGetLowestPodSpecResponse");
static_assert(offsetof(FAccelByteGetLowestPodSpecResponse, Cpu) == 0x000000, "Member 'FAccelByteGetLowestPodSpecResponse::Cpu' has a wrong offset!");
static_assert(offsetof(FAccelByteGetLowestPodSpecResponse, Mem) == 0x000004, "Member 'FAccelByteGetLowestPodSpecResponse::Mem' has a wrong offset!");

}

