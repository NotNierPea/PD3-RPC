#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SecurityCamera

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_SecurityCamera.BP_SecurityCamera_C.ExecuteUbergraph_BP_SecurityCamera
// 0x02B0 (0x02B0 - 0x0000)
struct BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x0004(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1; // 0x0028(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2; // 0x0050(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0068(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3; // 0x0078(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZCameraColorState                          K2Node_Event_NewCameraColorState;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInHighlight;                         // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalOffset_SweepHitResult;         // 0x0094(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZRuntimeState                              K2Node_Event_AppliedState_1;                       // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_3;                            // 0x0128(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_4; // 0x0138(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_4;                            // 0x0150(0x0010)(ConstParm, ReferenceParm)
	ESBZRuntimeState                              K2Node_Event_AppliedState;                         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0164(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZCameraState                               K2Node_Event_OldState;                             // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZCameraState                               K2Node_Event_NewState;                             // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bDoCosmetics;                         // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_AddLocalMarker_ReturnValue;               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalOffset_SweepHitResult_1;       // 0x0190(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_224[0xC];                                      // 0x0224(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0230(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_SpawnAkComponentAtLocation_ReturnValue;   // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_5;          // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x2];                                      // 0x0292(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_2;                  // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_3;                  // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_4;                  // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera) == 0x000010, "Wrong alignment on BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera");
static_assert(sizeof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera) == 0x0002B0, "Wrong size on BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, EntryPoint) == 0x000000, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_delegate_Variable) == 0x000004, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_struct_Variable) == 0x000018, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_delegate_Variable_1) == 0x000028, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_struct_Variable_1) == 0x000040, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_delegate_Variable_2) == 0x000050, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_struct_Variable_2) == 0x000068, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_delegate_Variable_3) == 0x000078, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_PostEvent_ReturnValue) == 0x00008C, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_NewCameraColorState) == 0x000090, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_NewCameraColorState' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_bInHighlight) == 0x000091, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_bInHighlight' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000092, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_SwitchEnum_CmpSuccess) == 0x000093, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_K2_AddLocalOffset_SweepHitResult) == 0x000094, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_K2_AddLocalOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_SetStaticMesh_ReturnValue) == 0x000124, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000125, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_AppliedState_1) == 0x000126, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_AppliedState_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_struct_Variable_3) == 0x000128, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_delegate_Variable_4) == 0x000138, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_delegate_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, Temp_struct_Variable_4) == 0x000150, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_AppliedState) == 0x000160, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_AppliedState' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000161, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_MakeStruct_LinearColor) == 0x000164, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_OldState) == 0x000174, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_OldState' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_NewState) == 0x000175, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_Event_bDoCosmetics) == 0x000176, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_Event_bDoCosmetics' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_SwitchEnum_CmpSuccess_1) == 0x000177, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_AddLocalMarker_ReturnValue) == 0x000178, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_AddLocalMarker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00017C, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, K2Node_MakeStruct_LinearColor_1) == 0x000180, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_K2_AddLocalOffset_SweepHitResult_1) == 0x000190, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_K2_AddLocalOffset_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_IsDedicatedServer_ReturnValue) == 0x000220, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000221, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x000222, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000223, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_GetTransform_ReturnValue) == 0x000230, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_BreakTransform_Location) == 0x000260, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_BreakTransform_Rotation) == 0x00026C, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_BreakTransform_Scale) == 0x000278, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x000284, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_SpawnAkComponentAtLocation_ReturnValue) == 0x000288, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_SpawnAkComponentAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x000290, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_IsDedicatedServer_ReturnValue_5) == 0x000291, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_IsDedicatedServer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_PostEvent_ReturnValue_1) == 0x000294, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_PostEvent_ReturnValue_2) == 0x000298, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_PostEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_PostEvent_ReturnValue_3) == 0x00029C, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_PostEvent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera, CallFunc_PostEvent_ReturnValue_4) == 0x0002A0, "Member 'BP_SecurityCamera_C_ExecuteUbergraph_BP_SecurityCamera::CallFunc_PostEvent_ReturnValue_4' has a wrong offset!");

// Function BP_SecurityCamera.BP_SecurityCamera_C.BP_OnStateChanged
// 0x0003 (0x0003 - 0x0000)
struct BP_SecurityCamera_C_BP_OnStateChanged final
{
public:
	ESBZCameraState                               OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESBZCameraState                               NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDoCosmetics;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SecurityCamera_C_BP_OnStateChanged) == 0x000001, "Wrong alignment on BP_SecurityCamera_C_BP_OnStateChanged");
static_assert(sizeof(BP_SecurityCamera_C_BP_OnStateChanged) == 0x000003, "Wrong size on BP_SecurityCamera_C_BP_OnStateChanged");
static_assert(offsetof(BP_SecurityCamera_C_BP_OnStateChanged, OldState) == 0x000000, "Member 'BP_SecurityCamera_C_BP_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_BP_OnStateChanged, NewState) == 0x000001, "Member 'BP_SecurityCamera_C_BP_OnStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(BP_SecurityCamera_C_BP_OnStateChanged, bDoCosmetics) == 0x000002, "Member 'BP_SecurityCamera_C_BP_OnStateChanged::bDoCosmetics' has a wrong offset!");

// Function BP_SecurityCamera.BP_SecurityCamera_C.OnRuntimeStateApplied
// 0x0001 (0x0001 - 0x0000)
struct BP_SecurityCamera_C_OnRuntimeStateApplied final
{
public:
	ESBZRuntimeState                              AppliedState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SecurityCamera_C_OnRuntimeStateApplied) == 0x000001, "Wrong alignment on BP_SecurityCamera_C_OnRuntimeStateApplied");
static_assert(sizeof(BP_SecurityCamera_C_OnRuntimeStateApplied) == 0x000001, "Wrong size on BP_SecurityCamera_C_OnRuntimeStateApplied");
static_assert(offsetof(BP_SecurityCamera_C_OnRuntimeStateApplied, AppliedState) == 0x000000, "Member 'BP_SecurityCamera_C_OnRuntimeStateApplied::AppliedState' has a wrong offset!");

// Function BP_SecurityCamera.BP_SecurityCamera_C.OnRuntimeStateRemoved
// 0x0001 (0x0001 - 0x0000)
struct BP_SecurityCamera_C_OnRuntimeStateRemoved final
{
public:
	ESBZRuntimeState                              AppliedState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SecurityCamera_C_OnRuntimeStateRemoved) == 0x000001, "Wrong alignment on BP_SecurityCamera_C_OnRuntimeStateRemoved");
static_assert(sizeof(BP_SecurityCamera_C_OnRuntimeStateRemoved) == 0x000001, "Wrong size on BP_SecurityCamera_C_OnRuntimeStateRemoved");
static_assert(offsetof(BP_SecurityCamera_C_OnRuntimeStateRemoved, AppliedState) == 0x000000, "Member 'BP_SecurityCamera_C_OnRuntimeStateRemoved::AppliedState' has a wrong offset!");

// Function BP_SecurityCamera.BP_SecurityCamera_C.HighlightHackable_1
// 0x0001 (0x0001 - 0x0000)
struct BP_SecurityCamera_C_HighlightHackable_1 final
{
public:
	bool                                          bInHighlight;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SecurityCamera_C_HighlightHackable_1) == 0x000001, "Wrong alignment on BP_SecurityCamera_C_HighlightHackable_1");
static_assert(sizeof(BP_SecurityCamera_C_HighlightHackable_1) == 0x000001, "Wrong size on BP_SecurityCamera_C_HighlightHackable_1");
static_assert(offsetof(BP_SecurityCamera_C_HighlightHackable_1, bInHighlight) == 0x000000, "Member 'BP_SecurityCamera_C_HighlightHackable_1::bInHighlight' has a wrong offset!");

// Function BP_SecurityCamera.BP_SecurityCamera_C.BP_OnCameraColorStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_SecurityCamera_C_BP_OnCameraColorStateChanged final
{
public:
	ESBZCameraColorState                          NewCameraColorState;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SecurityCamera_C_BP_OnCameraColorStateChanged) == 0x000001, "Wrong alignment on BP_SecurityCamera_C_BP_OnCameraColorStateChanged");
static_assert(sizeof(BP_SecurityCamera_C_BP_OnCameraColorStateChanged) == 0x000001, "Wrong size on BP_SecurityCamera_C_BP_OnCameraColorStateChanged");
static_assert(offsetof(BP_SecurityCamera_C_BP_OnCameraColorStateChanged, NewCameraColorState) == 0x000000, "Member 'BP_SecurityCamera_C_BP_OnCameraColorStateChanged::NewCameraColorState' has a wrong offset!");

}

